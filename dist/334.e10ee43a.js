"use strict";(self.webpackChunkfrontend_util=self.webpackChunkfrontend_util||[]).push([[334],{8232:(e,o,n)=>{var t=n(4039);o.Z=void 0;var r=t(n(6934)),i=n(1527),a=(0,r.default)((0,i.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add");o.Z=a},9987:(e,o,n)=>{var t=n(4039);o.Z=void 0;var r=t(n(6934)),i=n(1527),a=(0,r.default)((0,i.jsx)("path",{d:"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"}),"Save");o.Z=a},5555:(e,o,n)=>{n.d(o,{Z:()=>y});var t=n(4529),r=n(7366),i=n(959),a=n(5924),s=n(6337),c=n(5428),l=n(9301),d=n(9488),u=n(1527);const p=(0,d.Z)((0,u.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add");var m=n(5083),f=n(7810);function h(e){return(0,f.Z)("MuiSpeedDialIcon",e)}const v=(0,m.Z)("MuiSpeedDialIcon",["root","icon","iconOpen","iconWithOpenIconOpen","openIcon","openIconOpen"]),b=["className","icon","open","openIcon"],g=(0,c.ZP)("span",{name:"MuiSpeedDialIcon",slot:"Root",overridesResolver:(e,o)=>{const{ownerState:n}=e;return[{[`& .${v.icon}`]:o.icon},{[`& .${v.icon}`]:n.open&&o.iconOpen},{[`& .${v.icon}`]:n.open&&n.openIcon&&o.iconWithOpenIconOpen},{[`& .${v.openIcon}`]:o.openIcon},{[`& .${v.openIcon}`]:n.open&&o.openIconOpen},o.root]}})((({theme:e,ownerState:o})=>({height:24,[`& .${v.icon}`]:(0,r.Z)({transition:e.transitions.create(["transform","opacity"],{duration:e.transitions.duration.short})},o.open&&(0,r.Z)({transform:"rotate(45deg)"},o.openIcon&&{opacity:0})),[`& .${v.openIcon}`]:(0,r.Z)({position:"absolute",transition:e.transitions.create(["transform","opacity"],{duration:e.transitions.duration.short}),opacity:0,transform:"rotate(-45deg)"},o.open&&{transform:"rotate(0deg)",opacity:1})}))),Z=i.forwardRef((function(e,o){const n=(0,l.Z)({props:e,name:"MuiSpeedDialIcon"}),{className:c,icon:d,openIcon:m}=n,f=(0,t.Z)(n,b),v=n,Z=(e=>{const{classes:o,open:n,openIcon:t}=e,r={root:["root"],icon:["icon",n&&"iconOpen",t&&n&&"iconWithOpenIconOpen"],openIcon:["openIcon",n&&"openIconOpen"]};return(0,s.Z)(r,h,o)})(v);function y(e,o){return i.isValidElement(e)?i.cloneElement(e,{className:o}):e}return(0,u.jsxs)(g,(0,r.Z)({className:(0,a.Z)(Z.root,c),ref:o,ownerState:v},f,{children:[m?y(m,Z.openIcon):null,d?y(d,Z.icon):(0,u.jsx)(p,{className:Z.icon})]}))}));Z.muiName="SpeedDialIcon";const y=Z},6673:(e,o,n)=>{n.d(o,{Z:()=>j});var t=n(4529),r=n(7366),i=n(959),a=(n(1357),n(5924)),s=n(6337),c=n(5428),l=n(9301),d=n(9815),u=n(4549),p=n(9292),m=n(2351),f=n(1527);const h=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],v={entering:{transform:"none"},entered:{transform:"none"}},b=i.forwardRef((function(e,o){const n=(0,d.Z)(),a={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{addEndListener:s,appear:c=!0,children:l,easing:b,in:g,onEnter:Z,onEntered:y,onEntering:w,onExit:x,onExited:S,onExiting:E,style:I,timeout:C=a,TransitionComponent:D=u.ZP}=e,R=(0,t.Z)(e,h),z=i.useRef(null),M=(0,m.Z)(z,l.ref,o),k=e=>o=>{if(e){const n=z.current;void 0===o?e(n):e(n,o)}},$=k(w),P=k(((e,o)=>{(0,p.n)(e);const t=(0,p.C)({style:I,timeout:C,easing:b},{mode:"enter"});e.style.webkitTransition=n.transitions.create("transform",t),e.style.transition=n.transitions.create("transform",t),Z&&Z(e,o)})),F=k(y),T=k(E),N=k((e=>{const o=(0,p.C)({style:I,timeout:C,easing:b},{mode:"exit"});e.style.webkitTransition=n.transitions.create("transform",o),e.style.transition=n.transitions.create("transform",o),x&&x(e)})),O=k(S);return(0,f.jsx)(D,(0,r.Z)({appear:c,in:g,nodeRef:z,onEnter:P,onEntered:F,onEntering:$,onExit:N,onExited:O,onExiting:T,addEndListener:e=>{s&&s(z.current,e)},timeout:C},R,{children:(e,o)=>i.cloneElement(l,(0,r.Z)({style:(0,r.Z)({transform:"scale(0)",visibility:"exited"!==e||g?void 0:"hidden"},v[e],I,l.props.style),ref:M},o))}))}));var g=n(3380),Z=n(6885),y=n(5083),w=n(7810);function x(e){return(0,w.Z)("MuiFab",e)}const S=(0,y.Z)("MuiFab",["root","primary","secondary","extended","circular","focusVisible","disabled","colorInherit","sizeSmall","sizeMedium","sizeLarge","info","error","warning","success"]),E=["children","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant"],I=(0,c.ZP)(g.Z,{name:"MuiFab",slot:"Root",shouldForwardProp:e=>(0,c.FO)(e)||"classes"===e,overridesResolver:(e,o)=>{const{ownerState:n}=e;return[o.root,o[n.variant],o[`size${(0,Z.Z)(n.size)}`],"inherit"===n.color&&o.colorInherit,o[(0,Z.Z)(n.size)],o[n.color]]}})((({theme:e,ownerState:o})=>{var n,t;return(0,r.Z)({},e.typography.button,{minHeight:36,transition:e.transitions.create(["background-color","box-shadow","border-color"],{duration:e.transitions.duration.short}),borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,zIndex:(e.vars||e).zIndex.fab,boxShadow:(e.vars||e).shadows[6],"&:active":{boxShadow:(e.vars||e).shadows[12]},color:e.vars?e.vars.palette.text.primary:null==(n=(t=e.palette).getContrastText)?void 0:n.call(t,e.palette.grey[300]),backgroundColor:(e.vars||e).palette.grey[300],"&:hover":{backgroundColor:(e.vars||e).palette.grey.A100,"@media (hover: none)":{backgroundColor:(e.vars||e).palette.grey[300]},textDecoration:"none"},[`&.${S.focusVisible}`]:{boxShadow:(e.vars||e).shadows[6]}},"small"===o.size&&{width:40,height:40},"medium"===o.size&&{width:48,height:48},"extended"===o.variant&&{borderRadius:24,padding:"0 16px",width:"auto",minHeight:"auto",minWidth:48,height:48},"extended"===o.variant&&"small"===o.size&&{width:"auto",padding:"0 8px",borderRadius:17,minWidth:34,height:34},"extended"===o.variant&&"medium"===o.size&&{width:"auto",padding:"0 16px",borderRadius:20,minWidth:40,height:40},"inherit"===o.color&&{color:"inherit"})}),(({theme:e,ownerState:o})=>(0,r.Z)({},"inherit"!==o.color&&"default"!==o.color&&null!=(e.vars||e).palette[o.color]&&{color:(e.vars||e).palette[o.color].contrastText,backgroundColor:(e.vars||e).palette[o.color].main,"&:hover":{backgroundColor:(e.vars||e).palette[o.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[o.color].main}}})),(({theme:e})=>({[`&.${S.disabled}`]:{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground}}))),C=i.forwardRef((function(e,o){const n=(0,l.Z)({props:e,name:"MuiFab"}),{children:i,className:c,color:d="default",component:u="button",disabled:p=!1,disableFocusRipple:m=!1,focusVisibleClassName:h,size:v="large",variant:b="circular"}=n,g=(0,t.Z)(n,E),y=(0,r.Z)({},n,{color:d,component:u,disabled:p,disableFocusRipple:m,size:v,variant:b}),w=(e=>{const{color:o,variant:n,classes:t,size:i}=e,a={root:["root",n,`size${(0,Z.Z)(i)}`,"inherit"===o?"colorInherit":o]},c=(0,s.Z)(a,x,t);return(0,r.Z)({},t,c)})(y);return(0,f.jsx)(I,(0,r.Z)({className:(0,a.Z)(w.root,c),component:u,disabled:p,focusRipple:!m,focusVisibleClassName:(0,a.Z)(w.focusVisible,h),ownerState:y,ref:o},g,{classes:w,children:i}))}));var D=n(9162),R=n(6028);function z(e){return(0,w.Z)("MuiSpeedDial",e)}const M=(0,y.Z)("MuiSpeedDial",["root","fab","directionUp","directionDown","directionLeft","directionRight","actions","actionsClosed"]),k=["ref"],$=["ariaLabel","FabProps","children","className","direction","hidden","icon","onBlur","onClose","onFocus","onKeyDown","onMouseEnter","onMouseLeave","onOpen","open","openIcon","TransitionComponent","transitionDuration","TransitionProps"],P=["ref"];function F(e){return"up"===e||"down"===e?"vertical":"right"===e||"left"===e?"horizontal":void 0}const T=(0,c.ZP)("div",{name:"MuiSpeedDial",slot:"Root",overridesResolver:(e,o)=>{const{ownerState:n}=e;return[o.root,o[`direction${(0,Z.Z)(n.direction)}`]]}})((({theme:e,ownerState:o})=>(0,r.Z)({zIndex:(e.vars||e).zIndex.speedDial,display:"flex",alignItems:"center",pointerEvents:"none"},"up"===o.direction&&{flexDirection:"column-reverse",[`& .${M.actions}`]:{flexDirection:"column-reverse",marginBottom:-32,paddingBottom:48}},"down"===o.direction&&{flexDirection:"column",[`& .${M.actions}`]:{flexDirection:"column",marginTop:-32,paddingTop:48}},"left"===o.direction&&{flexDirection:"row-reverse",[`& .${M.actions}`]:{flexDirection:"row-reverse",marginRight:-32,paddingRight:48}},"right"===o.direction&&{flexDirection:"row",[`& .${M.actions}`]:{flexDirection:"row",marginLeft:-32,paddingLeft:48}}))),N=(0,c.ZP)(C,{name:"MuiSpeedDial",slot:"Fab",overridesResolver:(e,o)=>o.fab})((()=>({pointerEvents:"auto"}))),O=(0,c.ZP)("div",{name:"MuiSpeedDial",slot:"Actions",overridesResolver:(e,o)=>{const{ownerState:n}=e;return[o.actions,!n.open&&o.actionsClosed]}})((({ownerState:e})=>(0,r.Z)({display:"flex",pointerEvents:"auto"},!e.open&&{transition:"top 0s linear 0.2s",pointerEvents:"none"}))),j=i.forwardRef((function(e,o){const n=(0,l.Z)({props:e,name:"MuiSpeedDial"}),c=(0,d.Z)(),u={enter:c.transitions.duration.enteringScreen,exit:c.transitions.duration.leavingScreen},{ariaLabel:p,FabProps:{ref:h}={},children:v,className:g,direction:y="up",hidden:w=!1,icon:x,onBlur:S,onClose:E,onFocus:I,onKeyDown:C,onMouseEnter:M,onMouseLeave:j,onOpen:L,open:V,TransitionComponent:W=b,transitionDuration:A=u,TransitionProps:B}=n,H=(0,t.Z)(n.FabProps,k),K=(0,t.Z)(n,$),[_,U]=(0,R.Z)({controlled:V,default:!1,name:"SpeedDial",state:"open"}),q=(0,r.Z)({},n,{open:_,direction:y}),G=(e=>{const{classes:o,open:n,direction:t}=e,r={root:["root",`direction${(0,Z.Z)(t)}`],fab:["fab"],actions:["actions",!n&&"actionsClosed"]};return(0,s.Z)(r,z,o)})(q),J=i.useRef();i.useEffect((()=>()=>{clearTimeout(J.current)}),[]);const Q=i.useRef(0),X=i.useRef(),Y=i.useRef([]);Y.current=[Y.current[0]];const ee=i.useCallback((e=>{Y.current[0]=e}),[]),oe=(0,m.Z)(h,ee),ne=(e,o)=>n=>{Y.current[e+1]=n,o&&o(n)};i.useEffect((()=>{_||(Q.current=0,X.current=void 0)}),[_]);const te=e=>{"mouseleave"===e.type&&j&&j(e),"blur"===e.type&&S&&S(e),clearTimeout(J.current),"blur"===e.type?J.current=setTimeout((()=>{U(!1),E&&E(e,"blur")})):(U(!1),E&&E(e,"mouseLeave"))},re=e=>{"mouseenter"===e.type&&M&&M(e),"focus"===e.type&&I&&I(e),clearTimeout(J.current),_||(J.current=setTimeout((()=>{U(!0),L&&L(e,{focus:"focus",mouseenter:"mouseEnter"}[e.type])})))},ie=p.replace(/^[^a-z]+|[^\w:.-]+/gi,""),ae=i.Children.toArray(v).filter((e=>i.isValidElement(e))),se=ae.map(((e,o)=>{const n=e.props,{FabProps:{ref:a}={},tooltipPlacement:s}=n,c=(0,t.Z)(n.FabProps,P),l=s||("vertical"===F(y)?"left":"top");return i.cloneElement(e,{FabProps:(0,r.Z)({},c,{ref:ne(o,a)}),delay:30*(_?o:ae.length-o),open:_,tooltipPlacement:l,id:`${ie}-action-${o}`})}));return(0,f.jsxs)(T,(0,r.Z)({className:(0,a.Z)(G.root,g),ref:o,role:"presentation",onKeyDown:e=>{C&&C(e);const o=e.key.replace("Arrow","").toLowerCase(),{current:n=o}=X;if("Escape"===e.key)return U(!1),Y.current[0].focus(),void(E&&E(e,"escapeKeyDown"));if(F(o)===F(n)&&void 0!==F(o)){e.preventDefault();const i=o===n?1:-1,a=(t=Q.current+i,0,r=Y.current.length-1,t<0?0:t>r?r:t);Y.current[a].focus(),Q.current=a,X.current=n}var t,r},onBlur:te,onFocus:re,onMouseEnter:re,onMouseLeave:te,ownerState:q},K,{children:[(0,f.jsx)(W,(0,r.Z)({in:!w,timeout:A,unmountOnExit:!0},B,{children:(0,f.jsx)(N,(0,r.Z)({color:"primary","aria-label":p,"aria-haspopup":"true","aria-expanded":_,"aria-controls":`${ie}-actions`},H,{onClick:e=>{H.onClick&&H.onClick(e),clearTimeout(J.current),_?(U(!1),E&&E(e,"toggle")):(U(!0),L&&L(e,"toggle"))},className:(0,a.Z)(G.fab,H.className),ref:oe,ownerState:q,children:i.isValidElement(x)&&(0,D.Z)(x,["SpeedDialIcon"])?i.cloneElement(x,{open:_}):x}))})),(0,f.jsx)(O,{id:`${ie}-actions`,role:"menu","aria-orientation":F(y),className:(0,a.Z)(G.actions,!_&&G.actionsClosed),ownerState:q,children:se})]}))}))},1546:(e,o,n)=>{function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function r(e,o,n){return(o=function(e){var o=function(e,o){if("object"!==t(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==t(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===t(o)?o:String(o)}(o))in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}n.d(o,{Z:()=>r})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,