/*! For license information please see 34.d3318c3c.js.LICENSE.txt */
(self.webpackChunkfrontend_util=self.webpackChunkfrontend_util||[]).push([[34],{4428:(e,t,n)=>{"use strict";n.d(t,{F4:()=>c,xB:()=>l});var o=n(9372),r=n(959),i=n(8246),a=n(6096),s=n(1082),l=(n(7922),n(2535),(0,o.w)((function(e,t){var n=e.styles,l=(0,s.O)([n],void 0,r.useContext(o.T));if(!o.i){for(var d,c=l.name,A=l.styles,p=l.next;void 0!==p;)c+=" "+p.name,A+=p.styles,p=p.next;var u=!0===t.compat,m=t.insert("",{name:c,styles:A},t.sheet,u);return u?null:r.createElement("style",((d={})["data-emotion"]=t.key+"-global "+c,d.dangerouslySetInnerHTML={__html:m},d.nonce=t.sheet.nonce,d))}var h=r.useRef();return(0,a.j)((function(){var e=t.key+"-global",n=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),o=!1,r=document.querySelector('style[data-emotion="'+e+" "+l.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),null!==r&&(o=!0,r.setAttribute("data-emotion",e),n.hydrate([r])),h.current=[n,o],function(){n.flush()}}),[t]),(0,a.j)((function(){var e=h.current,n=e[0];if(e[1])e[1]=!1;else{if(void 0!==l.next&&(0,i.My)(t,l.next,!0),n.tags.length){var o=n.tags[n.tags.length-1].nextElementSibling;n.before=o,n.flush()}t.insert("",l,n,!1)}}),[t,l.name]),null})));function d(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,s.O)(t)}var c=function(){var e=d.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},487:(e,t,n)=>{"use strict";var o=n(4039);t.Z=void 0;var r=o(n(6934)),i=n(1527),a=(0,r.default)((0,i.jsx)("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}),"Delete");t.Z=a},7743:(e,t,n)=>{"use strict";var o=n(4039);t.Z=void 0;var r=o(n(6934)),i=n(1527),a=(0,r.default)((0,i.jsx)("path",{d:"M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z"}),"Inbox");t.Z=a},6934:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.createSvgIcon}});var o=n(9731)},9905:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var o=n(7605),r=n(3727),i=n(959),a=n(5924),s=n(266),l=n(5070),d=n(203),c=n(6167),A=n(1527);const p=["className","component"];var u=n(6297),m=n(1214),h=n(29);const g=(0,m.Z)(),b=function(e={}){const{themeId:t,defaultTheme:n,defaultClassName:u="MuiBox-root",generateClassName:m}=e,h=(0,s.ZP)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(l.Z);return i.forwardRef((function(e,i){const s=(0,c.Z)(n),l=(0,d.Z)(e),{className:g,component:b="div"}=l,f=(0,r.Z)(l,p);return(0,A.jsx)(h,(0,o.Z)({as:b,ref:i,className:(0,a.Z)(g,m?m(u):u),theme:t&&s[t]||s},f))}))}({themeId:h.Z,defaultTheme:g,defaultClassName:"MuiBox-root",generateClassName:u.Z.generate}),f=b},3380:(e,t,n)=>{"use strict";n.d(t,{Z:()=>N});var o=n(7366),r=n(4529),i=n(959),a=n(5924),s=n(5061),l=n(5428),d=n(2280),c=n(1858),A=n(6395),p=n(591),u=n(3727),m=n(7605),h=n(5695),g=n(7468);function b(e,t){var n=Object.create(null);return e&&i.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,i.isValidElement)(e)?t(e):e}(e)})),n}function f(e,t,n){return null!=n[t]?n[t]:e.props[t]}function y(e,t,n){var o=b(e.children),r=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var o,r=Object.create(null),i=[];for(var a in e)a in t?i.length&&(r[a]=i,i=[]):i.push(a);var s={};for(var l in t){if(r[l])for(o=0;o<r[l].length;o++){var d=r[l][o];s[r[l][o]]=n(d)}s[l]=n(l)}for(o=0;o<i.length;o++)s[i[o]]=n(i[o]);return s}(t,o);return Object.keys(r).forEach((function(a){var s=r[a];if((0,i.isValidElement)(s)){var l=a in t,d=a in o,c=t[a],A=(0,i.isValidElement)(c)&&!c.props.in;!d||l&&!A?d||!l||A?d&&l&&(0,i.isValidElement)(c)&&(r[a]=(0,i.cloneElement)(s,{onExited:n.bind(null,s),in:c.props.in,exit:f(s,"exit",e),enter:f(s,"enter",e)})):r[a]=(0,i.cloneElement)(s,{in:!1}):r[a]=(0,i.cloneElement)(s,{onExited:n.bind(null,s),in:!0,exit:f(s,"exit",e),enter:f(s,"enter",e)})}})),r}var x=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},k=function(e){function t(t,n){var o,r=(o=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(o));return o.state={contextValue:{isMounting:!0},handleExited:r,firstRender:!0},o}(0,h.Z)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,o,r=t.children,a=t.handleExited;return{children:t.firstRender?(n=e,o=a,b(n.children,(function(e){return(0,i.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:f(e,"appear",n),enter:f(e,"enter",n),exit:f(e,"exit",n)})}))):y(e,r,a),firstRender:!1}},n.handleExited=function(e,t){var n=b(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,m.Z)({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,o=(0,u.Z)(e,["component","childFactory"]),r=this.state.contextValue,a=x(this.state.children).map(n);return delete o.appear,delete o.enter,delete o.exit,null===t?i.createElement(g.Z.Provider,{value:r},a):i.createElement(g.Z.Provider,{value:r},i.createElement(t,o,a))},t}(i.Component);k.propTypes={},k.defaultProps={component:"div",childFactory:function(e){return e}};const v=k;var z=n(4428),w=n(1527);var E=n(5083);const C=(0,E.Z)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),F=["center","classes","className"];let W,I,B,M,Z=e=>e;const S=(0,z.F4)(W||(W=Z`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),T=(0,z.F4)(I||(I=Z`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),J=(0,z.F4)(B||(B=Z`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),R=(0,l.ZP)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),$=(0,l.ZP)((function(e){const{className:t,classes:n,pulsate:o=!1,rippleX:r,rippleY:s,rippleSize:l,in:d,onExited:c,timeout:A}=e,[p,u]=i.useState(!1),m=(0,a.Z)(t,n.ripple,n.rippleVisible,o&&n.ripplePulsate),h={width:l,height:l,top:-l/2+s,left:-l/2+r},g=(0,a.Z)(n.child,p&&n.childLeaving,o&&n.childPulsate);return d||p||u(!0),i.useEffect((()=>{if(!d&&null!=c){const e=setTimeout(c,A);return()=>{clearTimeout(e)}}}),[c,d,A]),(0,w.jsx)("span",{className:m,style:h,children:(0,w.jsx)("span",{className:g})})}),{name:"MuiTouchRipple",slot:"Ripple"})(M||(M=Z`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),C.rippleVisible,S,550,(({theme:e})=>e.transitions.easing.easeInOut),C.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),C.child,C.childLeaving,T,550,(({theme:e})=>e.transitions.easing.easeInOut),C.childPulsate,J,(({theme:e})=>e.transitions.easing.easeInOut)),P=i.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"MuiTouchRipple"}),{center:s=!1,classes:l={},className:c}=n,A=(0,r.Z)(n,F),[p,u]=i.useState([]),m=i.useRef(0),h=i.useRef(null);i.useEffect((()=>{h.current&&(h.current(),h.current=null)}),[p]);const g=i.useRef(!1),b=i.useRef(0),f=i.useRef(null),y=i.useRef(null);i.useEffect((()=>()=>{b.current&&clearTimeout(b.current)}),[]);const x=i.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:o,rippleSize:r,cb:i}=e;u((e=>[...e,(0,w.jsx)($,{classes:{ripple:(0,a.Z)(l.ripple,C.ripple),rippleVisible:(0,a.Z)(l.rippleVisible,C.rippleVisible),ripplePulsate:(0,a.Z)(l.ripplePulsate,C.ripplePulsate),child:(0,a.Z)(l.child,C.child),childLeaving:(0,a.Z)(l.childLeaving,C.childLeaving),childPulsate:(0,a.Z)(l.childPulsate,C.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:o,rippleSize:r},m.current)])),m.current+=1,h.current=i}),[l]),k=i.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:o=!1,center:r=s||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&g.current)return void(g.current=!1);"touchstart"===(null==e?void 0:e.type)&&(g.current=!0);const a=i?null:y.current,l=a?a.getBoundingClientRect():{width:0,height:0,left:0,top:0};let d,c,A;if(r||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)d=Math.round(l.width/2),c=Math.round(l.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;d=Math.round(t-l.left),c=Math.round(n-l.top)}if(r)A=Math.sqrt((2*l.width**2+l.height**2)/3),A%2==0&&(A+=1);else{const e=2*Math.max(Math.abs((a?a.clientWidth:0)-d),d)+2,t=2*Math.max(Math.abs((a?a.clientHeight:0)-c),c)+2;A=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===f.current&&(f.current=()=>{x({pulsate:o,rippleX:d,rippleY:c,rippleSize:A,cb:n})},b.current=setTimeout((()=>{f.current&&(f.current(),f.current=null)}),80)):x({pulsate:o,rippleX:d,rippleY:c,rippleSize:A,cb:n})}),[s,x]),z=i.useCallback((()=>{k({},{pulsate:!0})}),[k]),E=i.useCallback(((e,t)=>{if(clearTimeout(b.current),"touchend"===(null==e?void 0:e.type)&&f.current)return f.current(),f.current=null,void(b.current=setTimeout((()=>{E(e,t)})));f.current=null,u((e=>e.length>0?e.slice(1):e)),h.current=t}),[]);return i.useImperativeHandle(t,(()=>({pulsate:z,start:k,stop:E})),[z,k,E]),(0,w.jsx)(R,(0,o.Z)({className:(0,a.Z)(C.root,l.root,c),ref:y},A,{children:(0,w.jsx)(v,{component:null,exit:!0,children:p})}))}));var L=n(7810);function D(e){return(0,L.Z)("MuiButtonBase",e)}const _=(0,E.Z)("MuiButtonBase",["root","disabled","focusVisible"]),j=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],O=(0,l.ZP)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${_.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),N=i.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"MuiButtonBase"}),{action:l,centerRipple:u=!1,children:m,className:h,component:g="button",disabled:b=!1,disableRipple:f=!1,disableTouchRipple:y=!1,focusRipple:x=!1,LinkComponent:k="a",onBlur:v,onClick:z,onContextMenu:E,onDragLeave:C,onFocus:F,onFocusVisible:W,onKeyDown:I,onKeyUp:B,onMouseDown:M,onMouseLeave:Z,onMouseUp:S,onTouchEnd:T,onTouchMove:J,onTouchStart:R,tabIndex:$=0,TouchRippleProps:L,touchRippleRef:_,type:N}=n,q=(0,r.Z)(n,j),G=i.useRef(null),H=i.useRef(null),X=(0,c.Z)(H,_),{isFocusVisibleRef:V,onFocus:K,onBlur:Q,ref:U}=(0,p.Z)(),[Y,ee]=i.useState(!1);b&&Y&&ee(!1),i.useImperativeHandle(l,(()=>({focusVisible:()=>{ee(!0),G.current.focus()}})),[]);const[te,ne]=i.useState(!1);i.useEffect((()=>{ne(!0)}),[]);const oe=te&&!f&&!b;function re(e,t,n=y){return(0,A.Z)((o=>(t&&t(o),!n&&H.current&&H.current[e](o),!0)))}i.useEffect((()=>{Y&&x&&!f&&te&&H.current.pulsate()}),[f,x,Y,te]);const ie=re("start",M),ae=re("stop",E),se=re("stop",C),le=re("stop",S),de=re("stop",(e=>{Y&&e.preventDefault(),Z&&Z(e)})),ce=re("start",R),Ae=re("stop",T),pe=re("stop",J),ue=re("stop",(e=>{Q(e),!1===V.current&&ee(!1),v&&v(e)}),!1),me=(0,A.Z)((e=>{G.current||(G.current=e.currentTarget),K(e),!0===V.current&&(ee(!0),W&&W(e)),F&&F(e)})),he=()=>{const e=G.current;return g&&"button"!==g&&!("A"===e.tagName&&e.href)},ge=i.useRef(!1),be=(0,A.Z)((e=>{x&&!ge.current&&Y&&H.current&&" "===e.key&&(ge.current=!0,H.current.stop(e,(()=>{H.current.start(e)}))),e.target===e.currentTarget&&he()&&" "===e.key&&e.preventDefault(),I&&I(e),e.target===e.currentTarget&&he()&&"Enter"===e.key&&!b&&(e.preventDefault(),z&&z(e))})),fe=(0,A.Z)((e=>{x&&" "===e.key&&H.current&&Y&&!e.defaultPrevented&&(ge.current=!1,H.current.stop(e,(()=>{H.current.pulsate(e)}))),B&&B(e),z&&e.target===e.currentTarget&&he()&&" "===e.key&&!e.defaultPrevented&&z(e)}));let ye=g;"button"===ye&&(q.href||q.to)&&(ye=k);const xe={};"button"===ye?(xe.type=void 0===N?"button":N,xe.disabled=b):(q.href||q.to||(xe.role="button"),b&&(xe["aria-disabled"]=b));const ke=(0,c.Z)(t,U,G),ve=(0,o.Z)({},n,{centerRipple:u,component:g,disabled:b,disableRipple:f,disableTouchRipple:y,focusRipple:x,tabIndex:$,focusVisible:Y}),ze=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:o,classes:r}=e,i={root:["root",t&&"disabled",n&&"focusVisible"]},a=(0,s.Z)(i,D,r);return n&&o&&(a.root+=` ${o}`),a})(ve);return(0,w.jsxs)(O,(0,o.Z)({as:ye,className:(0,a.Z)(ze.root,h),ownerState:ve,onBlur:ue,onClick:z,onContextMenu:ae,onFocus:me,onKeyDown:be,onKeyUp:fe,onMouseDown:ie,onMouseLeave:de,onMouseUp:le,onDragLeave:se,onTouchEnd:Ae,onTouchMove:pe,onTouchStart:ce,ref:ke,tabIndex:b?-1:$,type:N},xe,q,{children:[m,oe?(0,w.jsx)(P,(0,o.Z)({ref:X,center:u},L)):null]}))}))},8546:(e,t,n)=>{"use strict";n.d(t,{Z:()=>E});var o=n(4529),r=n(7366),i=n(959),a=n(5924),s=n(8557),l=n(5061),d=n(9305),c=n(5428),A=n(2280),p=n(3380),u=n(5300),m=n(5083),h=n(7810);function g(e){return(0,h.Z)("MuiButton",e)}const b=(0,m.Z)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),f=i.createContext({});var y=n(1527);const x=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],k=e=>(0,r.Z)({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),v=(0,c.ZP)(p.Z,{shouldForwardProp:e=>(0,c.FO)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`${n.variant}${(0,u.Z)(n.color)}`],t[`size${(0,u.Z)(n.size)}`],t[`${n.variant}Size${(0,u.Z)(n.size)}`],"inherit"===n.color&&t.colorInherit,n.disableElevation&&t.disableElevation,n.fullWidth&&t.fullWidth]}})((({theme:e,ownerState:t})=>{var n,o;const i="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],a="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return(0,r.Z)({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":(0,r.Z)({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,d.Fq)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===t.variant&&"inherit"!==t.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,d.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===t.variant&&"inherit"!==t.color&&{border:`1px solid ${(e.vars||e).palette[t.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[t.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,d.Fq)(e.palette[t.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===t.variant&&{backgroundColor:e.vars?e.vars.palette.Button.inheritContainedHoverBg:a,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===t.variant&&"inherit"!==t.color&&{backgroundColor:(e.vars||e).palette[t.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[t.color].main}}),"&:active":(0,r.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${b.focusVisible}`]:(0,r.Z)({},"contained"===t.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${b.disabled}`]:(0,r.Z)({color:(e.vars||e).palette.action.disabled},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"contained"===t.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===t.variant&&{padding:"6px 8px"},"text"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main},"outlined"===t.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[t.color].mainChannel} / 0.5)`:`1px solid ${(0,d.Fq)(e.palette[t.color].main,.5)}`},"contained"===t.variant&&{color:e.vars?e.vars.palette.text.primary:null==(n=(o=e.palette).getContrastText)?void 0:n.call(o,e.palette.grey[300]),backgroundColor:e.vars?e.vars.palette.Button.inheritContainedBg:i,boxShadow:(e.vars||e).shadows[2]},"contained"===t.variant&&"inherit"!==t.color&&{color:(e.vars||e).palette[t.color].contrastText,backgroundColor:(e.vars||e).palette[t.color].main},"inherit"===t.color&&{color:"inherit",borderColor:"currentColor"},"small"===t.size&&"text"===t.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"text"===t.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"outlined"===t.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"outlined"===t.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===t.size&&"contained"===t.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===t.size&&"contained"===t.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},t.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${b.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${b.disabled}`]:{boxShadow:"none"}})),z=(0,c.ZP)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.startIcon,t[`iconSize${(0,u.Z)(n.size)}`]]}})((({ownerState:e})=>(0,r.Z)({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},k(e)))),w=(0,c.ZP)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.endIcon,t[`iconSize${(0,u.Z)(n.size)}`]]}})((({ownerState:e})=>(0,r.Z)({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},k(e)))),E=i.forwardRef((function(e,t){const n=i.useContext(f),d=(0,s.Z)(n,e),c=(0,A.Z)({props:d,name:"MuiButton"}),{children:p,color:m="primary",component:h="button",className:b,disabled:k=!1,disableElevation:E=!1,disableFocusRipple:C=!1,endIcon:F,focusVisibleClassName:W,fullWidth:I=!1,size:B="medium",startIcon:M,type:Z,variant:S="text"}=c,T=(0,o.Z)(c,x),J=(0,r.Z)({},c,{color:m,component:h,disabled:k,disableElevation:E,disableFocusRipple:C,fullWidth:I,size:B,type:Z,variant:S}),R=(e=>{const{color:t,disableElevation:n,fullWidth:o,size:i,variant:a,classes:s}=e,d={root:["root",a,`${a}${(0,u.Z)(t)}`,`size${(0,u.Z)(i)}`,`${a}Size${(0,u.Z)(i)}`,"inherit"===t&&"colorInherit",n&&"disableElevation",o&&"fullWidth"],label:["label"],startIcon:["startIcon",`iconSize${(0,u.Z)(i)}`],endIcon:["endIcon",`iconSize${(0,u.Z)(i)}`]},c=(0,l.Z)(d,g,s);return(0,r.Z)({},s,c)})(J),$=M&&(0,y.jsx)(z,{className:R.startIcon,ownerState:J,children:M}),P=F&&(0,y.jsx)(w,{className:R.endIcon,ownerState:J,children:F});return(0,y.jsxs)(v,(0,r.Z)({ownerState:J,className:(0,a.Z)(n.className,R.root,b),component:h,disabled:k,focusRipple:!C,focusVisibleClassName:(0,a.Z)(R.focusVisible,W),ref:t,type:Z},T,{classes:R,children:[$,p,P]}))}))},5178:(e,t,n)=>{"use strict";n.d(t,{Z:()=>x});var o=n(4529),r=n(7366),i=n(959),a=n(5924),s=n(5061),l=n(9305),d=n(5428),c=n(2280),A=n(3380),p=n(5300),u=n(5083),m=n(7810);function h(e){return(0,m.Z)("MuiIconButton",e)}const g=(0,u.Z)("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]);var b=n(1527);const f=["edge","children","className","color","disabled","disableFocusRipple","size"],y=(0,d.ZP)(A.Z,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"default"!==n.color&&t[`color${(0,p.Z)(n.color)}`],n.edge&&t[`edge${(0,p.Z)(n.edge)}`],t[`size${(0,p.Z)(n.size)}`]]}})((({theme:e,ownerState:t})=>(0,r.Z)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,l.Fq)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===t.edge&&{marginLeft:"small"===t.size?-3:-12},"end"===t.edge&&{marginRight:"small"===t.size?-3:-12})),(({theme:e,ownerState:t})=>{var n;const o=null==(n=(e.vars||e).palette)?void 0:n[t.color];return(0,r.Z)({},"inherit"===t.color&&{color:"inherit"},"inherit"!==t.color&&"default"!==t.color&&(0,r.Z)({color:null==o?void 0:o.main},!t.disableRipple&&{"&:hover":(0,r.Z)({},o&&{backgroundColor:e.vars?`rgba(${o.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,l.Fq)(o.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===t.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===t.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${g.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),x=i.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"MuiIconButton"}),{edge:i=!1,children:l,className:d,color:A="default",disabled:u=!1,disableFocusRipple:m=!1,size:g="medium"}=n,x=(0,o.Z)(n,f),k=(0,r.Z)({},n,{edge:i,color:A,disabled:u,disableFocusRipple:m,size:g}),v=(e=>{const{classes:t,disabled:n,color:o,edge:r,size:i}=e,a={root:["root",n&&"disabled","default"!==o&&`color${(0,p.Z)(o)}`,r&&`edge${(0,p.Z)(r)}`,`size${(0,p.Z)(i)}`]};return(0,s.Z)(a,h,t)})(k);return(0,b.jsx)(y,(0,r.Z)({className:(0,a.Z)(v.root,d),centerRipple:!0,focusRipple:!m,disabled:u,ref:t,ownerState:k},x,{children:l}))}))},4154:(e,t,n)=>{"use strict";n.d(t,{Z:()=>y});var o=n(4529),r=n(7366),i=n(959),a=n(5924),s=n(5061),l=n(9305),d=n(5428),c=n(2280),A=n(3380),p=n(9948),u=n(1858),m=n(4145),h=n(2861),g=n(1527);const b=["alignItems","autoFocus","component","children","dense","disableGutters","divider","focusVisibleClassName","selected","className"],f=(0,d.ZP)(A.Z,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiListItemButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,"flex-start"===n.alignItems&&t.alignItemsFlexStart,n.divider&&t.divider,!n.disableGutters&&t.gutters]}})((({theme:e,ownerState:t})=>(0,r.Z)({display:"flex",flexGrow:1,justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minWidth:0,boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${h.Z.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,l.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${h.Z.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,l.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${h.Z.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,l.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,l.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${h.Z.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${h.Z.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},"flex-start"===t.alignItems&&{alignItems:"flex-start"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.dense&&{paddingTop:4,paddingBottom:4}))),y=i.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"MuiListItemButton"}),{alignItems:l="center",autoFocus:d=!1,component:A="div",children:y,dense:x=!1,disableGutters:k=!1,divider:v=!1,focusVisibleClassName:z,selected:w=!1,className:E}=n,C=(0,o.Z)(n,b),F=i.useContext(m.Z),W=i.useMemo((()=>({dense:x||F.dense||!1,alignItems:l,disableGutters:k})),[l,F.dense,x,k]),I=i.useRef(null);(0,p.Z)((()=>{d&&I.current&&I.current.focus()}),[d]);const B=(0,r.Z)({},n,{alignItems:l,dense:W.dense,disableGutters:k,divider:v,selected:w}),M=(e=>{const{alignItems:t,classes:n,dense:o,disabled:i,disableGutters:a,divider:l,selected:d}=e,c={root:["root",o&&"dense",!a&&"gutters",l&&"divider",i&&"disabled","flex-start"===t&&"alignItemsFlexStart",d&&"selected"]},A=(0,s.Z)(c,h.t,n);return(0,r.Z)({},n,A)})(B),Z=(0,u.Z)(I,t);return(0,g.jsx)(m.Z.Provider,{value:W,children:(0,g.jsx)(f,(0,r.Z)({ref:Z,href:C.href||C.to,component:(C.href||C.to)&&"div"===A?"button":A,focusVisibleClassName:(0,a.Z)(M.focusVisible,z),ownerState:B,className:(0,a.Z)(M.root,E)},C,{classes:M,children:y}))})}))},2861:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a,t:()=>i});var o=n(5083),r=n(7810);function i(e){return(0,r.Z)("MuiListItemButton",e)}const a=(0,o.Z)("MuiListItemButton",["root","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","selected"])},2323:(e,t,n)=>{"use strict";n.d(t,{Z:()=>b});var o=n(4529),r=n(7366),i=n(959),a=n(5924),s=n(5061),l=n(5428),d=n(2280),c=n(5083),A=n(7810);function p(e){return(0,A.Z)("MuiListItemIcon",e)}(0,c.Z)("MuiListItemIcon",["root","alignItemsFlexStart"]);var u=n(4145),m=n(1527);const h=["className"],g=(0,l.ZP)("div",{name:"MuiListItemIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"flex-start"===n.alignItems&&t.alignItemsFlexStart]}})((({theme:e,ownerState:t})=>(0,r.Z)({minWidth:56,color:(e.vars||e).palette.action.active,flexShrink:0,display:"inline-flex"},"flex-start"===t.alignItems&&{marginTop:8}))),b=i.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"MuiListItemIcon"}),{className:l}=n,c=(0,o.Z)(n,h),A=i.useContext(u.Z),b=(0,r.Z)({},n,{alignItems:A.alignItems}),f=(e=>{const{alignItems:t,classes:n}=e,o={root:["root","flex-start"===t&&"alignItemsFlexStart"]};return(0,s.Z)(o,p,n)})(b);return(0,m.jsx)(g,(0,r.Z)({className:(0,a.Z)(f.root,l),ownerState:b,ref:t},c))}))},4230:(e,t,n)=>{"use strict";n.d(t,{Z:()=>y});var o=n(4529),r=n(7366),i=n(959),a=n(5924),s=n(5061),l=n(6841),d=n(4145),c=n(2280),A=n(5428),p=n(5083),u=n(7810);function m(e){return(0,u.Z)("MuiListItemText",e)}const h=(0,p.Z)("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]);var g=n(1527);const b=["children","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"],f=(0,A.ZP)("div",{name:"MuiListItemText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${h.primary}`]:t.primary},{[`& .${h.secondary}`]:t.secondary},t.root,n.inset&&t.inset,n.primary&&n.secondary&&t.multiline,n.dense&&t.dense]}})((({ownerState:e})=>(0,r.Z)({flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},e.primary&&e.secondary&&{marginTop:6,marginBottom:6},e.inset&&{paddingLeft:56}))),y=i.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"MuiListItemText"}),{children:A,className:p,disableTypography:u=!1,inset:h=!1,primary:y,primaryTypographyProps:x,secondary:k,secondaryTypographyProps:v}=n,z=(0,o.Z)(n,b),{dense:w}=i.useContext(d.Z);let E=null!=y?y:A,C=k;const F=(0,r.Z)({},n,{disableTypography:u,inset:h,primary:!!E,secondary:!!C,dense:w}),W=(e=>{const{classes:t,inset:n,primary:o,secondary:r,dense:i}=e,a={root:["root",n&&"inset",i&&"dense",o&&r&&"multiline"],primary:["primary"],secondary:["secondary"]};return(0,s.Z)(a,m,t)})(F);return null==E||E.type===l.Z||u||(E=(0,g.jsx)(l.Z,(0,r.Z)({variant:w?"body2":"body1",className:W.primary,component:null!=x&&x.variant?void 0:"span",display:"block"},x,{children:E}))),null==C||C.type===l.Z||u||(C=(0,g.jsx)(l.Z,(0,r.Z)({variant:"body2",className:W.secondary,color:"text.secondary",display:"block"},v,{children:C}))),(0,g.jsxs)(f,(0,r.Z)({className:(0,a.Z)(W.root,p),ownerState:F,ref:t},z,{children:[E,C]}))}))},5755:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>Z});var o=n(4529),r=n(7366),i=n(959),a=n(5924),s=n(5061),l=n(6018),d=n(9305),c=n(5428),A=n(2280),p=n(3380),u=n(9162),m=n(9948),h=n(1858),g=n(4145),b=n(5083),f=n(7810);function y(e){return(0,f.Z)("MuiListItem",e)}const x=(0,b.Z)("MuiListItem",["root","container","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","padding","button","secondaryAction","selected"]);var k=n(2861);function v(e){return(0,f.Z)("MuiListItemSecondaryAction",e)}(0,b.Z)("MuiListItemSecondaryAction",["root","disableGutters"]);var z=n(1527);const w=["className"],E=(0,c.ZP)("div",{name:"MuiListItemSecondaryAction",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.disableGutters&&t.disableGutters]}})((({ownerState:e})=>(0,r.Z)({position:"absolute",right:16,top:"50%",transform:"translateY(-50%)"},e.disableGutters&&{right:0}))),C=i.forwardRef((function(e,t){const n=(0,A.Z)({props:e,name:"MuiListItemSecondaryAction"}),{className:l}=n,d=(0,o.Z)(n,w),c=i.useContext(g.Z),p=(0,r.Z)({},n,{disableGutters:c.disableGutters}),u=(e=>{const{disableGutters:t,classes:n}=e,o={root:["root",t&&"disableGutters"]};return(0,s.Z)(o,v,n)})(p);return(0,z.jsx)(E,(0,r.Z)({className:(0,a.Z)(u.root,l),ownerState:p,ref:t},d))}));C.muiName="ListItemSecondaryAction";const F=C,W=["className"],I=["alignItems","autoFocus","button","children","className","component","components","componentsProps","ContainerComponent","ContainerProps","dense","disabled","disableGutters","disablePadding","divider","focusVisibleClassName","secondaryAction","selected","slotProps","slots"],B=(0,c.ZP)("div",{name:"MuiListItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,"flex-start"===n.alignItems&&t.alignItemsFlexStart,n.divider&&t.divider,!n.disableGutters&&t.gutters,!n.disablePadding&&t.padding,n.button&&t.button,n.hasSecondaryAction&&t.secondaryAction]}})((({theme:e,ownerState:t})=>(0,r.Z)({display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left"},!t.disablePadding&&(0,r.Z)({paddingTop:8,paddingBottom:8},t.dense&&{paddingTop:4,paddingBottom:4},!t.disableGutters&&{paddingLeft:16,paddingRight:16},!!t.secondaryAction&&{paddingRight:48}),!!t.secondaryAction&&{[`& > .${k.Z.root}`]:{paddingRight:48}},{[`&.${x.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${x.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,d.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${x.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,d.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${x.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},"flex-start"===t.alignItems&&{alignItems:"flex-start"},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},t.button&&{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${x.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,d.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,d.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity)}}},t.hasSecondaryAction&&{paddingRight:48}))),M=(0,c.ZP)("li",{name:"MuiListItem",slot:"Container",overridesResolver:(e,t)=>t.container})({position:"relative"}),Z=i.forwardRef((function(e,t){const n=(0,A.Z)({props:e,name:"MuiListItem"}),{alignItems:d="center",autoFocus:c=!1,button:b=!1,children:f,className:k,component:v,components:w={},componentsProps:E={},ContainerComponent:C="li",ContainerProps:{className:Z}={},dense:S=!1,disabled:T=!1,disableGutters:J=!1,disablePadding:R=!1,divider:$=!1,focusVisibleClassName:P,secondaryAction:L,selected:D=!1,slotProps:_={},slots:j={}}=n,O=(0,o.Z)(n.ContainerProps,W),N=(0,o.Z)(n,I),q=i.useContext(g.Z),G=i.useMemo((()=>({dense:S||q.dense||!1,alignItems:d,disableGutters:J})),[d,q.dense,S,J]),H=i.useRef(null);(0,m.Z)((()=>{c&&H.current&&H.current.focus()}),[c]);const X=i.Children.toArray(f),V=X.length&&(0,u.Z)(X[X.length-1],["ListItemSecondaryAction"]),K=(0,r.Z)({},n,{alignItems:d,autoFocus:c,button:b,dense:G.dense,disabled:T,disableGutters:J,disablePadding:R,divider:$,hasSecondaryAction:V,selected:D}),Q=(e=>{const{alignItems:t,button:n,classes:o,dense:r,disabled:i,disableGutters:a,disablePadding:l,divider:d,hasSecondaryAction:c,selected:A}=e,p={root:["root",r&&"dense",!a&&"gutters",!l&&"padding",d&&"divider",i&&"disabled",n&&"button","flex-start"===t&&"alignItemsFlexStart",c&&"secondaryAction",A&&"selected"],container:["container"]};return(0,s.Z)(p,y,o)})(K),U=(0,h.Z)(H,t),Y=j.root||w.Root||B,ee=_.root||E.root||{},te=(0,r.Z)({className:(0,a.Z)(Q.root,ee.className,k),disabled:T},N);let ne=v||"li";return b&&(te.component=v||"div",te.focusVisibleClassName=(0,a.Z)(x.focusVisible,P),ne=p.Z),V?(ne=te.component||v?ne:"div","li"===C&&("li"===ne?ne="div":"li"===te.component&&(te.component="div")),(0,z.jsx)(g.Z.Provider,{value:G,children:(0,z.jsxs)(M,(0,r.Z)({as:C,className:(0,a.Z)(Q.container,Z),ref:U,ownerState:K},O,{children:[(0,z.jsx)(Y,(0,r.Z)({},ee,!(0,l.Z)(Y)&&{as:ne,ownerState:(0,r.Z)({},K,ee.ownerState)},te,{children:X})),X.pop()]}))})):(0,z.jsx)(g.Z.Provider,{value:G,children:(0,z.jsxs)(Y,(0,r.Z)({},ee,{as:ne,ref:U},!(0,l.Z)(Y)&&{ownerState:(0,r.Z)({},K,ee.ownerState)},te,{children:[X,L&&(0,z.jsx)(F,{children:L})]}))})}))},2899:(e,t,n)=>{"use strict";n.d(t,{Z:()=>b});var o=n(4529),r=n(7366),i=n(959),a=n(5924),s=n(5061),l=n(5428),d=n(2280),c=n(4145),A=n(5083),p=n(7810);function u(e){return(0,p.Z)("MuiList",e)}(0,A.Z)("MuiList",["root","padding","dense","subheader"]);var m=n(1527);const h=["children","className","component","dense","disablePadding","subheader"],g=(0,l.ZP)("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})((({ownerState:e})=>(0,r.Z)({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0}))),b=i.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"MuiList"}),{children:l,className:A,component:p="ul",dense:b=!1,disablePadding:f=!1,subheader:y}=n,x=(0,o.Z)(n,h),k=i.useMemo((()=>({dense:b})),[b]),v=(0,r.Z)({},n,{component:p,dense:b,disablePadding:f}),z=(e=>{const{classes:t,disablePadding:n,dense:o,subheader:r}=e,i={root:["root",!n&&"padding",o&&"dense",r&&"subheader"]};return(0,s.Z)(i,u,t)})(v);return(0,m.jsx)(c.Z.Provider,{value:k,children:(0,m.jsxs)(g,(0,r.Z)({as:p,className:(0,a.Z)(z.root,A),ref:t,ownerState:v},x,{children:[y,l]}))})}))},4145:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const o=n(959).createContext({})},4304:(e,t,n)=>{"use strict";n.d(t,{Z:()=>Nt});var o=n(7366),r=n(4529),i=n(959),a=n(5924),s=n(5061),l=n(5009),d=n(5428),c=n(2280),A=n(778),p=n(5973),u=n(7605),m=n(3727),h=n(422),g=n(2954),b=n(4165),f=n(4184),y=n(3927),x=n(1527);const k=["onChange","maxRows","minRows","style","value"];function v(e){return parseInt(e,10)||0}const z={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function w(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}const E=i.forwardRef((function(e,t){const{onChange:n,maxRows:o,minRows:r=1,style:a,value:s}=e,l=(0,m.Z)(e,k),{current:d}=i.useRef(null!=s),c=i.useRef(null),A=(0,g.Z)(t,c),p=i.useRef(null),E=i.useRef(0),[C,F]=i.useState({outerHeightStyle:0}),W=i.useCallback((()=>{const t=c.current,n=(0,b.Z)(t).getComputedStyle(t);if("0px"===n.width)return{outerHeightStyle:0};const i=p.current;i.style.width=n.width,i.value=t.value||e.placeholder||"x","\n"===i.value.slice(-1)&&(i.value+=" ");const a=n.boxSizing,s=v(n.paddingBottom)+v(n.paddingTop),l=v(n.borderBottomWidth)+v(n.borderTopWidth),d=i.scrollHeight;i.value="x";const A=i.scrollHeight;let u=d;return r&&(u=Math.max(Number(r)*A,u)),o&&(u=Math.min(Number(o)*A,u)),u=Math.max(u,A),{outerHeightStyle:u+("border-box"===a?s+l:0),overflow:Math.abs(u-d)<=1}}),[o,r,e.placeholder]),I=(e,t)=>{const{outerHeightStyle:n,overflow:o}=t;return E.current<20&&(n>0&&Math.abs((e.outerHeightStyle||0)-n)>1||e.overflow!==o)?(E.current+=1,{overflow:o,outerHeightStyle:n}):e},B=i.useCallback((()=>{const e=W();w(e)||F((t=>I(t,e)))}),[W]);return i.useEffect((()=>{const e=(0,f.Z)((()=>{E.current=0,c.current&&(()=>{const e=W();w(e)||h.flushSync((()=>{F((t=>I(t,e)))}))})()}));let t;const n=c.current,o=(0,b.Z)(n);return o.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(t=new ResizeObserver(e),t.observe(n)),()=>{e.clear(),o.removeEventListener("resize",e),t&&t.disconnect()}})),(0,y.Z)((()=>{B()})),i.useEffect((()=>{E.current=0}),[s]),(0,x.jsxs)(i.Fragment,{children:[(0,x.jsx)("textarea",(0,u.Z)({value:s,onChange:e=>{E.current=0,d||B(),n&&n(e)},ref:A,rows:r,style:(0,u.Z)({height:C.outerHeightStyle,overflow:C.overflow?"hidden":void 0},a)},l)),(0,x.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:p,tabIndex:-1,style:(0,u.Z)({},z,a,{paddingTop:0,paddingBottom:0})})]})}));var C=n(6018);function F({props:e,states:t,muiFormControl:n}){return t.reduce(((t,o)=>(t[o]=e[o],n&&void 0===e[o]&&(t[o]=n[o]),t)),{})}const W=i.createContext(void 0);function I(){return i.useContext(W)}var B=n(5300),M=n(1858),Z=n(9948),S=n(4428);function T(e){const{styles:t,defaultTheme:n={}}=e,o="function"==typeof t?e=>{return t(null==(o=e)||0===Object.keys(o).length?n:e);var o}:t;return(0,x.jsx)(S.xB,{styles:o})}var J=n(6167);const R=function({styles:e,themeId:t,defaultTheme:n={}}){const o=(0,J.Z)(n),r="function"==typeof e?e(t&&o[t]||o):e;return(0,x.jsx)(T,{styles:r})};var $=n(3129),P=n(29);const L=function(e){return(0,x.jsx)(R,(0,o.Z)({},e,{defaultTheme:$.Z,themeId:P.Z}))};function D(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function _(e,t=!1){return e&&(D(e.value)&&""!==e.value||t&&D(e.defaultValue)&&""!==e.defaultValue)}var j=n(5083),O=n(7810);function N(e){return(0,O.Z)("MuiInputBase",e)}const q=(0,j.Z)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),G=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],H=(e,t)=>{const{ownerState:n}=e;return[t.root,n.formControl&&t.formControl,n.startAdornment&&t.adornedStart,n.endAdornment&&t.adornedEnd,n.error&&t.error,"small"===n.size&&t.sizeSmall,n.multiline&&t.multiline,n.color&&t[`color${(0,B.Z)(n.color)}`],n.fullWidth&&t.fullWidth,n.hiddenLabel&&t.hiddenLabel]},X=(e,t)=>{const{ownerState:n}=e;return[t.input,"small"===n.size&&t.inputSizeSmall,n.multiline&&t.inputMultiline,"search"===n.type&&t.inputTypeSearch,n.startAdornment&&t.inputAdornedStart,n.endAdornment&&t.inputAdornedEnd,n.hiddenLabel&&t.inputHiddenLabel]},V=(0,d.ZP)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:H})((({theme:e,ownerState:t})=>(0,o.Z)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${q.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&(0,o.Z)({padding:"4px 0 5px"},"small"===t.size&&{paddingTop:1}),t.fullWidth&&{width:"100%"}))),K=(0,d.ZP)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:X})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode,r=(0,o.Z)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),i={opacity:"0 !important"},a=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:n?.42:.5};return(0,o.Z)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${q.formControl} &`]:{"&::-webkit-input-placeholder":i,"&::-moz-placeholder":i,"&:-ms-input-placeholder":i,"&::-ms-input-placeholder":i,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},[`&.${q.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===t.size&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===t.type&&{MozAppearance:"textfield"})})),Q=(0,x.jsx)(L,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),U=i.forwardRef((function(e,t){var n;const l=(0,c.Z)({props:e,name:"MuiInputBase"}),{"aria-describedby":d,autoComplete:A,autoFocus:u,className:m,components:h={},componentsProps:g={},defaultValue:b,disabled:f,disableInjectingGlobalStyles:y,endAdornment:k,fullWidth:v=!1,id:z,inputComponent:w="input",inputProps:S={},inputRef:T,maxRows:J,minRows:R,multiline:$=!1,name:P,onBlur:L,onChange:D,onClick:j,onFocus:O,onKeyDown:q,onKeyUp:H,placeholder:X,readOnly:U,renderSuffix:Y,rows:ee,slotProps:te={},slots:ne={},startAdornment:oe,type:re="text",value:ie}=l,ae=(0,r.Z)(l,G),se=null!=S.value?S.value:ie,{current:le}=i.useRef(null!=se),de=i.useRef(),ce=i.useCallback((e=>{}),[]),Ae=(0,M.Z)(de,T,S.ref,ce),[pe,ue]=i.useState(!1),me=I(),he=F({props:l,muiFormControl:me,states:["color","disabled","error","hiddenLabel","size","required","filled"]});he.focused=me?me.focused:pe,i.useEffect((()=>{!me&&f&&pe&&(ue(!1),L&&L())}),[me,f,pe,L]);const ge=me&&me.onFilled,be=me&&me.onEmpty,fe=i.useCallback((e=>{_(e)?ge&&ge():be&&be()}),[ge,be]);(0,Z.Z)((()=>{le&&fe({value:se})}),[se,fe,le]),i.useEffect((()=>{fe(de.current)}),[]);let ye=w,xe=S;$&&"input"===ye&&(xe=ee?(0,o.Z)({type:void 0,minRows:ee,maxRows:ee},xe):(0,o.Z)({type:void 0,maxRows:J,minRows:R},xe),ye=E),i.useEffect((()=>{me&&me.setAdornedStart(Boolean(oe))}),[me,oe]);const ke=(0,o.Z)({},l,{color:he.color||"primary",disabled:he.disabled,endAdornment:k,error:he.error,focused:he.focused,formControl:me,fullWidth:v,hiddenLabel:he.hiddenLabel,multiline:$,size:he.size,startAdornment:oe,type:re}),ve=(e=>{const{classes:t,color:n,disabled:o,error:r,endAdornment:i,focused:a,formControl:l,fullWidth:d,hiddenLabel:c,multiline:A,readOnly:p,size:u,startAdornment:m,type:h}=e,g={root:["root",`color${(0,B.Z)(n)}`,o&&"disabled",r&&"error",d&&"fullWidth",a&&"focused",l&&"formControl","small"===u&&"sizeSmall",A&&"multiline",m&&"adornedStart",i&&"adornedEnd",c&&"hiddenLabel",p&&"readOnly"],input:["input",o&&"disabled","search"===h&&"inputTypeSearch",A&&"inputMultiline","small"===u&&"inputSizeSmall",c&&"inputHiddenLabel",m&&"inputAdornedStart",i&&"inputAdornedEnd",p&&"readOnly"]};return(0,s.Z)(g,N,t)})(ke),ze=ne.root||h.Root||V,we=te.root||g.root||{},Ee=ne.input||h.Input||K;return xe=(0,o.Z)({},xe,null!=(n=te.input)?n:g.input),(0,x.jsxs)(i.Fragment,{children:[!y&&Q,(0,x.jsxs)(ze,(0,o.Z)({},we,!(0,C.Z)(ze)&&{ownerState:(0,o.Z)({},ke,we.ownerState)},{ref:t,onClick:e=>{de.current&&e.currentTarget===e.target&&de.current.focus(),j&&!he.disabled&&j(e)}},ae,{className:(0,a.Z)(ve.root,we.className,m,U&&"MuiInputBase-readOnly"),children:[oe,(0,x.jsx)(W.Provider,{value:null,children:(0,x.jsx)(Ee,(0,o.Z)({ownerState:ke,"aria-invalid":he.error,"aria-describedby":d,autoComplete:A,autoFocus:u,defaultValue:b,disabled:he.disabled,id:z,onAnimationStart:e=>{fe("mui-auto-fill-cancel"===e.animationName?de.current:{value:"x"})},name:P,placeholder:X,readOnly:U,required:he.required,rows:ee,value:se,onKeyDown:q,onKeyUp:H,type:re},xe,!(0,C.Z)(Ee)&&{as:ye,ownerState:(0,o.Z)({},ke,xe.ownerState)},{ref:Ae,className:(0,a.Z)(ve.input,xe.className,U&&"MuiInputBase-readOnly"),onBlur:e=>{L&&L(e),S.onBlur&&S.onBlur(e),me&&me.onBlur?me.onBlur(e):ue(!1)},onChange:(e,...t)=>{if(!le){const t=e.target||de.current;if(null==t)throw new Error((0,p.Z)(1));fe({value:t.value})}S.onChange&&S.onChange(e,...t),D&&D(e,...t)},onFocus:e=>{he.disabled?e.stopPropagation():(O&&O(e),S.onFocus&&S.onFocus(e),me&&me.onFocus?me.onFocus(e):ue(!0))}}))}),k,Y?Y((0,o.Z)({},he,{startAdornment:oe})):null]}))]})})),Y=U;function ee(e){return(0,O.Z)("MuiInput",e)}const te=(0,o.Z)({},q,(0,j.Z)("MuiInput",["root","underline","input"])),ne=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],oe=(0,d.ZP)(V,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...H(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{let n="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(n=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),(0,o.Z)({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${(e.vars||e).palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${te.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${te.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${te.disabled}, .${te.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${n}`}},[`&.${te.disabled}:before`]:{borderBottomStyle:"dotted"}})})),re=(0,d.ZP)(K,{name:"MuiInput",slot:"Input",overridesResolver:X})({}),ie=i.forwardRef((function(e,t){var n,i,a,l;const d=(0,c.Z)({props:e,name:"MuiInput"}),{disableUnderline:p,components:u={},componentsProps:m,fullWidth:h=!1,inputComponent:g="input",multiline:b=!1,slotProps:f,slots:y={},type:k="text"}=d,v=(0,r.Z)(d,ne),z=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},i=(0,s.Z)(r,ee,t);return(0,o.Z)({},t,i)})(d),w={root:{ownerState:{disableUnderline:p}}},E=(null!=f?f:m)?(0,A.Z)(null!=f?f:m,w):w,C=null!=(n=null!=(i=y.root)?i:u.Root)?n:oe,F=null!=(a=null!=(l=y.input)?l:u.Input)?a:re;return(0,x.jsx)(Y,(0,o.Z)({slots:{root:C,input:F},slotProps:E,fullWidth:h,inputComponent:g,multiline:b,ref:t,type:k},v,{classes:z}))}));ie.muiName="Input";const ae=ie;function se(e){return(0,O.Z)("MuiFilledInput",e)}const le=(0,o.Z)({},q,(0,j.Z)("MuiFilledInput",["root","underline","input"])),de=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],ce=(0,d.ZP)(V,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[...H(e,t),!n.disableUnderline&&t.underline]}})((({theme:e,ownerState:t})=>{var n;const r="light"===e.palette.mode,i=r?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",a=r?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",s=r?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",l=r?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return(0,o.Z)({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:s,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a}},[`&.${le.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a},[`&.${le.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:l}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${null==(n=(e.vars||e).palette[t.color||"primary"])?void 0:n.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${le.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${le.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:i}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${le.disabled}, .${le.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${le.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&(0,o.Z)({padding:"25px 12px 8px"},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17}))})),Ae=(0,d.ZP)(K,{name:"MuiFilledInput",slot:"Input",overridesResolver:X})((({theme:e,ownerState:t})=>(0,o.Z)({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&"small"===t.size&&{paddingTop:8,paddingBottom:9}))),pe=i.forwardRef((function(e,t){var n,i,a,l;const d=(0,c.Z)({props:e,name:"MuiFilledInput"}),{components:p={},componentsProps:u,fullWidth:m=!1,inputComponent:h="input",multiline:g=!1,slotProps:b,slots:f={},type:y="text"}=d,k=(0,r.Z)(d,de),v=(0,o.Z)({},d,{fullWidth:m,inputComponent:h,multiline:g,type:y}),z=(e=>{const{classes:t,disableUnderline:n}=e,r={root:["root",!n&&"underline"],input:["input"]},i=(0,s.Z)(r,se,t);return(0,o.Z)({},t,i)})(d),w={root:{ownerState:v},input:{ownerState:v}},E=(null!=b?b:u)?(0,A.Z)(null!=b?b:u,w):w,C=null!=(n=null!=(i=f.root)?i:p.Root)?n:ce,F=null!=(a=null!=(l=f.input)?l:p.Input)?a:Ae;return(0,x.jsx)(Y,(0,o.Z)({slots:{root:C,input:F},componentsProps:E,fullWidth:m,inputComponent:h,multiline:g,ref:t,type:y},k,{classes:z}))}));pe.muiName="Input";const ue=pe;var me;const he=["children","classes","className","label","notched"],ge=(0,d.ZP)("fieldset")({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),be=(0,d.ZP)("legend")((({ownerState:e,theme:t})=>(0,o.Z)({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},e.withLabel&&(0,o.Z)({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})}))));function fe(e){return(0,O.Z)("MuiOutlinedInput",e)}const ye=(0,o.Z)({},q,(0,j.Z)("MuiOutlinedInput",["root","notchedOutline","input"])),xe=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],ke=(0,d.ZP)(V,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:H})((({theme:e,ownerState:t})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return(0,o.Z)({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${ye.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${ye.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:n}},[`&.${ye.focused} .${ye.notchedOutline}`]:{borderColor:(e.vars||e).palette[t.color].main,borderWidth:2},[`&.${ye.error} .${ye.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${ye.disabled} .${ye.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&(0,o.Z)({padding:"16.5px 14px"},"small"===t.size&&{padding:"8.5px 14px"}))})),ve=(0,d.ZP)((function(e){const{className:t,label:n,notched:i}=e,a=(0,r.Z)(e,he),s=null!=n&&""!==n,l=(0,o.Z)({},e,{notched:i,withLabel:s});return(0,x.jsx)(ge,(0,o.Z)({"aria-hidden":!0,className:t,ownerState:l},a,{children:(0,x.jsx)(be,{ownerState:l,children:s?(0,x.jsx)("span",{children:n}):me||(me=(0,x.jsx)("span",{className:"notranslate",children:"​"}))})}))}),{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})((({theme:e})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}})),ze=(0,d.ZP)(K,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:X})((({theme:e,ownerState:t})=>(0,o.Z)({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===t.size&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0}))),we=i.forwardRef((function(e,t){var n,a,l,d,A;const p=(0,c.Z)({props:e,name:"MuiOutlinedInput"}),{components:u={},fullWidth:m=!1,inputComponent:h="input",label:g,multiline:b=!1,notched:f,slots:y={},type:k="text"}=p,v=(0,r.Z)(p,xe),z=(e=>{const{classes:t}=e,n=(0,s.Z)({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},fe,t);return(0,o.Z)({},t,n)})(p),w=I(),E=F({props:p,muiFormControl:w,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),C=(0,o.Z)({},p,{color:E.color||"primary",disabled:E.disabled,error:E.error,focused:E.focused,formControl:w,fullWidth:m,hiddenLabel:E.hiddenLabel,multiline:b,size:E.size,type:k}),W=null!=(n=null!=(a=y.root)?a:u.Root)?n:ke,B=null!=(l=null!=(d=y.input)?d:u.Input)?l:ze;return(0,x.jsx)(Y,(0,o.Z)({slots:{root:W,input:B},renderSuffix:e=>(0,x.jsx)(ve,{ownerState:C,className:z.notchedOutline,label:null!=g&&""!==g&&E.required?A||(A=(0,x.jsxs)(i.Fragment,{children:[g," ","*"]})):g,notched:void 0!==f?f:Boolean(e.startAdornment||e.filled||e.focused)}),fullWidth:m,inputComponent:h,multiline:b,ref:t,type:k},v,{classes:(0,o.Z)({},z,{notchedOutline:null})}))}));we.muiName="Input";const Ee=we;function Ce(e){return(0,O.Z)("MuiFormLabel",e)}const Fe=(0,j.Z)("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),We=["children","className","color","component","disabled","error","filled","focused","required"],Ie=(0,d.ZP)("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,o.Z)({},t.root,"secondary"===e.color&&t.colorSecondary,e.filled&&t.filled)})((({theme:e,ownerState:t})=>(0,o.Z)({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${Fe.focused}`]:{color:(e.vars||e).palette[t.color].main},[`&.${Fe.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${Fe.error}`]:{color:(e.vars||e).palette.error.main}}))),Be=(0,d.ZP)("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})((({theme:e})=>({[`&.${Fe.error}`]:{color:(e.vars||e).palette.error.main}}))),Me=i.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"MuiFormLabel"}),{children:i,className:l,component:d="label"}=n,A=(0,r.Z)(n,We),p=F({props:n,muiFormControl:I(),states:["color","required","focused","disabled","error","filled"]}),u=(0,o.Z)({},n,{color:p.color||"primary",component:d,disabled:p.disabled,error:p.error,filled:p.filled,focused:p.focused,required:p.required}),m=(e=>{const{classes:t,color:n,focused:o,disabled:r,error:i,filled:a,required:l}=e,d={root:["root",`color${(0,B.Z)(n)}`,r&&"disabled",i&&"error",a&&"filled",o&&"focused",l&&"required"],asterisk:["asterisk",i&&"error"]};return(0,s.Z)(d,Ce,t)})(u);return(0,x.jsxs)(Ie,(0,o.Z)({as:d,ownerState:u,className:(0,a.Z)(m.root,l),ref:t},A,{children:[i,p.required&&(0,x.jsxs)(Be,{ownerState:u,"aria-hidden":!0,className:m.asterisk,children:[" ","*"]})]}))}));function Ze(e){return(0,O.Z)("MuiInputLabel",e)}(0,j.Z)("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const Se=["disableAnimation","margin","shrink","variant","className"],Te=(0,d.ZP)(Me,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${Fe.asterisk}`]:t.asterisk},t.root,n.formControl&&t.formControl,"small"===n.size&&t.sizeSmall,n.shrink&&t.shrink,!n.disableAnimation&&t.animated,t[n.variant]]}})((({theme:e,ownerState:t})=>(0,o.Z)({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},t.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},"small"===t.size&&{transform:"translate(0, 17px) scale(1)"},t.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!t.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},"filled"===t.variant&&(0,o.Z)({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(12px, 13px) scale(1)"},t.shrink&&(0,o.Z)({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},"small"===t.size&&{transform:"translate(12px, 4px) scale(0.75)"})),"outlined"===t.variant&&(0,o.Z)({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===t.size&&{transform:"translate(14px, 9px) scale(1)"},t.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"})))),Je=i.forwardRef((function(e,t){const n=(0,c.Z)({name:"MuiInputLabel",props:e}),{disableAnimation:i=!1,shrink:l,className:d}=n,A=(0,r.Z)(n,Se),p=I();let u=l;void 0===u&&p&&(u=p.filled||p.focused||p.adornedStart);const m=F({props:n,muiFormControl:p,states:["size","variant","required"]}),h=(0,o.Z)({},n,{disableAnimation:i,formControl:p,shrink:u,size:m.size,variant:m.variant,required:m.required}),g=(e=>{const{classes:t,formControl:n,size:r,shrink:i,disableAnimation:a,variant:l,required:d}=e,c={root:["root",n&&"formControl",!a&&"animated",i&&"shrink","small"===r&&"sizeSmall",l],asterisk:[d&&"asterisk"]},A=(0,s.Z)(c,Ze,t);return(0,o.Z)({},t,A)})(h);return(0,x.jsx)(Te,(0,o.Z)({"data-shrink":u,ownerState:h,ref:t,className:(0,a.Z)(g.root,d)},A,{classes:g}))}));var Re=n(9162);function $e(e){return(0,O.Z)("MuiFormControl",e)}(0,j.Z)("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const Pe=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],Le=(0,d.ZP)("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>(0,o.Z)({},t.root,t[`margin${(0,B.Z)(e.margin)}`],e.fullWidth&&t.fullWidth)})((({ownerState:e})=>(0,o.Z)({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},"normal"===e.margin&&{marginTop:16,marginBottom:8},"dense"===e.margin&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"}))),De=i.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"MuiFormControl"}),{children:l,className:d,color:A="primary",component:p="div",disabled:u=!1,error:m=!1,focused:h,fullWidth:g=!1,hiddenLabel:b=!1,margin:f="none",required:y=!1,size:k="medium",variant:v="outlined"}=n,z=(0,r.Z)(n,Pe),w=(0,o.Z)({},n,{color:A,component:p,disabled:u,error:m,fullWidth:g,hiddenLabel:b,margin:f,required:y,size:k,variant:v}),E=(e=>{const{classes:t,margin:n,fullWidth:o}=e,r={root:["root","none"!==n&&`margin${(0,B.Z)(n)}`,o&&"fullWidth"]};return(0,s.Z)(r,$e,t)})(w),[C,F]=i.useState((()=>{let e=!1;return l&&i.Children.forEach(l,(t=>{if(!(0,Re.Z)(t,["Input","Select"]))return;const n=(0,Re.Z)(t,["Select"])?t.props.input:t;n&&n.props.startAdornment&&(e=!0)})),e})),[I,M]=i.useState((()=>{let e=!1;return l&&i.Children.forEach(l,(t=>{(0,Re.Z)(t,["Input","Select"])&&(_(t.props,!0)||_(t.props.inputProps,!0))&&(e=!0)})),e})),[Z,S]=i.useState(!1);u&&Z&&S(!1);const T=void 0===h||u?Z:h;let J;const R=i.useMemo((()=>({adornedStart:C,setAdornedStart:F,color:A,disabled:u,error:m,filled:I,focused:T,fullWidth:g,hiddenLabel:b,size:k,onBlur:()=>{S(!1)},onEmpty:()=>{M(!1)},onFilled:()=>{M(!0)},onFocus:()=>{S(!0)},registerEffect:J,required:y,variant:v})),[C,A,u,m,I,T,g,b,J,y,k,v]);return(0,x.jsx)(W.Provider,{value:R,children:(0,x.jsx)(Le,(0,o.Z)({as:p,ownerState:w,className:(0,a.Z)(E.root,d),ref:t},z,{children:l}))})}));function _e(e){return(0,O.Z)("MuiFormHelperText",e)}const je=(0,j.Z)("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);var Oe;const Ne=["children","className","component","disabled","error","filled","focused","margin","required","variant"],qe=(0,d.ZP)("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.size&&t[`size${(0,B.Z)(n.size)}`],n.contained&&t.contained,n.filled&&t.filled]}})((({theme:e,ownerState:t})=>(0,o.Z)({color:(e.vars||e).palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,[`&.${je.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${je.error}`]:{color:(e.vars||e).palette.error.main}},"small"===t.size&&{marginTop:4},t.contained&&{marginLeft:14,marginRight:14}))),Ge=i.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"MuiFormHelperText"}),{children:i,className:l,component:d="p"}=n,A=(0,r.Z)(n,Ne),p=F({props:n,muiFormControl:I(),states:["variant","size","disabled","error","filled","focused","required"]}),u=(0,o.Z)({},n,{component:d,contained:"filled"===p.variant||"outlined"===p.variant,variant:p.variant,size:p.size,disabled:p.disabled,error:p.error,filled:p.filled,focused:p.focused,required:p.required}),m=(e=>{const{classes:t,contained:n,size:o,disabled:r,error:i,filled:a,focused:l,required:d}=e,c={root:["root",r&&"disabled",i&&"error",o&&`size${(0,B.Z)(o)}`,n&&"contained",l&&"focused",a&&"filled",d&&"required"]};return(0,s.Z)(c,_e,t)})(u);return(0,x.jsx)(qe,(0,o.Z)({as:d,ownerState:u,className:(0,a.Z)(m.root,l),ref:t},A,{children:" "===i?Oe||(Oe=(0,x.jsx)("span",{className:"notranslate",children:"​"})):i}))}));n(1357);var He=n(9703),Xe=n(2899);const Ve=n(1959).Z,Ke=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function Qe(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function Ue(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function Ye(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function et(e,t,n,o,r,i){let a=!1,s=r(e,t,!!t&&n);for(;s;){if(s===e.firstChild){if(a)return!1;a=!0}const t=!o&&(s.disabled||"true"===s.getAttribute("aria-disabled"));if(s.hasAttribute("tabindex")&&Ye(s,i)&&!t)return s.focus(),!0;s=r(e,s,n)}return!1}const tt=i.forwardRef((function(e,t){const{actions:n,autoFocus:a=!1,autoFocusItem:s=!1,children:l,className:d,disabledItemsFocusable:c=!1,disableListWrap:A=!1,onKeyDown:p,variant:u="selectedMenu"}=e,m=(0,r.Z)(e,Ke),h=i.useRef(null),g=i.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});(0,Z.Z)((()=>{a&&h.current.focus()}),[a]),i.useImperativeHandle(n,(()=>({adjustStyleForScrollbar:(e,t)=>{const n=!h.current.style.width;if(e.clientHeight<h.current.clientHeight&&n){const n=`${Ve((0,He.Z)(e))}px`;h.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=n,h.current.style.width=`calc(100% + ${n})`}return h.current}})),[]);const b=(0,M.Z)(h,t);let f=-1;i.Children.forEach(l,((e,t)=>{i.isValidElement(e)?(e.props.disabled||("selectedMenu"===u&&e.props.selected||-1===f)&&(f=t),f===t&&(e.props.disabled||e.props.muiSkipListHighlight||e.type.muiSkipListHighlight)&&(f+=1,f>=l.length&&(f=-1))):f===t&&(f+=1,f>=l.length&&(f=-1))}));const y=i.Children.map(l,((e,t)=>{if(t===f){const t={};return s&&(t.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===u&&(t.tabIndex=0),i.cloneElement(e,t)}return e}));return(0,x.jsx)(Xe.Z,(0,o.Z)({role:"menu",ref:b,className:d,onKeyDown:e=>{const t=h.current,n=e.key,o=(0,He.Z)(t).activeElement;if("ArrowDown"===n)e.preventDefault(),et(t,o,A,c,Qe);else if("ArrowUp"===n)e.preventDefault(),et(t,o,A,c,Ue);else if("Home"===n)e.preventDefault(),et(t,null,A,c,Qe);else if("End"===n)e.preventDefault(),et(t,null,A,c,Ue);else if(1===n.length){const r=g.current,i=n.toLowerCase(),a=performance.now();r.keys.length>0&&(a-r.lastTime>500?(r.keys=[],r.repeating=!0,r.previousKeyMatched=!0):r.repeating&&i!==r.keys[0]&&(r.repeating=!1)),r.lastTime=a,r.keys.push(i);const s=o&&!r.repeating&&Ye(o,r);r.previousKeyMatched&&(s||et(t,o,!1,c,Qe,r))?e.preventDefault():r.previousKeyMatched=!1}p&&p(e)},tabIndex:a?0:-1},m,{children:y}))}));var nt=n(625),ot=n(9815);function rt(e){return(0,O.Z)("MuiMenu",e)}(0,j.Z)("MuiMenu",["root","paper","list"]);const it=["onEntering"],at=["autoFocus","children","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"],st={vertical:"top",horizontal:"right"},lt={vertical:"top",horizontal:"left"},dt=(0,d.ZP)(nt.ZP,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),ct=(0,d.ZP)(nt.XS,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),At=(0,d.ZP)(tt,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),pt=i.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"MuiMenu"}),{autoFocus:l=!0,children:d,disableAutoFocusItem:A=!1,MenuListProps:p={},onClose:u,open:m,PaperProps:h={},PopoverClasses:g,transitionDuration:b="auto",TransitionProps:{onEntering:f}={},variant:y="selectedMenu"}=n,k=(0,r.Z)(n.TransitionProps,it),v=(0,r.Z)(n,at),z=(0,ot.Z)(),w="rtl"===z.direction,E=(0,o.Z)({},n,{autoFocus:l,disableAutoFocusItem:A,MenuListProps:p,onEntering:f,PaperProps:h,transitionDuration:b,TransitionProps:k,variant:y}),C=(e=>{const{classes:t}=e;return(0,s.Z)({root:["root"],paper:["paper"],list:["list"]},rt,t)})(E),F=l&&!A&&m,W=i.useRef(null);let I=-1;return i.Children.map(d,((e,t)=>{i.isValidElement(e)&&(e.props.disabled||("selectedMenu"===y&&e.props.selected||-1===I)&&(I=t))})),(0,x.jsx)(dt,(0,o.Z)({onClose:u,anchorOrigin:{vertical:"bottom",horizontal:w?"right":"left"},transformOrigin:w?st:lt,slots:{paper:ct},slotProps:{paper:(0,o.Z)({},h,{classes:(0,o.Z)({},h.classes,{root:C.paper})})},className:C.root,open:m,ref:t,transitionDuration:b,TransitionProps:(0,o.Z)({onEntering:(e,t)=>{W.current&&W.current.adjustStyleForScrollbar(e,z),f&&f(e,t)}},k),ownerState:E},v,{classes:g,children:(0,x.jsx)(At,(0,o.Z)({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),u&&u(e,"tabKeyDown"))},actions:W,autoFocus:l&&(-1===I||A),autoFocusItem:F,variant:y},p,{className:(0,a.Z)(C.list,p.className),children:d}))}))}));function ut(e){return(0,O.Z)("MuiNativeSelect",e)}const mt=(0,j.Z)("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),ht=["className","disabled","error","IconComponent","inputRef","variant"],gt=({ownerState:e,theme:t})=>(0,o.Z)({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":(0,o.Z)({},t.vars?{backgroundColor:`rgba(${t.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:"light"===t.palette.mode?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${mt.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(t.vars||t).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},"filled"===e.variant&&{"&&&":{paddingRight:32}},"outlined"===e.variant&&{borderRadius:(t.vars||t).shape.borderRadius,"&:focus":{borderRadius:(t.vars||t).shape.borderRadius},"&&&":{paddingRight:32}}),bt=(0,d.ZP)("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:d.FO,overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.select,t[n.variant],n.error&&t.error,{[`&.${mt.multiple}`]:t.multiple}]}})(gt),ft=({ownerState:e,theme:t})=>(0,o.Z)({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(t.vars||t).palette.action.active,[`&.${mt.disabled}`]:{color:(t.vars||t).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},"filled"===e.variant&&{right:7},"outlined"===e.variant&&{right:7}),yt=(0,d.ZP)("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,B.Z)(n.variant)}`],n.open&&t.iconOpen]}})(ft),xt=i.forwardRef((function(e,t){const{className:n,disabled:l,error:d,IconComponent:c,inputRef:A,variant:p="standard"}=e,u=(0,r.Z)(e,ht),m=(0,o.Z)({},e,{disabled:l,variant:p,error:d}),h=(e=>{const{classes:t,variant:n,disabled:o,multiple:r,open:i,error:a}=e,l={select:["select",n,o&&"disabled",r&&"multiple",a&&"error"],icon:["icon",`icon${(0,B.Z)(n)}`,i&&"iconOpen",o&&"disabled"]};return(0,s.Z)(l,ut,t)})(m);return(0,x.jsxs)(i.Fragment,{children:[(0,x.jsx)(bt,(0,o.Z)({ownerState:m,className:(0,a.Z)(h.select,n),disabled:l,ref:A||t},u)),e.multiple?null:(0,x.jsx)(yt,{as:c,ownerState:m,className:h.icon})]})}));var kt=n(6028);function vt(e){return(0,O.Z)("MuiSelect",e)}const zt=(0,j.Z)("MuiSelect",["select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);var wt;const Et=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],Ct=(0,d.ZP)("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`&.${zt.select}`]:t.select},{[`&.${zt.select}`]:t[n.variant]},{[`&.${zt.error}`]:t.error},{[`&.${zt.multiple}`]:t.multiple}]}})(gt,{[`&.${zt.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),Ft=(0,d.ZP)("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.icon,n.variant&&t[`icon${(0,B.Z)(n.variant)}`],n.open&&t.iconOpen]}})(ft),Wt=(0,d.ZP)("input",{shouldForwardProp:e=>(0,d.Dz)(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function It(e,t){return"object"==typeof t&&null!==t?e===t:String(e)===String(t)}function Bt(e){return null==e||"string"==typeof e&&!e.trim()}const Mt=i.forwardRef((function(e,t){const{"aria-describedby":n,"aria-label":l,autoFocus:d,autoWidth:c,children:A,className:u,defaultOpen:m,defaultValue:h,disabled:g,displayEmpty:b,error:f=!1,IconComponent:y,inputRef:k,labelId:v,MenuProps:z={},multiple:w,name:E,onBlur:C,onChange:F,onClose:W,onFocus:I,onOpen:Z,open:S,readOnly:T,renderValue:J,SelectDisplayProps:R={},tabIndex:$,value:P,variant:L="standard"}=e,D=(0,r.Z)(e,Et),[j,O]=(0,kt.Z)({controlled:P,default:h,name:"Select"}),[N,q]=(0,kt.Z)({controlled:S,default:m,name:"Select"}),G=i.useRef(null),H=i.useRef(null),[X,V]=i.useState(null),{current:K}=i.useRef(null!=S),[Q,U]=i.useState(),Y=(0,M.Z)(t,k),ee=i.useCallback((e=>{H.current=e,e&&V(e)}),[]),te=null==X?void 0:X.parentNode;i.useImperativeHandle(Y,(()=>({focus:()=>{H.current.focus()},node:G.current,value:j})),[j]),i.useEffect((()=>{m&&N&&X&&!K&&(U(c?null:te.clientWidth),H.current.focus())}),[X,c]),i.useEffect((()=>{d&&H.current.focus()}),[d]),i.useEffect((()=>{if(!v)return;const e=(0,He.Z)(H.current).getElementById(v);if(e){const t=()=>{getSelection().isCollapsed&&H.current.focus()};return e.addEventListener("click",t),()=>{e.removeEventListener("click",t)}}}),[v]);const ne=(e,t)=>{e?Z&&Z(t):W&&W(t),K||(U(c?null:te.clientWidth),q(e))},oe=i.Children.toArray(A),re=e=>t=>{let n;if(t.currentTarget.hasAttribute("tabindex")){if(w){n=Array.isArray(j)?j.slice():[];const t=j.indexOf(e.props.value);-1===t?n.push(e.props.value):n.splice(t,1)}else n=e.props.value;if(e.props.onClick&&e.props.onClick(t),j!==n&&(O(n),F)){const o=t.nativeEvent||t,r=new o.constructor(o.type,o);Object.defineProperty(r,"target",{writable:!0,value:{value:n,name:E}}),F(r,e)}w||ne(!1,t)}},ie=null!==X&&N;let ae,se;delete D["aria-invalid"];const le=[];let de=!1,ce=!1;(_({value:j})||b)&&(J?ae=J(j):de=!0);const Ae=oe.map((e=>{if(!i.isValidElement(e))return null;let t;if(w){if(!Array.isArray(j))throw new Error((0,p.Z)(2));t=j.some((t=>It(t,e.props.value))),t&&de&&le.push(e.props.children)}else t=It(j,e.props.value),t&&de&&(se=e.props.children);return t&&(ce=!0),i.cloneElement(e,{"aria-selected":t?"true":"false",onClick:re(e),onKeyUp:t=>{" "===t.key&&t.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(t)},role:"option",selected:t,value:void 0,"data-value":e.props.value})}));de&&(ae=w?0===le.length?null:le.reduce(((e,t,n)=>(e.push(t),n<le.length-1&&e.push(", "),e)),[]):se);let pe,ue=Q;!c&&K&&X&&(ue=te.clientWidth),pe=void 0!==$?$:g?null:0;const me=R.id||(E?`mui-component-select-${E}`:void 0),he=(0,o.Z)({},e,{variant:L,value:j,open:ie,error:f}),ge=(e=>{const{classes:t,variant:n,disabled:o,multiple:r,open:i,error:a}=e,l={select:["select",n,o&&"disabled",r&&"multiple",a&&"error"],icon:["icon",`icon${(0,B.Z)(n)}`,i&&"iconOpen",o&&"disabled"],nativeInput:["nativeInput"]};return(0,s.Z)(l,vt,t)})(he);return(0,x.jsxs)(i.Fragment,{children:[(0,x.jsx)(Ct,(0,o.Z)({ref:ee,tabIndex:pe,role:"button","aria-disabled":g?"true":void 0,"aria-expanded":ie?"true":"false","aria-haspopup":"listbox","aria-label":l,"aria-labelledby":[v,me].filter(Boolean).join(" ")||void 0,"aria-describedby":n,onKeyDown:e=>{T||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),ne(!0,e))},onMouseDown:g||T?null:e=>{0===e.button&&(e.preventDefault(),H.current.focus(),ne(!0,e))},onBlur:e=>{!ie&&C&&(Object.defineProperty(e,"target",{writable:!0,value:{value:j,name:E}}),C(e))},onFocus:I},R,{ownerState:he,className:(0,a.Z)(R.className,ge.select,u),id:me,children:Bt(ae)?wt||(wt=(0,x.jsx)("span",{className:"notranslate",children:"​"})):ae})),(0,x.jsx)(Wt,(0,o.Z)({"aria-invalid":f,value:Array.isArray(j)?j.join(","):j,name:E,ref:G,"aria-hidden":!0,onChange:e=>{const t=oe.find((t=>t.props.value===e.target.value));void 0!==t&&(O(t.props.value),F&&F(e,t))},tabIndex:-1,disabled:g,className:ge.nativeInput,autoFocus:d,ownerState:he},D)),(0,x.jsx)(Ft,{as:y,className:ge.icon,ownerState:he}),(0,x.jsx)(pt,(0,o.Z)({id:`menu-${E||""}`,anchorEl:te,open:ie,onClose:e=>{ne(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},z,{MenuListProps:(0,o.Z)({"aria-labelledby":v,role:"listbox",disableListWrap:!0},z.MenuListProps),PaperProps:(0,o.Z)({},z.PaperProps,{style:(0,o.Z)({minWidth:ue},null!=z.PaperProps?z.PaperProps.style:null)}),children:Ae}))]})})),Zt=(0,n(9488).Z)((0,x.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown"),St=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],Tt={name:"MuiSelect",overridesResolver:(e,t)=>t.root,shouldForwardProp:e=>(0,d.FO)(e)&&"variant"!==e,slot:"Root"},Jt=(0,d.ZP)(ae,Tt)(""),Rt=(0,d.ZP)(Ee,Tt)(""),$t=(0,d.ZP)(ue,Tt)(""),Pt=i.forwardRef((function(e,t){const n=(0,c.Z)({name:"MuiSelect",props:e}),{autoWidth:s=!1,children:l,classes:d={},className:p,defaultOpen:u=!1,displayEmpty:m=!1,IconComponent:h=Zt,id:g,input:b,inputProps:f,label:y,labelId:k,MenuProps:v,multiple:z=!1,native:w=!1,onClose:E,onOpen:C,open:W,renderValue:B,SelectDisplayProps:Z,variant:S="outlined"}=n,T=(0,r.Z)(n,St),J=w?xt:Mt,R=F({props:n,muiFormControl:I(),states:["variant","error"]}),$=R.variant||S,P=(0,o.Z)({},n,{variant:$,classes:d}),L=(e=>{const{classes:t}=e;return t})(P),D=b||{standard:(0,x.jsx)(Jt,{ownerState:P}),outlined:(0,x.jsx)(Rt,{label:y,ownerState:P}),filled:(0,x.jsx)($t,{ownerState:P})}[$],_=(0,M.Z)(t,D.ref);return(0,x.jsx)(i.Fragment,{children:i.cloneElement(D,(0,o.Z)({inputComponent:J,inputProps:(0,o.Z)({children:l,error:R.error,IconComponent:h,variant:$,type:void 0,multiple:z},w?{id:g}:{autoWidth:s,defaultOpen:u,displayEmpty:m,labelId:k,MenuProps:v,onClose:E,onOpen:C,open:W,renderValue:B,SelectDisplayProps:(0,o.Z)({id:g},Z)},f,{classes:f?(0,A.Z)(L,f.classes):L},b?b.props.inputProps:{})},z&&w&&"outlined"===$?{notched:!0}:{},{ref:_,className:(0,a.Z)(D.props.className,p)},!b&&{variant:$},T))})}));Pt.muiName="Select";const Lt=Pt;function Dt(e){return(0,O.Z)("MuiTextField",e)}(0,j.Z)("MuiTextField",["root"]);const _t=["autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","placeholder","required","rows","select","SelectProps","type","value","variant"],jt={standard:ae,filled:ue,outlined:Ee},Ot=(0,d.ZP)(De,{name:"MuiTextField",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Nt=i.forwardRef((function(e,t){const n=(0,c.Z)({props:e,name:"MuiTextField"}),{autoComplete:i,autoFocus:d=!1,children:A,className:p,color:u="primary",defaultValue:m,disabled:h=!1,error:g=!1,FormHelperTextProps:b,fullWidth:f=!1,helperText:y,id:k,InputLabelProps:v,inputProps:z,InputProps:w,inputRef:E,label:C,maxRows:F,minRows:W,multiline:I=!1,name:B,onBlur:M,onChange:Z,onClick:S,onFocus:T,placeholder:J,required:R=!1,rows:$,select:P=!1,SelectProps:L,type:D,value:_,variant:j="outlined"}=n,O=(0,r.Z)(n,_t),N=(0,o.Z)({},n,{autoFocus:d,color:u,disabled:h,error:g,fullWidth:f,multiline:I,required:R,select:P,variant:j}),q=(e=>{const{classes:t}=e;return(0,s.Z)({root:["root"]},Dt,t)})(N),G={};"outlined"===j&&(v&&void 0!==v.shrink&&(G.notched=v.shrink),G.label=C),P&&(L&&L.native||(G.id=void 0),G["aria-describedby"]=void 0);const H=(0,l.Z)(k),X=y&&H?`${H}-helper-text`:void 0,V=C&&H?`${H}-label`:void 0,K=jt[j],Q=(0,x.jsx)(K,(0,o.Z)({"aria-describedby":X,autoComplete:i,autoFocus:d,defaultValue:m,fullWidth:f,multiline:I,name:B,rows:$,maxRows:F,minRows:W,type:D,value:_,id:H,inputRef:E,onBlur:M,onChange:Z,onFocus:T,onClick:S,placeholder:J,inputProps:z},G,w));return(0,x.jsxs)(Ot,(0,o.Z)({className:(0,a.Z)(q.root,p),disabled:h,error:g,fullWidth:f,ref:t,required:R,color:u,variant:j,ownerState:N},O,{children:[null!=C&&""!==C&&(0,x.jsx)(Je,(0,o.Z)({htmlFor:H,id:V},v,{children:C})),P?(0,x.jsx)(Lt,(0,o.Z)({"aria-describedby":X,id:H,labelId:V,value:_,input:Q},L,{children:A})):Q,y&&(0,x.jsx)(Ge,(0,o.Z)({id:X},b,{children:y}))]}))}))},9488:(e,t,n)=>{"use strict";n.d(t,{Z:()=>y});var o=n(7366),r=n(959),i=n(4529),a=n(5924),s=n(5061),l=n(5300),d=n(2280),c=n(5428),A=n(5083),p=n(7810);function u(e){return(0,p.Z)("MuiSvgIcon",e)}(0,A.Z)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var m=n(1527);const h=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],g=(0,c.ZP)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,"inherit"!==n.color&&t[`color${(0,l.Z)(n.color)}`],t[`fontSize${(0,l.Z)(n.fontSize)}`]]}})((({theme:e,ownerState:t})=>{var n,o,r,i,a,s,l,d,c,A,p,u,m;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(n=e.transitions)||null==(o=n.create)?void 0:o.call(n,"fill",{duration:null==(r=e.transitions)||null==(r=r.duration)?void 0:r.shorter}),fontSize:{inherit:"inherit",small:(null==(i=e.typography)||null==(a=i.pxToRem)?void 0:a.call(i,20))||"1.25rem",medium:(null==(s=e.typography)||null==(l=s.pxToRem)?void 0:l.call(s,24))||"1.5rem",large:(null==(d=e.typography)||null==(c=d.pxToRem)?void 0:c.call(d,35))||"2.1875rem"}[t.fontSize],color:null!=(A=null==(p=(e.vars||e).palette)||null==(p=p[t.color])?void 0:p.main)?A:{action:null==(u=(e.vars||e).palette)||null==(u=u.action)?void 0:u.active,disabled:null==(m=(e.vars||e).palette)||null==(m=m.action)?void 0:m.disabled,inherit:void 0}[t.color]}})),b=r.forwardRef((function(e,t){const n=(0,d.Z)({props:e,name:"MuiSvgIcon"}),{children:c,className:A,color:p="inherit",component:b="svg",fontSize:f="medium",htmlColor:y,inheritViewBox:x=!1,titleAccess:k,viewBox:v="0 0 24 24"}=n,z=(0,i.Z)(n,h),w=r.isValidElement(c)&&"svg"===c.type,E=(0,o.Z)({},n,{color:p,component:b,fontSize:f,instanceFontSize:e.fontSize,inheritViewBox:x,viewBox:v,hasSvgAsChild:w}),C={};x||(C.viewBox=v);const F=(e=>{const{color:t,fontSize:n,classes:o}=e,r={root:["root","inherit"!==t&&`color${(0,l.Z)(t)}`,`fontSize${(0,l.Z)(n)}`]};return(0,s.Z)(r,u,o)})(E);return(0,m.jsxs)(g,(0,o.Z)({as:b,className:(0,a.Z)(F.root,A),focusable:"false",color:y,"aria-hidden":!k||void 0,role:k?"img":void 0,ref:t},C,z,w&&c.props,{ownerState:E,children:[w?c.props.children:c,k?(0,m.jsx)("title",{children:k}):null]}))}));b.muiName="SvgIcon";const f=b;function y(e,t){function n(n,r){return(0,m.jsx)(f,(0,o.Z)({"data-testid":`${t}Icon`,ref:r},n,{children:e}))}return n.muiName=f.muiName,r.memo(r.forwardRef(n))}},9731:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>r.Z,createChainedFunction:()=>i,createSvgIcon:()=>a.Z,debounce:()=>s.Z,deprecatedPropType:()=>l,isMuiElement:()=>d.Z,ownerDocument:()=>c.Z,ownerWindow:()=>A.Z,requirePropFactory:()=>p,setRef:()=>u,unstable_ClassNameGenerator:()=>k,unstable_useEnhancedEffect:()=>m.Z,unstable_useId:()=>h,unsupportedProp:()=>g,useControlled:()=>b.Z,useEventCallback:()=>f.Z,useForkRef:()=>y.Z,useIsFocusVisible:()=>x.Z});var o=n(6297),r=n(5300);const i=n(1122).Z;var a=n(9488),s=n(9435);const l=function(e,t){return()=>null};var d=n(9162),c=n(9703),A=n(9573);n(7605);const p=function(e,t){return()=>null},u=n(9186).Z;var m=n(9948);const h=n(5009).Z,g=function(e,t,n,o,r){return null};var b=n(6028),f=n(6395),y=n(1858),x=n(591);const k={configure:e=>{o.Z.configure(e)}}},9162:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o=n(959);const r=function(e,t){return o.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}},6028:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o=n(959);const r=function({controlled:e,default:t,name:n,state:r="value"}){const{current:i}=o.useRef(void 0!==e),[a,s]=o.useState(t);return[i?e:a,o.useCallback((e=>{i||s(e)}),[])]}},9948:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const o=n(3927).Z},6395:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const o=n(5397).Z},591:(e,t,n)=>{"use strict";n.d(t,{Z:()=>A});var o=n(959);let r,i=!0,a=!1;const s={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function l(e){e.metaKey||e.altKey||e.ctrlKey||(i=!0)}function d(){i=!1}function c(){"hidden"===this.visibilityState&&a&&(i=!0)}const A=function(){const e=o.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",l,!0),t.addEventListener("mousedown",d,!0),t.addEventListener("pointerdown",d,!0),t.addEventListener("touchstart",d,!0),t.addEventListener("visibilitychange",c,!0))}),[]),t=o.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return i||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!s[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(a=!0,window.clearTimeout(r),r=window.setTimeout((()=>{a=!1}),100),t.current=!1,!0)},ref:e}}},5009:(e,t,n)=>{"use strict";var o;n.d(t,{Z:()=>s});var r=n(959);let i=0;const a=(o||(o=n.t(r,2)))["useId".toString()];function s(e){if(void 0!==a){const t=a();return null!=e?e:t}return function(e){const[t,n]=r.useState(e),o=e||t;return r.useEffect((()=>{null==t&&(i+=1,n(`mui-${i}`))}),[t]),o}(e)}},4340:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var o=n(187),r=n.n(o),i=n(3282),a=n.n(i),s=n(6668),l=n.n(s),d=new URL(n(1251),n.b),c=a()(r()),A=l()(d);c.push([e.id,`@media (prefers-color-scheme: dark) {\n  .JTIzpWAWzFszir0t9BAM {\n    color-scheme: dark;\n    --color-prettylights-syntax-comment: #8b949e;\n    --color-prettylights-syntax-constant: #79c0ff;\n    --color-prettylights-syntax-entity: #d2a8ff;\n    --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\n    --color-prettylights-syntax-entity-tag: #7ee787;\n    --color-prettylights-syntax-keyword: #ff7b72;\n    --color-prettylights-syntax-string: #a5d6ff;\n    --color-prettylights-syntax-variable: #ffa657;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\n    --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\n    --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\n    --color-prettylights-syntax-carriage-return-text: #f0f6fc;\n    --color-prettylights-syntax-carriage-return-bg: #b62324;\n    --color-prettylights-syntax-string-regexp: #7ee787;\n    --color-prettylights-syntax-markup-list: #f2cc60;\n    --color-prettylights-syntax-markup-heading: #1f6feb;\n    --color-prettylights-syntax-markup-italic: #c9d1d9;\n    --color-prettylights-syntax-markup-bold: #c9d1d9;\n    --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\n    --color-prettylights-syntax-markup-deleted-bg: #67060c;\n    --color-prettylights-syntax-markup-inserted-text: #aff5b4;\n    --color-prettylights-syntax-markup-inserted-bg: #033a16;\n    --color-prettylights-syntax-markup-changed-text: #ffdfb6;\n    --color-prettylights-syntax-markup-changed-bg: #5a1e02;\n    --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\n    --color-prettylights-syntax-markup-ignored-bg: #1158c7;\n    --color-prettylights-syntax-meta-diff-range: #d2a8ff;\n    --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\n    --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\n    --color-fg-default: #c9d1d9;\n    --color-fg-muted: #8b949e;\n    --color-fg-subtle: #6e7681;\n    --color-canvas-default: #0d1117;\n    --color-canvas-subtle: #161b22;\n    --color-border-default: #30363d;\n    --color-border-muted: #21262d;\n    --color-neutral-muted: rgba(110, 118, 129, 0.4);\n    --color-accent-fg: #58a6ff;\n    --color-accent-emphasis: #1f6feb;\n    --color-attention-subtle: rgba(187, 128, 9, 0.15);\n    --color-danger-fg: #f85149;\n  }\n}\n@media (prefers-color-scheme: light) {\n  .JTIzpWAWzFszir0t9BAM {\n    color-scheme: light;\n    --color-prettylights-syntax-comment: #6e7781;\n    --color-prettylights-syntax-constant: #0550ae;\n    --color-prettylights-syntax-entity: #8250df;\n    --color-prettylights-syntax-storage-modifier-import: #24292f;\n    --color-prettylights-syntax-entity-tag: #116329;\n    --color-prettylights-syntax-keyword: #cf222e;\n    --color-prettylights-syntax-string: #0a3069;\n    --color-prettylights-syntax-variable: #953800;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\n    --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\n    --color-prettylights-syntax-invalid-illegal-bg: #82071e;\n    --color-prettylights-syntax-carriage-return-text: #f6f8fa;\n    --color-prettylights-syntax-carriage-return-bg: #cf222e;\n    --color-prettylights-syntax-string-regexp: #116329;\n    --color-prettylights-syntax-markup-list: #3b2300;\n    --color-prettylights-syntax-markup-heading: #0550ae;\n    --color-prettylights-syntax-markup-italic: #24292f;\n    --color-prettylights-syntax-markup-bold: #24292f;\n    --color-prettylights-syntax-markup-deleted-text: #82071e;\n    --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\n    --color-prettylights-syntax-markup-inserted-text: #116329;\n    --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\n    --color-prettylights-syntax-markup-changed-text: #953800;\n    --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\n    --color-prettylights-syntax-markup-ignored-text: #eaeef2;\n    --color-prettylights-syntax-markup-ignored-bg: #0550ae;\n    --color-prettylights-syntax-meta-diff-range: #8250df;\n    --color-prettylights-syntax-brackethighlighter-angle: #57606a;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\n    --color-prettylights-syntax-constant-other-reference-link: #0a3069;\n    --color-fg-default: #24292f;\n    --color-fg-muted: #57606a;\n    --color-fg-subtle: #6e7781;\n    --color-canvas-default: #ffffff;\n    --color-canvas-subtle: #f6f8fa;\n    --color-border-default: #d0d7de;\n    --color-border-muted: hsl(210, 18%, 87%);\n    --color-neutral-muted: rgba(175, 184, 193, 0.2);\n    --color-accent-fg: #0969da;\n    --color-accent-emphasis: #0969da;\n    --color-attention-subtle: #fff8c5;\n    --color-danger-fg: #cf222e;\n  }\n}\n.JTIzpWAWzFszir0t9BAM {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  margin: 0;\n  color: var(--color-fg-default);\n  background-color: var(--color-canvas-default);\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n.JTIzpWAWzFszir0t9BAM .ZtsvEhcDSF51AlNAw5bX {\n  display: inline-block;\n  fill: currentColor;\n  vertical-align: text-bottom;\n}\n.JTIzpWAWzFszir0t9BAM h1:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h2:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h3:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h4:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h5:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h6:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before {\n  width: 16px;\n  height: 16px;\n  content: ' ';\n  display: inline-block;\n  background-color: currentColor;\n  -webkit-mask-image: url(${A});\n  mask-image: url(${A});\n}\n.JTIzpWAWzFszir0t9BAM details,\n.JTIzpWAWzFszir0t9BAM figcaption,\n.JTIzpWAWzFszir0t9BAM figure {\n  display: block;\n}\n.JTIzpWAWzFszir0t9BAM summary {\n  display: list-item;\n}\n.JTIzpWAWzFszir0t9BAM [hidden] {\n  display: none !important;\n}\n.JTIzpWAWzFszir0t9BAM a {\n  background-color: transparent;\n  color: var(--color-accent-fg);\n  text-decoration: none;\n}\n.JTIzpWAWzFszir0t9BAM abbr[title] {\n  border-bottom: none;\n  text-decoration: underline dotted;\n}\n.JTIzpWAWzFszir0t9BAM b,\n.JTIzpWAWzFszir0t9BAM strong {\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n.JTIzpWAWzFszir0t9BAM dfn {\n  font-style: italic;\n}\n.JTIzpWAWzFszir0t9BAM h1 {\n  margin: 0.67em 0;\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n.JTIzpWAWzFszir0t9BAM mark {\n  background-color: var(--color-attention-subtle);\n  color: var(--color-fg-default);\n}\n.JTIzpWAWzFszir0t9BAM small {\n  font-size: 90%;\n}\n.JTIzpWAWzFszir0t9BAM sub,\n.JTIzpWAWzFszir0t9BAM sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.JTIzpWAWzFszir0t9BAM sub {\n  bottom: -0.25em;\n}\n.JTIzpWAWzFszir0t9BAM sup {\n  top: -0.5em;\n}\n.JTIzpWAWzFszir0t9BAM img {\n  border-style: none;\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: var(--color-canvas-default);\n}\n.JTIzpWAWzFszir0t9BAM code,\n.JTIzpWAWzFszir0t9BAM kbd,\n.JTIzpWAWzFszir0t9BAM pre,\n.JTIzpWAWzFszir0t9BAM samp {\n  font-family: monospace;\n  font-size: 1em;\n}\n.JTIzpWAWzFszir0t9BAM figure {\n  margin: 1em 40px;\n}\n.JTIzpWAWzFszir0t9BAM hr {\n  box-sizing: content-box;\n  overflow: hidden;\n  background: transparent;\n  border-bottom: 1px solid var(--color-border-muted);\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: var(--color-border-default);\n  border: 0;\n}\n.JTIzpWAWzFszir0t9BAM input {\n  font: inherit;\n  margin: 0;\n  overflow: visible;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n.JTIzpWAWzFszir0t9BAM [type=button],\n.JTIzpWAWzFszir0t9BAM [type=reset],\n.JTIzpWAWzFszir0t9BAM [type=submit] {\n  -webkit-appearance: button;\n}\n.JTIzpWAWzFszir0t9BAM [type=checkbox],\n.JTIzpWAWzFszir0t9BAM [type=radio] {\n  box-sizing: border-box;\n  padding: 0;\n}\n.JTIzpWAWzFszir0t9BAM [type=number]::-webkit-inner-spin-button,\n.JTIzpWAWzFszir0t9BAM [type=number]::-webkit-outer-spin-button {\n  height: auto;\n}\n.JTIzpWAWzFszir0t9BAM [type=search]::-webkit-search-cancel-button,\n.JTIzpWAWzFszir0t9BAM [type=search]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n.JTIzpWAWzFszir0t9BAM ::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.54;\n}\n.JTIzpWAWzFszir0t9BAM ::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n.JTIzpWAWzFszir0t9BAM a:hover {\n  text-decoration: underline;\n}\n.JTIzpWAWzFszir0t9BAM ::placeholder {\n  color: var(--color-fg-subtle);\n  opacity: 1;\n}\n.JTIzpWAWzFszir0t9BAM hr::before {\n  display: table;\n  content: "";\n}\n.JTIzpWAWzFszir0t9BAM hr::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n.JTIzpWAWzFszir0t9BAM table {\n  border-spacing: 0;\n  border-collapse: collapse;\n  display: block;\n  width: max-content;\n  max-width: 100%;\n  overflow: auto;\n}\n.JTIzpWAWzFszir0t9BAM td,\n.JTIzpWAWzFszir0t9BAM th {\n  padding: 0;\n}\n.JTIzpWAWzFszir0t9BAM details summary {\n  cursor: pointer;\n}\n.JTIzpWAWzFszir0t9BAM details:not([open]) > *:not(summary) {\n  display: none !important;\n}\n.JTIzpWAWzFszir0t9BAM a:focus,\n.JTIzpWAWzFszir0t9BAM [role=button]:focus,\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus,\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus {\n  outline: 2px solid var(--color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n.JTIzpWAWzFszir0t9BAM a:focus:not(:focus-visible),\n.JTIzpWAWzFszir0t9BAM [role=button]:focus:not(:focus-visible),\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus:not(:focus-visible),\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus:not(:focus-visible) {\n  outline: solid 1px transparent;\n}\n.JTIzpWAWzFszir0t9BAM a:focus-visible,\n.JTIzpWAWzFszir0t9BAM [role=button]:focus-visible,\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus-visible,\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus-visible {\n  outline: 2px solid var(--color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n.JTIzpWAWzFszir0t9BAM a:not([class]):focus,\n.JTIzpWAWzFszir0t9BAM a:not([class]):focus-visible,\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus,\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus-visible,\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus,\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus-visible {\n  outline-offset: 0;\n}\n.JTIzpWAWzFszir0t9BAM kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  line-height: 10px;\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  background-color: var(--color-canvas-subtle);\n  border: solid 1px var(--color-neutral-muted);\n  border-bottom-color: var(--color-neutral-muted);\n  border-radius: 6px;\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\n}\n.JTIzpWAWzFszir0t9BAM h1,\n.JTIzpWAWzFszir0t9BAM h2,\n.JTIzpWAWzFszir0t9BAM h3,\n.JTIzpWAWzFszir0t9BAM h4,\n.JTIzpWAWzFszir0t9BAM h5,\n.JTIzpWAWzFszir0t9BAM h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: var(--base-text-weight-semibold, 600);\n  line-height: 1.25;\n}\n.JTIzpWAWzFszir0t9BAM h2 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n.JTIzpWAWzFszir0t9BAM h3 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1.25em;\n}\n.JTIzpWAWzFszir0t9BAM h4 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1em;\n}\n.JTIzpWAWzFszir0t9BAM h5 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 0.875em;\n}\n.JTIzpWAWzFszir0t9BAM h6 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 0.85em;\n  color: var(--color-fg-muted);\n}\n.JTIzpWAWzFszir0t9BAM p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n.JTIzpWAWzFszir0t9BAM blockquote {\n  margin: 0;\n  padding: 0 1em;\n  color: var(--color-fg-muted);\n  border-left: 0.25em solid var(--color-border-default);\n}\n.JTIzpWAWzFszir0t9BAM ul,\n.JTIzpWAWzFszir0t9BAM ol {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 2em;\n}\n.JTIzpWAWzFszir0t9BAM ol ol,\n.JTIzpWAWzFszir0t9BAM ul ol {\n  list-style-type: lower-roman;\n}\n.JTIzpWAWzFszir0t9BAM ul ul ol,\n.JTIzpWAWzFszir0t9BAM ul ol ol,\n.JTIzpWAWzFszir0t9BAM ol ul ol,\n.JTIzpWAWzFszir0t9BAM ol ol ol {\n  list-style-type: lower-alpha;\n}\n.JTIzpWAWzFszir0t9BAM dd {\n  margin-left: 0;\n}\n.JTIzpWAWzFszir0t9BAM tt,\n.JTIzpWAWzFszir0t9BAM code,\n.JTIzpWAWzFszir0t9BAM samp {\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  font-size: 12px;\n}\n.JTIzpWAWzFszir0t9BAM pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  font-size: 12px;\n  word-wrap: normal;\n}\n.JTIzpWAWzFszir0t9BAM .ZtsvEhcDSF51AlNAw5bX {\n  display: inline-block;\n  overflow: visible !important;\n  vertical-align: text-bottom;\n  fill: currentColor;\n}\n.JTIzpWAWzFszir0t9BAM input::-webkit-outer-spin-button,\n.JTIzpWAWzFszir0t9BAM input::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n  appearance: none;\n}\n.JTIzpWAWzFszir0t9BAM::before {\n  display: table;\n  content: "";\n}\n.JTIzpWAWzFszir0t9BAM::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n.JTIzpWAWzFszir0t9BAM > *:first-child {\n  margin-top: 0 !important;\n}\n.JTIzpWAWzFszir0t9BAM > *:last-child {\n  margin-bottom: 0 !important;\n}\n.JTIzpWAWzFszir0t9BAM a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n.JTIzpWAWzFszir0t9BAM .IA6SgHbm0Y7OBhOVhkTA {\n  color: var(--color-danger-fg);\n}\n.JTIzpWAWzFszir0t9BAM .XGxKfA1eh75FuEQvL6pd {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n.JTIzpWAWzFszir0t9BAM .XGxKfA1eh75FuEQvL6pd:focus {\n  outline: none;\n}\n.JTIzpWAWzFszir0t9BAM p,\n.JTIzpWAWzFszir0t9BAM blockquote,\n.JTIzpWAWzFszir0t9BAM ul,\n.JTIzpWAWzFszir0t9BAM ol,\n.JTIzpWAWzFszir0t9BAM dl,\n.JTIzpWAWzFszir0t9BAM table,\n.JTIzpWAWzFszir0t9BAM pre,\n.JTIzpWAWzFszir0t9BAM details {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n.JTIzpWAWzFszir0t9BAM blockquote > :first-child {\n  margin-top: 0;\n}\n.JTIzpWAWzFszir0t9BAM blockquote > :last-child {\n  margin-bottom: 0;\n}\n.JTIzpWAWzFszir0t9BAM h1 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h2 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h3 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h4 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h5 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h6 .dWtgNrd2FLAIgXW_saQM {\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  visibility: hidden;\n}\n.JTIzpWAWzFszir0t9BAM h1:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h2:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h3:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h4:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h5:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h6:hover .XGxKfA1eh75FuEQvL6pd {\n  text-decoration: none;\n}\n.JTIzpWAWzFszir0t9BAM h1:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h2:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h3:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h4:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h5:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h6:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM {\n  visibility: visible;\n}\n.JTIzpWAWzFszir0t9BAM h1 tt,\n.JTIzpWAWzFszir0t9BAM h1 code,\n.JTIzpWAWzFszir0t9BAM h2 tt,\n.JTIzpWAWzFszir0t9BAM h2 code,\n.JTIzpWAWzFszir0t9BAM h3 tt,\n.JTIzpWAWzFszir0t9BAM h3 code,\n.JTIzpWAWzFszir0t9BAM h4 tt,\n.JTIzpWAWzFszir0t9BAM h4 code,\n.JTIzpWAWzFszir0t9BAM h5 tt,\n.JTIzpWAWzFszir0t9BAM h5 code,\n.JTIzpWAWzFszir0t9BAM h6 tt,\n.JTIzpWAWzFszir0t9BAM h6 code {\n  padding: 0 0.2em;\n  font-size: inherit;\n}\n.JTIzpWAWzFszir0t9BAM summary h1,\n.JTIzpWAWzFszir0t9BAM summary h2,\n.JTIzpWAWzFszir0t9BAM summary h3,\n.JTIzpWAWzFszir0t9BAM summary h4,\n.JTIzpWAWzFszir0t9BAM summary h5,\n.JTIzpWAWzFszir0t9BAM summary h6 {\n  display: inline-block;\n}\n.JTIzpWAWzFszir0t9BAM summary h1 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h2 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h3 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h4 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h5 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h6 .XGxKfA1eh75FuEQvL6pd {\n  margin-left: -40px;\n}\n.JTIzpWAWzFszir0t9BAM summary h1,\n.JTIzpWAWzFszir0t9BAM summary h2 {\n  padding-bottom: 0;\n  border-bottom: 0;\n}\n.JTIzpWAWzFszir0t9BAM ul.Ah464Xli3hvh5g0FxDU6,\n.JTIzpWAWzFszir0t9BAM ol.Ah464Xli3hvh5g0FxDU6 {\n  padding: 0;\n  list-style-type: none;\n}\n.JTIzpWAWzFszir0t9BAM ol[type=a] {\n  list-style-type: lower-alpha;\n}\n.JTIzpWAWzFszir0t9BAM ol[type=A] {\n  list-style-type: upper-alpha;\n}\n.JTIzpWAWzFszir0t9BAM ol[type=i] {\n  list-style-type: lower-roman;\n}\n.JTIzpWAWzFszir0t9BAM ol[type=I] {\n  list-style-type: upper-roman;\n}\n.JTIzpWAWzFszir0t9BAM ol[type="1"] {\n  list-style-type: decimal;\n}\n.JTIzpWAWzFszir0t9BAM div > ol:not([type]) {\n  list-style-type: decimal;\n}\n.JTIzpWAWzFszir0t9BAM ul ul,\n.JTIzpWAWzFszir0t9BAM ul ol,\n.JTIzpWAWzFszir0t9BAM ol ol,\n.JTIzpWAWzFszir0t9BAM ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.JTIzpWAWzFszir0t9BAM li > p {\n  margin-top: 16px;\n}\n.JTIzpWAWzFszir0t9BAM li + li {\n  margin-top: 0.25em;\n}\n.JTIzpWAWzFszir0t9BAM dl {\n  padding: 0;\n}\n.JTIzpWAWzFszir0t9BAM dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n.JTIzpWAWzFszir0t9BAM dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n.JTIzpWAWzFszir0t9BAM table th {\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n.JTIzpWAWzFszir0t9BAM table th,\n.JTIzpWAWzFszir0t9BAM table td {\n  padding: 6px 13px;\n  border: 1px solid var(--color-border-default);\n}\n.JTIzpWAWzFszir0t9BAM table tr {\n  background-color: var(--color-canvas-default);\n  border-top: 1px solid var(--color-border-muted);\n}\n.JTIzpWAWzFszir0t9BAM table tr:nth-child(2n) {\n  background-color: var(--color-canvas-subtle);\n}\n.JTIzpWAWzFszir0t9BAM table img {\n  background-color: transparent;\n}\n.JTIzpWAWzFszir0t9BAM img[align=right] {\n  padding-left: 20px;\n}\n.JTIzpWAWzFszir0t9BAM img[align=left] {\n  padding-right: 20px;\n}\n.JTIzpWAWzFszir0t9BAM .ZS4ACM_E97QtVXIrTh0v {\n  max-width: none;\n  vertical-align: text-top;\n  background-color: transparent;\n}\n.JTIzpWAWzFszir0t9BAM span.lDnbOZAfGYELmWGezfML {\n  display: block;\n  overflow: hidden;\n}\n.JTIzpWAWzFszir0t9BAM span.lDnbOZAfGYELmWGezfML > span {\n  display: block;\n  float: left;\n  width: auto;\n  padding: 7px;\n  margin: 13px 0 0;\n  overflow: hidden;\n  border: 1px solid var(--color-border-default);\n}\n.JTIzpWAWzFszir0t9BAM span.lDnbOZAfGYELmWGezfML span img {\n  display: block;\n  float: left;\n}\n.JTIzpWAWzFszir0t9BAM span.lDnbOZAfGYELmWGezfML span span {\n  display: block;\n  padding: 5px 0 0;\n  clear: both;\n  color: var(--color-fg-default);\n}\n.JTIzpWAWzFszir0t9BAM span.eu2h77uDdxK5MXdfeTZw {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n.JTIzpWAWzFszir0t9BAM span.eu2h77uDdxK5MXdfeTZw > span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: center;\n}\n.JTIzpWAWzFszir0t9BAM span.eu2h77uDdxK5MXdfeTZw span img {\n  margin: 0 auto;\n  text-align: center;\n}\n.JTIzpWAWzFszir0t9BAM span.JTSEVjrxW64bL21abrdJ {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n.JTIzpWAWzFszir0t9BAM span.JTSEVjrxW64bL21abrdJ > span {\n  display: block;\n  margin: 13px 0 0;\n  overflow: hidden;\n  text-align: right;\n}\n.JTIzpWAWzFszir0t9BAM span.JTSEVjrxW64bL21abrdJ span img {\n  margin: 0;\n  text-align: right;\n}\n.JTIzpWAWzFszir0t9BAM span.ZfcdU4S5q9EFQYTDAokN {\n  display: block;\n  float: left;\n  margin-right: 13px;\n  overflow: hidden;\n}\n.JTIzpWAWzFszir0t9BAM span.ZfcdU4S5q9EFQYTDAokN span {\n  margin: 13px 0 0;\n}\n.JTIzpWAWzFszir0t9BAM span.RobxFGLXur1Y7UKmUbGc {\n  display: block;\n  float: right;\n  margin-left: 13px;\n  overflow: hidden;\n}\n.JTIzpWAWzFszir0t9BAM span.RobxFGLXur1Y7UKmUbGc > span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: right;\n}\n.JTIzpWAWzFszir0t9BAM code,\n.JTIzpWAWzFszir0t9BAM tt {\n  padding: 0.2em 0.4em;\n  margin: 0;\n  font-size: 85%;\n  white-space: break-spaces;\n  background-color: var(--color-neutral-muted);\n  border-radius: 6px;\n}\n.JTIzpWAWzFszir0t9BAM code br,\n.JTIzpWAWzFszir0t9BAM tt br {\n  display: none;\n}\n.JTIzpWAWzFszir0t9BAM del code {\n  text-decoration: inherit;\n}\n.JTIzpWAWzFszir0t9BAM samp {\n  font-size: 85%;\n}\n.JTIzpWAWzFszir0t9BAM pre code {\n  font-size: 100%;\n}\n.JTIzpWAWzFszir0t9BAM pre > code {\n  padding: 0;\n  margin: 0;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n.JTIzpWAWzFszir0t9BAM .VdUq4nEhjxaTJ35ZWZj3 {\n  margin-bottom: 16px;\n}\n.JTIzpWAWzFszir0t9BAM .VdUq4nEhjxaTJ35ZWZj3 pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n.JTIzpWAWzFszir0t9BAM .VdUq4nEhjxaTJ35ZWZj3 pre,\n.JTIzpWAWzFszir0t9BAM pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: var(--color-canvas-subtle);\n  border-radius: 6px;\n}\n.JTIzpWAWzFszir0t9BAM pre code,\n.JTIzpWAWzFszir0t9BAM pre tt {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE td,\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE th {\n  padding: 5px;\n  overflow: hidden;\n  font-size: 12px;\n  line-height: 1;\n  text-align: left;\n  white-space: nowrap;\n}\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE .uoPcs60bZ4EnaQf87ive {\n  padding: 10px 8px 9px;\n  text-align: right;\n  background: var(--color-canvas-default);\n  border: 0;\n}\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE tr {\n  border-top: 0;\n}\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE th {\n  font-weight: var(--base-text-weight-semibold, 600);\n  background: var(--color-canvas-subtle);\n  border-top: 0;\n}\n.JTIzpWAWzFszir0t9BAM [data-footnote-ref]::before {\n  content: "[";\n}\n.JTIzpWAWzFszir0t9BAM [data-footnote-ref]::after {\n  content: "]";\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w {\n  font-size: 12px;\n  color: var(--color-fg-muted);\n  border-top: 1px solid var(--color-border-default);\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w ol {\n  padding-left: 16px;\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w ol ul {\n  display: inline-block;\n  padding-left: 16px;\n  margin-top: 16px;\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w li {\n  position: relative;\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w li:target::before {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  bottom: -8px;\n  left: -24px;\n  pointer-events: none;\n  content: "";\n  border: 2px solid var(--color-accent-emphasis);\n  border-radius: 6px;\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w li:target {\n  color: var(--color-fg-default);\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w .W1_qPHD_fO94HaufTQLQ g-emoji {\n  font-family: monospace;\n}\n.JTIzpWAWzFszir0t9BAM .P76fKaPowM9cpiHuRGin {\n  color: var(--color-prettylights-syntax-comment);\n}\n.JTIzpWAWzFszir0t9BAM .jCt3gvtc9gsxyL04trRl,\n.JTIzpWAWzFszir0t9BAM .zuy7DTbEbDxX3x9iJjsQ .tPRYQQCLRp36BnHeYwTD {\n  color: var(--color-prettylights-syntax-constant);\n}\n.JTIzpWAWzFszir0t9BAM .mS7Czrsi8R4w6uIk9uyV,\n.JTIzpWAWzFszir0t9BAM .fEXlqGWpT9EQeh66CyUA {\n  color: var(--color-prettylights-syntax-entity);\n}\n.JTIzpWAWzFszir0t9BAM .KYRbXZ3_oqIQD_jYmmss,\n.JTIzpWAWzFszir0t9BAM .zuy7DTbEbDxX3x9iJjsQ .Onf1xGhm1CyIKCUqv6Vt {\n  color: var(--color-prettylights-syntax-storage-modifier-import);\n}\n.JTIzpWAWzFszir0t9BAM .bML4Cf9GLbf5q17kpKv6 {\n  color: var(--color-prettylights-syntax-entity-tag);\n}\n.JTIzpWAWzFszir0t9BAM .D3WGOCVXjgPFkMdT5njO {\n  color: var(--color-prettylights-syntax-keyword);\n}\n.JTIzpWAWzFszir0t9BAM .zuy7DTbEbDxX3x9iJjsQ,\n.JTIzpWAWzFszir0t9BAM .qqPwBDvIt9NfS3oysOeg,\n.JTIzpWAWzFszir0t9BAM .zuy7DTbEbDxX3x9iJjsQ .ngxODS0dsF3_9UYML_jK .Onf1xGhm1CyIKCUqv6Vt,\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq,\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq .alqCJ_RmYevYOsGV2npQ,\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq ._JjkFZbcwE5FrjyToawY,\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq .rpODeGZWpCHdQeJ9iNFh {\n  color: var(--color-prettylights-syntax-string);\n}\n.JTIzpWAWzFszir0t9BAM .tPRYQQCLRp36BnHeYwTD,\n.JTIzpWAWzFszir0t9BAM .UwBKloNe0dpM10LYc9gH {\n  color: var(--color-prettylights-syntax-variable);\n}\n.JTIzpWAWzFszir0t9BAM .YwnHPpSzGb2oO4ckgFiE {\n  color: var(--color-prettylights-syntax-brackethighlighter-unmatched);\n}\n.JTIzpWAWzFszir0t9BAM .xG7JZyGUso7EejDEcqPj {\n  color: var(--color-prettylights-syntax-invalid-illegal-text);\n  background-color: var(--color-prettylights-syntax-invalid-illegal-bg);\n}\n.JTIzpWAWzFszir0t9BAM .HsozdGaRrbnEFskf5GM5 {\n  color: var(--color-prettylights-syntax-carriage-return-text);\n  background-color: var(--color-prettylights-syntax-carriage-return-bg);\n}\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq .alqCJ_RmYevYOsGV2npQ {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-string-regexp);\n}\n.JTIzpWAWzFszir0t9BAM .QCudWQ_NcGbMAjWek5zw {\n  color: var(--color-prettylights-syntax-markup-list);\n}\n.JTIzpWAWzFszir0t9BAM .vtRO86GQ58WMpNkZmEFb,\n.JTIzpWAWzFszir0t9BAM .vtRO86GQ58WMpNkZmEFb .fEXlqGWpT9EQeh66CyUA,\n.JTIzpWAWzFszir0t9BAM .MOLUJS3ucw2wi08L8owu {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-markup-heading);\n}\n.JTIzpWAWzFszir0t9BAM .aGEFAwvkd7f_tpL163Xx {\n  font-style: italic;\n  color: var(--color-prettylights-syntax-markup-italic);\n}\n.JTIzpWAWzFszir0t9BAM .jKazAlPq8JmjMct4bPxN {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-markup-bold);\n}\n.JTIzpWAWzFszir0t9BAM .BvEH7VV6fJeHNG6aIv7M {\n  color: var(--color-prettylights-syntax-markup-deleted-text);\n  background-color: var(--color-prettylights-syntax-markup-deleted-bg);\n}\n.JTIzpWAWzFszir0t9BAM .t1DHu4D7tHFAdaNdZexf {\n  color: var(--color-prettylights-syntax-markup-inserted-text);\n  background-color: var(--color-prettylights-syntax-markup-inserted-bg);\n}\n.JTIzpWAWzFszir0t9BAM .wgJicwrtajeTkYba3WJS {\n  color: var(--color-prettylights-syntax-markup-changed-text);\n  background-color: var(--color-prettylights-syntax-markup-changed-bg);\n}\n.JTIzpWAWzFszir0t9BAM .nsuM7TFfymO8yvr95F3_ {\n  color: var(--color-prettylights-syntax-markup-ignored-text);\n  background-color: var(--color-prettylights-syntax-markup-ignored-bg);\n}\n.JTIzpWAWzFszir0t9BAM .jPrZaddoZ0MPWaaLf9Hg {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-meta-diff-range);\n}\n.JTIzpWAWzFszir0t9BAM .jkygUO3hOR0HgWl8Vu3I {\n  color: var(--color-prettylights-syntax-brackethighlighter-angle);\n}\n.JTIzpWAWzFszir0t9BAM ._R72N5SC88lk68CWAN9g {\n  color: var(--color-prettylights-syntax-sublimelinter-gutter-mark);\n}\n.JTIzpWAWzFszir0t9BAM .HqCHQQDtoZGYCY_Aiuby {\n  text-decoration: underline;\n  color: var(--color-prettylights-syntax-constant-other-reference-link);\n}\n.JTIzpWAWzFszir0t9BAM g-emoji {\n  display: inline-block;\n  min-width: 1ch;\n  font-family: "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-size: 1em;\n  font-style: normal !important;\n  font-weight: var(--base-text-weight-normal, 400);\n  line-height: 1;\n  vertical-align: -0.075em;\n}\n.JTIzpWAWzFszir0t9BAM g-emoji img {\n  width: 1em;\n  height: 1em;\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku {\n  list-style-type: none;\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku label {\n  font-weight: var(--base-text-weight-normal, 400);\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku.juEHlr9g1BeZBlNEC_bS label {\n  cursor: pointer;\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku + .z8yi6slqhr75T9wpK_ku {\n  margin-top: 4px;\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku .JXsFqSdSlkBLe8YHtVHc {\n  display: none;\n}\n.JTIzpWAWzFszir0t9BAM .J6bqF00Yji6efKXcYLqA {\n  margin: 0 0.2em 0.25em -1.4em;\n  vertical-align: middle;\n}\n.JTIzpWAWzFszir0t9BAM .tpfsYJHavqwf9F0ociP3:dir(rtl) .J6bqF00Yji6efKXcYLqA {\n  margin: 0 -1.6em 0.25em 0.2em;\n}\n.JTIzpWAWzFszir0t9BAM .tpfsYJHavqwf9F0ociP3 {\n  position: relative;\n}\n.JTIzpWAWzFszir0t9BAM .tpfsYJHavqwf9F0ociP3:hover .EcA5MpPXXIr0gpYjQhxV,\n.JTIzpWAWzFszir0t9BAM .tpfsYJHavqwf9F0ociP3:focus-within .EcA5MpPXXIr0gpYjQhxV {\n  display: block;\n  width: auto;\n  height: 24px;\n  overflow: visible;\n  clip: auto;\n}\n.JTIzpWAWzFszir0t9BAM ::-webkit-calendar-picker-indicator {\n  filter: invert(50%);\n}\n`,"",{version:3,sources:["webpack://./node_modules/.pnpm/github-markdown-css@5.2.0/node_modules/github-markdown-css/github-markdown.css"],names:[],mappings:"AAAA;EACE;IACE,kBAAA;IACA,4CAAA;IACA,6CAAA;IACA,2CAAA;IACA,4DAAA;IACA,+CAAA;IACA,4CAAA;IACA,2CAAA;IACA,6CAAA;IACA,iEAAA;IACA,yDAAA;IACA,uDAAA;IACA,yDAAA;IACA,uDAAA;IACA,kDAAA;IACA,gDAAA;IACA,mDAAA;IACA,kDAAA;IACA,gDAAA;IACA,wDAAA;IACA,sDAAA;IACA,yDAAA;IACA,uDAAA;IACA,wDAAA;IACA,sDAAA;IACA,wDAAA;IACA,sDAAA;IACA,oDAAA;IACA,6DAAA;IACA,8DAAA;IACA,kEAAA;IACA,2BAAA;IACA,yBAAA;IACA,0BAAA;IACA,+BAAA;IACA,8BAAA;IACA,+BAAA;IACA,6BAAA;IACA,+CAAA;IACA,0BAAA;IACA,gCAAA;IACA,iDAAA;IACA,0BAAA;EACF;AACF;AAEA;EACE;IACE,mBAAA;IACA,4CAAA;IACA,6CAAA;IACA,2CAAA;IACA,4DAAA;IACA,+CAAA;IACA,4CAAA;IACA,2CAAA;IACA,6CAAA;IACA,iEAAA;IACA,yDAAA;IACA,uDAAA;IACA,yDAAA;IACA,uDAAA;IACA,kDAAA;IACA,gDAAA;IACA,mDAAA;IACA,kDAAA;IACA,gDAAA;IACA,wDAAA;IACA,sDAAA;IACA,yDAAA;IACA,uDAAA;IACA,wDAAA;IACA,sDAAA;IACA,wDAAA;IACA,sDAAA;IACA,oDAAA;IACA,6DAAA;IACA,8DAAA;IACA,kEAAA;IACA,2BAAA;IACA,yBAAA;IACA,0BAAA;IACA,+BAAA;IACA,8BAAA;IACA,+BAAA;IACA,wCAAA;IACA,+CAAA;IACA,0BAAA;IACA,gCAAA;IACA,iCAAA;IACA,0BAAA;EAAF;AACF;AAGA;EACE,0BAAA;EACA,8BAAA;EACA,SAAA;EACA,8BAAA;EACA,6CAAA;EACA,4IAAA;EACA,eAAA;EACA,gBAAA;EACA,qBAAA;AADF;AAIA;EACE,qBAAA;EACA,kBAAA;EACA,2BAAA;AAFF;AAKA;;;;;;EAME,WAAA;EACA,YAAA;EACA,YAAA;EACA,qBAAA;EACA,8BAAA;EACA,2DAAA;EACA,mDAAA;AAHF;AAMA;;;EAGE,cAAA;AAJF;AAOA;EACE,kBAAA;AALF;AAQA;EACE,wBAAA;AANF;AASA;EACE,6BAAA;EACA,6BAAA;EACA,qBAAA;AAPF;AAUA;EACE,mBAAA;EACA,iCAAA;AARF;AAWA;;EAEE,kDAAA;AATF;AAYA;EACE,kBAAA;AAVF;AAaA;EACE,gBAAA;EACA,kDAAA;EACA,qBAAA;EACA,cAAA;EACA,kDAAA;AAXF;AAcA;EACE,+CAAA;EACA,8BAAA;AAZF;AAeA;EACE,cAAA;AAbF;AAgBA;;EAEE,cAAA;EACA,cAAA;EACA,kBAAA;EACA,wBAAA;AAdF;AAiBA;EACE,eAAA;AAfF;AAkBA;EACE,WAAA;AAhBF;AAmBA;EACE,kBAAA;EACA,eAAA;EACA,uBAAA;EACA,6CAAA;AAjBF;AAoBA;;;;EAIE,sBAAA;EACA,cAAA;AAlBF;AAqBA;EACE,gBAAA;AAnBF;AAsBA;EACE,uBAAA;EACA,gBAAA;EACA,uBAAA;EACA,kDAAA;EACA,cAAA;EACA,UAAA;EACA,cAAA;EACA,6CAAA;EACA,SAAA;AApBF;AAuBA;EACE,aAAA;EACA,SAAA;EACA,iBAAA;EACA,oBAAA;EACA,kBAAA;EACA,oBAAA;AArBF;AAwBA;;;EAGE,0BAAA;AAtBF;AAyBA;;EAEE,sBAAA;EACA,UAAA;AAvBF;AA0BA;;EAEE,YAAA;AAxBF;AA2BA;;EAEE,wBAAA;AAzBF;AA4BA;EACE,cAAA;EACA,aAAA;AA1BF;AA6BA;EACE,0BAAA;EACA,aAAA;AA3BF;AA8BA;EACE,0BAAA;AA5BF;AA+BA;EACE,6BAAA;EACA,UAAA;AA7BF;AAgCA;EACE,cAAA;EACA,WAAA;AA9BF;AAiCA;EACE,cAAA;EACA,WAAA;EACA,WAAA;AA/BF;AAkCA;EACE,iBAAA;EACA,yBAAA;EACA,cAAA;EACA,kBAAA;EACA,eAAA;EACA,cAAA;AAhCF;AAmCA;;EAEE,UAAA;AAjCF;AAoCA;EACE,eAAA;AAlCF;AAqCA;EACE,wBAAA;AAnCF;AAsCA;;;;EAIE,yCAAA;EACA,oBAAA;EACA,gBAAA;AApCF;AAuCA;;;;EAIE,8BAAA;AArCF;AAwCA;;;;EAIE,yCAAA;EACA,oBAAA;EACA,gBAAA;AAtCF;AAyCA;;;;;;EAME,iBAAA;AAvCF;AA0CA;EACE,qBAAA;EACA,gBAAA;EACA,6FAAA;EACA,iBAAA;EACA,8BAAA;EACA,sBAAA;EACA,4CAAA;EACA,4CAAA;EACA,+CAAA;EACA,kBAAA;EACA,qDAAA;AAxCF;AA2CA;;;;;;EAME,gBAAA;EACA,mBAAA;EACA,kDAAA;EACA,iBAAA;AAzCF;AA4CA;EACE,kDAAA;EACA,qBAAA;EACA,gBAAA;EACA,kDAAA;AA1CF;AA6CA;EACE,kDAAA;EACA,iBAAA;AA3CF;AA8CA;EACE,kDAAA;EACA,cAAA;AA5CF;AA+CA;EACE,kDAAA;EACA,kBAAA;AA7CF;AAgDA;EACE,kDAAA;EACA,iBAAA;EACA,4BAAA;AA9CF;AAiDA;EACE,aAAA;EACA,mBAAA;AA/CF;AAkDA;EACE,SAAA;EACA,cAAA;EACA,4BAAA;EACA,qDAAA;AAhDF;AAmDA;;EAEE,aAAA;EACA,gBAAA;EACA,iBAAA;AAjDF;AAoDA;;EAEE,4BAAA;AAlDF;AAqDA;;;;EAIE,4BAAA;AAnDF;AAsDA;EACE,cAAA;AApDF;AAuDA;;;EAGE,+FAAA;EACA,eAAA;AArDF;AAwDA;EACE,aAAA;EACA,gBAAA;EACA,+FAAA;EACA,eAAA;EACA,iBAAA;AAtDF;AAyDA;EACE,qBAAA;EACA,4BAAA;EACA,2BAAA;EACA,kBAAA;AAvDF;AA0DA;;EAEE,SAAA;EACA,wBAAA;EACA,gBAAA;AAxDF;AA2DA;EACE,cAAA;EACA,WAAA;AAzDF;AA4DA;EACE,cAAA;EACA,WAAA;EACA,WAAA;AA1DF;AA6DA;EACE,wBAAA;AA3DF;AA8DA;EACE,2BAAA;AA5DF;AA+DA;EACE,cAAA;EACA,qBAAA;AA7DF;AAgEA;EACE,6BAAA;AA9DF;AAiEA;EACE,WAAA;EACA,kBAAA;EACA,kBAAA;EACA,cAAA;AA/DF;AAkEA;EACE,aAAA;AAhEF;AAmEA;;;;;;;;EAQE,aAAA;EACA,mBAAA;AAjEF;AAoEA;EACE,aAAA;AAlEF;AAqEA;EACE,gBAAA;AAnEF;AAsEA;;;;;;EAME,8BAAA;EACA,sBAAA;EACA,kBAAA;AApEF;AAuEA;;;;;;EAME,qBAAA;AArEF;AAwEA;;;;;;EAME,mBAAA;AAtEF;AAyEA;;;;;;;;;;;;EAYE,gBAAA;EACA,kBAAA;AAvEF;AA0EA;;;;;;EAME,qBAAA;AAxEF;AA2EA;;;;;;EAME,kBAAA;AAzEF;AA4EA;;EAEE,iBAAA;EACA,gBAAA;AA1EF;AA6EA;;EAEE,UAAA;EACA,qBAAA;AA3EF;AA8EA;EACE,4BAAA;AA5EF;AA+EA;EACE,4BAAA;AA7EF;AAgFA;EACE,4BAAA;AA9EF;AAiFA;EACE,4BAAA;AA/EF;AAkFA;EACE,wBAAA;AAhFF;AAmFA;EACE,wBAAA;AAjFF;AAoFA;;;;EAIE,aAAA;EACA,gBAAA;AAlFF;AAqFA;EACE,gBAAA;AAnFF;AAsFA;EACE,kBAAA;AApFF;AAuFA;EACE,UAAA;AArFF;AAwFA;EACE,UAAA;EACA,gBAAA;EACA,cAAA;EACA,kBAAA;EACA,kDAAA;AAtFF;AAyFA;EACE,eAAA;EACA,mBAAA;AAvFF;AA0FA;EACE,kDAAA;AAxFF;AA2FA;;EAEE,iBAAA;EACA,6CAAA;AAzFF;AA4FA;EACE,6CAAA;EACA,+CAAA;AA1FF;AA6FA;EACE,4CAAA;AA3FF;AA8FA;EACE,6BAAA;AA5FF;AA+FA;EACE,kBAAA;AA7FF;AAgGA;EACE,mBAAA;AA9FF;AAiGA;EACE,eAAA;EACA,wBAAA;EACA,6BAAA;AA/FF;AAkGA;EACE,cAAA;EACA,gBAAA;AAhGF;AAmGA;EACE,cAAA;EACA,WAAA;EACA,WAAA;EACA,YAAA;EACA,gBAAA;EACA,gBAAA;EACA,6CAAA;AAjGF;AAoGA;EACE,cAAA;EACA,WAAA;AAlGF;AAqGA;EACE,cAAA;EACA,gBAAA;EACA,WAAA;EACA,8BAAA;AAnGF;AAsGA;EACE,cAAA;EACA,gBAAA;EACA,WAAA;AApGF;AAuGA;EACE,cAAA;EACA,mBAAA;EACA,gBAAA;EACA,kBAAA;AArGF;AAwGA;EACE,cAAA;EACA,kBAAA;AAtGF;AAyGA;EACE,cAAA;EACA,gBAAA;EACA,WAAA;AAvGF;AA0GA;EACE,cAAA;EACA,gBAAA;EACA,gBAAA;EACA,iBAAA;AAxGF;AA2GA;EACE,SAAA;EACA,iBAAA;AAzGF;AA4GA;EACE,cAAA;EACA,WAAA;EACA,kBAAA;EACA,gBAAA;AA1GF;AA6GA;EACE,gBAAA;AA3GF;AA8GA;EACE,cAAA;EACA,YAAA;EACA,iBAAA;EACA,gBAAA;AA5GF;AA+GA;EACE,cAAA;EACA,mBAAA;EACA,gBAAA;EACA,iBAAA;AA7GF;AAgHA;;EAEE,oBAAA;EACA,SAAA;EACA,cAAA;EACA,yBAAA;EACA,4CAAA;EACA,kBAAA;AA9GF;AAiHA;;EAEE,aAAA;AA/GF;AAkHA;EACE,wBAAA;AAhHF;AAmHA;EACE,cAAA;AAjHF;AAoHA;EACE,eAAA;AAlHF;AAqHA;EACE,UAAA;EACA,SAAA;EACA,kBAAA;EACA,gBAAA;EACA,uBAAA;EACA,SAAA;AAnHF;AAsHA;EACE,mBAAA;AApHF;AAuHA;EACE,gBAAA;EACA,kBAAA;AArHF;AAwHA;;EAEE,aAAA;EACA,cAAA;EACA,cAAA;EACA,iBAAA;EACA,4CAAA;EACA,kBAAA;AAtHF;AAyHA;;EAEE,eAAA;EACA,eAAA;EACA,UAAA;EACA,SAAA;EACA,iBAAA;EACA,oBAAA;EACA,iBAAA;EACA,6BAAA;EACA,SAAA;AAvHF;AA0HA;;EAEE,YAAA;EACA,gBAAA;EACA,eAAA;EACA,cAAA;EACA,gBAAA;EACA,mBAAA;AAxHF;AA2HA;EACE,qBAAA;EACA,iBAAA;EACA,uCAAA;EACA,SAAA;AAzHF;AA4HA;EACE,aAAA;AA1HF;AA6HA;EACE,kDAAA;EACA,sCAAA;EACA,aAAA;AA3HF;AA8HA;EACE,YAAA;AA5HF;AA+HA;EACE,YAAA;AA7HF;AAgIA;EACE,eAAA;EACA,4BAAA;EACA,iDAAA;AA9HF;AAiIA;EACE,kBAAA;AA/HF;AAkIA;EACE,qBAAA;EACA,kBAAA;EACA,gBAAA;AAhIF;AAmIA;EACE,kBAAA;AAjIF;AAoIA;EACE,kBAAA;EACA,SAAA;EACA,WAAA;EACA,YAAA;EACA,WAAA;EACA,oBAAA;EACA,WAAA;EACA,8CAAA;EACA,kBAAA;AAlIF;AAqIA;EACE,8BAAA;AAnIF;AAsIA;EACE,sBAAA;AApIF;AAuIA;EACE,+CAAA;AArIF;AAwIA;;EAEE,gDAAA;AAtIF;AAyIA;;EAEE,8CAAA;AAvIF;AA0IA;;EAEE,+DAAA;AAxIF;AA2IA;EACE,kDAAA;AAzIF;AA4IA;EACE,+CAAA;AA1IF;AA6IA;;;;;;;EAOE,8CAAA;AA3IF;AA8IA;;EAEE,gDAAA;AA5IF;AA+IA;EACE,oEAAA;AA7IF;AAgJA;EACE,4DAAA;EACA,qEAAA;AA9IF;AAiJA;EACE,4DAAA;EACA,qEAAA;AA/IF;AAkJA;EACE,iBAAA;EACA,qDAAA;AAhJF;AAmJA;EACE,mDAAA;AAjJF;AAoJA;;;EAGE,iBAAA;EACA,sDAAA;AAlJF;AAqJA;EACE,kBAAA;EACA,qDAAA;AAnJF;AAsJA;EACE,iBAAA;EACA,mDAAA;AApJF;AAuJA;EACE,2DAAA;EACA,oEAAA;AArJF;AAwJA;EACE,4DAAA;EACA,qEAAA;AAtJF;AAyJA;EACE,2DAAA;EACA,oEAAA;AAvJF;AA0JA;EACE,2DAAA;EACA,oEAAA;AAxJF;AA2JA;EACE,iBAAA;EACA,uDAAA;AAzJF;AA4JA;EACE,gEAAA;AA1JF;AA6JA;EACE,iEAAA;AA3JF;AA8JA;EACE,0BAAA;EACA,qEAAA;AA5JF;AA+JA;EACE,qBAAA;EACA,cAAA;EACA,qEAAA;EACA,cAAA;EACA,6BAAA;EACA,gDAAA;EACA,cAAA;EACA,wBAAA;AA7JF;AAgKA;EACE,UAAA;EACA,WAAA;AA9JF;AAiKA;EACE,qBAAA;AA/JF;AAkKA;EACE,gDAAA;AAhKF;AAmKA;EACE,eAAA;AAjKF;AAoKA;EACE,eAAA;AAlKF;AAqKA;EACE,aAAA;AAnKF;AAsKA;EACE,6BAAA;EACA,sBAAA;AApKF;AAuKA;EACE,6BAAA;AArKF;AAwKA;EACE,kBAAA;AAtKF;AAyKA;;EAEE,cAAA;EACA,WAAA;EACA,YAAA;EACA,iBAAA;EACA,UAAA;AAvKF;AA0KA;EACE,mBAAA;AAxKF",sourcesContent:['@media (prefers-color-scheme: dark) {\n  .markdown-body {\n    color-scheme: dark;\n    --color-prettylights-syntax-comment: #8b949e;\n    --color-prettylights-syntax-constant: #79c0ff;\n    --color-prettylights-syntax-entity: #d2a8ff;\n    --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\n    --color-prettylights-syntax-entity-tag: #7ee787;\n    --color-prettylights-syntax-keyword: #ff7b72;\n    --color-prettylights-syntax-string: #a5d6ff;\n    --color-prettylights-syntax-variable: #ffa657;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\n    --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\n    --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\n    --color-prettylights-syntax-carriage-return-text: #f0f6fc;\n    --color-prettylights-syntax-carriage-return-bg: #b62324;\n    --color-prettylights-syntax-string-regexp: #7ee787;\n    --color-prettylights-syntax-markup-list: #f2cc60;\n    --color-prettylights-syntax-markup-heading: #1f6feb;\n    --color-prettylights-syntax-markup-italic: #c9d1d9;\n    --color-prettylights-syntax-markup-bold: #c9d1d9;\n    --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\n    --color-prettylights-syntax-markup-deleted-bg: #67060c;\n    --color-prettylights-syntax-markup-inserted-text: #aff5b4;\n    --color-prettylights-syntax-markup-inserted-bg: #033a16;\n    --color-prettylights-syntax-markup-changed-text: #ffdfb6;\n    --color-prettylights-syntax-markup-changed-bg: #5a1e02;\n    --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\n    --color-prettylights-syntax-markup-ignored-bg: #1158c7;\n    --color-prettylights-syntax-meta-diff-range: #d2a8ff;\n    --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\n    --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\n    --color-fg-default: #c9d1d9;\n    --color-fg-muted: #8b949e;\n    --color-fg-subtle: #6e7681;\n    --color-canvas-default: #0d1117;\n    --color-canvas-subtle: #161b22;\n    --color-border-default: #30363d;\n    --color-border-muted: #21262d;\n    --color-neutral-muted: rgba(110,118,129,0.4);\n    --color-accent-fg: #58a6ff;\n    --color-accent-emphasis: #1f6feb;\n    --color-attention-subtle: rgba(187,128,9,0.15);\n    --color-danger-fg: #f85149;\n  }\n}\n\n@media (prefers-color-scheme: light) {\n  .markdown-body {\n    color-scheme: light;\n    --color-prettylights-syntax-comment: #6e7781;\n    --color-prettylights-syntax-constant: #0550ae;\n    --color-prettylights-syntax-entity: #8250df;\n    --color-prettylights-syntax-storage-modifier-import: #24292f;\n    --color-prettylights-syntax-entity-tag: #116329;\n    --color-prettylights-syntax-keyword: #cf222e;\n    --color-prettylights-syntax-string: #0a3069;\n    --color-prettylights-syntax-variable: #953800;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\n    --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\n    --color-prettylights-syntax-invalid-illegal-bg: #82071e;\n    --color-prettylights-syntax-carriage-return-text: #f6f8fa;\n    --color-prettylights-syntax-carriage-return-bg: #cf222e;\n    --color-prettylights-syntax-string-regexp: #116329;\n    --color-prettylights-syntax-markup-list: #3b2300;\n    --color-prettylights-syntax-markup-heading: #0550ae;\n    --color-prettylights-syntax-markup-italic: #24292f;\n    --color-prettylights-syntax-markup-bold: #24292f;\n    --color-prettylights-syntax-markup-deleted-text: #82071e;\n    --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\n    --color-prettylights-syntax-markup-inserted-text: #116329;\n    --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\n    --color-prettylights-syntax-markup-changed-text: #953800;\n    --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\n    --color-prettylights-syntax-markup-ignored-text: #eaeef2;\n    --color-prettylights-syntax-markup-ignored-bg: #0550ae;\n    --color-prettylights-syntax-meta-diff-range: #8250df;\n    --color-prettylights-syntax-brackethighlighter-angle: #57606a;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\n    --color-prettylights-syntax-constant-other-reference-link: #0a3069;\n    --color-fg-default: #24292f;\n    --color-fg-muted: #57606a;\n    --color-fg-subtle: #6e7781;\n    --color-canvas-default: #ffffff;\n    --color-canvas-subtle: #f6f8fa;\n    --color-border-default: #d0d7de;\n    --color-border-muted: hsla(210,18%,87%,1);\n    --color-neutral-muted: rgba(175,184,193,0.2);\n    --color-accent-fg: #0969da;\n    --color-accent-emphasis: #0969da;\n    --color-attention-subtle: #fff8c5;\n    --color-danger-fg: #cf222e;\n  }\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  margin: 0;\n  color: var(--color-fg-default);\n  background-color: var(--color-canvas-default);\n  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  fill: currentColor;\n  vertical-align: text-bottom;\n}\n\n.markdown-body h1:hover .anchor .octicon-link:before,\n.markdown-body h2:hover .anchor .octicon-link:before,\n.markdown-body h3:hover .anchor .octicon-link:before,\n.markdown-body h4:hover .anchor .octicon-link:before,\n.markdown-body h5:hover .anchor .octicon-link:before,\n.markdown-body h6:hover .anchor .octicon-link:before {\n  width: 16px;\n  height: 16px;\n  content: \' \';\n  display: inline-block;\n  background-color: currentColor;\n  -webkit-mask-image: url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' version=\'1.1\' aria-hidden=\'true\'><path fill-rule=\'evenodd\' d=\'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\'></path></svg>");\n  mask-image: url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' version=\'1.1\' aria-hidden=\'true\'><path fill-rule=\'evenodd\' d=\'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\'></path></svg>");\n}\n\n.markdown-body details,\n.markdown-body figcaption,\n.markdown-body figure {\n  display: block;\n}\n\n.markdown-body summary {\n  display: list-item;\n}\n\n.markdown-body [hidden] {\n  display: none !important;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  color: var(--color-accent-fg);\n  text-decoration: none;\n}\n\n.markdown-body abbr[title] {\n  border-bottom: none;\n  text-decoration: underline dotted;\n}\n\n.markdown-body b,\n.markdown-body strong {\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n\n.markdown-body dfn {\n  font-style: italic;\n}\n\n.markdown-body h1 {\n  margin: .67em 0;\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: .3em;\n  font-size: 2em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n\n.markdown-body mark {\n  background-color: var(--color-attention-subtle);\n  color: var(--color-fg-default);\n}\n\n.markdown-body small {\n  font-size: 90%;\n}\n\n.markdown-body sub,\n.markdown-body sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\n.markdown-body sub {\n  bottom: -0.25em;\n}\n\n.markdown-body sup {\n  top: -0.5em;\n}\n\n.markdown-body img {\n  border-style: none;\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: var(--color-canvas-default);\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: monospace;\n  font-size: 1em;\n}\n\n.markdown-body figure {\n  margin: 1em 40px;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  overflow: hidden;\n  background: transparent;\n  border-bottom: 1px solid var(--color-border-muted);\n  height: .25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: var(--color-border-default);\n  border: 0;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n  overflow: visible;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body [type=button],\n.markdown-body [type=reset],\n.markdown-body [type=submit] {\n  -webkit-appearance: button;\n}\n\n.markdown-body [type=checkbox],\n.markdown-body [type=radio] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body [type=number]::-webkit-inner-spin-button,\n.markdown-body [type=number]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n.markdown-body [type=search]::-webkit-search-cancel-button,\n.markdown-body [type=search]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n.markdown-body ::-webkit-input-placeholder {\n  color: inherit;\n  opacity: .54;\n}\n\n.markdown-body ::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body ::placeholder {\n  color: var(--color-fg-subtle);\n  opacity: 1;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: "";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n  display: block;\n  width: max-content;\n  max-width: 100%;\n  overflow: auto;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body details summary {\n  cursor: pointer;\n}\n\n.markdown-body details:not([open])>*:not(summary) {\n  display: none !important;\n}\n\n.markdown-body a:focus,\n.markdown-body [role=button]:focus,\n.markdown-body input[type=radio]:focus,\n.markdown-body input[type=checkbox]:focus {\n  outline: 2px solid var(--color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n\n.markdown-body a:focus:not(:focus-visible),\n.markdown-body [role=button]:focus:not(:focus-visible),\n.markdown-body input[type=radio]:focus:not(:focus-visible),\n.markdown-body input[type=checkbox]:focus:not(:focus-visible) {\n  outline: solid 1px transparent;\n}\n\n.markdown-body a:focus-visible,\n.markdown-body [role=button]:focus-visible,\n.markdown-body input[type=radio]:focus-visible,\n.markdown-body input[type=checkbox]:focus-visible {\n  outline: 2px solid var(--color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n\n.markdown-body a:not([class]):focus,\n.markdown-body a:not([class]):focus-visible,\n.markdown-body input[type=radio]:focus,\n.markdown-body input[type=radio]:focus-visible,\n.markdown-body input[type=checkbox]:focus,\n.markdown-body input[type=checkbox]:focus-visible {\n  outline-offset: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\n  line-height: 10px;\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  background-color: var(--color-canvas-subtle);\n  border: solid 1px var(--color-neutral-muted);\n  border-bottom-color: var(--color-neutral-muted);\n  border-radius: 6px;\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: var(--base-text-weight-semibold, 600);\n  line-height: 1.25;\n}\n\n.markdown-body h2 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: .3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n\n.markdown-body h3 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: .875em;\n}\n\n.markdown-body h6 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: .85em;\n  color: var(--color-fg-muted);\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n  padding: 0 1em;\n  color: var(--color-fg-muted);\n  border-left: .25em solid var(--color-border-default);\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 2em;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body tt,\n.markdown-body code,\n.markdown-body samp {\n  font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\n  font-size: 12px;\n  word-wrap: normal;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  overflow: visible !important;\n  vertical-align: text-bottom;\n  fill: currentColor;\n}\n\n.markdown-body input::-webkit-outer-spin-button,\n.markdown-body input::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n  appearance: none;\n}\n\n.markdown-body::before {\n  display: table;\n  content: "";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .absent {\n  color: var(--color-danger-fg);\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre,\n.markdown-body details {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 tt,\n.markdown-body h1 code,\n.markdown-body h2 tt,\n.markdown-body h2 code,\n.markdown-body h3 tt,\n.markdown-body h3 code,\n.markdown-body h4 tt,\n.markdown-body h4 code,\n.markdown-body h5 tt,\n.markdown-body h5 code,\n.markdown-body h6 tt,\n.markdown-body h6 code {\n  padding: 0 .2em;\n  font-size: inherit;\n}\n\n.markdown-body summary h1,\n.markdown-body summary h2,\n.markdown-body summary h3,\n.markdown-body summary h4,\n.markdown-body summary h5,\n.markdown-body summary h6 {\n  display: inline-block;\n}\n\n.markdown-body summary h1 .anchor,\n.markdown-body summary h2 .anchor,\n.markdown-body summary h3 .anchor,\n.markdown-body summary h4 .anchor,\n.markdown-body summary h5 .anchor,\n.markdown-body summary h6 .anchor {\n  margin-left: -40px;\n}\n\n.markdown-body summary h1,\n.markdown-body summary h2 {\n  padding-bottom: 0;\n  border-bottom: 0;\n}\n\n.markdown-body ul.no-list,\n.markdown-body ol.no-list {\n  padding: 0;\n  list-style-type: none;\n}\n\n.markdown-body ol[type=a] {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body ol[type=A] {\n  list-style-type: upper-alpha;\n}\n\n.markdown-body ol[type=i] {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ol[type=I] {\n  list-style-type: upper-roman;\n}\n\n.markdown-body ol[type="1"] {\n  list-style-type: decimal;\n}\n\n.markdown-body div>ol:not([type]) {\n  list-style-type: decimal;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: .25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table th {\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid var(--color-border-default);\n}\n\n.markdown-body table tr {\n  background-color: var(--color-canvas-default);\n  border-top: 1px solid var(--color-border-muted);\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: var(--color-canvas-subtle);\n}\n\n.markdown-body table img {\n  background-color: transparent;\n}\n\n.markdown-body img[align=right] {\n  padding-left: 20px;\n}\n\n.markdown-body img[align=left] {\n  padding-right: 20px;\n}\n\n.markdown-body .emoji {\n  max-width: none;\n  vertical-align: text-top;\n  background-color: transparent;\n}\n\n.markdown-body span.frame {\n  display: block;\n  overflow: hidden;\n}\n\n.markdown-body span.frame>span {\n  display: block;\n  float: left;\n  width: auto;\n  padding: 7px;\n  margin: 13px 0 0;\n  overflow: hidden;\n  border: 1px solid var(--color-border-default);\n}\n\n.markdown-body span.frame span img {\n  display: block;\n  float: left;\n}\n\n.markdown-body span.frame span span {\n  display: block;\n  padding: 5px 0 0;\n  clear: both;\n  color: var(--color-fg-default);\n}\n\n.markdown-body span.align-center {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n\n.markdown-body span.align-center>span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: center;\n}\n\n.markdown-body span.align-center span img {\n  margin: 0 auto;\n  text-align: center;\n}\n\n.markdown-body span.align-right {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n\n.markdown-body span.align-right>span {\n  display: block;\n  margin: 13px 0 0;\n  overflow: hidden;\n  text-align: right;\n}\n\n.markdown-body span.align-right span img {\n  margin: 0;\n  text-align: right;\n}\n\n.markdown-body span.float-left {\n  display: block;\n  float: left;\n  margin-right: 13px;\n  overflow: hidden;\n}\n\n.markdown-body span.float-left span {\n  margin: 13px 0 0;\n}\n\n.markdown-body span.float-right {\n  display: block;\n  float: right;\n  margin-left: 13px;\n  overflow: hidden;\n}\n\n.markdown-body span.float-right>span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: right;\n}\n\n.markdown-body code,\n.markdown-body tt {\n  padding: .2em .4em;\n  margin: 0;\n  font-size: 85%;\n  white-space: break-spaces;\n  background-color: var(--color-neutral-muted);\n  border-radius: 6px;\n}\n\n.markdown-body code br,\n.markdown-body tt br {\n  display: none;\n}\n\n.markdown-body del code {\n  text-decoration: inherit;\n}\n\n.markdown-body samp {\n  font-size: 85%;\n}\n\n.markdown-body pre code {\n  font-size: 100%;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: var(--color-canvas-subtle);\n  border-radius: 6px;\n}\n\n.markdown-body pre code,\n.markdown-body pre tt {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body .csv-data td,\n.markdown-body .csv-data th {\n  padding: 5px;\n  overflow: hidden;\n  font-size: 12px;\n  line-height: 1;\n  text-align: left;\n  white-space: nowrap;\n}\n\n.markdown-body .csv-data .blob-num {\n  padding: 10px 8px 9px;\n  text-align: right;\n  background: var(--color-canvas-default);\n  border: 0;\n}\n\n.markdown-body .csv-data tr {\n  border-top: 0;\n}\n\n.markdown-body .csv-data th {\n  font-weight: var(--base-text-weight-semibold, 600);\n  background: var(--color-canvas-subtle);\n  border-top: 0;\n}\n\n.markdown-body [data-footnote-ref]::before {\n  content: "[";\n}\n\n.markdown-body [data-footnote-ref]::after {\n  content: "]";\n}\n\n.markdown-body .footnotes {\n  font-size: 12px;\n  color: var(--color-fg-muted);\n  border-top: 1px solid var(--color-border-default);\n}\n\n.markdown-body .footnotes ol {\n  padding-left: 16px;\n}\n\n.markdown-body .footnotes ol ul {\n  display: inline-block;\n  padding-left: 16px;\n  margin-top: 16px;\n}\n\n.markdown-body .footnotes li {\n  position: relative;\n}\n\n.markdown-body .footnotes li:target::before {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  bottom: -8px;\n  left: -24px;\n  pointer-events: none;\n  content: "";\n  border: 2px solid var(--color-accent-emphasis);\n  border-radius: 6px;\n}\n\n.markdown-body .footnotes li:target {\n  color: var(--color-fg-default);\n}\n\n.markdown-body .footnotes .data-footnote-backref g-emoji {\n  font-family: monospace;\n}\n\n.markdown-body .pl-c {\n  color: var(--color-prettylights-syntax-comment);\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: var(--color-prettylights-syntax-constant);\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: var(--color-prettylights-syntax-entity);\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: var(--color-prettylights-syntax-storage-modifier-import);\n}\n\n.markdown-body .pl-ent {\n  color: var(--color-prettylights-syntax-entity-tag);\n}\n\n.markdown-body .pl-k {\n  color: var(--color-prettylights-syntax-keyword);\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: var(--color-prettylights-syntax-string);\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: var(--color-prettylights-syntax-variable);\n}\n\n.markdown-body .pl-bu {\n  color: var(--color-prettylights-syntax-brackethighlighter-unmatched);\n}\n\n.markdown-body .pl-ii {\n  color: var(--color-prettylights-syntax-invalid-illegal-text);\n  background-color: var(--color-prettylights-syntax-invalid-illegal-bg);\n}\n\n.markdown-body .pl-c2 {\n  color: var(--color-prettylights-syntax-carriage-return-text);\n  background-color: var(--color-prettylights-syntax-carriage-return-bg);\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-string-regexp);\n}\n\n.markdown-body .pl-ml {\n  color: var(--color-prettylights-syntax-markup-list);\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-markup-heading);\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: var(--color-prettylights-syntax-markup-italic);\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-markup-bold);\n}\n\n.markdown-body .pl-md {\n  color: var(--color-prettylights-syntax-markup-deleted-text);\n  background-color: var(--color-prettylights-syntax-markup-deleted-bg);\n}\n\n.markdown-body .pl-mi1 {\n  color: var(--color-prettylights-syntax-markup-inserted-text);\n  background-color: var(--color-prettylights-syntax-markup-inserted-bg);\n}\n\n.markdown-body .pl-mc {\n  color: var(--color-prettylights-syntax-markup-changed-text);\n  background-color: var(--color-prettylights-syntax-markup-changed-bg);\n}\n\n.markdown-body .pl-mi2 {\n  color: var(--color-prettylights-syntax-markup-ignored-text);\n  background-color: var(--color-prettylights-syntax-markup-ignored-bg);\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-meta-diff-range);\n}\n\n.markdown-body .pl-ba {\n  color: var(--color-prettylights-syntax-brackethighlighter-angle);\n}\n\n.markdown-body .pl-sg {\n  color: var(--color-prettylights-syntax-sublimelinter-gutter-mark);\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: var(--color-prettylights-syntax-constant-other-reference-link);\n}\n\n.markdown-body g-emoji {\n  display: inline-block;\n  min-width: 1ch;\n  font-family: "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";\n  font-size: 1em;\n  font-style: normal !important;\n  font-weight: var(--base-text-weight-normal, 400);\n  line-height: 1;\n  vertical-align: -0.075em;\n}\n\n.markdown-body g-emoji img {\n  width: 1em;\n  height: 1em;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item label {\n  font-weight: var(--base-text-weight-normal, 400);\n}\n\n.markdown-body .task-list-item.enabled label {\n  cursor: pointer;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 4px;\n}\n\n.markdown-body .task-list-item .handle {\n  display: none;\n}\n\n.markdown-body .task-list-item-checkbox {\n  margin: 0 .2em .25em -1.4em;\n  vertical-align: middle;\n}\n\n.markdown-body .contains-task-list:dir(rtl) .task-list-item-checkbox {\n  margin: 0 -1.6em .25em .2em;\n}\n\n.markdown-body .contains-task-list {\n  position: relative;\n}\n\n.markdown-body .contains-task-list:hover .task-list-item-convert-container,\n.markdown-body .contains-task-list:focus-within .task-list-item-convert-container {\n  display: block;\n  width: auto;\n  height: 24px;\n  overflow: visible;\n  clip: auto;\n}\n\n.markdown-body ::-webkit-calendar-picker-indicator {\n  filter: invert(50%);\n}\n'],sourceRoot:""}]),c.locals={"markdown-body":"JTIzpWAWzFszir0t9BAM",octicon:"ZtsvEhcDSF51AlNAw5bX",anchor:"XGxKfA1eh75FuEQvL6pd","octicon-link":"dWtgNrd2FLAIgXW_saQM",absent:"IA6SgHbm0Y7OBhOVhkTA","no-list":"Ah464Xli3hvh5g0FxDU6",emoji:"ZS4ACM_E97QtVXIrTh0v",frame:"lDnbOZAfGYELmWGezfML","align-center":"eu2h77uDdxK5MXdfeTZw","align-right":"JTSEVjrxW64bL21abrdJ","float-left":"ZfcdU4S5q9EFQYTDAokN","float-right":"RobxFGLXur1Y7UKmUbGc",highlight:"VdUq4nEhjxaTJ35ZWZj3","csv-data":"qJTkIFPsS1XetkWVe1wE","blob-num":"uoPcs60bZ4EnaQf87ive",footnotes:"_Pddb2RnH2cX9eUvgC3w","data-footnote-backref":"W1_qPHD_fO94HaufTQLQ","pl-c":"P76fKaPowM9cpiHuRGin","pl-c1":"jCt3gvtc9gsxyL04trRl","pl-s":"zuy7DTbEbDxX3x9iJjsQ","pl-v":"tPRYQQCLRp36BnHeYwTD","pl-e":"mS7Czrsi8R4w6uIk9uyV","pl-en":"fEXlqGWpT9EQeh66CyUA","pl-smi":"KYRbXZ3_oqIQD_jYmmss","pl-s1":"Onf1xGhm1CyIKCUqv6Vt","pl-ent":"bML4Cf9GLbf5q17kpKv6","pl-k":"D3WGOCVXjgPFkMdT5njO","pl-pds":"qqPwBDvIt9NfS3oysOeg","pl-pse":"ngxODS0dsF3_9UYML_jK","pl-sr":"zCzAZcbA0HMroij1e7Zq","pl-cce":"alqCJ_RmYevYOsGV2npQ","pl-sre":"_JjkFZbcwE5FrjyToawY","pl-sra":"rpODeGZWpCHdQeJ9iNFh","pl-smw":"UwBKloNe0dpM10LYc9gH","pl-bu":"YwnHPpSzGb2oO4ckgFiE","pl-ii":"xG7JZyGUso7EejDEcqPj","pl-c2":"HsozdGaRrbnEFskf5GM5","pl-ml":"QCudWQ_NcGbMAjWek5zw","pl-mh":"vtRO86GQ58WMpNkZmEFb","pl-ms":"MOLUJS3ucw2wi08L8owu","pl-mi":"aGEFAwvkd7f_tpL163Xx","pl-mb":"jKazAlPq8JmjMct4bPxN","pl-md":"BvEH7VV6fJeHNG6aIv7M","pl-mi1":"t1DHu4D7tHFAdaNdZexf","pl-mc":"wgJicwrtajeTkYba3WJS","pl-mi2":"nsuM7TFfymO8yvr95F3_","pl-mdr":"jPrZaddoZ0MPWaaLf9Hg","pl-ba":"jkygUO3hOR0HgWl8Vu3I","pl-sg":"_R72N5SC88lk68CWAN9g","pl-corl":"HqCHQQDtoZGYCY_Aiuby","task-list-item":"z8yi6slqhr75T9wpK_ku",enabled:"juEHlr9g1BeZBlNEC_bS",handle:"JXsFqSdSlkBLe8YHtVHc","task-list-item-checkbox":"J6bqF00Yji6efKXcYLqA","contains-task-list":"tpfsYJHavqwf9F0ociP3","task-list-item-convert-container":"EcA5MpPXXIr0gpYjQhxV"};const p=c},6668:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},2535:(e,t,n)=>{"use strict";var o=n(6237),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return o.isMemo(e)?a:s[e.$$typeof]||r}s[o.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[o.Memo]=a;var d=Object.defineProperty,c=Object.getOwnPropertyNames,A=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,u=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,o){if("string"!=typeof n){if(m){var r=u(n);r&&r!==m&&e(t,r,o)}var a=c(n);A&&(a=a.concat(A(n)));for(var s=l(t),h=l(n),g=0;g<a.length;++g){var b=a[g];if(!(i[b]||o&&o[b]||h&&h[b]||s&&s[b])){var f=p(n,b);try{d(t,b,f)}catch(e){}}}}return t}},198:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,o=n?Symbol.for("react.element"):60103,r=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,d=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,A=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,u=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,b=n?Symbol.for("react.block"):60121,f=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case c:case A:case i:case s:case a:case u:return e;default:switch(e=e&&e.$$typeof){case d:case p:case g:case h:case l:return e;default:return t}}case r:return t}}}function v(e){return k(e)===A}t.AsyncMode=c,t.ConcurrentMode=A,t.ContextConsumer=d,t.ContextProvider=l,t.Element=o,t.ForwardRef=p,t.Fragment=i,t.Lazy=g,t.Memo=h,t.Portal=r,t.Profiler=s,t.StrictMode=a,t.Suspense=u,t.isAsyncMode=function(e){return v(e)||k(e)===c},t.isConcurrentMode=v,t.isContextConsumer=function(e){return k(e)===d},t.isContextProvider=function(e){return k(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return k(e)===p},t.isFragment=function(e){return k(e)===i},t.isLazy=function(e){return k(e)===g},t.isMemo=function(e){return k(e)===h},t.isPortal=function(e){return k(e)===r},t.isProfiler=function(e){return k(e)===s},t.isStrictMode=function(e){return k(e)===a},t.isSuspense=function(e){return k(e)===u},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===A||e===s||e===a||e===u||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===l||e.$$typeof===d||e.$$typeof===p||e.$$typeof===f||e.$$typeof===y||e.$$typeof===x||e.$$typeof===b)},t.typeOf=k},6237:(e,t,n)=>{"use strict";e.exports=n(198)},1195:(e,t)=>{"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},1357:(e,t,n)=>{"use strict";n(1195)},698:(e,t,n)=>{"use strict";var o=n(3072),r=n.n(o),i=n(2298),a=n.n(i),s=n(7976),l=n.n(s),d=n(5147),c=n.n(d),A=n(566),p=n.n(A),u=n(9396),m=n.n(u),h=n(4340),g={};g.styleTagTransform=m(),g.setAttributes=c(),g.insert=l().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=p(),r()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals},4039:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},8216:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});var o=n(9097);function r(e,t,n){return(t=(0,o.Z)(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},7075:(e,t,n)=>{"use strict";n.d(t,{TU:()=>L});let o={async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1};const r=/[&<>"']/,i=new RegExp(r.source,"g"),a=/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,s=new RegExp(a.source,"g"),l={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},d=e=>l[e];function c(e,t){if(t){if(r.test(e))return e.replace(i,d)}else if(a.test(e))return e.replace(s,d);return e}const A=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function p(e){return e.replace(A,((e,t)=>"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""))}const u=/(^|[^\[])\^/g;function m(e,t){e="string"==typeof e?e:e.source,t=t||"";const n={replace:(t,o)=>(o=(o=o.source||o).replace(u,"$1"),e=e.replace(t,o),n),getRegex:()=>new RegExp(e,t)};return n}const h=/[^\w:]/g,g=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function b(e,t,n){if(e){let e;try{e=decodeURIComponent(p(n)).replace(h,"").toLowerCase()}catch(e){return null}if(0===e.indexOf("javascript:")||0===e.indexOf("vbscript:")||0===e.indexOf("data:"))return null}t&&!g.test(n)&&(n=function(e,t){f[" "+e]||(y.test(e)?f[" "+e]=e+"/":f[" "+e]=w(e,"/",!0));const n=-1===(e=f[" "+e]).indexOf(":");return"//"===t.substring(0,2)?n?t:e.replace(x,"$1")+t:"/"===t.charAt(0)?n?t:e.replace(k,"$1")+t:e+t}(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n}const f={},y=/^[^:]+:\/*[^/]*$/,x=/^([^:]+:)[\s\S]*$/,k=/^([^:]+:\/*[^/]*)[\s\S]*$/,v={exec:function(){}};function z(e,t){const n=e.replace(/\|/g,((e,t,n)=>{let o=!1,r=t;for(;--r>=0&&"\\"===n[r];)o=!o;return o?"|":" |"})).split(/ \|/);let o=0;if(n[0].trim()||n.shift(),n.length>0&&!n[n.length-1].trim()&&n.pop(),n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;o<n.length;o++)n[o]=n[o].trim().replace(/\\\|/g,"|");return n}function w(e,t,n){const o=e.length;if(0===o)return"";let r=0;for(;r<o;){const i=e.charAt(o-r-1);if(i!==t||n){if(i===t||!n)break;r++}else r++}return e.slice(0,o-r)}function E(e,t){if(t<1)return"";let n="";for(;t>1;)1&t&&(n+=e),t>>=1,e+=e;return n+e}function C(e,t,n,o){const r=t.href,i=t.title?c(t.title):null,a=e[1].replace(/\\([\[\]])/g,"$1");if("!"!==e[0].charAt(0)){o.state.inLink=!0;const e={type:"link",raw:n,href:r,title:i,text:a,tokens:o.inlineTokens(a)};return o.state.inLink=!1,e}return{type:"image",raw:n,href:r,title:i,text:c(a)}}class F{constructor(e){this.options=e||o}space(e){const t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:"space",raw:t[0]}}code(e){const t=this.rules.block.code.exec(e);if(t){const e=t[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:t[0],codeBlockStyle:"indented",text:this.options.pedantic?e:w(e,"\n")}}}fences(e){const t=this.rules.block.fences.exec(e);if(t){const e=t[0],n=function(e,t){const n=e.match(/^(\s+)(?:```)/);if(null===n)return t;const o=n[1];return t.split("\n").map((e=>{const t=e.match(/^\s+/);if(null===t)return e;const[n]=t;return n.length>=o.length?e.slice(o.length):e})).join("\n")}(e,t[3]||"");return{type:"code",raw:e,lang:t[2]?t[2].trim().replace(this.rules.inline._escapes,"$1"):t[2],text:n}}}heading(e){const t=this.rules.block.heading.exec(e);if(t){let e=t[2].trim();if(/#$/.test(e)){const t=w(e,"#");this.options.pedantic?e=t.trim():t&&!/ $/.test(t)||(e=t.trim())}return{type:"heading",raw:t[0],depth:t[1].length,text:e,tokens:this.lexer.inline(e)}}}hr(e){const t=this.rules.block.hr.exec(e);if(t)return{type:"hr",raw:t[0]}}blockquote(e){const t=this.rules.block.blockquote.exec(e);if(t){const e=t[0].replace(/^ *>[ \t]?/gm,""),n=this.lexer.state.top;this.lexer.state.top=!0;const o=this.lexer.blockTokens(e);return this.lexer.state.top=n,{type:"blockquote",raw:t[0],tokens:o,text:e}}}list(e){let t=this.rules.block.list.exec(e);if(t){let n,o,r,i,a,s,l,d,c,A,p,u,m=t[1].trim();const h=m.length>1,g={type:"list",raw:"",ordered:h,start:h?+m.slice(0,-1):"",loose:!1,items:[]};m=h?`\\d{1,9}\\${m.slice(-1)}`:`\\${m}`,this.options.pedantic&&(m=h?m:"[*+-]");const b=new RegExp(`^( {0,3}${m})((?:[\t ][^\\n]*)?(?:\\n|$))`);for(;e&&(u=!1,t=b.exec(e))&&!this.rules.block.hr.test(e);){if(n=t[0],e=e.substring(n.length),d=t[2].split("\n",1)[0].replace(/^\t+/,(e=>" ".repeat(3*e.length))),c=e.split("\n",1)[0],this.options.pedantic?(i=2,p=d.trimLeft()):(i=t[2].search(/[^ ]/),i=i>4?1:i,p=d.slice(i),i+=t[1].length),s=!1,!d&&/^ *$/.test(c)&&(n+=c+"\n",e=e.substring(c.length+1),u=!0),!u){const t=new RegExp(`^ {0,${Math.min(3,i-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),o=new RegExp(`^ {0,${Math.min(3,i-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),r=new RegExp(`^ {0,${Math.min(3,i-1)}}(?:\`\`\`|~~~)`),a=new RegExp(`^ {0,${Math.min(3,i-1)}}#`);for(;e&&(A=e.split("\n",1)[0],c=A,this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,"  ")),!r.test(c))&&!a.test(c)&&!t.test(c)&&!o.test(e);){if(c.search(/[^ ]/)>=i||!c.trim())p+="\n"+c.slice(i);else{if(s)break;if(d.search(/[^ ]/)>=4)break;if(r.test(d))break;if(a.test(d))break;if(o.test(d))break;p+="\n"+c}s||c.trim()||(s=!0),n+=A+"\n",e=e.substring(A.length+1),d=c.slice(i)}}g.loose||(l?g.loose=!0:/\n *\n *$/.test(n)&&(l=!0)),this.options.gfm&&(o=/^\[[ xX]\] /.exec(p),o&&(r="[ ] "!==o[0],p=p.replace(/^\[[ xX]\] +/,""))),g.items.push({type:"list_item",raw:n,task:!!o,checked:r,loose:!1,text:p}),g.raw+=n}g.items[g.items.length-1].raw=n.trimRight(),g.items[g.items.length-1].text=p.trimRight(),g.raw=g.raw.trimRight();const f=g.items.length;for(a=0;a<f;a++)if(this.lexer.state.top=!1,g.items[a].tokens=this.lexer.blockTokens(g.items[a].text,[]),!g.loose){const e=g.items[a].tokens.filter((e=>"space"===e.type)),t=e.length>0&&e.some((e=>/\n.*\n/.test(e.raw)));g.loose=t}if(g.loose)for(a=0;a<f;a++)g.items[a].loose=!0;return g}}html(e){const t=this.rules.block.html.exec(e);if(t){const e={type:"html",raw:t[0],pre:!this.options.sanitizer&&("pre"===t[1]||"script"===t[1]||"style"===t[1]),text:t[0]};if(this.options.sanitize){const n=this.options.sanitizer?this.options.sanitizer(t[0]):c(t[0]);e.type="paragraph",e.text=n,e.tokens=this.lexer.inline(n)}return e}}def(e){const t=this.rules.block.def.exec(e);if(t){const e=t[1].toLowerCase().replace(/\s+/g," "),n=t[2]?t[2].replace(/^<(.*)>$/,"$1").replace(this.rules.inline._escapes,"$1"):"",o=t[3]?t[3].substring(1,t[3].length-1).replace(this.rules.inline._escapes,"$1"):t[3];return{type:"def",tag:e,raw:t[0],href:n,title:o}}}table(e){const t=this.rules.block.table.exec(e);if(t){const e={type:"table",header:z(t[1]).map((e=>({text:e}))),align:t[2].replace(/^ *|\| *$/g,"").split(/ *\| */),rows:t[3]&&t[3].trim()?t[3].replace(/\n[ \t]*$/,"").split("\n"):[]};if(e.header.length===e.align.length){e.raw=t[0];let n,o,r,i,a=e.align.length;for(n=0;n<a;n++)/^ *-+: *$/.test(e.align[n])?e.align[n]="right":/^ *:-+: *$/.test(e.align[n])?e.align[n]="center":/^ *:-+ *$/.test(e.align[n])?e.align[n]="left":e.align[n]=null;for(a=e.rows.length,n=0;n<a;n++)e.rows[n]=z(e.rows[n],e.header.length).map((e=>({text:e})));for(a=e.header.length,o=0;o<a;o++)e.header[o].tokens=this.lexer.inline(e.header[o].text);for(a=e.rows.length,o=0;o<a;o++)for(i=e.rows[o],r=0;r<i.length;r++)i[r].tokens=this.lexer.inline(i[r].text);return e}}}lheading(e){const t=this.rules.block.lheading.exec(e);if(t)return{type:"heading",raw:t[0],depth:"="===t[2].charAt(0)?1:2,text:t[1],tokens:this.lexer.inline(t[1])}}paragraph(e){const t=this.rules.block.paragraph.exec(e);if(t){const e="\n"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1];return{type:"paragraph",raw:t[0],text:e,tokens:this.lexer.inline(e)}}}text(e){const t=this.rules.block.text.exec(e);if(t)return{type:"text",raw:t[0],text:t[0],tokens:this.lexer.inline(t[0])}}escape(e){const t=this.rules.inline.escape.exec(e);if(t)return{type:"escape",raw:t[0],text:c(t[1])}}tag(e){const t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&/^<a /i.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\/a>/i.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?"text":"html",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):c(t[0]):t[0]}}link(e){const t=this.rules.inline.link.exec(e);if(t){const e=t[2].trim();if(!this.options.pedantic&&/^</.test(e)){if(!/>$/.test(e))return;const t=w(e.slice(0,-1),"\\");if((e.length-t.length)%2==0)return}else{const e=function(e,t){if(-1===e.indexOf(t[1]))return-1;const n=e.length;let o=0,r=0;for(;r<n;r++)if("\\"===e[r])r++;else if(e[r]===t[0])o++;else if(e[r]===t[1]&&(o--,o<0))return r;return-1}(t[2],"()");if(e>-1){const n=(0===t[0].indexOf("!")?5:4)+t[1].length+e;t[2]=t[2].substring(0,e),t[0]=t[0].substring(0,n).trim(),t[3]=""}}let n=t[2],o="";if(this.options.pedantic){const e=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(n);e&&(n=e[1],o=e[3])}else o=t[3]?t[3].slice(1,-1):"";return n=n.trim(),/^</.test(n)&&(n=this.options.pedantic&&!/>$/.test(e)?n.slice(1):n.slice(1,-1)),C(t,{href:n?n.replace(this.rules.inline._escapes,"$1"):n,title:o?o.replace(this.rules.inline._escapes,"$1"):o},t[0],this.lexer)}}reflink(e,t){let n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){let e=(n[2]||n[1]).replace(/\s+/g," ");if(e=t[e.toLowerCase()],!e){const e=n[0].charAt(0);return{type:"text",raw:e,text:e}}return C(n,e,n[0],this.lexer)}}emStrong(e,t,n=""){let o=this.rules.inline.emStrong.lDelim.exec(e);if(!o)return;if(o[3]&&n.match(/[\p{L}\p{N}]/u))return;const r=o[1]||o[2]||"";if(!r||r&&(""===n||this.rules.inline.punctuation.exec(n))){const n=o[0].length-1;let r,i,a=n,s=0;const l="*"===o[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(l.lastIndex=0,t=t.slice(-1*e.length+n);null!=(o=l.exec(t));){if(r=o[1]||o[2]||o[3]||o[4]||o[5]||o[6],!r)continue;if(i=r.length,o[3]||o[4]){a+=i;continue}if((o[5]||o[6])&&n%3&&!((n+i)%3)){s+=i;continue}if(a-=i,a>0)continue;i=Math.min(i,i+a+s);const t=e.slice(0,n+o.index+(o[0].length-r.length)+i);if(Math.min(n,i)%2){const e=t.slice(1,-1);return{type:"em",raw:t,text:e,tokens:this.lexer.inlineTokens(e)}}const l=t.slice(2,-2);return{type:"strong",raw:t,text:l,tokens:this.lexer.inlineTokens(l)}}}}codespan(e){const t=this.rules.inline.code.exec(e);if(t){let e=t[2].replace(/\n/g," ");const n=/[^ ]/.test(e),o=/^ /.test(e)&&/ $/.test(e);return n&&o&&(e=e.substring(1,e.length-1)),e=c(e,!0),{type:"codespan",raw:t[0],text:e}}}br(e){const t=this.rules.inline.br.exec(e);if(t)return{type:"br",raw:t[0]}}del(e){const t=this.rules.inline.del.exec(e);if(t)return{type:"del",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2])}}autolink(e,t){const n=this.rules.inline.autolink.exec(e);if(n){let e,o;return"@"===n[2]?(e=c(this.options.mangle?t(n[1]):n[1]),o="mailto:"+e):(e=c(n[1]),o=e),{type:"link",raw:n[0],text:e,href:o,tokens:[{type:"text",raw:e,text:e}]}}}url(e,t){let n;if(n=this.rules.inline.url.exec(e)){let e,o;if("@"===n[2])e=c(this.options.mangle?t(n[0]):n[0]),o="mailto:"+e;else{let t;do{t=n[0],n[0]=this.rules.inline._backpedal.exec(n[0])[0]}while(t!==n[0]);e=c(n[0]),o="www."===n[1]?"http://"+n[0]:n[0]}return{type:"link",raw:n[0],text:e,href:o,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(e,t){const n=this.rules.inline.text.exec(e);if(n){let e;return e=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(n[0]):c(n[0]):n[0]:c(this.options.smartypants?t(n[0]):n[0]),{type:"text",raw:n[0],text:e}}}}const W={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,hr:/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,html:"^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",def:/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,table:v,lheading:/^((?:.|\n(?!\n))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\.|[^\[\]\\])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};W.def=m(W.def).replace("label",W._label).replace("title",W._title).getRegex(),W.bullet=/(?:[*+-]|\d{1,9}[.)])/,W.listItemStart=m(/^( *)(bull) */).replace("bull",W.bullet).getRegex(),W.list=m(W.list).replace(/bull/g,W.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+W.def.source+")").getRegex(),W._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",W._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/,W.html=m(W.html,"i").replace("comment",W._comment).replace("tag",W._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),W.paragraph=m(W._paragraph).replace("hr",W.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",W._tag).getRegex(),W.blockquote=m(W.blockquote).replace("paragraph",W.paragraph).getRegex(),W.normal={...W},W.gfm={...W.normal,table:"^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"},W.gfm.table=m(W.gfm.table).replace("hr",W.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",W._tag).getRegex(),W.gfm.paragraph=m(W._paragraph).replace("hr",W.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("table",W.gfm.table).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",W._tag).getRegex(),W.pedantic={...W.normal,html:m("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",W._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:v,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:m(W.normal._paragraph).replace("hr",W.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",W.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()};const I={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:v,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(ref)\]/,nolink:/^!?\[(ref)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,rDelimAst:/^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/,rDelimUnd:/^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:v,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^([\spunctuation])/};function B(e){return e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function M(e){let t,n,o="";const r=e.length;for(t=0;t<r;t++)n=e.charCodeAt(t),Math.random()>.5&&(n="x"+n.toString(16)),o+="&#"+n+";";return o}I._punctuation="!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~",I.punctuation=m(I.punctuation).replace(/punctuation/g,I._punctuation).getRegex(),I.blockSkip=/\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g,I.escapedEmSt=/(?:^|[^\\])(?:\\\\)*\\[*_]/g,I._comment=m(W._comment).replace("(?:--\x3e|$)","--\x3e").getRegex(),I.emStrong.lDelim=m(I.emStrong.lDelim).replace(/punct/g,I._punctuation).getRegex(),I.emStrong.rDelimAst=m(I.emStrong.rDelimAst,"g").replace(/punct/g,I._punctuation).getRegex(),I.emStrong.rDelimUnd=m(I.emStrong.rDelimUnd,"g").replace(/punct/g,I._punctuation).getRegex(),I._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,I._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,I._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,I.autolink=m(I.autolink).replace("scheme",I._scheme).replace("email",I._email).getRegex(),I._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,I.tag=m(I.tag).replace("comment",I._comment).replace("attribute",I._attribute).getRegex(),I._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,I._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/,I._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,I.link=m(I.link).replace("label",I._label).replace("href",I._href).replace("title",I._title).getRegex(),I.reflink=m(I.reflink).replace("label",I._label).replace("ref",W._label).getRegex(),I.nolink=m(I.nolink).replace("ref",W._label).getRegex(),I.reflinkSearch=m(I.reflinkSearch,"g").replace("reflink",I.reflink).replace("nolink",I.nolink).getRegex(),I.normal={...I},I.pedantic={...I.normal,strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:m(/^!?\[(label)\]\((.*?)\)/).replace("label",I._label).getRegex(),reflink:m(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",I._label).getRegex()},I.gfm={...I.normal,escape:m(I.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},I.gfm.url=m(I.gfm.url,"i").replace("email",I.gfm._extended_email).getRegex(),I.breaks={...I.gfm,br:m(I.br).replace("{2,}","*").getRegex(),text:m(I.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()};class Z{constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||o,this.options.tokenizer=this.options.tokenizer||new F,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const t={block:W.normal,inline:I.normal};this.options.pedantic?(t.block=W.pedantic,t.inline=I.pedantic):this.options.gfm&&(t.block=W.gfm,this.options.breaks?t.inline=I.breaks:t.inline=I.gfm),this.tokenizer.rules=t}static get rules(){return{block:W,inline:I}}static lex(e,t){return new Z(t).lex(e)}static lexInline(e,t){return new Z(t).inlineTokens(e)}lex(e){let t;for(e=e.replace(/\r\n|\r/g,"\n"),this.blockTokens(e,this.tokens);t=this.inlineQueue.shift();)this.inlineTokens(t.src,t.tokens);return this.tokens}blockTokens(e,t=[]){let n,o,r,i;for(e=this.options.pedantic?e.replace(/\t/g,"    ").replace(/^ +$/gm,""):e.replace(/^( *)(\t+)/gm,((e,t,n)=>t+"    ".repeat(n.length)));e;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((o=>!!(n=o.call({lexer:this},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)))))if(n=this.tokenizer.space(e))e=e.substring(n.raw.length),1===n.raw.length&&t.length>0?t[t.length-1].raw+="\n":t.push(n);else if(n=this.tokenizer.code(e))e=e.substring(n.raw.length),o=t[t.length-1],!o||"paragraph"!==o.type&&"text"!==o.type?t.push(n):(o.raw+="\n"+n.raw,o.text+="\n"+n.text,this.inlineQueue[this.inlineQueue.length-1].src=o.text);else if(n=this.tokenizer.fences(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.heading(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.hr(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.blockquote(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.list(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.html(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.def(e))e=e.substring(n.raw.length),o=t[t.length-1],!o||"paragraph"!==o.type&&"text"!==o.type?this.tokens.links[n.tag]||(this.tokens.links[n.tag]={href:n.href,title:n.title}):(o.raw+="\n"+n.raw,o.text+="\n"+n.raw,this.inlineQueue[this.inlineQueue.length-1].src=o.text);else if(n=this.tokenizer.table(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.lheading(e))e=e.substring(n.raw.length),t.push(n);else{if(r=e,this.options.extensions&&this.options.extensions.startBlock){let t=1/0;const n=e.slice(1);let o;this.options.extensions.startBlock.forEach((function(e){o=e.call({lexer:this},n),"number"==typeof o&&o>=0&&(t=Math.min(t,o))})),t<1/0&&t>=0&&(r=e.substring(0,t+1))}if(this.state.top&&(n=this.tokenizer.paragraph(r)))o=t[t.length-1],i&&"paragraph"===o.type?(o.raw+="\n"+n.raw,o.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=o.text):t.push(n),i=r.length!==e.length,e=e.substring(n.raw.length);else if(n=this.tokenizer.text(e))e=e.substring(n.raw.length),o=t[t.length-1],o&&"text"===o.type?(o.raw+="\n"+n.raw,o.text+="\n"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=o.text):t.push(n);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}return this.state.top=!0,t}inline(e,t=[]){return this.inlineQueue.push({src:e,tokens:t}),t}inlineTokens(e,t=[]){let n,o,r,i,a,s,l=e;if(this.tokens.links){const e=Object.keys(this.tokens.links);if(e.length>0)for(;null!=(i=this.tokenizer.rules.inline.reflinkSearch.exec(l));)e.includes(i[0].slice(i[0].lastIndexOf("[")+1,-1))&&(l=l.slice(0,i.index)+"["+E("a",i[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(i=this.tokenizer.rules.inline.blockSkip.exec(l));)l=l.slice(0,i.index)+"["+E("a",i[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(i=this.tokenizer.rules.inline.escapedEmSt.exec(l));)l=l.slice(0,i.index+i[0].length-2)+"++"+l.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex),this.tokenizer.rules.inline.escapedEmSt.lastIndex--;for(;e;)if(a||(s=""),a=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((o=>!!(n=o.call({lexer:this},e,t))&&(e=e.substring(n.raw.length),t.push(n),!0)))))if(n=this.tokenizer.escape(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.tag(e))e=e.substring(n.raw.length),o=t[t.length-1],o&&"text"===n.type&&"text"===o.type?(o.raw+=n.raw,o.text+=n.text):t.push(n);else if(n=this.tokenizer.link(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.reflink(e,this.tokens.links))e=e.substring(n.raw.length),o=t[t.length-1],o&&"text"===n.type&&"text"===o.type?(o.raw+=n.raw,o.text+=n.text):t.push(n);else if(n=this.tokenizer.emStrong(e,l,s))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.codespan(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.br(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.del(e))e=e.substring(n.raw.length),t.push(n);else if(n=this.tokenizer.autolink(e,M))e=e.substring(n.raw.length),t.push(n);else if(this.state.inLink||!(n=this.tokenizer.url(e,M))){if(r=e,this.options.extensions&&this.options.extensions.startInline){let t=1/0;const n=e.slice(1);let o;this.options.extensions.startInline.forEach((function(e){o=e.call({lexer:this},n),"number"==typeof o&&o>=0&&(t=Math.min(t,o))})),t<1/0&&t>=0&&(r=e.substring(0,t+1))}if(n=this.tokenizer.inlineText(r,B))e=e.substring(n.raw.length),"_"!==n.raw.slice(-1)&&(s=n.raw.slice(-1)),a=!0,o=t[t.length-1],o&&"text"===o.type?(o.raw+=n.raw,o.text+=n.text):t.push(n);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}else e=e.substring(n.raw.length),t.push(n);return t}}class S{constructor(e){this.options=e||o}code(e,t,n){const o=(t||"").match(/\S*/)[0];if(this.options.highlight){const t=this.options.highlight(e,o);null!=t&&t!==e&&(n=!0,e=t)}return e=e.replace(/\n$/,"")+"\n",o?'<pre><code class="'+this.options.langPrefix+c(o)+'">'+(n?e:c(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:c(e,!0))+"</code></pre>\n"}blockquote(e){return`<blockquote>\n${e}</blockquote>\n`}html(e){return e}heading(e,t,n,o){return this.options.headerIds?`<h${t} id="${this.options.headerPrefix+o.slug(n)}">${e}</h${t}>\n`:`<h${t}>${e}</h${t}>\n`}hr(){return this.options.xhtml?"<hr/>\n":"<hr>\n"}list(e,t,n){const o=t?"ol":"ul";return"<"+o+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+o+">\n"}listitem(e){return`<li>${e}</li>\n`}checkbox(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "}paragraph(e){return`<p>${e}</p>\n`}table(e,t){return t&&(t=`<tbody>${t}</tbody>`),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"}tablerow(e){return`<tr>\n${e}</tr>\n`}tablecell(e,t){const n=t.header?"th":"td";return(t.align?`<${n} align="${t.align}">`:`<${n}>`)+e+`</${n}>\n`}strong(e){return`<strong>${e}</strong>`}em(e){return`<em>${e}</em>`}codespan(e){return`<code>${e}</code>`}br(){return this.options.xhtml?"<br/>":"<br>"}del(e){return`<del>${e}</del>`}link(e,t,n){if(null===(e=b(this.options.sanitize,this.options.baseUrl,e)))return n;let o='<a href="'+e+'"';return t&&(o+=' title="'+t+'"'),o+=">"+n+"</a>",o}image(e,t,n){if(null===(e=b(this.options.sanitize,this.options.baseUrl,e)))return n;let o=`<img src="${e}" alt="${n}"`;return t&&(o+=` title="${t}"`),o+=this.options.xhtml?"/>":">",o}text(e){return e}}class T{strong(e){return e}em(e){return e}codespan(e){return e}del(e){return e}html(e){return e}text(e){return e}link(e,t,n){return""+n}image(e,t,n){return""+n}br(){return""}}class J{constructor(){this.seen={}}serialize(e){return e.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")}getNextSafeSlug(e,t){let n=e,o=0;if(this.seen.hasOwnProperty(n)){o=this.seen[e];do{o++,n=e+"-"+o}while(this.seen.hasOwnProperty(n))}return t||(this.seen[e]=o,this.seen[n]=0),n}slug(e,t={}){const n=this.serialize(e);return this.getNextSafeSlug(n,t.dryrun)}}class R{constructor(e){this.options=e||o,this.options.renderer=this.options.renderer||new S,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new T,this.slugger=new J}static parse(e,t){return new R(t).parse(e)}static parseInline(e,t){return new R(t).parseInline(e)}parse(e,t=!0){let n,o,r,i,a,s,l,d,c,A,u,m,h,g,b,f,y,x,k,v="";const z=e.length;for(n=0;n<z;n++)if(A=e[n],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[A.type]&&(k=this.options.extensions.renderers[A.type].call({parser:this},A),!1!==k||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(A.type)))v+=k||"";else switch(A.type){case"space":continue;case"hr":v+=this.renderer.hr();continue;case"heading":v+=this.renderer.heading(this.parseInline(A.tokens),A.depth,p(this.parseInline(A.tokens,this.textRenderer)),this.slugger);continue;case"code":v+=this.renderer.code(A.text,A.lang,A.escaped);continue;case"table":for(d="",l="",i=A.header.length,o=0;o<i;o++)l+=this.renderer.tablecell(this.parseInline(A.header[o].tokens),{header:!0,align:A.align[o]});for(d+=this.renderer.tablerow(l),c="",i=A.rows.length,o=0;o<i;o++){for(s=A.rows[o],l="",a=s.length,r=0;r<a;r++)l+=this.renderer.tablecell(this.parseInline(s[r].tokens),{header:!1,align:A.align[r]});c+=this.renderer.tablerow(l)}v+=this.renderer.table(d,c);continue;case"blockquote":c=this.parse(A.tokens),v+=this.renderer.blockquote(c);continue;case"list":for(u=A.ordered,m=A.start,h=A.loose,i=A.items.length,c="",o=0;o<i;o++)b=A.items[o],f=b.checked,y=b.task,g="",b.task&&(x=this.renderer.checkbox(f),h?b.tokens.length>0&&"paragraph"===b.tokens[0].type?(b.tokens[0].text=x+" "+b.tokens[0].text,b.tokens[0].tokens&&b.tokens[0].tokens.length>0&&"text"===b.tokens[0].tokens[0].type&&(b.tokens[0].tokens[0].text=x+" "+b.tokens[0].tokens[0].text)):b.tokens.unshift({type:"text",text:x}):g+=x),g+=this.parse(b.tokens,h),c+=this.renderer.listitem(g,y,f);v+=this.renderer.list(c,u,m);continue;case"html":v+=this.renderer.html(A.text);continue;case"paragraph":v+=this.renderer.paragraph(this.parseInline(A.tokens));continue;case"text":for(c=A.tokens?this.parseInline(A.tokens):A.text;n+1<z&&"text"===e[n+1].type;)A=e[++n],c+="\n"+(A.tokens?this.parseInline(A.tokens):A.text);v+=t?this.renderer.paragraph(c):c;continue;default:{const e='Token with "'+A.type+'" type was not found.';if(this.options.silent)return void console.error(e);throw new Error(e)}}return v}parseInline(e,t){t=t||this.renderer;let n,o,r,i="";const a=e.length;for(n=0;n<a;n++)if(o=e[n],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[o.type]&&(r=this.options.extensions.renderers[o.type].call({parser:this},o),!1!==r||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(o.type)))i+=r||"";else switch(o.type){case"escape":case"text":i+=t.text(o.text);break;case"html":i+=t.html(o.text);break;case"link":i+=t.link(o.href,o.title,this.parseInline(o.tokens,t));break;case"image":i+=t.image(o.href,o.title,o.text);break;case"strong":i+=t.strong(this.parseInline(o.tokens,t));break;case"em":i+=t.em(this.parseInline(o.tokens,t));break;case"codespan":i+=t.codespan(o.text);break;case"br":i+=t.br();break;case"del":i+=t.del(this.parseInline(o.tokens,t));break;default:{const e='Token with "'+o.type+'" type was not found.';if(this.options.silent)return void console.error(e);throw new Error(e)}}return i}}class ${constructor(e){this.options=e||o}static passThroughHooks=new Set(["preprocess","postprocess"]);preprocess(e){return e}postprocess(e){return e}}function P(e,t){return(n,o,r)=>{"function"==typeof o&&(r=o,o=null);const i={...o},a=function(e,t,n){return o=>{if(o.message+="\nPlease report this to https://github.com/markedjs/marked.",e){const e="<p>An error occurred:</p><pre>"+c(o.message+"",!0)+"</pre>";return t?Promise.resolve(e):n?void n(null,e):e}if(t)return Promise.reject(o);if(!n)throw o;n(o)}}((o={...L.defaults,...i}).silent,o.async,r);if(null==n)return a(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof n)return a(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(n)+", string expected"));if(function(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}(o),o.hooks&&(o.hooks.options=o),r){const i=o.highlight;let s;try{o.hooks&&(n=o.hooks.preprocess(n)),s=e(n,o)}catch(e){return a(e)}const l=function(e){let n;if(!e)try{o.walkTokens&&L.walkTokens(s,o.walkTokens),n=t(s,o),o.hooks&&(n=o.hooks.postprocess(n))}catch(t){e=t}return o.highlight=i,e?a(e):r(null,n)};if(!i||i.length<3)return l();if(delete o.highlight,!s.length)return l();let d=0;return L.walkTokens(s,(function(e){"code"===e.type&&(d++,setTimeout((()=>{i(e.text,e.lang,(function(t,n){if(t)return l(t);null!=n&&n!==e.text&&(e.text=n,e.escaped=!0),d--,0===d&&l()}))}),0))})),void(0===d&&l())}if(o.async)return Promise.resolve(o.hooks?o.hooks.preprocess(n):n).then((t=>e(t,o))).then((e=>o.walkTokens?Promise.all(L.walkTokens(e,o.walkTokens)).then((()=>e)):e)).then((e=>t(e,o))).then((e=>o.hooks?o.hooks.postprocess(e):e)).catch(a);try{o.hooks&&(n=o.hooks.preprocess(n));const r=e(n,o);o.walkTokens&&L.walkTokens(r,o.walkTokens);let i=t(r,o);return o.hooks&&(i=o.hooks.postprocess(i)),i}catch(e){return a(e)}}}function L(e,t,n){return P(Z.lex,R.parse)(e,t,n)}L.options=L.setOptions=function(e){var t;return L.defaults={...L.defaults,...e},t=L.defaults,o=t,L},L.getDefaults=function(){return{async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}},L.defaults=o,L.use=function(...e){const t=L.defaults.extensions||{renderers:{},childTokens:{}};e.forEach((e=>{const n={...e};if(n.async=L.defaults.async||n.async||!1,e.extensions&&(e.extensions.forEach((e=>{if(!e.name)throw new Error("extension name required");if(e.renderer){const n=t.renderers[e.name];t.renderers[e.name]=n?function(...t){let o=e.renderer.apply(this,t);return!1===o&&(o=n.apply(this,t)),o}:e.renderer}if(e.tokenizer){if(!e.level||"block"!==e.level&&"inline"!==e.level)throw new Error("extension level must be 'block' or 'inline'");t[e.level]?t[e.level].unshift(e.tokenizer):t[e.level]=[e.tokenizer],e.start&&("block"===e.level?t.startBlock?t.startBlock.push(e.start):t.startBlock=[e.start]:"inline"===e.level&&(t.startInline?t.startInline.push(e.start):t.startInline=[e.start]))}e.childTokens&&(t.childTokens[e.name]=e.childTokens)})),n.extensions=t),e.renderer){const t=L.defaults.renderer||new S;for(const n in e.renderer){const o=t[n];t[n]=(...r)=>{let i=e.renderer[n].apply(t,r);return!1===i&&(i=o.apply(t,r)),i}}n.renderer=t}if(e.tokenizer){const t=L.defaults.tokenizer||new F;for(const n in e.tokenizer){const o=t[n];t[n]=(...r)=>{let i=e.tokenizer[n].apply(t,r);return!1===i&&(i=o.apply(t,r)),i}}n.tokenizer=t}if(e.hooks){const t=L.defaults.hooks||new $;for(const n in e.hooks){const o=t[n];$.passThroughHooks.has(n)?t[n]=r=>{if(L.defaults.async)return Promise.resolve(e.hooks[n].call(t,r)).then((e=>o.call(t,e)));const i=e.hooks[n].call(t,r);return o.call(t,i)}:t[n]=(...r)=>{let i=e.hooks[n].apply(t,r);return!1===i&&(i=o.apply(t,r)),i}}n.hooks=t}if(e.walkTokens){const t=L.defaults.walkTokens;n.walkTokens=function(n){let o=[];return o.push(e.walkTokens.call(this,n)),t&&(o=o.concat(t.call(this,n))),o}}L.setOptions(n)}))},L.walkTokens=function(e,t){let n=[];for(const o of e)switch(n=n.concat(t.call(L,o)),o.type){case"table":for(const e of o.header)n=n.concat(L.walkTokens(e.tokens,t));for(const e of o.rows)for(const o of e)n=n.concat(L.walkTokens(o.tokens,t));break;case"list":n=n.concat(L.walkTokens(o.items,t));break;default:L.defaults.extensions&&L.defaults.extensions.childTokens&&L.defaults.extensions.childTokens[o.type]?L.defaults.extensions.childTokens[o.type].forEach((function(e){n=n.concat(L.walkTokens(o[e],t))})):o.tokens&&(n=n.concat(L.walkTokens(o.tokens,t)))}return n},L.parseInline=P(Z.lexInline,R.parseInline),L.Parser=R,L.parser=R.parse,L.Renderer=S,L.TextRenderer=T,L.Lexer=Z,L.lexer=Z.lex,L.Tokenizer=F,L.Slugger=J,L.Hooks=$,L.parse=L,L.options,L.setOptions,L.use,L.walkTokens,L.parseInline,R.parse,Z.lex}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,