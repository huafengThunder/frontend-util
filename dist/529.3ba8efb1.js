"use strict";(self.webpackChunkfrontend_util=self.webpackChunkfrontend_util||[]).push([[529],{8232:(e,o,n)=>{var t=n(4039);o.Z=void 0;var r=t(n(6934)),i=n(1527),a=(0,r.default)((0,i.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add");o.Z=a},9987:(e,o,n)=>{var t=n(4039);o.Z=void 0;var r=t(n(6934)),i=n(1527),a=(0,r.default)((0,i.jsx)("path",{d:"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"}),"Save");o.Z=a},5555:(e,o,n)=>{n.d(o,{Z:()=>x});var t=n(4529),r=n(7366),i=n(959),a=n(5924),s=n(6337),c=n(5428),l=n(9301),d=n(9488),u=n(1527);const p=(0,d.Z)((0,u.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add");var m=n(5083),h=n(7810);function f(e){return(0,h.Z)("MuiSpeedDialIcon",e)}const v=(0,m.Z)("MuiSpeedDialIcon",["root","icon","iconOpen","iconWithOpenIconOpen","openIcon","openIconOpen"]),b=["className","icon","open","openIcon"],g=(0,c.ZP)("span",{name:"MuiSpeedDialIcon",slot:"Root",overridesResolver:(e,o)=>{const{ownerState:n}=e;return[{[`& .${v.icon}`]:o.icon},{[`& .${v.icon}`]:n.open&&o.iconOpen},{[`& .${v.icon}`]:n.open&&n.openIcon&&o.iconWithOpenIconOpen},{[`& .${v.openIcon}`]:o.openIcon},{[`& .${v.openIcon}`]:n.open&&o.openIconOpen},o.root]}})((({theme:e,ownerState:o})=>({height:24,[`& .${v.icon}`]:(0,r.Z)({transition:e.transitions.create(["transform","opacity"],{duration:e.transitions.duration.short})},o.open&&(0,r.Z)({transform:"rotate(45deg)"},o.openIcon&&{opacity:0})),[`& .${v.openIcon}`]:(0,r.Z)({position:"absolute",transition:e.transitions.create(["transform","opacity"],{duration:e.transitions.duration.short}),opacity:0,transform:"rotate(-45deg)"},o.open&&{transform:"rotate(0deg)",opacity:1})}))),Z=i.forwardRef((function(e,o){const n=(0,l.Z)({props:e,name:"MuiSpeedDialIcon"}),{className:c,icon:d,openIcon:m}=n,h=(0,t.Z)(n,b),v=n,Z=(e=>{const{classes:o,open:n,openIcon:t}=e,r={root:["root"],icon:["icon",n&&"iconOpen",t&&n&&"iconWithOpenIconOpen"],openIcon:["openIcon",n&&"openIconOpen"]};return(0,s.Z)(r,f,o)})(v);function x(e,o){return i.isValidElement(e)?i.cloneElement(e,{className:o}):e}return(0,u.jsxs)(g,(0,r.Z)({className:(0,a.Z)(Z.root,c),ref:o,ownerState:v},h,{children:[m?x(m,Z.openIcon):null,d?x(d,Z.icon):(0,u.jsx)(p,{className:Z.icon})]}))}));Z.muiName="SpeedDialIcon";const x=Z},6673:(e,o,n)=>{n.d(o,{Z:()=>L});var t=n(4529),r=n(7366),i=n(959),a=(n(1357),n(5924)),s=n(6337),c=n(5428),l=n(9301),d=n(9815),u=n(4549),p=n(9292),m=n(2351),h=n(1527);const f=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],v={entering:{transform:"none"},entered:{transform:"none"}},b=i.forwardRef((function(e,o){const n=(0,d.Z)(),a={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{addEndListener:s,appear:c=!0,children:l,easing:b,in:g,onEnter:Z,onEntered:x,onEntering:w,onExit:y,onExited:E,onExiting:S,style:I,timeout:C=a,TransitionComponent:D=u.ZP}=e,R=(0,t.Z)(e,f),z=i.useRef(null),M=(0,m.Z)(z,l.ref,o),k=e=>o=>{if(e){const n=z.current;void 0===o?e(n):e(n,o)}},$=k(w),F=k(((e,o)=>{(0,p.n)(e);const t=(0,p.C)({style:I,timeout:C,easing:b},{mode:"enter"});e.style.webkitTransition=n.transitions.create("transform",t),e.style.transition=n.transitions.create("transform",t),Z&&Z(e,o)})),N=k(x),P=k(S),T=k((e=>{const o=(0,p.C)({style:I,timeout:C,easing:b},{mode:"exit"});e.style.webkitTransition=n.transitions.create("transform",o),e.style.transition=n.transitions.create("transform",o),y&&y(e)})),O=k(E);return(0,h.jsx)(D,(0,r.Z)({appear:c,in:g,nodeRef:z,onEnter:F,onEntered:N,onEntering:$,onExit:T,onExited:O,onExiting:P,addEndListener:e=>{s&&s(z.current,e)},timeout:C},R,{children:(e,o)=>i.cloneElement(l,(0,r.Z)({style:(0,r.Z)({transform:"scale(0)",visibility:"exited"!==e||g?void 0:"hidden"},v[e],I,l.props.style),ref:M},o))}))}));var g=n(3380),Z=n(6885),x=n(5083),w=n(7810);function y(e){return(0,w.Z)("MuiFab",e)}const E=(0,x.Z)("MuiFab",["root","primary","secondary","extended","circular","focusVisible","disabled","colorInherit","sizeSmall","sizeMedium","sizeLarge","info","error","warning","success"]),S=["children","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant"],I=(0,c.ZP)(g.Z,{name:"MuiFab",slot:"Root",shouldForwardProp:e=>(0,c.FO)(e)||"classes"===e,overridesResolver:(e,o)=>{const{ownerState:n}=e;return[o.root,o[n.variant],o[`size${(0,Z.Z)(n.size)}`],"inherit"===n.color&&o.colorInherit,o[(0,Z.Z)(n.size)],o[n.color]]}})((({theme:e,ownerState:o})=>{var n,t;return(0,r.Z)({},e.typography.button,{minHeight:36,transition:e.transitions.create(["background-color","box-shadow","border-color"],{duration:e.transitions.duration.short}),borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,zIndex:(e.vars||e).zIndex.fab,boxShadow:(e.vars||e).shadows[6],"&:active":{boxShadow:(e.vars||e).shadows[12]},color:e.vars?e.vars.palette.text.primary:null==(n=(t=e.palette).getContrastText)?void 0:n.call(t,e.palette.grey[300]),backgroundColor:(e.vars||e).palette.grey[300],"&:hover":{backgroundColor:(e.vars||e).palette.grey.A100,"@media (hover: none)":{backgroundColor:(e.vars||e).palette.grey[300]},textDecoration:"none"},[`&.${E.focusVisible}`]:{boxShadow:(e.vars||e).shadows[6]}},"small"===o.size&&{width:40,height:40},"medium"===o.size&&{width:48,height:48},"extended"===o.variant&&{borderRadius:24,padding:"0 16px",width:"auto",minHeight:"auto",minWidth:48,height:48},"extended"===o.variant&&"small"===o.size&&{width:"auto",padding:"0 8px",borderRadius:17,minWidth:34,height:34},"extended"===o.variant&&"medium"===o.size&&{width:"auto",padding:"0 16px",borderRadius:20,minWidth:40,height:40},"inherit"===o.color&&{color:"inherit"})}),(({theme:e,ownerState:o})=>(0,r.Z)({},"inherit"!==o.color&&"default"!==o.color&&null!=(e.vars||e).palette[o.color]&&{color:(e.vars||e).palette[o.color].contrastText,backgroundColor:(e.vars||e).palette[o.color].main,"&:hover":{backgroundColor:(e.vars||e).palette[o.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[o.color].main}}})),(({theme:e})=>({[`&.${E.disabled}`]:{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground}}))),C=i.forwardRef((function(e,o){const n=(0,l.Z)({props:e,name:"MuiFab"}),{children:i,className:c,color:d="default",component:u="button",disabled:p=!1,disableFocusRipple:m=!1,focusVisibleClassName:f,size:v="large",variant:b="circular"}=n,g=(0,t.Z)(n,S),x=(0,r.Z)({},n,{color:d,component:u,disabled:p,disableFocusRipple:m,size:v,variant:b}),w=(e=>{const{color:o,variant:n,classes:t,size:i}=e,a={root:["root",n,`size${(0,Z.Z)(i)}`,"inherit"===o?"colorInherit":o]},c=(0,s.Z)(a,y,t);return(0,r.Z)({},t,c)})(x);return(0,h.jsx)(I,(0,r.Z)({className:(0,a.Z)(w.root,c),component:u,disabled:p,focusRipple:!m,focusVisibleClassName:(0,a.Z)(w.focusVisible,f),ownerState:x,ref:o},g,{classes:w,children:i}))}));var D=n(9162),R=n(6028);function z(e){return(0,w.Z)("MuiSpeedDial",e)}const M=(0,x.Z)("MuiSpeedDial",["root","fab","directionUp","directionDown","directionLeft","directionRight","actions","actionsClosed"]),k=["ref"],$=["ariaLabel","FabProps","children","className","direction","hidden","icon","onBlur","onClose","onFocus","onKeyDown","onMouseEnter","onMouseLeave","onOpen","open","openIcon","TransitionComponent","transitionDuration","TransitionProps"],F=["ref"];function N(e){return"up"===e||"down"===e?"vertical":"right"===e||"left"===e?"horizontal":void 0}const P=(0,c.ZP)("div",{name:"MuiSpeedDial",slot:"Root",overridesResolver:(e,o)=>{const{ownerState:n}=e;return[o.root,o[`direction${(0,Z.Z)(n.direction)}`]]}})((({theme:e,ownerState:o})=>(0,r.Z)({zIndex:(e.vars||e).zIndex.speedDial,display:"flex",alignItems:"center",pointerEvents:"none"},"up"===o.direction&&{flexDirection:"column-reverse",[`& .${M.actions}`]:{flexDirection:"column-reverse",marginBottom:-32,paddingBottom:48}},"down"===o.direction&&{flexDirection:"column",[`& .${M.actions}`]:{flexDirection:"column",marginTop:-32,paddingTop:48}},"left"===o.direction&&{flexDirection:"row-reverse",[`& .${M.actions}`]:{flexDirection:"row-reverse",marginRight:-32,paddingRight:48}},"right"===o.direction&&{flexDirection:"row",[`& .${M.actions}`]:{flexDirection:"row",marginLeft:-32,paddingLeft:48}}))),T=(0,c.ZP)(C,{name:"MuiSpeedDial",slot:"Fab",overridesResolver:(e,o)=>o.fab})((()=>({pointerEvents:"auto"}))),O=(0,c.ZP)("div",{name:"MuiSpeedDial",slot:"Actions",overridesResolver:(e,o)=>{const{ownerState:n}=e;return[o.actions,!n.open&&o.actionsClosed]}})((({ownerState:e})=>(0,r.Z)({display:"flex",pointerEvents:"auto"},!e.open&&{transition:"top 0s linear 0.2s",pointerEvents:"none"}))),L=i.forwardRef((function(e,o){const n=(0,l.Z)({props:e,name:"MuiSpeedDial"}),c=(0,d.Z)(),u={enter:c.transitions.duration.enteringScreen,exit:c.transitions.duration.leavingScreen},{ariaLabel:p,FabProps:{ref:f}={},children:v,className:g,direction:x="up",hidden:w=!1,icon:y,onBlur:E,onClose:S,onFocus:I,onKeyDown:C,onMouseEnter:M,onMouseLeave:L,onOpen:V,open:j,TransitionComponent:W=b,transitionDuration:A=u,TransitionProps:B}=n,H=(0,t.Z)(n.FabProps,k),K=(0,t.Z)(n,$),[_,U]=(0,R.Z)({controlled:j,default:!1,name:"SpeedDial",state:"open"}),q=(0,r.Z)({},n,{open:_,direction:x}),G=(e=>{const{classes:o,open:n,direction:t}=e,r={root:["root",`direction${(0,Z.Z)(t)}`],fab:["fab"],actions:["actions",!n&&"actionsClosed"]};return(0,s.Z)(r,z,o)})(q),J=i.useRef();i.useEffect((()=>()=>{clearTimeout(J.current)}),[]);const Q=i.useRef(0),X=i.useRef(),Y=i.useRef([]);Y.current=[Y.current[0]];const ee=i.useCallback((e=>{Y.current[0]=e}),[]),oe=(0,m.Z)(f,ee),ne=(e,o)=>n=>{Y.current[e+1]=n,o&&o(n)};i.useEffect((()=>{_||(Q.current=0,X.current=void 0)}),[_]);const te=e=>{"mouseleave"===e.type&&L&&L(e),"blur"===e.type&&E&&E(e),clearTimeout(J.current),"blur"===e.type?J.current=setTimeout((()=>{U(!1),S&&S(e,"blur")})):(U(!1),S&&S(e,"mouseLeave"))},re=e=>{"mouseenter"===e.type&&M&&M(e),"focus"===e.type&&I&&I(e),clearTimeout(J.current),_||(J.current=setTimeout((()=>{U(!0),V&&V(e,{focus:"focus",mouseenter:"mouseEnter"}[e.type])})))},ie=p.replace(/^[^a-z]+|[^\w:.-]+/gi,""),ae=i.Children.toArray(v).filter((e=>i.isValidElement(e))),se=ae.map(((e,o)=>{const n=e.props,{FabProps:{ref:a}={},tooltipPlacement:s}=n,c=(0,t.Z)(n.FabProps,F),l=s||("vertical"===N(x)?"left":"top");return i.cloneElement(e,{FabProps:(0,r.Z)({},c,{ref:ne(o,a)}),delay:30*(_?o:ae.length-o),open:_,tooltipPlacement:l,id:`${ie}-action-${o}`})}));return(0,h.jsxs)(P,(0,r.Z)({className:(0,a.Z)(G.root,g),ref:o,role:"presentation",onKeyDown:e=>{C&&C(e);const o=e.key.replace("Arrow","").toLowerCase(),{current:n=o}=X;if("Escape"===e.key)return U(!1),Y.current[0].focus(),void(S&&S(e,"escapeKeyDown"));if(N(o)===N(n)&&void 0!==N(o)){e.preventDefault();const i=o===n?1:-1,a=(t=Q.current+i,0,r=Y.current.length-1,t<0?0:t>r?r:t);Y.current[a].focus(),Q.current=a,X.current=n}var t,r},onBlur:te,onFocus:re,onMouseEnter:re,onMouseLeave:te,ownerState:q},K,{children:[(0,h.jsx)(W,(0,r.Z)({in:!w,timeout:A,unmountOnExit:!0},B,{children:(0,h.jsx)(T,(0,r.Z)({color:"primary","aria-label":p,"aria-haspopup":"true","aria-expanded":_,"aria-controls":`${ie}-actions`},H,{onClick:e=>{H.onClick&&H.onClick(e),clearTimeout(J.current),_?(U(!1),S&&S(e,"toggle")):(U(!0),V&&V(e,"toggle"))},className:(0,a.Z)(G.fab,H.className),ref:oe,ownerState:q,children:i.isValidElement(y)&&(0,D.Z)(y,["SpeedDialIcon"])?i.cloneElement(y,{open:_}):y}))})),(0,h.jsx)(O,{id:`${ie}-actions`,role:"menu","aria-orientation":N(x),className:(0,a.Z)(G.actions,!_&&G.actionsClosed),ownerState:q,children:se})]}))}))},8216:(e,o,n)=>{n.d(o,{Z:()=>r});var t=n(9097);function r(e,o,n){return(o=(0,t.Z)(o))in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QmYsR0FBYSxHQUNUSixHQUNGQSxFQUFPbUIsRUFBTyxVQUVsQixFQW1GSS9KLFdBQVcsT0FBS0ksRUFBUTRFLElBQUtrRCxFQUFTbEksV0FDdENGLElBQUsySixHQUNML0ssV0FBWUEsRUFDWmdDLFNBQXVCLGlCQUFxQi9CLEtBQVMsRUFBQW1OLEVBQUEsR0FBYW5OLEVBQU0sQ0FBQyxrQkFBaUMsZUFBbUJBLEVBQU0sQ0FDaklDLFNBQ0dELFNBRVMsU0FBS21KLEVBQWtCLENBQ3ZDdUMsR0FBSSxHQUFHQSxhQUNQYyxLQUFNLE9BQ04sbUJBQW9CeEUsRUFBZUMsR0FDbkM1RyxXQUFXLE9BQUtJLEVBQVErRyxTQUFVdkksR0FBUXdCLEVBQVEySCxlQUNsRHJKLFdBQVlBLEVBQ1pnQyxTQUFVQSxRQUdoQixHLGdEQ3RZZSxTQUFTcUwsRUFBZ0JDLEVBQUtaLEVBQUtNLEdBWWhELE9BWEFOLEdBQU0sT0FBY0EsTUFDVFksRUFDVEMsT0FBT0MsZUFBZUYsRUFBS1osRUFBSyxDQUM5Qk0sTUFBT0EsRUFDUFMsWUFBWSxFQUNaQyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkwsRUFBSVosR0FBT00sRUFFTk0sQ0FDVCxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK2ljb25zLW1hdGVyaWFsQDUuMTQuMThfQG11aSttYXRlcmlhbEA1LjE0LjFfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9AbXVpL2ljb25zLW1hdGVyaWFsL0FkZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkraWNvbnMtbWF0ZXJpYWxANS4xNC4xOF9AbXVpK21hdGVyaWFsQDUuMTQuMV9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0BtdWkvaWNvbnMtbWF0ZXJpYWwvU2F2ZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNC4xX0BlbW90aW9uK3JlYWN0QDExLjExLjFfQGVtb3Rpb24rc3R5bGVkQDExLjExLjBfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0FkZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNC4xX0BlbW90aW9uK3JlYWN0QDExLjExLjFfQGVtb3Rpb24rc3R5bGVkQDExLjExLjBfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3BlZWREaWFsSWNvbi9zcGVlZERpYWxJY29uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNC4xX0BlbW90aW9uK3JlYWN0QDExLjExLjFfQGVtb3Rpb24rc3R5bGVkQDExLjExLjBfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3BlZWREaWFsSWNvbi9TcGVlZERpYWxJY29uLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE0LjFfQGVtb3Rpb24rcmVhY3RAMTEuMTEuMV9AZW1vdGlvbitzdHlsZWRAMTEuMTEuMF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9ab29tL1pvb20uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbXVpK21hdGVyaWFsQDUuMTQuMV9AZW1vdGlvbityZWFjdEAxMS4xMS4xX0BlbW90aW9uK3N0eWxlZEAxMS4xMS4wX3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZhYi9mYWJDbGFzc2VzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE0LjFfQGVtb3Rpb24rcmVhY3RAMTEuMTEuMV9AZW1vdGlvbitzdHlsZWRAMTEuMTEuMF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9GYWIvRmFiLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvLnBucG0vQG11aSttYXRlcmlhbEA1LjE0LjFfQGVtb3Rpb24rcmVhY3RAMTEuMTEuMV9AZW1vdGlvbitzdHlsZWRAMTEuMTEuMF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9TcGVlZERpYWwvc3BlZWREaWFsQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtdWkrbWF0ZXJpYWxANS4xNC4xX0BlbW90aW9uK3JlYWN0QDExLjExLjFfQGVtb3Rpb24rc3R5bGVkQDExLjExLjBfcmVhY3QtZG9tQDE4LjIuMF9yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3BlZWREaWFsL1NwZWVkRGlhbC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BiYWJlbCtydW50aW1lQDcuMjIuNi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cInVzZSBjbGllbnRcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcbnZhciBfZGVmYXVsdCA9ICgwLCBfY3JlYXRlU3ZnSWNvbi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfanN4UnVudGltZS5qc3gpKFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDEzaC02djZoLTJ2LTZINXYtMmg2VjVoMnY2aDZ2MnpcIlxufSksICdBZGQnKTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXCJ1c2UgY2xpZW50XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG52YXIgX2pzeFJ1bnRpbWUgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xNyAzSDVjLTEuMTEgMC0yIC45LTIgMnYxNGMwIDEuMS44OSAyIDIgMmgxNGMxLjEgMCAyLS45IDItMlY3bC00LTR6bS01IDE2Yy0xLjY2IDAtMy0xLjM0LTMtM3MxLjM0LTMgMy0zIDMgMS4zNCAzIDMtMS4zNCAzLTMgM3ptMy0xMEg1VjVoMTB2NHpcIlxufSksICdTYXZlJyk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVN2Z0ljb24gfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN2Z0ljb24oIC8qI19fUFVSRV9fKi9fanN4KFwicGF0aFwiLCB7XG4gIGQ6IFwiTTE5IDEzaC02djZoLTJ2LTZINXYtMmg2VjVoMnY2aDZ2MnpcIlxufSksICdBZGQnKTsiLCJpbXBvcnQgeyB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3BlZWREaWFsSWNvblV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU3BlZWREaWFsSWNvbicsIHNsb3QpO1xufVxuY29uc3Qgc3BlZWREaWFsSWNvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTcGVlZERpYWxJY29uJywgWydyb290JywgJ2ljb24nLCAnaWNvbk9wZW4nLCAnaWNvbldpdGhPcGVuSWNvbk9wZW4nLCAnb3Blbkljb24nLCAnb3Blbkljb25PcGVuJ10pO1xuZXhwb3J0IGRlZmF1bHQgc3BlZWREaWFsSWNvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiaWNvblwiLCBcIm9wZW5cIiwgXCJvcGVuSWNvblwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQWRkSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQWRkJztcbmltcG9ydCBzcGVlZERpYWxJY29uQ2xhc3NlcywgeyBnZXRTcGVlZERpYWxJY29uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zcGVlZERpYWxJY29uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgb3BlbixcbiAgICBvcGVuSWNvblxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgaWNvbjogWydpY29uJywgb3BlbiAmJiAnaWNvbk9wZW4nLCBvcGVuSWNvbiAmJiBvcGVuICYmICdpY29uV2l0aE9wZW5JY29uT3BlbiddLFxuICAgIG9wZW5JY29uOiBbJ29wZW5JY29uJywgb3BlbiAmJiAnb3Blbkljb25PcGVuJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRTcGVlZERpYWxJY29uVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBTcGVlZERpYWxJY29uUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVNwZWVkRGlhbEljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFt7XG4gICAgICBbYCYgLiR7c3BlZWREaWFsSWNvbkNsYXNzZXMuaWNvbn1gXTogc3R5bGVzLmljb25cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7c3BlZWREaWFsSWNvbkNsYXNzZXMuaWNvbn1gXTogb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5pY29uT3BlblxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtzcGVlZERpYWxJY29uQ2xhc3Nlcy5pY29ufWBdOiBvd25lclN0YXRlLm9wZW4gJiYgb3duZXJTdGF0ZS5vcGVuSWNvbiAmJiBzdHlsZXMuaWNvbldpdGhPcGVuSWNvbk9wZW5cbiAgICB9LCB7XG4gICAgICBbYCYgLiR7c3BlZWREaWFsSWNvbkNsYXNzZXMub3Blbkljb259YF06IHN0eWxlcy5vcGVuSWNvblxuICAgIH0sIHtcbiAgICAgIFtgJiAuJHtzcGVlZERpYWxJY29uQ2xhc3Nlcy5vcGVuSWNvbn1gXTogb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5vcGVuSWNvbk9wZW5cbiAgICB9LCBzdHlsZXMucm9vdF07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiAoe1xuICBoZWlnaHQ6IDI0LFxuICBbYCYgLiR7c3BlZWREaWFsSWNvbkNsYXNzZXMuaWNvbn1gXTogX2V4dGVuZHMoe1xuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10sIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgIH0pXG4gIH0sIG93bmVyU3RhdGUub3BlbiAmJiBfZXh0ZW5kcyh7XG4gICAgdHJhbnNmb3JtOiAncm90YXRlKDQ1ZGVnKSdcbiAgfSwgb3duZXJTdGF0ZS5vcGVuSWNvbiAmJiB7XG4gICAgb3BhY2l0eTogMFxuICB9KSksXG4gIFtgJiAuJHtzcGVlZERpYWxJY29uQ2xhc3Nlcy5vcGVuSWNvbn1gXTogX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10sIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgIH0pLFxuICAgIG9wYWNpdHk6IDAsXG4gICAgdHJhbnNmb3JtOiAncm90YXRlKC00NWRlZyknXG4gIH0sIG93bmVyU3RhdGUub3BlbiAmJiB7XG4gICAgdHJhbnNmb3JtOiAncm90YXRlKDBkZWcpJyxcbiAgICBvcGFjaXR5OiAxXG4gIH0pXG59KSk7XG5jb25zdCBTcGVlZERpYWxJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3BlZWREaWFsSWNvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpU3BlZWREaWFsSWNvbidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGljb246IGljb25Qcm9wLFxuICAgICAgb3Blbkljb246IG9wZW5JY29uUHJvcFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gcHJvcHM7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgZnVuY3Rpb24gZm9ybWF0SWNvbihpY29uLCBuZXdDbGFzc05hbWUpIHtcbiAgICBpZiAoIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChpY29uKSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoaWNvbiwge1xuICAgICAgICBjbGFzc05hbWU6IG5ld0NsYXNzTmFtZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpY29uO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3BlZWREaWFsSWNvblJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW29wZW5JY29uUHJvcCA/IGZvcm1hdEljb24ob3Blbkljb25Qcm9wLCBjbGFzc2VzLm9wZW5JY29uKSA6IG51bGwsIGljb25Qcm9wID8gZm9ybWF0SWNvbihpY29uUHJvcCwgY2xhc3Nlcy5pY29uKSA6IC8qI19fUFVSRV9fKi9fanN4KEFkZEljb24sIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uXG4gICAgfSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3BlZWREaWFsSWNvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGljb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgaW4gdGhlIFNwZWVkRGlhbCBGbG9hdGluZyBBY3Rpb24gQnV0dG9uIHdoZW4gdGhlIFNwZWVkRGlhbCBpcyBvcGVuLlxuICAgKi9cbiAgb3Blbkljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuU3BlZWREaWFsSWNvbi5tdWlOYW1lID0gJ1NwZWVkRGlhbEljb24nO1xuZXhwb3J0IGRlZmF1bHQgU3BlZWREaWFsSWNvbjsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhZGRFbmRMaXN0ZW5lclwiLCBcImFwcGVhclwiLCBcImNoaWxkcmVuXCIsIFwiZWFzaW5nXCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3Qgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIHRyYW5zZm9ybTogJ25vbmUnXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICB0cmFuc2Zvcm06ICdub25lJ1xuICB9XG59O1xuXG4vKipcbiAqIFRoZSBab29tIHRyYW5zaXRpb24gY2FuIGJlIHVzZWQgZm9yIHRoZSBmbG9hdGluZyB2YXJpYW50IG9mIHRoZVxuICogW0J1dHRvbl0oL21hdGVyaWFsLXVpL3JlYWN0LWJ1dHRvbi8jZmxvYXRpbmctYWN0aW9uLWJ1dHRvbnMpIGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cbmNvbnN0IFpvb20gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBab29tKHByb3BzLCByZWYpIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCBkZWZhdWx0VGltZW91dCA9IHtcbiAgICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICB9O1xuICBjb25zdCB7XG4gICAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICAgIGFwcGVhciA9IHRydWUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVhc2luZyxcbiAgICAgIGluOiBpblByb3AsXG4gICAgICBvbkVudGVyLFxuICAgICAgb25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCxcbiAgICAgIG9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nLFxuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0ID0gZGVmYXVsdFRpbWVvdXQsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IFRyYW5zaXRpb25cbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihub2RlUmVmLCBjaGlsZHJlbi5yZWYsIHJlZik7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiBtYXliZUlzQXBwZWFyaW5nID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7XG5cbiAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgaWYgKG1heWJlSXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUsIG1heWJlSXNBcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmVkKTtcbiAgY29uc3QgaGFuZGxlRXhpdGluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0aW5nKTtcbiAgY29uc3QgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sobm9kZSA9PiB7XG4gICAgY29uc3QgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlLFxuICAgICAgdGltZW91dCxcbiAgICAgIGVhc2luZ1xuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdleGl0J1xuICAgIH0pO1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHRyYW5zaXRpb25Qcm9wcyk7XG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuICBjb25zdCBoYW5kbGVBZGRFbmRMaXN0ZW5lciA9IG5leHQgPT4ge1xuICAgIGlmIChhZGRFbmRMaXN0ZW5lcikge1xuICAgICAgLy8gT2xkIGNhbGwgc2lnbmF0dXJlIGJlZm9yZSBgcmVhY3QtdHJhbnNpdGlvbi1ncm91cGAgaW1wbGVtZW50ZWQgYG5vZGVSZWZgXG4gICAgICBhZGRFbmRMaXN0ZW5lcihub2RlUmVmLmN1cnJlbnQsIG5leHQpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IGFwcGVhcixcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IG5vZGVSZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhZGRFbmRMaXN0ZW5lcjogaGFuZGxlQWRkRW5kTGlzdGVuZXIsXG4gICAgdGltZW91dDogdGltZW91dFxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAoc3RhdGUsIGNoaWxkUHJvcHMpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gWm9vbS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmcgRE9NXG4gICAqIG5vZGUgYW5kIGEgZG9uZSBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gTm90ZTogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgZWFzaW5nIG9yIGEgb2JqZWN0IGNvbnRhaW5pbmcgZW50ZXIgYW5kIGV4aXQgdmFsdWVzLlxuICAgKi9cbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBab29tOyIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMgYXMgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRGYWJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZhYicsIHNsb3QpO1xufVxuY29uc3QgZmFiQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUZhYicsIFsncm9vdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdleHRlbmRlZCcsICdjaXJjdWxhcicsICdmb2N1c1Zpc2libGUnLCAnZGlzYWJsZWQnLCAnY29sb3JJbmhlcml0JywgJ3NpemVTbWFsbCcsICdzaXplTWVkaXVtJywgJ3NpemVMYXJnZScsICdpbmZvJywgJ2Vycm9yJywgJ3dhcm5pbmcnLCAnc3VjY2VzcyddKTtcbmV4cG9ydCBkZWZhdWx0IGZhYkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwic2l6ZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGZhYkNsYXNzZXMsIHsgZ2V0RmFiVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9mYWJDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3NlcyxcbiAgICBzaXplXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBjb2xvciA9PT0gJ2luaGVyaXQnID8gJ2NvbG9ySW5oZXJpdCcgOiBjb2xvcl1cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZhYlV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBGYWJSb290ID0gc3R5bGVkKEJ1dHRvbkJhc2UsIHtcbiAgbmFtZTogJ011aUZhYicsXG4gIHNsb3Q6ICdSb290JyxcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2BzaXplJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuc2l6ZSl9YF0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyAmJiBzdHlsZXMuY29sb3JJbmhlcml0LCBzdHlsZXNbY2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpXSwgc3R5bGVzW293bmVyU3RhdGUuY29sb3JdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgdmFyIF90aGVtZSRwYWxldHRlJGdldENvbiwgX3RoZW1lJHBhbGV0dGU7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5idXR0b24sIHtcbiAgICBtaW5IZWlnaHQ6IDM2LFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2JhY2tncm91bmQtY29sb3InLCAnYm94LXNoYWRvdycsICdib3JkZXItY29sb3InXSwge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gICAgfSksXG4gICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICBwYWRkaW5nOiAwLFxuICAgIG1pbldpZHRoOiAwLFxuICAgIHdpZHRoOiA1NixcbiAgICBoZWlnaHQ6IDU2LFxuICAgIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5mYWIsXG4gICAgYm94U2hhZG93OiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhZG93c1s2XSxcbiAgICAnJjphY3RpdmUnOiB7XG4gICAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzWzEyXVxuICAgIH0sXG4gICAgY29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUudGV4dC5wcmltYXJ5IDogKF90aGVtZSRwYWxldHRlJGdldENvbiA9IChfdGhlbWUkcGFsZXR0ZSA9IHRoZW1lLnBhbGV0dGUpLmdldENvbnRyYXN0VGV4dCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRwYWxldHRlJGdldENvbi5jYWxsKF90aGVtZSRwYWxldHRlLCB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSksXG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5ncmV5WzMwMF0sXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmdyZXkuQTEwMCxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZ3JleVszMDBdXG4gICAgICB9LFxuICAgICAgdGV4dERlY29yYXRpb246ICdub25lJ1xuICAgIH0sXG4gICAgW2AmLiR7ZmFiQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbNl1cbiAgICB9XG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgd2lkdGg6IDQwLFxuICAgIGhlaWdodDogNDBcbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnbWVkaXVtJyAmJiB7XG4gICAgd2lkdGg6IDQ4LFxuICAgIGhlaWdodDogNDhcbiAgfSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZXh0ZW5kZWQnICYmIHtcbiAgICBib3JkZXJSYWRpdXM6IDQ4IC8gMixcbiAgICBwYWRkaW5nOiAnMCAxNnB4JyxcbiAgICB3aWR0aDogJ2F1dG8nLFxuICAgIG1pbkhlaWdodDogJ2F1dG8nLFxuICAgIG1pbldpZHRoOiA0OCxcbiAgICBoZWlnaHQ6IDQ4XG4gIH0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2V4dGVuZGVkJyAmJiBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICAgIHdpZHRoOiAnYXV0bycsXG4gICAgcGFkZGluZzogJzAgOHB4JyxcbiAgICBib3JkZXJSYWRpdXM6IDM0IC8gMixcbiAgICBtaW5XaWR0aDogMzQsXG4gICAgaGVpZ2h0OiAzNFxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdleHRlbmRlZCcgJiYgb3duZXJTdGF0ZS5zaXplID09PSAnbWVkaXVtJyAmJiB7XG4gICAgd2lkdGg6ICdhdXRvJyxcbiAgICBwYWRkaW5nOiAnMCAxNnB4JyxcbiAgICBib3JkZXJSYWRpdXM6IDQwIC8gMixcbiAgICBtaW5XaWR0aDogNDAsXG4gICAgaGVpZ2h0OiA0MFxuICB9LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgfSk7XG59LCAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiBvd25lclN0YXRlLmNvbG9yICE9PSAnZGVmYXVsdCcgJiYgKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0gIT0gbnVsbCAmJiB7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5jb250cmFzdFRleHQsXG4gIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpbixcbiAgJyY6aG92ZXInOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5kYXJrLFxuICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG4gICAgfVxuICB9XG59KSwgKHtcbiAgdGhlbWVcbn0pID0+ICh7XG4gIFtgJi4ke2ZhYkNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkLFxuICAgIGJveFNoYWRvdzogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYWRvd3NbMF0sXG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kXG4gIH1cbn0pKTtcbmNvbnN0IEZhYiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZhYihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRmFiJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdkZWZhdWx0JyxcbiAgICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IGZhbHNlLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgc2l6ZSA9ICdsYXJnZScsXG4gICAgICB2YXJpYW50ID0gJ2NpcmN1bGFyJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBzaXplLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEZhYlJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmFiLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNhZGRpbmctbmV3LWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdkZWZhdWx0J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdlcnJvcicsICdpbmZvJywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSBpcyBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqIEBkZWZhdWx0ICdsYXJnZSdcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdjaXJjdWxhcidcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY2lyY3VsYXInLCAnZXh0ZW5kZWQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEZhYjsiLCJpbXBvcnQgeyB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3BlZWREaWFsVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTcGVlZERpYWwnLCBzbG90KTtcbn1cbmNvbnN0IHNwZWVkRGlhbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTcGVlZERpYWwnLCBbJ3Jvb3QnLCAnZmFiJywgJ2RpcmVjdGlvblVwJywgJ2RpcmVjdGlvbkRvd24nLCAnZGlyZWN0aW9uTGVmdCcsICdkaXJlY3Rpb25SaWdodCcsICdhY3Rpb25zJywgJ2FjdGlvbnNDbG9zZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBzcGVlZERpYWxDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInJlZlwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWFMYWJlbFwiLCBcIkZhYlByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXJlY3Rpb25cIiwgXCJoaWRkZW5cIiwgXCJpY29uXCIsIFwib25CbHVyXCIsIFwib25DbG9zZVwiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbk1vdXNlRW50ZXJcIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwib3Blbkljb25cIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdLFxuICBfZXhjbHVkZWQzID0gW1wicmVmXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCBab29tIGZyb20gJy4uL1pvb20nO1xuaW1wb3J0IEZhYiBmcm9tICcuLi9GYWInO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgaXNNdWlFbGVtZW50IGZyb20gJy4uL3V0aWxzL2lzTXVpRWxlbWVudCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VDb250cm9sbGVkIGZyb20gJy4uL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuaW1wb3J0IHNwZWVkRGlhbENsYXNzZXMsIHsgZ2V0U3BlZWREaWFsVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zcGVlZERpYWxDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBvcGVuLFxuICAgIGRpcmVjdGlvblxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYGRpcmVjdGlvbiR7Y2FwaXRhbGl6ZShkaXJlY3Rpb24pfWBdLFxuICAgIGZhYjogWydmYWInXSxcbiAgICBhY3Rpb25zOiBbJ2FjdGlvbnMnLCAhb3BlbiAmJiAnYWN0aW9uc0Nsb3NlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U3BlZWREaWFsVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5mdW5jdGlvbiBnZXRPcmllbnRhdGlvbihkaXJlY3Rpb24pIHtcbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJyB8fCBkaXJlY3Rpb24gPT09ICdkb3duJykge1xuICAgIHJldHVybiAndmVydGljYWwnO1xuICB9XG4gIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcgfHwgZGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICByZXR1cm4gJ2hvcml6b250YWwnO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmNvbnN0IGRpYWxSYWRpdXMgPSAzMjtcbmNvbnN0IHNwYWNpbmdBY3Rpb25zID0gMTY7XG5jb25zdCBTcGVlZERpYWxSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlTcGVlZERpYWwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2BkaXJlY3Rpb24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5kaXJlY3Rpb24pfWBdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgekluZGV4OiAodGhlbWUudmFycyB8fCB0aGVtZSkuekluZGV4LnNwZWVkRGlhbCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59LCBvd25lclN0YXRlLmRpcmVjdGlvbiA9PT0gJ3VwJyAmJiB7XG4gIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZScsXG4gIFtgJiAuJHtzcGVlZERpYWxDbGFzc2VzLmFjdGlvbnN9YF06IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uLXJldmVyc2UnLFxuICAgIG1hcmdpbkJvdHRvbTogLWRpYWxSYWRpdXMsXG4gICAgcGFkZGluZ0JvdHRvbTogc3BhY2luZ0FjdGlvbnMgKyBkaWFsUmFkaXVzXG4gIH1cbn0sIG93bmVyU3RhdGUuZGlyZWN0aW9uID09PSAnZG93bicgJiYge1xuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgW2AmIC4ke3NwZWVkRGlhbENsYXNzZXMuYWN0aW9uc31gXToge1xuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIG1hcmdpblRvcDogLWRpYWxSYWRpdXMsXG4gICAgcGFkZGluZ1RvcDogc3BhY2luZ0FjdGlvbnMgKyBkaWFsUmFkaXVzXG4gIH1cbn0sIG93bmVyU3RhdGUuZGlyZWN0aW9uID09PSAnbGVmdCcgJiYge1xuICBmbGV4RGlyZWN0aW9uOiAncm93LXJldmVyc2UnLFxuICBbYCYgLiR7c3BlZWREaWFsQ2xhc3Nlcy5hY3Rpb25zfWBdOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJyxcbiAgICBtYXJnaW5SaWdodDogLWRpYWxSYWRpdXMsXG4gICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nQWN0aW9ucyArIGRpYWxSYWRpdXNcbiAgfVxufSwgb3duZXJTdGF0ZS5kaXJlY3Rpb24gPT09ICdyaWdodCcgJiYge1xuICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgW2AmIC4ke3NwZWVkRGlhbENsYXNzZXMuYWN0aW9uc31gXToge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIG1hcmdpbkxlZnQ6IC1kaWFsUmFkaXVzLFxuICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nQWN0aW9ucyArIGRpYWxSYWRpdXNcbiAgfVxufSkpO1xuY29uc3QgU3BlZWREaWFsRmFiID0gc3R5bGVkKEZhYiwge1xuICBuYW1lOiAnTXVpU3BlZWREaWFsJyxcbiAgc2xvdDogJ0ZhYicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLmZhYlxufSkoKCkgPT4gKHtcbiAgcG9pbnRlckV2ZW50czogJ2F1dG8nXG59KSk7XG5jb25zdCBTcGVlZERpYWxBY3Rpb25zID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlTcGVlZERpYWwnLFxuICBzbG90OiAnQWN0aW9ucycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuYWN0aW9ucywgIW93bmVyU3RhdGUub3BlbiAmJiBzdHlsZXMuYWN0aW9uc0Nsb3NlZF07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBwb2ludGVyRXZlbnRzOiAnYXV0bydcbn0sICFvd25lclN0YXRlLm9wZW4gJiYge1xuICB0cmFuc2l0aW9uOiAndG9wIDBzIGxpbmVhciAwLjJzJyxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnXG59KSk7XG5jb25zdCBTcGVlZERpYWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTcGVlZERpYWwoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVNwZWVkRGlhbCdcbiAgfSk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3QgZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiA9IHtcbiAgICBlbnRlcjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICB9O1xuICBjb25zdCB7XG4gICAgICBhcmlhTGFiZWwsXG4gICAgICBGYWJQcm9wczoge1xuICAgICAgICByZWY6IG9yaWdEaWFsQnV0dG9uUmVmXG4gICAgICB9ID0ge30sXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5Qcm9wLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlyZWN0aW9uID0gJ3VwJyxcbiAgICAgIGhpZGRlbiA9IGZhbHNlLFxuICAgICAgaWNvbixcbiAgICAgIG9uQmx1cixcbiAgICAgIG9uQ2xvc2UsXG4gICAgICBvbkZvY3VzLFxuICAgICAgb25LZXlEb3duLFxuICAgICAgb25Nb3VzZUVudGVyLFxuICAgICAgb25Nb3VzZUxlYXZlLFxuICAgICAgb25PcGVuLFxuICAgICAgb3Blbjogb3BlblByb3AsXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gWm9vbSxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBUcmFuc2l0aW9uUHJvcHNcbiAgICB9ID0gcHJvcHMsXG4gICAgRmFiUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcy5GYWJQcm9wcywgX2V4Y2x1ZGVkKSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcbiAgY29uc3QgW29wZW4sIHNldE9wZW5TdGF0ZV0gPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiBvcGVuUHJvcCxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICBuYW1lOiAnU3BlZWREaWFsJyxcbiAgICBzdGF0ZTogJ29wZW4nXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgb3BlbixcbiAgICBkaXJlY3Rpb25cbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgZXZlbnRUaW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoZXZlbnRUaW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgLyoqXG4gICAqIGFuIGluZGV4IGluIGFjdGlvbnMuY3VycmVudFxuICAgKi9cbiAgY29uc3QgZm9jdXNlZEFjdGlvbiA9IFJlYWN0LnVzZVJlZigwKTtcblxuICAvKipcbiAgICogcHJlc3NpbmcgdGhpcyBrZXkgd2hpbGUgdGhlIGZvY3VzIGlzIG9uIGEgY2hpbGQgU3BlZWREaWFsQWN0aW9uIGZvY3VzZXNcbiAgICogdGhlIG5leHQgU3BlZWREaWFsQWN0aW9uLlxuICAgKiBJdCBpcyBlcXVhbCB0byB0aGUgZmlyc3QgYXJyb3cga2V5IHByZXNzZWQgd2hpbGUgZm9jdXMgaXMgb24gdGhlIFNwZWVkRGlhbFxuICAgKiB0aGF0IGlzIG5vdCBvcnRob2dvbmFsIHRvIHRoZSBkaXJlY3Rpb24uXG4gICAqIEB0eXBlIHt1dGlscy5BcnJvd0tleT99XG4gICAqL1xuICBjb25zdCBuZXh0SXRlbUFycm93S2V5ID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgLyoqXG4gICAqIHJlZnMgdG8gdGhlIEJ1dHRvbiB0aGF0IGhhdmUgYW4gYWN0aW9uIGFzc29jaWF0ZWQgdG8gdGhlbSBpbiB0aGlzIFNwZWVkRGlhbFxuICAgKiBbRmFiLCAuLi4oU3BlZWREaWFsQWN0aW9ucyA+IEJ1dHRvbildXG4gICAqIEB0eXBlIHtIVE1MQnV0dG9uRWxlbWVudFtdfVxuICAgKi9cbiAgY29uc3QgYWN0aW9ucyA9IFJlYWN0LnVzZVJlZihbXSk7XG4gIGFjdGlvbnMuY3VycmVudCA9IFthY3Rpb25zLmN1cnJlbnRbMF1dO1xuICBjb25zdCBoYW5kbGVPd25GYWJSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmYWJGZWYgPT4ge1xuICAgIGFjdGlvbnMuY3VycmVudFswXSA9IGZhYkZlZjtcbiAgfSwgW10pO1xuICBjb25zdCBoYW5kbGVGYWJSZWYgPSB1c2VGb3JrUmVmKG9yaWdEaWFsQnV0dG9uUmVmLCBoYW5kbGVPd25GYWJSZWYpO1xuXG4gIC8qKlxuICAgKiBjcmVhdGVzIGEgcmVmIGNhbGxiYWNrIGZvciB0aGUgQnV0dG9uIGluIGEgU3BlZWREaWFsQWN0aW9uXG4gICAqIElzIGNhbGxlZCBiZWZvcmUgdGhlIG9yaWdpbmFsIHJlZiBjYWxsYmFjayBmb3IgQnV0dG9uIHRoYXQgd2FzIHNldCBpbiBidXR0b25Qcm9wc1xuICAgKlxuICAgKiBAcGFyYW0gZGlhbEFjdGlvbkluZGV4IHtudW1iZXJ9XG4gICAqIEBwYXJhbSBvcmlnQnV0dG9uUmVmIHtSZWFjdC5SZWZPYmplY3Q/fVxuICAgKi9cbiAgY29uc3QgY3JlYXRlSGFuZGxlU3BlZWREaWFsQWN0aW9uQnV0dG9uUmVmID0gKGRpYWxBY3Rpb25JbmRleCwgb3JpZ0J1dHRvblJlZikgPT4ge1xuICAgIHJldHVybiBidXR0b25SZWYgPT4ge1xuICAgICAgYWN0aW9ucy5jdXJyZW50W2RpYWxBY3Rpb25JbmRleCArIDFdID0gYnV0dG9uUmVmO1xuICAgICAgaWYgKG9yaWdCdXR0b25SZWYpIHtcbiAgICAgICAgb3JpZ0J1dHRvblJlZihidXR0b25SZWYpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG4gIGNvbnN0IGhhbmRsZUtleURvd24gPSBldmVudCA9PiB7XG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gZXZlbnQua2V5LnJlcGxhY2UoJ0Fycm93JywgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3Qge1xuICAgICAgY3VycmVudDogbmV4dEl0ZW1BcnJvd0tleUN1cnJlbnQgPSBrZXlcbiAgICB9ID0gbmV4dEl0ZW1BcnJvd0tleTtcbiAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgc2V0T3BlblN0YXRlKGZhbHNlKTtcbiAgICAgIGFjdGlvbnMuY3VycmVudFswXS5mb2N1cygpO1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ2VzY2FwZUtleURvd24nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGdldE9yaWVudGF0aW9uKGtleSkgPT09IGdldE9yaWVudGF0aW9uKG5leHRJdGVtQXJyb3dLZXlDdXJyZW50KSAmJiBnZXRPcmllbnRhdGlvbihrZXkpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBhY3Rpb25TdGVwID0ga2V5ID09PSBuZXh0SXRlbUFycm93S2V5Q3VycmVudCA/IDEgOiAtMTtcblxuICAgICAgLy8gc3RheSB3aXRoaW4gYXJyYXkgaW5kaWNlc1xuICAgICAgY29uc3QgbmV4dEFjdGlvbiA9IGNsYW1wKGZvY3VzZWRBY3Rpb24uY3VycmVudCArIGFjdGlvblN0ZXAsIDAsIGFjdGlvbnMuY3VycmVudC5sZW5ndGggLSAxKTtcbiAgICAgIGFjdGlvbnMuY3VycmVudFtuZXh0QWN0aW9uXS5mb2N1cygpO1xuICAgICAgZm9jdXNlZEFjdGlvbi5jdXJyZW50ID0gbmV4dEFjdGlvbjtcbiAgICAgIG5leHRJdGVtQXJyb3dLZXkuY3VycmVudCA9IG5leHRJdGVtQXJyb3dLZXlDdXJyZW50O1xuICAgIH1cbiAgfTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBhY3Rpb25zIHdlcmUgY2xvc2VkIHdoaWxlIG5hdmlnYXRpb24gc3RhdGUgd2FzIG5vdCByZXNldFxuICAgIGlmICghb3Blbikge1xuICAgICAgZm9jdXNlZEFjdGlvbi5jdXJyZW50ID0gMDtcbiAgICAgIG5leHRJdGVtQXJyb3dLZXkuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIFtvcGVuXSk7XG4gIGNvbnN0IGhhbmRsZUNsb3NlID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VsZWF2ZScgJiYgb25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2JsdXInICYmIG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KGV2ZW50VGltZXIuY3VycmVudCk7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdibHVyJykge1xuICAgICAgZXZlbnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgICAgb25DbG9zZShldmVudCwgJ2JsdXInKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE9wZW5TdGF0ZShmYWxzZSk7XG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKGV2ZW50LCAnbW91c2VMZWF2ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSBldmVudCA9PiB7XG4gICAgaWYgKEZhYlByb3BzLm9uQ2xpY2spIHtcbiAgICAgIEZhYlByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQoZXZlbnRUaW1lci5jdXJyZW50KTtcbiAgICBpZiAob3Blbikge1xuICAgICAgc2V0T3BlblN0YXRlKGZhbHNlKTtcbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICd0b2dnbGUnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2V0T3BlblN0YXRlKHRydWUpO1xuICAgICAgaWYgKG9uT3Blbikge1xuICAgICAgICBvbk9wZW4oZXZlbnQsICd0b2dnbGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZU9wZW4gPSBldmVudCA9PiB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJyAmJiBvbk1vdXNlRW50ZXIpIHtcbiAgICAgIG9uTW91c2VFbnRlcihldmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSAnZm9jdXMnICYmIG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gbW92aW5nIHRoZSBmb2N1cyBiZXR3ZWVuIHR3byBpdGVtcyxcbiAgICAvLyBhIGNoYWluIGlmIGJsdXIgYW5kIGZvY3VzIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICAvLyBXZSBvbmx5IGhhbmRsZSB0aGUgbGFzdCBldmVudC5cbiAgICBjbGVhclRpbWVvdXQoZXZlbnRUaW1lci5jdXJyZW50KTtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIC8vIFdhaXQgZm9yIGEgZnV0dXJlIGZvY3VzIG9yIGNsaWNrIGV2ZW50XG4gICAgICBldmVudFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2V0T3BlblN0YXRlKHRydWUpO1xuICAgICAgICBpZiAob25PcGVuKSB7XG4gICAgICAgICAgY29uc3QgZXZlbnRNYXAgPSB7XG4gICAgICAgICAgICBmb2N1czogJ2ZvY3VzJyxcbiAgICAgICAgICAgIG1vdXNlZW50ZXI6ICdtb3VzZUVudGVyJ1xuICAgICAgICAgIH07XG4gICAgICAgICAgb25PcGVuKGV2ZW50LCBldmVudE1hcFtldmVudC50eXBlXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBGaWx0ZXIgdGhlIGxhYmVsIGZvciB2YWxpZCBpZCBjaGFyYWN0ZXJzLlxuICBjb25zdCBpZCA9IGFyaWFMYWJlbC5yZXBsYWNlKC9eW15hLXpdK3xbXlxcdzouLV0rL2dpLCAnJyk7XG4gIGNvbnN0IGFsbEl0ZW1zID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlblByb3ApLmZpbHRlcihjaGlsZCA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIFNwZWVkRGlhbCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKTtcbiAgfSk7XG4gIGNvbnN0IGNoaWxkcmVuID0gYWxsSXRlbXMubWFwKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBfY2hpbGQkcHJvcHMgPSBjaGlsZC5wcm9wcyxcbiAgICAgIHtcbiAgICAgICAgRmFiUHJvcHM6IHtcbiAgICAgICAgICByZWY6IG9yaWdCdXR0b25SZWZcbiAgICAgICAgfSA9IHt9LFxuICAgICAgICB0b29sdGlwUGxhY2VtZW50OiB0b29sdGlwUGxhY2VtZW50UHJvcFxuICAgICAgfSA9IF9jaGlsZCRwcm9wcyxcbiAgICAgIENoaWxkRmFiUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfY2hpbGQkcHJvcHMuRmFiUHJvcHMsIF9leGNsdWRlZDMpO1xuICAgIGNvbnN0IHRvb2x0aXBQbGFjZW1lbnQgPSB0b29sdGlwUGxhY2VtZW50UHJvcCB8fCAoZ2V0T3JpZW50YXRpb24oZGlyZWN0aW9uKSA9PT0gJ3ZlcnRpY2FsJyA/ICdsZWZ0JyA6ICd0b3AnKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgRmFiUHJvcHM6IF9leHRlbmRzKHt9LCBDaGlsZEZhYlByb3BzLCB7XG4gICAgICAgIHJlZjogY3JlYXRlSGFuZGxlU3BlZWREaWFsQWN0aW9uQnV0dG9uUmVmKGluZGV4LCBvcmlnQnV0dG9uUmVmKVxuICAgICAgfSksXG4gICAgICBkZWxheTogMzAgKiAob3BlbiA/IGluZGV4IDogYWxsSXRlbXMubGVuZ3RoIC0gaW5kZXgpLFxuICAgICAgb3BlbixcbiAgICAgIHRvb2x0aXBQbGFjZW1lbnQsXG4gICAgICBpZDogYCR7aWR9LWFjdGlvbi0ke2luZGV4fWBcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3BlZWREaWFsUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogXCJwcmVzZW50YXRpb25cIixcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25CbHVyOiBoYW5kbGVDbG9zZSxcbiAgICBvbkZvY3VzOiBoYW5kbGVPcGVuLFxuICAgIG9uTW91c2VFbnRlcjogaGFuZGxlT3BlbixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZUNsb3NlLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIGluOiAhaGlkZGVuLFxuICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZVxuICAgIH0sIFRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFNwZWVkRGlhbEZhYiwgX2V4dGVuZHMoe1xuICAgICAgICBjb2xvcjogXCJwcmltYXJ5XCIsXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwsXG4gICAgICAgIFwiYXJpYS1oYXNwb3B1cFwiOiBcInRydWVcIixcbiAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IG9wZW4sXG4gICAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBgJHtpZH0tYWN0aW9uc2BcbiAgICAgIH0sIEZhYlByb3BzLCB7XG4gICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mYWIsIEZhYlByb3BzLmNsYXNzTmFtZSksXG4gICAgICAgIHJlZjogaGFuZGxlRmFiUmVmLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGljb24pICYmIGlzTXVpRWxlbWVudChpY29uLCBbJ1NwZWVkRGlhbEljb24nXSkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGljb24sIHtcbiAgICAgICAgICBvcGVuXG4gICAgICAgIH0pIDogaWNvblxuICAgICAgfSkpXG4gICAgfSkpLCAvKiNfX1BVUkVfXyovX2pzeChTcGVlZERpYWxBY3Rpb25zLCB7XG4gICAgICBpZDogYCR7aWR9LWFjdGlvbnNgLFxuICAgICAgcm9sZTogXCJtZW51XCIsXG4gICAgICBcImFyaWEtb3JpZW50YXRpb25cIjogZ2V0T3JpZW50YXRpb24oZGlyZWN0aW9uKSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmFjdGlvbnMsICFvcGVuICYmIGNsYXNzZXMuYWN0aW9uc0Nsb3NlZCksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3BlZWREaWFsLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBhcmlhLWxhYmVsIG9mIHRoZSBidXR0b24gZWxlbWVudC5cbiAgICogQWxzbyB1c2VkIHRvIHByb3ZpZGUgdGhlIGBpZGAgZm9yIHRoZSBgU3BlZWREaWFsYCBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAqL1xuICBhcmlhTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFNwZWVkRGlhbEFjdGlvbnMgdG8gZGlzcGxheSB3aGVuIHRoZSBTcGVlZERpYWwgaXMgYG9wZW5gLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBkaXJlY3Rpb24gdGhlIGFjdGlvbnMgb3BlbiByZWxhdGl2ZSB0byB0aGUgZmxvYXRpbmcgYWN0aW9uIGJ1dHRvbi5cbiAgICogQGRlZmF1bHQgJ3VwJ1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydkb3duJywgJ2xlZnQnLCAncmlnaHQnLCAndXAnXSksXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEZhYmBdKC9tYXRlcmlhbC11aS9hcGkvZmFiLykgZWxlbWVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIEZhYlByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgU3BlZWREaWFsIGlzIGhpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGRlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0byBkaXNwbGF5IGluIHRoZSBTcGVlZERpYWwgRmFiLiBUaGUgYFNwZWVkRGlhbEljb25gIGNvbXBvbmVudFxuICAgKiBwcm92aWRlcyBhIGRlZmF1bHQgSWNvbiB3aXRoIGFuaW1hdGlvbi5cbiAgICovXG4gIGljb246IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcInRvZ2dsZVwiYCwgYFwiYmx1clwiYCwgYFwibW91c2VMZWF2ZVwiYCwgYFwiZXNjYXBlS2V5RG93blwiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3Blbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwidG9nZ2xlXCJgLCBgXCJmb2N1c1wiYCwgYFwibW91c2VFbnRlclwiYC5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgaW4gdGhlIFNwZWVkRGlhbCBGYWIgd2hlbiB0aGUgU3BlZWREaWFsIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuSWNvbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9tYXRlcmlhbC11aS90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBab29tXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIHRyYW5zaXRpb24gZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgdGhlIGVsZW1lbnQgaXMgYmFzZWQgb24gdGhpcyBbYFRyYW5zaXRpb25gXShodHRwOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdHJhbnNpdGlvbi8pIGNvbXBvbmVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFNwZWVkRGlhbDsiLCJpbXBvcnQgdG9Qcm9wZXJ0eUtleSBmcm9tIFwiLi90b1Byb3BlcnR5S2V5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn0iXSwibmFtZXMiOlsiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImV4cG9ydHMiLCJfY3JlYXRlU3ZnSWNvbiIsIl9qc3hSdW50aW1lIiwiX2RlZmF1bHQiLCJkZWZhdWx0IiwianN4IiwiZCIsImNyZWF0ZVN2Z0ljb24iLCJnZXRTcGVlZERpYWxJY29uVXRpbGl0eUNsYXNzIiwic2xvdCIsImdlbmVyYXRlVXRpbGl0eUNsYXNzIiwiZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyIsIl9leGNsdWRlZCIsIlNwZWVkRGlhbEljb25Sb290Iiwic3R5bGVkIiwibmFtZSIsIm92ZXJyaWRlc1Jlc29sdmVyIiwicHJvcHMiLCJzdHlsZXMiLCJvd25lclN0YXRlIiwiaWNvbiIsIm9wZW4iLCJpY29uT3BlbiIsIm9wZW5JY29uIiwiaWNvbldpdGhPcGVuSWNvbk9wZW4iLCJvcGVuSWNvbk9wZW4iLCJyb290IiwidGhlbWUiLCJoZWlnaHQiLCJ0cmFuc2l0aW9uIiwidHJhbnNpdGlvbnMiLCJjcmVhdGUiLCJkdXJhdGlvbiIsInNob3J0IiwidHJhbnNmb3JtIiwib3BhY2l0eSIsInBvc2l0aW9uIiwiU3BlZWREaWFsSWNvbiIsImluUHJvcHMiLCJyZWYiLCJ1c2VUaGVtZVByb3BzIiwiY2xhc3NOYW1lIiwiaWNvblByb3AiLCJvcGVuSWNvblByb3AiLCJvdGhlciIsImNsYXNzZXMiLCJzbG90cyIsImNvbXBvc2VDbGFzc2VzIiwidXNlVXRpbGl0eUNsYXNzZXMiLCJmb3JtYXRJY29uIiwibmV3Q2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJBZGQiLCJtdWlOYW1lIiwiZW50ZXJpbmciLCJlbnRlcmVkIiwidXNlVGhlbWUiLCJkZWZhdWx0VGltZW91dCIsImVudGVyIiwiZW50ZXJpbmdTY3JlZW4iLCJleGl0IiwibGVhdmluZ1NjcmVlbiIsImFkZEVuZExpc3RlbmVyIiwiYXBwZWFyIiwiZWFzaW5nIiwiaW4iLCJpblByb3AiLCJvbkVudGVyIiwib25FbnRlcmVkIiwib25FbnRlcmluZyIsIm9uRXhpdCIsIm9uRXhpdGVkIiwib25FeGl0aW5nIiwic3R5bGUiLCJ0aW1lb3V0IiwiVHJhbnNpdGlvbkNvbXBvbmVudCIsIlRyYW5zaXRpb24iLCJub2RlUmVmIiwiaGFuZGxlUmVmIiwidXNlRm9ya1JlZiIsIm5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2siLCJjYWxsYmFjayIsIm1heWJlSXNBcHBlYXJpbmciLCJub2RlIiwiY3VycmVudCIsInVuZGVmaW5lZCIsImhhbmRsZUVudGVyaW5nIiwiaGFuZGxlRW50ZXIiLCJpc0FwcGVhcmluZyIsInRyYW5zaXRpb25Qcm9wcyIsIm1vZGUiLCJ3ZWJraXRUcmFuc2l0aW9uIiwiaGFuZGxlRW50ZXJlZCIsImhhbmRsZUV4aXRpbmciLCJoYW5kbGVFeGl0IiwiaGFuZGxlRXhpdGVkIiwibmV4dCIsInN0YXRlIiwiY2hpbGRQcm9wcyIsInZpc2liaWxpdHkiLCJnZXRGYWJVdGlsaXR5Q2xhc3MiLCJGYWJSb290IiwiQnV0dG9uQmFzZSIsInNob3VsZEZvcndhcmRQcm9wIiwicHJvcCIsInZhcmlhbnQiLCJjYXBpdGFsaXplIiwic2l6ZSIsImNvbG9yIiwiY29sb3JJbmhlcml0IiwiX3RoZW1lJHBhbGV0dGUkZ2V0Q29uIiwiX3RoZW1lJHBhbGV0dGUiLCJ0eXBvZ3JhcGh5IiwiYnV0dG9uIiwibWluSGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwicGFkZGluZyIsIm1pbldpZHRoIiwid2lkdGgiLCJ6SW5kZXgiLCJ2YXJzIiwiZmFiIiwiYm94U2hhZG93Iiwic2hhZG93cyIsInBhbGV0dGUiLCJ0ZXh0IiwicHJpbWFyeSIsImdldENvbnRyYXN0VGV4dCIsImNhbGwiLCJncmV5IiwiYmFja2dyb3VuZENvbG9yIiwiQTEwMCIsInRleHREZWNvcmF0aW9uIiwiZm9jdXNWaXNpYmxlIiwiY29udHJhc3RUZXh0IiwibWFpbiIsImRhcmsiLCJkaXNhYmxlZCIsImFjdGlvbiIsImRpc2FibGVkQmFja2dyb3VuZCIsImNvbXBvbmVudCIsImRpc2FibGVGb2N1c1JpcHBsZSIsImZvY3VzVmlzaWJsZUNsYXNzTmFtZSIsImNvbXBvc2VkQ2xhc3NlcyIsImZvY3VzUmlwcGxlIiwiZ2V0U3BlZWREaWFsVXRpbGl0eUNsYXNzIiwiX2V4Y2x1ZGVkMiIsIl9leGNsdWRlZDMiLCJnZXRPcmllbnRhdGlvbiIsImRpcmVjdGlvbiIsIlNwZWVkRGlhbFJvb3QiLCJzcGVlZERpYWwiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsInBvaW50ZXJFdmVudHMiLCJmbGV4RGlyZWN0aW9uIiwiYWN0aW9ucyIsIm1hcmdpbkJvdHRvbSIsInBhZGRpbmdCb3R0b20iLCJzcGFjaW5nQWN0aW9ucyIsIm1hcmdpblRvcCIsInBhZGRpbmdUb3AiLCJtYXJnaW5SaWdodCIsInBhZGRpbmdSaWdodCIsIm1hcmdpbkxlZnQiLCJwYWRkaW5nTGVmdCIsIlNwZWVkRGlhbEZhYiIsIlNwZWVkRGlhbEFjdGlvbnMiLCJhY3Rpb25zQ2xvc2VkIiwiZGVmYXVsdFRyYW5zaXRpb25EdXJhdGlvbiIsImFyaWFMYWJlbCIsIkZhYlByb3BzIiwib3JpZ0RpYWxCdXR0b25SZWYiLCJjaGlsZHJlblByb3AiLCJoaWRkZW4iLCJvbkJsdXIiLCJvbkNsb3NlIiwib25Gb2N1cyIsIm9uS2V5RG93biIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIm9uT3BlbiIsIm9wZW5Qcm9wIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiVHJhbnNpdGlvblByb3BzIiwic2V0T3BlblN0YXRlIiwidXNlQ29udHJvbGxlZCIsImNvbnRyb2xsZWQiLCJldmVudFRpbWVyIiwiY2xlYXJUaW1lb3V0IiwiZm9jdXNlZEFjdGlvbiIsIm5leHRJdGVtQXJyb3dLZXkiLCJoYW5kbGVPd25GYWJSZWYiLCJmYWJGZWYiLCJoYW5kbGVGYWJSZWYiLCJjcmVhdGVIYW5kbGVTcGVlZERpYWxBY3Rpb25CdXR0b25SZWYiLCJkaWFsQWN0aW9uSW5kZXgiLCJvcmlnQnV0dG9uUmVmIiwiYnV0dG9uUmVmIiwiaGFuZGxlQ2xvc2UiLCJldmVudCIsInR5cGUiLCJzZXRUaW1lb3V0IiwiaGFuZGxlT3BlbiIsImZvY3VzIiwibW91c2VlbnRlciIsImlkIiwicmVwbGFjZSIsImFsbEl0ZW1zIiwidG9BcnJheSIsImZpbHRlciIsImNoaWxkIiwibWFwIiwiaW5kZXgiLCJfY2hpbGQkcHJvcHMiLCJ0b29sdGlwUGxhY2VtZW50IiwidG9vbHRpcFBsYWNlbWVudFByb3AiLCJDaGlsZEZhYlByb3BzIiwiZGVsYXkiLCJsZW5ndGgiLCJyb2xlIiwia2V5IiwidG9Mb3dlckNhc2UiLCJuZXh0SXRlbUFycm93S2V5Q3VycmVudCIsInByZXZlbnREZWZhdWx0IiwiYWN0aW9uU3RlcCIsIm5leHRBY3Rpb24iLCJ2YWx1ZSIsIm1heCIsInVubW91bnRPbkV4aXQiLCJvbkNsaWNrIiwiaXNNdWlFbGVtZW50IiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiXSwic291cmNlUm9vdCI6IiJ9