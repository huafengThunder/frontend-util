/*! For license information please see 371.bc6e79fe.js.LICENSE.txt */
(self.webpackChunkfrontend_util=self.webpackChunkfrontend_util||[]).push([[371],{5215:(module,__unused_webpack_exports,__webpack_require__)=>{var factory;globalThis,factory=()=>(()=>{"use strict";var __webpack_modules__=[,(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.VerbosityLevel=e.Util=e.UnknownErrorException=e.UnexpectedResponseException=e.TextRenderingMode=e.RenderingIntentFlag=e.PromiseCapability=e.PermissionFlag=e.PasswordResponses=e.PasswordException=e.PageActionEventType=e.OPS=e.MissingPDFException=e.MAX_IMAGE_SIZE_TO_CACHE=e.LINE_FACTOR=e.LINE_DESCENT_FACTOR=e.InvalidPDFException=e.ImageKind=e.IDENTITY_MATRIX=e.FormatError=e.FeatureTest=e.FONT_IDENTITY_MATRIX=e.DocumentActionEventType=e.CMapCompressionType=e.BaseException=e.BASELINE_FACTOR=e.AnnotationType=e.AnnotationStateModelType=e.AnnotationReviewState=e.AnnotationReplyType=e.AnnotationMode=e.AnnotationMarkedState=e.AnnotationFlag=e.AnnotationFieldFlag=e.AnnotationEditorType=e.AnnotationEditorPrefix=e.AnnotationEditorParamsType=e.AnnotationBorderStyleType=e.AnnotationActionEventType=e.AbortException=void 0,e.assert=function(t,e){t||i(e)},e.bytesToString=function(t){"object"==typeof t&&void 0!==t?.length||i("Invalid argument for bytesToString");const e=t.length,n=8192;if(e<n)return String.fromCharCode.apply(null,t);const s=[];for(let r=0;r<e;r+=n){const i=Math.min(r+n,e),a=t.subarray(r,i);s.push(String.fromCharCode.apply(null,a))}return s.join("")},e.createValidAbsoluteUrl=function(t,e=null,n=null){if(!t)return null;try{if(n&&"string"==typeof t){if(n.addDefaultProtocol&&t.startsWith("www.")){const e=t.match(/\./g);e?.length>=2&&(t=`http://${t}`)}if(n.tryConvertEncoding)try{t=u(t)}catch(t){}}const s=e?new URL(t,e):new URL(t);if(function(t){switch(t?.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}(s))return s}catch(t){}return null},e.getModificationDate=function(t=new Date){return[t.getUTCFullYear().toString(),(t.getUTCMonth()+1).toString().padStart(2,"0"),t.getUTCDate().toString().padStart(2,"0"),t.getUTCHours().toString().padStart(2,"0"),t.getUTCMinutes().toString().padStart(2,"0"),t.getUTCSeconds().toString().padStart(2,"0")].join("")},e.getVerbosityLevel=function(){return s},e.info=function(t){s>=n.INFOS&&console.log(`Info: ${t}`)},e.isArrayBuffer=function(t){return"object"==typeof t&&void 0!==t?.byteLength},e.isArrayEqual=function(t,e){if(t.length!==e.length)return!1;for(let n=0,s=t.length;n<s;n++)if(t[n]!==e[n])return!1;return!0},e.normalizeUnicode=function(t){return p||(p=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,g=new Map([["ﬅ","ſt"]])),t.replaceAll(p,((t,e,n)=>e?e.normalize("NFKC"):g.get(n)))},e.objectFromMap=function(t){const e=Object.create(null);for(const[n,s]of t)e[n]=s;return e},e.objectSize=function(t){return Object.keys(t).length},e.setVerbosityLevel=function(t){Number.isInteger(t)&&(s=t)},e.shadow=a,e.string32=function(t){return String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t)},e.stringToBytes=l,e.stringToPDFString=function(t){if(t[0]>="ï"){let e;if("þ"===t[0]&&"ÿ"===t[1]?e="utf-16be":"ÿ"===t[0]&&"þ"===t[1]?e="utf-16le":"ï"===t[0]&&"»"===t[1]&&"¿"===t[2]&&(e="utf-8"),e)try{const n=new TextDecoder(e,{fatal:!0}),s=l(t);return n.decode(s)}catch(t){r(`stringToPDFString: "${t}".`)}}const e=[];for(let n=0,s=t.length;n<s;n++){const s=h[t.charCodeAt(n)];e.push(s?String.fromCharCode(s):t.charAt(n))}return e.join("")},e.stringToUTF8String=u,e.unreachable=i,e.utf8StringToString=function(t){return unescape(encodeURIComponent(t))},e.warn=r,e.IDENTITY_MATRIX=[1,0,0,1,0,0],e.FONT_IDENTITY_MATRIX=[.001,0,0,.001,0,0],e.MAX_IMAGE_SIZE_TO_CACHE=1e7,e.LINE_FACTOR=1.35,e.LINE_DESCENT_FACTOR=.35,e.BASELINE_FACTOR=.25925925925925924,e.RenderingIntentFlag={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256},e.AnnotationMode={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3},e.AnnotationEditorPrefix="pdfjs_internal_editor_",e.AnnotationEditorType={DISABLE:-1,NONE:0,FREETEXT:3,INK:15},e.AnnotationEditorParamsType={FREETEXT_SIZE:1,FREETEXT_COLOR:2,FREETEXT_OPACITY:3,INK_COLOR:11,INK_THICKNESS:12,INK_OPACITY:13},e.PermissionFlag={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},e.TextRenderingMode={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},e.ImageKind={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},e.AnnotationType={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},e.AnnotationStateModelType={MARKED:"Marked",REVIEW:"Review"},e.AnnotationMarkedState={MARKED:"Marked",UNMARKED:"Unmarked"},e.AnnotationReviewState={ACCEPTED:"Accepted",REJECTED:"Rejected",CANCELLED:"Cancelled",COMPLETED:"Completed",NONE:"None"},e.AnnotationReplyType={GROUP:"Group",REPLY:"R"},e.AnnotationFlag={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512},e.AnnotationFieldFlag={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864},e.AnnotationBorderStyleType={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},e.AnnotationActionEventType={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"},e.DocumentActionEventType={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"},e.PageActionEventType={O:"PageOpen",C:"PageClose"};const n={ERRORS:0,WARNINGS:1,INFOS:5};e.VerbosityLevel=n,e.CMapCompressionType={NONE:0,BINARY:1},e.OPS={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91},e.PasswordResponses={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let s=n.WARNINGS;function r(t){s>=n.WARNINGS&&console.log(`Warning: ${t}`)}function i(t){throw new Error(t)}function a(t,e,n,s=!1){return Object.defineProperty(t,e,{value:n,enumerable:!s,configurable:!0,writable:!1}),n}const o=function(){function t(e,n){this.constructor===t&&i("Cannot initialize BaseException."),this.message=e,this.name=n}return t.prototype=new Error,t.constructor=t,t}();function l(t){"string"!=typeof t&&i("Invalid argument for stringToBytes");const e=t.length,n=new Uint8Array(e);for(let s=0;s<e;++s)n[s]=255&t.charCodeAt(s);return n}e.BaseException=o,e.PasswordException=class extends o{constructor(t,e){super(t,"PasswordException"),this.code=e}},e.UnknownErrorException=class extends o{constructor(t,e){super(t,"UnknownErrorException"),this.details=e}},e.InvalidPDFException=class extends o{constructor(t){super(t,"InvalidPDFException")}},e.MissingPDFException=class extends o{constructor(t){super(t,"MissingPDFException")}},e.UnexpectedResponseException=class extends o{constructor(t,e){super(t,"UnexpectedResponseException"),this.status=e}},e.FormatError=class extends o{constructor(t){super(t,"FormatError")}},e.AbortException=class extends o{constructor(t){super(t,"AbortException")}},e.FeatureTest=class{static get isLittleEndian(){return a(this,"isLittleEndian",function(){const t=new Uint8Array(4);return t[0]=1,1===new Uint32Array(t.buffer,0,1)[0]}())}static get isEvalSupported(){return a(this,"isEvalSupported",function(){try{return new Function(""),!0}catch(t){return!1}}())}static get isOffscreenCanvasSupported(){return a(this,"isOffscreenCanvasSupported","undefined"!=typeof OffscreenCanvas)}static get platform(){return"undefined"==typeof navigator?a(this,"platform",{isWin:!1,isMac:!1}):a(this,"platform",{isWin:navigator.platform.includes("Win"),isMac:navigator.platform.includes("Mac")})}};const c=[...Array(256).keys()].map((t=>t.toString(16).padStart(2,"0")));class d{static makeHexColor(t,e,n){return`#${c[t]}${c[e]}${c[n]}`}static scaleMinMax(t,e){let n;t[0]?(t[0]<0&&(n=e[0],e[0]=e[1],e[1]=n),e[0]*=t[0],e[1]*=t[0],t[3]<0&&(n=e[2],e[2]=e[3],e[3]=n),e[2]*=t[3],e[3]*=t[3]):(n=e[0],e[0]=e[2],e[2]=n,n=e[1],e[1]=e[3],e[3]=n,t[1]<0&&(n=e[2],e[2]=e[3],e[3]=n),e[2]*=t[1],e[3]*=t[1],t[2]<0&&(n=e[0],e[0]=e[1],e[1]=n),e[0]*=t[2],e[1]*=t[2]),e[0]+=t[4],e[1]+=t[4],e[2]+=t[5],e[3]+=t[5]}static transform(t,e){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],t[0]*e[4]+t[2]*e[5]+t[4],t[1]*e[4]+t[3]*e[5]+t[5]]}static applyTransform(t,e){return[t[0]*e[0]+t[1]*e[2]+e[4],t[0]*e[1]+t[1]*e[3]+e[5]]}static applyInverseTransform(t,e){const n=e[0]*e[3]-e[1]*e[2];return[(t[0]*e[3]-t[1]*e[2]+e[2]*e[5]-e[4]*e[3])/n,(-t[0]*e[1]+t[1]*e[0]+e[4]*e[1]-e[5]*e[0])/n]}static getAxialAlignedBoundingBox(t,e){const n=d.applyTransform(t,e),s=d.applyTransform(t.slice(2,4),e),r=d.applyTransform([t[0],t[3]],e),i=d.applyTransform([t[2],t[1]],e);return[Math.min(n[0],s[0],r[0],i[0]),Math.min(n[1],s[1],r[1],i[1]),Math.max(n[0],s[0],r[0],i[0]),Math.max(n[1],s[1],r[1],i[1])]}static inverseTransform(t){const e=t[0]*t[3]-t[1]*t[2];return[t[3]/e,-t[1]/e,-t[2]/e,t[0]/e,(t[2]*t[5]-t[4]*t[3])/e,(t[4]*t[1]-t[5]*t[0])/e]}static singularValueDecompose2dScale(t){const e=[t[0],t[2],t[1],t[3]],n=t[0]*e[0]+t[1]*e[2],s=t[0]*e[1]+t[1]*e[3],r=t[2]*e[0]+t[3]*e[2],i=t[2]*e[1]+t[3]*e[3],a=(n+i)/2,o=Math.sqrt((n+i)**2-4*(n*i-r*s))/2,l=a+o||1,c=a-o||1;return[Math.sqrt(l),Math.sqrt(c)]}static normalizeRect(t){const e=t.slice(0);return t[0]>t[2]&&(e[0]=t[2],e[2]=t[0]),t[1]>t[3]&&(e[1]=t[3],e[3]=t[1]),e}static intersect(t,e){const n=Math.max(Math.min(t[0],t[2]),Math.min(e[0],e[2])),s=Math.min(Math.max(t[0],t[2]),Math.max(e[0],e[2]));if(n>s)return null;const r=Math.max(Math.min(t[1],t[3]),Math.min(e[1],e[3])),i=Math.min(Math.max(t[1],t[3]),Math.max(e[1],e[3]));return r>i?null:[n,r,s,i]}static bezierBoundingBox(t,e,n,s,r,i,a,o){const l=[],c=[[],[]];let d,h,u,p,g,f,m,b;for(let c=0;c<2;++c)if(0===c?(h=6*t-12*n+6*r,d=-3*t+9*n-9*r+3*a,u=3*n-3*t):(h=6*e-12*s+6*i,d=-3*e+9*s-9*i+3*o,u=3*s-3*e),Math.abs(d)<1e-12){if(Math.abs(h)<1e-12)continue;p=-u/h,0<p&&p<1&&l.push(p)}else m=h*h-4*u*d,b=Math.sqrt(m),m<0||(g=(-h+b)/(2*d),0<g&&g<1&&l.push(g),f=(-h-b)/(2*d),0<f&&f<1&&l.push(f));let _,v=l.length;const A=v;for(;v--;)p=l[v],_=1-p,c[0][v]=_*_*_*t+3*_*_*p*n+3*_*p*p*r+p*p*p*a,c[1][v]=_*_*_*e+3*_*_*p*s+3*_*p*p*i+p*p*p*o;return c[0][A]=t,c[1][A]=e,c[0][A+1]=a,c[1][A+1]=o,c[0].length=c[1].length=A+2,[Math.min(...c[0]),Math.min(...c[1]),Math.max(...c[0]),Math.max(...c[1])]}}e.Util=d;const h=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function u(t){return decodeURIComponent(escape(t))}e.PromiseCapability=class{#t=!1;constructor(){this.promise=new Promise(((t,e)=>{this.resolve=e=>{this.#t=!0,t(e)},this.reject=t=>{this.#t=!0,e(t)}}))}get settled(){return this.#t}};let p=null,g=null},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.build=exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultFilterFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,exports.getDocument=getDocument,exports.version=void 0;var _util=__w_pdfjs_require__(1),_annotation_storage=__w_pdfjs_require__(3),_display_utils=__w_pdfjs_require__(6),_font_loader=__w_pdfjs_require__(9),_canvas=__w_pdfjs_require__(11),_worker_options=__w_pdfjs_require__(14),_is_node=__w_pdfjs_require__(10),_message_handler=__w_pdfjs_require__(15),_metadata=__w_pdfjs_require__(16),_optional_content_config=__w_pdfjs_require__(17),_transport_stream=__w_pdfjs_require__(18),_xfa_text=__w_pdfjs_require__(19);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100,DELAYED_CLEANUP_TIMEOUT=5e3;let DefaultCanvasFactory=_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;let DefaultCMapReaderFactory=_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;let DefaultFilterFactory=_display_utils.DOMFilterFactory;exports.DefaultFilterFactory=DefaultFilterFactory;let DefaultStandardFontDataFactory=_display_utils.DOMStandardFontDataFactory,createPDFNetworkStream;if(exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory,_is_node.isNodeJS){const{NodeCanvasFactory:t,NodeCMapReaderFactory:e,NodeFilterFactory:n,NodeStandardFontDataFactory:s}=__w_pdfjs_require__(20);exports.DefaultCanvasFactory=DefaultCanvasFactory=t,exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory=e,exports.DefaultFilterFactory=DefaultFilterFactory=n,exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory=s}if(_is_node.isNodeJS){const{PDFNodeStream:t}=__w_pdfjs_require__(21);createPDFNetworkStream=e=>new t(e)}else{const{PDFNetworkStream:t}=__w_pdfjs_require__(24),{PDFFetchStream:e}=__w_pdfjs_require__(25);createPDFNetworkStream=n=>(0,_display_utils.isValidFetchUrl)(n.url)?new e(n):new t(n)}function getDocument(t){if("string"==typeof t||t instanceof URL?t={url:t}:(0,_util.isArrayBuffer)(t)&&(t={data:t}),"object"!=typeof t)throw new Error("Invalid parameter in getDocument, need parameter object.");if(!t.url&&!t.data&&!t.range)throw new Error("Invalid parameter object: need either .data, .range or .url");const e=new PDFDocumentLoadingTask,{docId:n}=e,s=t.url?getUrlProp(t.url):null,r=t.data?getDataProp(t.data):null,i=t.httpHeaders||null,a=!0===t.withCredentials,o=t.password??null,l=t.range instanceof PDFDataRangeTransport?t.range:null,c=Number.isInteger(t.rangeChunkSize)&&t.rangeChunkSize>0?t.rangeChunkSize:DEFAULT_RANGE_CHUNK_SIZE;let d=t.worker instanceof PDFWorker?t.worker:null;const h=t.verbosity,u="string"!=typeof t.docBaseUrl||(0,_display_utils.isDataScheme)(t.docBaseUrl)?null:t.docBaseUrl,p="string"==typeof t.cMapUrl?t.cMapUrl:null,g=!1!==t.cMapPacked,f=t.CMapReaderFactory||DefaultCMapReaderFactory,m="string"==typeof t.standardFontDataUrl?t.standardFontDataUrl:null,b=t.StandardFontDataFactory||DefaultStandardFontDataFactory,_=!0!==t.stopAtErrors,v=Number.isInteger(t.maxImageSize)&&t.maxImageSize>-1?t.maxImageSize:-1,A=!1!==t.isEvalSupported,y="boolean"==typeof t.isOffscreenCanvasSupported?t.isOffscreenCanvasSupported:!_is_node.isNodeJS,S=Number.isInteger(t.canvasMaxAreaInBytes)?t.canvasMaxAreaInBytes:-1,x="boolean"==typeof t.disableFontFace?t.disableFontFace:_is_node.isNodeJS,E=!0===t.fontExtraProperties,C=!0===t.enableXfa,w=t.ownerDocument||globalThis.document,P=!0===t.disableRange,T=!0===t.disableStream,k=!0===t.disableAutoFetch,R=!0===t.pdfBug,M=l?l.length:t.length??NaN,F="boolean"==typeof t.useSystemFonts?t.useSystemFonts:!_is_node.isNodeJS&&!x,D="boolean"==typeof t.useWorkerFetch?t.useWorkerFetch:f===_display_utils.DOMCMapReaderFactory&&b===_display_utils.DOMStandardFontDataFactory&&(0,_display_utils.isValidFetchUrl)(p,document.baseURI)&&(0,_display_utils.isValidFetchUrl)(m,document.baseURI),I=t.canvasFactory||new DefaultCanvasFactory({ownerDocument:w}),O=t.filterFactory||new DefaultFilterFactory({docId:n,ownerDocument:w});(0,_util.setVerbosityLevel)(h);const L={canvasFactory:I,filterFactory:O};if(D||(L.cMapReaderFactory=new f({baseUrl:p,isCompressed:g}),L.standardFontDataFactory=new b({baseUrl:m})),!d){const t={verbosity:h,port:_worker_options.GlobalWorkerOptions.workerPort};d=t.port?PDFWorker.fromPort(t):new PDFWorker(t),e._worker=d}const N={docId:n,apiVersion:"3.6.172",data:r,password:o,disableAutoFetch:k,rangeChunkSize:c,length:M,docBaseUrl:u,enableXfa:C,evaluatorOptions:{maxImageSize:v,disableFontFace:x,ignoreErrors:_,isEvalSupported:A,isOffscreenCanvasSupported:y,canvasMaxAreaInBytes:S,fontExtraProperties:E,useSystemFonts:F,cMapUrl:D?p:null,standardFontDataUrl:D?m:null}},j={ignoreErrors:_,isEvalSupported:A,disableFontFace:x,fontExtraProperties:E,enableXfa:C,ownerDocument:w,disableAutoFetch:k,pdfBug:R,styleElement:null};return d.promise.then((function(){if(e.destroyed)throw new Error("Loading aborted");const t=_fetchDocument(d,N),o=new Promise((function(t){let e;l?e=new _transport_stream.PDFDataTransportStream({length:M,initialData:l.initialData,progressiveDone:l.progressiveDone,contentDispositionFilename:l.contentDispositionFilename,disableRange:P,disableStream:T},l):r||(e=createPDFNetworkStream({url:s,length:M,httpHeaders:i,withCredentials:a,rangeChunkSize:c,disableRange:P,disableStream:T})),t(e)}));return Promise.all([t,o]).then((function([t,s]){if(e.destroyed)throw new Error("Loading aborted");const r=new _message_handler.MessageHandler(n,t,d.port),i=new WorkerTransport(r,e,s,j,L);e._transport=i,r.send("Ready",null)}))})).catch(e._capability.reject),e}async function _fetchDocument(t,e){if(t.destroyed)throw new Error("Worker was destroyed");const n=await t.messageHandler.sendWithPromise("GetDocRequest",e,e.data?[e.data.buffer]:null);if(t.destroyed)throw new Error("Worker was destroyed");return n}function getUrlProp(t){if(t instanceof URL)return t.href;try{return new URL(t,window.location).href}catch(e){if(_is_node.isNodeJS&&"string"==typeof t)return t}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function getDataProp(t){if(_is_node.isNodeJS&&"undefined"!=typeof Buffer&&t instanceof Buffer)return(0,_display_utils.deprecated)("Please provide binary data as `Uint8Array`, rather than `Buffer`."),new Uint8Array(t);if(t instanceof Uint8Array&&t.byteLength===t.buffer.byteLength)return t;if("string"==typeof t)return(0,_util.stringToBytes)(t);if("object"==typeof t&&!isNaN(t?.length)||(0,_util.isArrayBuffer)(t))return new Uint8Array(t);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}class PDFDocumentLoadingTask{static#e=0;constructor(){this._capability=new _util.PromiseCapability,this._transport=null,this._worker=null,this.docId="d"+PDFDocumentLoadingTask.#e++,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}async destroy(){this.destroyed=!0,await(this._transport?.destroy()),this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}}exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;class PDFDataRangeTransport{constructor(t,e,n=!1,s=null){this.length=t,this.initialData=e,this.progressiveDone=n,this.contentDispositionFilename=s,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=new _util.PromiseCapability}addRangeListener(t){this._rangeListeners.push(t)}addProgressListener(t){this._progressListeners.push(t)}addProgressiveReadListener(t){this._progressiveReadListeners.push(t)}addProgressiveDoneListener(t){this._progressiveDoneListeners.push(t)}onDataRange(t,e){for(const n of this._rangeListeners)n(t,e)}onDataProgress(t,e){this._readyCapability.promise.then((()=>{for(const n of this._progressListeners)n(t,e)}))}onDataProgressiveRead(t){this._readyCapability.promise.then((()=>{for(const e of this._progressiveReadListeners)e(t)}))}onDataProgressiveDone(){this._readyCapability.promise.then((()=>{for(const t of this._progressiveDoneListeners)t()}))}transportReady(){this._readyCapability.resolve()}requestDataRange(t,e){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(t,e){this._pdfInfo=t,this._transport=e}get annotationStorage(){return this._transport.annotationStorage}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(t){return this._transport.getPage(t)}getPageIndex(t){return this._transport.getPageIndex(t)}getDestinations(){return this._transport.getDestinations()}getDestination(t){return this._transport.getDestination(t)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJavaScript(){return this._transport.getJavaScript()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(t=!1){return this._transport.startCleanup(t||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{#n=null;#s=!1;constructor(t,e,n,s=!1){this._pageIndex=t,this._pageInfo=e,this._transport=n,this._stats=s?new _display_utils.StatTimer:null,this._pdfBug=s,this.commonObjs=n.commonObjs,this.objs=new PDFObjects,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:t,rotation:e=this.rotate,offsetX:n=0,offsetY:s=0,dontFlip:r=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:t,rotation:e,offsetX:n,offsetY:s,dontFlip:r})}getAnnotations({intent:t="display"}={}){const e=this._transport.getRenderingIntent(t);return this._transport.getAnnotations(this._pageIndex,e.renderingIntent)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){return this._transport._htmlForXfa?.children[this._pageIndex]||null}render({canvasContext:t,viewport:e,intent:n="display",annotationMode:s=_util.AnnotationMode.ENABLE,transform:r=null,background:i=null,optionalContentConfigPromise:a=null,annotationCanvasMap:o=null,pageColors:l=null,printAnnotationStorage:c=null}){if(arguments[0]?.canvasFactory)throw new Error("render no longer accepts the `canvasFactory`-option, please pass it to the `getDocument`-function instead.");this._stats?.time("Overall");const d=this._transport.getRenderingIntent(n,s,c);this.#s=!1,this.#r(),a||(a=this._transport.getOptionalContentConfig());let h=this._intentStates.get(d.cacheKey);h||(h=Object.create(null),this._intentStates.set(d.cacheKey,h)),h.streamReaderCancelTimeout&&(clearTimeout(h.streamReaderCancelTimeout),h.streamReaderCancelTimeout=null);const u=!!(d.renderingIntent&_util.RenderingIntentFlag.PRINT);h.displayReadyCapability||(h.displayReadyCapability=new _util.PromiseCapability,h.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats?.time("Page Request"),this._pumpOperatorList(d));const p=t=>{h.renderTasks.delete(g),(this._maybeCleanupAfterRender||u)&&(this.#s=!0),this.#i(!u),t?(g.capability.reject(t),this._abortOperatorList({intentState:h,reason:t instanceof Error?t:new Error(t)})):g.capability.resolve(),this._stats?.timeEnd("Rendering"),this._stats?.timeEnd("Overall")},g=new InternalRenderTask({callback:p,params:{canvasContext:t,viewport:e,transform:r,background:i},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:o,operatorList:h.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!u,pdfBug:this._pdfBug,pageColors:l});(h.renderTasks||=new Set).add(g);const f=g.task;return Promise.all([h.displayReadyCapability.promise,a]).then((([t,e])=>{this.#s?p():(this._stats?.time("Rendering"),g.initializeGraphics({transparency:t,optionalContentConfig:e}),g.operatorListChanged())})).catch(p),f}getOperatorList({intent:t="display",annotationMode:e=_util.AnnotationMode.ENABLE,printAnnotationStorage:n=null}={}){const s=this._transport.getRenderingIntent(t,e,n,!0);let r,i=this._intentStates.get(s.cacheKey);return i||(i=Object.create(null),this._intentStates.set(s.cacheKey,i)),i.opListReadCapability||(r=Object.create(null),r.operatorListChanged=function(){i.operatorList.lastChunk&&(i.opListReadCapability.resolve(i.operatorList),i.renderTasks.delete(r))},i.opListReadCapability=new _util.PromiseCapability,(i.renderTasks||=new Set).add(r),i.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats?.time("Page Request"),this._pumpOperatorList(s)),i.opListReadCapability.promise}streamTextContent({includeMarkedContent:t=!1,disableNormalization:e=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:!0===t,disableNormalization:!0===e},{highWaterMark:100,size:t=>t.items.length})}getTextContent(t={}){if(this._transport._htmlForXfa)return this.getXfa().then((t=>_xfa_text.XfaText.textContent(t)));const e=this.streamTextContent(t);return new Promise((function(t,n){const s=e.getReader(),r={items:[],styles:Object.create(null)};!function e(){s.read().then((function({value:n,done:s}){s?t(r):(Object.assign(r.styles,n.styles),r.items.push(...n.items),e())}),n)}()}))}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const t=[];for(const e of this._intentStates.values())if(this._abortOperatorList({intentState:e,reason:new Error("Page was destroyed."),force:!0}),!e.opListReadCapability)for(const n of e.renderTasks)t.push(n.completed),n.cancel();return this.objs.clear(),this.#s=!1,this.#r(),Promise.all(t)}cleanup(t=!1){this.#s=!0;const e=this.#i(!1);return t&&e&&(this._stats&&=new _display_utils.StatTimer),e}#i(t=!1){if(this.#r(),!this.#s)return!1;if(t)return this.#n=setTimeout((()=>{this.#n=null,this.#i(!1)}),DELAYED_CLEANUP_TIMEOUT),!1;for(const{renderTasks:t,operatorList:e}of this._intentStates.values())if(t.size>0||!e.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),this.#s=!1,!0}#r(){this.#n&&(clearTimeout(this.#n),this.#n=null)}_startRenderPage(t,e){const n=this._intentStates.get(e);n&&(this._stats?.timeEnd("Page Request"),n.displayReadyCapability?.resolve(t))}_renderPageChunk(t,e){for(let n=0,s=t.length;n<s;n++)e.operatorList.fnArray.push(t.fnArray[n]),e.operatorList.argsArray.push(t.argsArray[n]);e.operatorList.lastChunk=t.lastChunk,e.operatorList.separateAnnots=t.separateAnnots;for(const t of e.renderTasks)t.operatorListChanged();t.lastChunk&&this.#i(!0)}_pumpOperatorList({renderingIntent:t,cacheKey:e,annotationStorageMap:n}){const s=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:t,cacheKey:e,annotationStorage:n}).getReader(),r=this._intentStates.get(e);r.streamReader=s;const i=()=>{s.read().then((({value:t,done:e})=>{e?r.streamReader=null:this._transport.destroyed||(this._renderPageChunk(t,r),i())}),(t=>{if(r.streamReader=null,!this._transport.destroyed){if(r.operatorList){r.operatorList.lastChunk=!0;for(const t of r.renderTasks)t.operatorListChanged();this.#i(!0)}if(r.displayReadyCapability)r.displayReadyCapability.reject(t);else{if(!r.opListReadCapability)throw t;r.opListReadCapability.reject(t)}}}))};i()}_abortOperatorList({intentState:t,reason:e,force:n=!1}){if(t.streamReader){if(t.streamReaderCancelTimeout&&(clearTimeout(t.streamReaderCancelTimeout),t.streamReaderCancelTimeout=null),!n){if(t.renderTasks.size>0)return;if(e instanceof _display_utils.RenderingCancelledException){let n=RENDERING_CANCELLED_TIMEOUT;return e.extraDelay>0&&e.extraDelay<1e3&&(n+=e.extraDelay),void(t.streamReaderCancelTimeout=setTimeout((()=>{t.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:t,reason:e,force:!0})}),n))}}if(t.streamReader.cancel(new _util.AbortException(e.message)).catch((()=>{})),t.streamReader=null,!this._transport.destroyed){for(const[e,n]of this._intentStates)if(n===t){this._intentStates.delete(e);break}this.cleanup()}}}get stats(){return this._stats}}exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{#a=new Set;#o=Promise.resolve();postMessage(t,e){const n={data:structuredClone(t,e?{transfer:e}:null)};this.#o.then((()=>{for(const t of this.#a)t.call(this,n)}))}addEventListener(t,e){this.#a.add(e)}removeEventListener(t,e){this.#a.delete(e)}terminate(){this.#a.clear()}}exports.LoopbackPort=LoopbackPort;const PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};if(exports.PDFWorkerUtil=PDFWorkerUtil,_is_node.isNodeJS)PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if("object"==typeof document){const t=document?.currentScript?.src;t&&(PDFWorkerUtil.fallbackWorkerSrc=t.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.isSameOrigin=function(t,e){let n;try{if(n=new URL(t),!n.origin||"null"===n.origin)return!1}catch(t){return!1}const s=new URL(e,n);return n.origin===s.origin},PDFWorkerUtil.createCDNWrapper=function(t){const e=`importScripts("${t}");`;return URL.createObjectURL(new Blob([e]))};class PDFWorker{static#l=new WeakMap;constructor({name:t=null,port:e=null,verbosity:n=(0,_util.getVerbosityLevel)()}={}){if(e&&PDFWorker.#l.has(e))throw new Error("Cannot use more than one PDFWorker per port.");if(this.name=t,this.destroyed=!1,this.verbosity=n,this._readyCapability=new _util.PromiseCapability,this._port=null,this._webWorker=null,this._messageHandler=null,e)return PDFWorker.#l.set(e,this),void this._initializeFromPort(e);this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(t){this._port=t,this._messageHandler=new _message_handler.MessageHandler("main","worker",t),this._messageHandler.on("ready",(function(){})),this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})}_initialize(){if(!PDFWorkerUtil.isWorkerDisabled&&!PDFWorker._mainThreadWorkerMessageHandler){let{workerSrc:t}=PDFWorker;try{PDFWorkerUtil.isSameOrigin(window.location.href,t)||(t=PDFWorkerUtil.createCDNWrapper(new URL(t,window.location).href));const e=new Worker(t),n=new _message_handler.MessageHandler("main","worker",e),s=()=>{e.removeEventListener("error",r),n.destroy(),e.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},r=()=>{this._webWorker||s()};e.addEventListener("error",r),n.on("test",(t=>{e.removeEventListener("error",r),this.destroyed?s():t?(this._messageHandler=n,this._port=e,this._webWorker=e,this._readyCapability.resolve(),n.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),n.destroy(),e.terminate())})),n.on("ready",(t=>{if(e.removeEventListener("error",r),this.destroyed)s();else try{i()}catch(t){this._setupFakeWorker()}}));const i=()=>{const t=new Uint8Array;n.send("test",t,[t.buffer])};return void i()}catch(t){(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),PDFWorker._setupFakeWorkerGlobal.then((t=>{if(this.destroyed)return void this._readyCapability.reject(new Error("Worker was destroyed"));const e=new LoopbackPort;this._port=e;const n="fake"+PDFWorkerUtil.fakeWorkerId++,s=new _message_handler.MessageHandler(n+"_worker",n,e);t.setup(s,e);const r=new _message_handler.MessageHandler(n,n+"_worker",e);this._messageHandler=r,this._readyCapability.resolve(),r.send("configure",{verbosity:this.verbosity})})).catch((t=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${t.message}".`))}))}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),PDFWorker.#l.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(t){if(!t?.port)throw new Error("PDFWorker.fromPort - invalid method signature.");return this.#l.has(t.port)?this.#l.get(t.port):new PDFWorker(t)}static get workerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(null!==PDFWorkerUtil.fallbackWorkerSrc)return _is_node.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _mainThreadWorkerMessageHandler(){try{return globalThis.pdfjsWorker?.WorkerMessageHandler||null}catch(t){return null}}static get _setupFakeWorkerGlobal(){const loader=async()=>{const mainWorkerMessageHandler=this._mainThreadWorkerMessageHandler;if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_is_node.isNodeJS){const worker=eval("require")(this.workerSrc);return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(this.workerSrc),window.pdfjsWorker.WorkerMessageHandler};return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}}exports.PDFWorker=PDFWorker;class WorkerTransport{#c=new Map;#d=new Map;#h=new Map;constructor(t,e,n,s,r){this.messageHandler=t,this.loadingTask=e,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({ownerDocument:s.ownerDocument,styleElement:s.styleElement}),this._params=s,this.canvasFactory=r.canvasFactory,this.filterFactory=r.filterFactory,this.cMapReaderFactory=r.cMapReaderFactory,this.standardFontDataFactory=r.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._passwordCapability=null,this._networkStream=n,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=new _util.PromiseCapability,this.setupMessageHandler()}#u(t,e=null){const n=this.#c.get(t);if(n)return n;const s=this.messageHandler.sendWithPromise(t,e);return this.#c.set(t,s),s}get annotationStorage(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}getRenderingIntent(t,e=_util.AnnotationMode.ENABLE,n=null,s=!1){let r=_util.RenderingIntentFlag.DISPLAY,i=null;switch(t){case"any":r=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":r=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(`getRenderingIntent - invalid intent: ${t}`)}switch(e){case _util.AnnotationMode.DISABLE:r+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:r+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:r+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,i=(r&_util.RenderingIntentFlag.PRINT&&n instanceof _annotation_storage.PrintAnnotationStorage?n:this.annotationStorage).serializable;break;default:(0,_util.warn)(`getRenderingIntent - invalid annotationMode: ${e}`)}return s&&(r+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:r,cacheKey:`${r}_${_annotation_storage.AnnotationStorage.getHash(i)}`,annotationStorageMap:i}}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=new _util.PromiseCapability,this._passwordCapability&&this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));const t=[];for(const e of this.#d.values())t.push(e._destroy());this.#d.clear(),this.#h.clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const e=this.messageHandler.sendWithPromise("Terminate",null);return t.push(e),Promise.all(t).then((()=>{this.commonObjs.clear(),this.fontLoader.clear(),this.#c.clear(),this.filterFactory.destroy(),this._networkStream&&this._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()}),this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:t,loadingTask:e}=this;t.on("GetReader",((t,e)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=t=>{this._lastProgress={loaded:t.loaded,total:t.total}},e.onPull=()=>{this._fullReader.read().then((function({value:t,done:n}){n?e.close():((0,_util.assert)(t instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),e.enqueue(new Uint8Array(t),1,[t]))})).catch((t=>{e.error(t)}))},e.onCancel=t=>{this._fullReader.cancel(t),e.ready.catch((t=>{if(!this.destroyed)throw t}))}})),t.on("ReaderHeadersReady",(t=>{const n=new _util.PromiseCapability,s=this._fullReader;return s.headersReady.then((()=>{s.isStreamingSupported&&s.isRangeSupported||(this._lastProgress&&e.onProgress?.(this._lastProgress),s.onProgress=t=>{e.onProgress?.({loaded:t.loaded,total:t.total})}),n.resolve({isStreamingSupported:s.isStreamingSupported,isRangeSupported:s.isRangeSupported,contentLength:s.contentLength})}),n.reject),n.promise})),t.on("GetRangeReader",((t,e)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const n=this._networkStream.getRangeReader(t.begin,t.end);n?(e.onPull=()=>{n.read().then((function({value:t,done:n}){n?e.close():((0,_util.assert)(t instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),e.enqueue(new Uint8Array(t),1,[t]))})).catch((t=>{e.error(t)}))},e.onCancel=t=>{n.cancel(t),e.ready.catch((t=>{if(!this.destroyed)throw t}))}):e.close()})),t.on("GetDoc",(({pdfInfo:t})=>{this._numPages=t.numPages,this._htmlForXfa=t.htmlForXfa,delete t.htmlForXfa,e._capability.resolve(new PDFDocumentProxy(t,this))})),t.on("DocException",(function(t){let n;switch(t.name){case"PasswordException":n=new _util.PasswordException(t.message,t.code);break;case"InvalidPDFException":n=new _util.InvalidPDFException(t.message);break;case"MissingPDFException":n=new _util.MissingPDFException(t.message);break;case"UnexpectedResponseException":n=new _util.UnexpectedResponseException(t.message,t.status);break;case"UnknownErrorException":n=new _util.UnknownErrorException(t.message,t.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}e._capability.reject(n)})),t.on("PasswordRequest",(t=>{if(this._passwordCapability=new _util.PromiseCapability,e.onPassword){const n=t=>{t instanceof Error?this._passwordCapability.reject(t):this._passwordCapability.resolve({password:t})};try{e.onPassword(n,t.code)}catch(t){this._passwordCapability.reject(t)}}else this._passwordCapability.reject(new _util.PasswordException(t.message,t.code));return this._passwordCapability.promise})),t.on("DataLoaded",(t=>{e.onProgress?.({loaded:t.length,total:t.length}),this.downloadInfoCapability.resolve(t)})),t.on("StartRenderPage",(t=>{this.destroyed||this.#d.get(t.pageIndex)._startRenderPage(t.transparency,t.cacheKey)})),t.on("commonobj",(([e,n,s])=>{if(!this.destroyed&&!this.commonObjs.has(e))switch(n){case"Font":const r=this._params;if("error"in s){const t=s.error;(0,_util.warn)(`Error during font loading: ${t}`),this.commonObjs.resolve(e,t);break}const i=r.pdfBug&&globalThis.FontInspector?.enabled?(t,e)=>globalThis.FontInspector.fontAdded(t,e):null,a=new _font_loader.FontFaceObject(s,{isEvalSupported:r.isEvalSupported,disableFontFace:r.disableFontFace,ignoreErrors:r.ignoreErrors,inspectFont:i});this.fontLoader.bind(a).catch((n=>t.sendWithPromise("FontFallback",{id:e}))).finally((()=>{!r.fontExtraProperties&&a.data&&(a.data=null),this.commonObjs.resolve(e,a)}));break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(e,s);break;default:throw new Error(`Got unknown common object type ${n}`)}})),t.on("obj",(([t,e,n,s])=>{if(this.destroyed)return;const r=this.#d.get(e);if(!r.objs.has(t))switch(n){case"Image":if(r.objs.resolve(t,s),s){let t;if(s.bitmap){const{width:e,height:n}=s;t=e*n*4}else t=s.data?.length||0;t>_util.MAX_IMAGE_SIZE_TO_CACHE&&(r._maybeCleanupAfterRender=!0)}break;case"Pattern":r.objs.resolve(t,s);break;default:throw new Error(`Got unknown object type ${n}`)}})),t.on("DocProgress",(t=>{this.destroyed||e.onProgress?.({loaded:t.loaded,total:t.total})})),t.on("FetchBuiltInCMap",(t=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.cMapReaderFactory?this.cMapReaderFactory.fetch(t):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.")))),t.on("FetchStandardFontData",(t=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.standardFontDataFactory?this.standardFontDataFactory.fetch(t):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter."))))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){return this.annotationStorage.size<=0&&(0,_util.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead."),this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:this.annotationStorage.serializable,filename:this._fullReader?.filename??null}).finally((()=>{this.annotationStorage.resetModified()}))}getPage(t){if(!Number.isInteger(t)||t<=0||t>this._numPages)return Promise.reject(new Error("Invalid page request."));const e=t-1,n=this.#h.get(e);if(n)return n;const s=this.messageHandler.sendWithPromise("GetPage",{pageIndex:e}).then((t=>{if(this.destroyed)throw new Error("Transport destroyed");const n=new PDFPageProxy(e,t,this,this._params.pdfBug);return this.#d.set(e,n),n}));return this.#h.set(e,s),s}getPageIndex(t){return"object"!=typeof t||null===t||!Number.isInteger(t.num)||t.num<0||!Number.isInteger(t.gen)||t.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:t.num,gen:t.gen})}getAnnotations(t,e){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:t,intent:e})}getFieldObjects(){return this.#u("GetFieldObjects")}hasJSActions(){return this.#u("HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(t){return"string"!=typeof t?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:t})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getJavaScript(){return this.messageHandler.sendWithPromise("GetJavaScript",null)}getDocJSActions(){return this.messageHandler.sendWithPromise("GetDocJSActions",null)}getPageJSActions(t){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:t})}getStructTree(t){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:t})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then((t=>new _optional_content_config.OptionalContentConfig(t)))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const t="GetMetadata",e=this.#c.get(t);if(e)return e;const n=this.messageHandler.sendWithPromise(t,null).then((t=>({info:t[0],metadata:t[1]?new _metadata.Metadata(t[1]):null,contentDispositionFilename:this._fullReader?.filename??null,contentLength:this._fullReader?.contentLength??null})));return this.#c.set(t,n),n}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(t=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const t of this.#d.values())if(!t.cleanup())throw new Error(`startCleanup: Page ${t.pageNumber} is currently rendering.`);this.commonObjs.clear(),t||this.fontLoader.clear(),this.#c.clear(),this.filterFactory.destroy(!0)}}get loadingParams(){const{disableAutoFetch:t,enableXfa:e}=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:t,enableXfa:e})}}class PDFObjects{#p=Object.create(null);#g(t){return this.#p[t]||(this.#p[t]={capability:new _util.PromiseCapability,data:null})}get(t,e=null){if(e){const n=this.#g(t);return n.capability.promise.then((()=>e(n.data))),null}const n=this.#p[t];if(!n?.capability.settled)throw new Error(`Requesting object that isn't resolved yet ${t}.`);return n.data}has(t){const e=this.#p[t];return e?.capability.settled||!1}resolve(t,e=null){const n=this.#g(t);n.data=e,n.capability.resolve()}clear(){for(const t in this.#p){const{data:e}=this.#p[t];e?.bitmap?.close()}this.#p=Object.create(null)}}class RenderTask{#f=null;constructor(t){this.#f=t,this.onContinue=null}get promise(){return this.#f.capability.promise}cancel(t=0){this.#f.cancel(null,t)}get separateAnnots(){const{separateAnnots:t}=this.#f.operatorList;if(!t)return!1;const{annotationCanvasMap:e}=this.#f;return t.form||t.canvas&&e?.size>0}}exports.RenderTask=RenderTask;class InternalRenderTask{static#m=new WeakSet;constructor({callback:t,params:e,objs:n,commonObjs:s,annotationCanvasMap:r,operatorList:i,pageIndex:a,canvasFactory:o,filterFactory:l,useRequestAnimationFrame:c=!1,pdfBug:d=!1,pageColors:h=null}){this.callback=t,this.params=e,this.objs=n,this.commonObjs=s,this.annotationCanvasMap=r,this.operatorListIdx=null,this.operatorList=i,this._pageIndex=a,this.canvasFactory=o,this.filterFactory=l,this._pdfBug=d,this.pageColors=h,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=!0===c&&"undefined"!=typeof window,this.cancelled=!1,this.capability=new _util.PromiseCapability,this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=e.canvasContext.canvas}get completed(){return this.capability.promise.catch((function(){}))}initializeGraphics({transparency:t=!1,optionalContentConfig:e}){if(this.cancelled)return;if(this._canvas){if(InternalRenderTask.#m.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");InternalRenderTask.#m.add(this._canvas)}this._pdfBug&&globalThis.StepperManager?.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:n,viewport:s,transform:r,background:i}=this.params;this.gfx=new _canvas.CanvasGraphics(n,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:e},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:r,viewport:s,transparency:t,background:i}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback?.()}cancel(t=null,e=0){this.running=!1,this.cancelled=!0,this.gfx?.endDrawing(),this._canvas&&InternalRenderTask.#m.delete(this._canvas),this.callback(t||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,"canvas",e))}operatorListChanged(){this.graphicsReady?(this.stepper?.updateOperatorList(this.operatorList),this.running||this._continue()):this.graphicsReadyCallback||=this._continueBound}_continue(){this.running=!0,this.cancelled||(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame((()=>{this._nextBound().catch(this._cancelBound)})):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(this.pageColors),this._canvas&&InternalRenderTask.#m.delete(this._canvas),this.callback())))}}const version="3.6.172";exports.version=version;const build="4d3dfe254";exports.build=build},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PrintAnnotationStorage=e.AnnotationStorage=void 0;var s=n(1),r=n(4),i=n(8);class a{#b=!1;#_=new Map;constructor(){this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(t,e){const n=this.#_.get(t);return void 0===n?e:Object.assign(e,n)}getRawValue(t){return this.#_.get(t)}remove(t){if(this.#_.delete(t),0===this.#_.size&&this.resetModified(),"function"==typeof this.onAnnotationEditor){for(const t of this.#_.values())if(t instanceof r.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(t,e){const n=this.#_.get(t);let s=!1;if(void 0!==n)for(const[t,r]of Object.entries(e))n[t]!==r&&(s=!0,n[t]=r);else s=!0,this.#_.set(t,e);s&&this.#v(),e instanceof r.AnnotationEditor&&"function"==typeof this.onAnnotationEditor&&this.onAnnotationEditor(e.constructor._type)}has(t){return this.#_.has(t)}getAll(){return this.#_.size>0?(0,s.objectFromMap)(this.#_):null}setAll(t){for(const[e,n]of Object.entries(t))this.setValue(e,n)}get size(){return this.#_.size}#v(){this.#b||(this.#b=!0,"function"==typeof this.onSetModified&&this.onSetModified())}resetModified(){this.#b&&(this.#b=!1,"function"==typeof this.onResetModified&&this.onResetModified())}get print(){return new o(this)}get serializable(){if(0===this.#_.size)return null;const t=new Map;for(const[e,n]of this.#_){const s=n instanceof r.AnnotationEditor?n.serialize():n;s&&t.set(e,s)}return t}static getHash(t){if(!t)return"";const e=new i.MurmurHash3_64;for(const[n,s]of t)e.update(`${n}:${JSON.stringify(s)}`);return e.hexdigest()}}e.AnnotationStorage=a;class o extends a{#A=null;constructor(t){super(),this.#A=structuredClone(t.serializable)}get print(){(0,s.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return this.#A}}e.PrintAnnotationStorage=o},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AnnotationEditor=void 0;var s=n(5),r=n(1);class i{#y=this.focusin.bind(this);#S=this.focusout.bind(this);#x=!1;#E=!1;#C=!1;_uiManager=null;#w=i._zIndex++;static _colorManager=new s.ColorManager;static _zIndex=1;constructor(t){this.constructor===i&&(0,r.unreachable)("Cannot initialize AnnotationEditor."),this.parent=t.parent,this.id=t.id,this.width=this.height=null,this.pageIndex=t.parent.pageIndex,this.name=t.name,this.div=null,this._uiManager=t.uiManager;const{rotation:e,rawDims:{pageWidth:n,pageHeight:s,pageX:a,pageY:o}}=this.parent.viewport;this.rotation=e,this.pageRotation=(360+e-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[n,s],this.pageTranslation=[a,o];const[l,c]=this.parentDimensions;this.x=t.x/l,this.y=t.y/c,this.isAttachedToDOM=!1}static get _defaultLineColor(){return(0,r.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}addCommands(t){this._uiManager.addCommands(t)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=this.#w}setParent(t){null!==t&&(this.pageIndex=t.pageIndex,this.pageDimensions=t.pageDimensions),this.parent=t}focusin(t){this.#x?this.#x=!1:this.parent.setSelected(this)}focusout(t){if(!this.isAttachedToDOM)return;const e=t.relatedTarget;e?.closest(`#${this.id}`)||(t.preventDefault(),this.parent?.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}dragstart(t){const e=this.parent.div.getBoundingClientRect();this.startX=t.clientX-e.x,this.startY=t.clientY-e.y,t.dataTransfer.setData("text/plain",this.id),t.dataTransfer.effectAllowed="move"}setAt(t,e,n,s){const[r,i]=this.parentDimensions;[n,s]=this.screenToPageTranslation(n,s),this.x=(t+n)/r,this.y=(e+s)/i,this.div.style.left=100*this.x+"%",this.div.style.top=100*this.y+"%"}translate(t,e){const[n,s]=this.parentDimensions;[t,e]=this.screenToPageTranslation(t,e),this.x+=t/n,this.y+=e/s,this.div.style.left=100*this.x+"%",this.div.style.top=100*this.y+"%"}screenToPageTranslation(t,e){switch(this.parentRotation){case 90:return[e,-t];case 180:return[-t,-e];case 270:return[-e,t];default:return[t,e]}}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{realScale:t}=this._uiManager.viewParameters,[e,n]=this.pageDimensions;return[e*t,n*t]}setDims(t,e){const[n,s]=this.parentDimensions;this.div.style.width=100*t/n+"%",this.div.style.height=100*e/s+"%"}fixDims(){const{style:t}=this.div,{height:e,width:n}=t,s=n.endsWith("%"),r=e.endsWith("%");if(s&&r)return;const[i,a]=this.parentDimensions;s||(t.width=100*parseFloat(n)/i+"%"),r||(t.height=100*parseFloat(e)/a+"%")}getInitialTranslation(){return[0,0]}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",this.#y),this.div.addEventListener("focusout",this.#S);const[t,e]=this.getInitialTranslation();return this.translate(t,e),(0,s.bindEvents)(this,this.div,["dragstart","pointerdown"]),this.div}pointerdown(t){const{isMac:e}=r.FeatureTest.platform;0!==t.button||t.ctrlKey&&e?t.preventDefault():(t.ctrlKey&&!e||t.shiftKey||t.metaKey&&e?this.parent.toggleSelected(this):this.parent.setSelected(this),this.#x=!0)}getRect(t,e){const n=this.parentScale,[s,r]=this.pageDimensions,[i,a]=this.pageTranslation,o=t/n,l=e/n,c=this.x*s,d=this.y*r,h=this.width*s,u=this.height*r;switch(this.rotation){case 0:return[c+o+i,r-d-l-u+a,c+o+h+i,r-d-l+a];case 90:return[c+l+i,r-d+o+a,c+l+u+i,r-d+o+h+a];case 180:return[c-o-h+i,r-d+l+a,c-o+i,r-d+l+u+a];case 270:return[c-l-u+i,r-d-o-h+a,c-l+i,r-d-o+a];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(t,e){const[n,s,r,i]=t,a=r-n,o=i-s;switch(this.rotation){case 0:return[n,e-i,a,o];case 90:return[n,e-s,o,a];case 180:return[r,e-s,a,o];case 270:return[r,e-i,o,a];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){this.#C=!0}disableEditMode(){this.#C=!1}isInEditMode(){return this.#C}shouldGetKeyboardEvents(){return!1}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){this.div?.addEventListener("focusin",this.#y)}serialize(){(0,r.unreachable)("An editor must be serializable")}static deserialize(t,e,n){const s=new this.prototype.constructor({parent:e,id:e.getNextId(),uiManager:n});s.rotation=t.rotation;const[r,i]=s.pageDimensions,[a,o,l,c]=s.getRectInCurrentCoords(t.rect,i);return s.x=a/r,s.y=o/i,s.width=l/r,s.height=c/i,s}remove(){this.div.removeEventListener("focusin",this.#y),this.div.removeEventListener("focusout",this.#S),this.isEmpty()||this.commit(),this.parent.remove(this)}select(){this.div?.classList.add("selectedEditor")}unselect(){this.div?.classList.remove("selectedEditor")}updateParams(t,e){}disableEditing(){}enableEditing(){}get propertiesToUpdate(){return{}}get contentDiv(){return this.div}get isEditing(){return this.#E}set isEditing(t){this.#E=t,t?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null)}}e.AnnotationEditor=i},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.KeyboardManager=e.CommandManager=e.ColorManager=e.AnnotationEditorUIManager=void 0,e.bindEvents=function(t,e,n){for(const s of n)e.addEventListener(s,t[s].bind(t))},e.opacityToHex=function(t){return Math.round(Math.min(255,Math.max(1,255*t))).toString(16).padStart(2,"0")};var s=n(1),r=n(6);class i{#P=0;getId(){return`${s.AnnotationEditorPrefix}${this.#P++}`}}class a{#T=[];#k=!1;#R;#M=-1;constructor(t=128){this.#R=t}add({cmd:t,undo:e,mustExec:n,type:s=NaN,overwriteIfSameType:r=!1,keepUndo:i=!1}){if(n&&t(),this.#k)return;const a={cmd:t,undo:e,type:s};if(-1===this.#M)return this.#T.length>0&&(this.#T.length=0),this.#M=0,void this.#T.push(a);if(r&&this.#T[this.#M].type===s)return i&&(a.undo=this.#T[this.#M].undo),void(this.#T[this.#M]=a);const o=this.#M+1;o===this.#R?this.#T.splice(0,1):(this.#M=o,o<this.#T.length&&this.#T.splice(o)),this.#T.push(a)}undo(){-1!==this.#M&&(this.#k=!0,this.#T[this.#M].undo(),this.#k=!1,this.#M-=1)}redo(){this.#M<this.#T.length-1&&(this.#M+=1,this.#k=!0,this.#T[this.#M].cmd(),this.#k=!1)}hasSomethingToUndo(){return-1!==this.#M}hasSomethingToRedo(){return this.#M<this.#T.length-1}destroy(){this.#T=null}}e.CommandManager=a;class o{constructor(t){this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:e}=s.FeatureTest.platform;for(const[n,s]of t)for(const t of n){const n=t.startsWith("mac+");e&&n?(this.callbacks.set(t.slice(4),s),this.allKeys.add(t.split("+").at(-1))):e||n||(this.callbacks.set(t,s),this.allKeys.add(t.split("+").at(-1)))}}#F(t){t.altKey&&this.buffer.push("alt"),t.ctrlKey&&this.buffer.push("ctrl"),t.metaKey&&this.buffer.push("meta"),t.shiftKey&&this.buffer.push("shift"),this.buffer.push(t.key);const e=this.buffer.join("+");return this.buffer.length=0,e}exec(t,e){if(!this.allKeys.has(e.key))return;const n=this.callbacks.get(this.#F(e));n&&(n.bind(t)(),e.stopPropagation(),e.preventDefault())}}e.KeyboardManager=o;class l{static _colorsMapping=new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]);get _colors(){const t=new Map([["CanvasText",null],["Canvas",null]]);return(0,r.getColorValues)(t),(0,s.shadow)(this,"_colors",t)}convert(t){const e=(0,r.getRGB)(t);if(!window.matchMedia("(forced-colors: active)").matches)return e;for(const[t,n]of this._colors)if(n.every(((t,n)=>t===e[n])))return l._colorsMapping.get(t);return e}getHexCode(t){const e=this._colors.get(t);return e?s.Util.makeHexColor(...e):t}}e.ColorManager=l;class c{#D=null;#I=new Map;#O=new Map;#L=null;#N=new a;#j=0;#B=null;#U=new Set;#q=null;#G=new i;#H=!1;#W=s.AnnotationEditorType.NONE;#V=new Set;#z=this.copy.bind(this);#$=this.cut.bind(this);#X=this.paste.bind(this);#K=this.keydown.bind(this);#Y=this.onEditingAction.bind(this);#Z=this.onPageChanging.bind(this);#J=this.onScaleChanging.bind(this);#Q=this.onRotationChanging.bind(this);#tt={isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1};#et=null;static _keyboardManager=new o([[["ctrl+a","mac+meta+a"],c.prototype.selectAll],[["ctrl+z","mac+meta+z"],c.prototype.undo],[["ctrl+y","ctrl+shift+Z","mac+meta+shift+Z"],c.prototype.redo],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete"],c.prototype.delete],[["Escape","mac+Escape"],c.prototype.unselectAll]]);constructor(t,e,n){this.#et=t,this.#q=e,this.#q._on("editingaction",this.#Y),this.#q._on("pagechanging",this.#Z),this.#q._on("scalechanging",this.#J),this.#q._on("rotationchanging",this.#Q),this.#L=n,this.viewParameters={realScale:r.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:0}}destroy(){this.#nt(),this.#q._off("editingaction",this.#Y),this.#q._off("pagechanging",this.#Z),this.#q._off("scalechanging",this.#J),this.#q._off("rotationchanging",this.#Q);for(const t of this.#O.values())t.destroy();this.#O.clear(),this.#I.clear(),this.#U.clear(),this.#D=null,this.#V.clear(),this.#N.destroy()}onPageChanging({pageNumber:t}){this.#j=t-1}focusMainContainer(){this.#et.focus()}addShouldRescale(t){this.#U.add(t)}removeShouldRescale(t){this.#U.delete(t)}onScaleChanging({scale:t}){this.commitOrRemove(),this.viewParameters.realScale=t*r.PixelsPerInch.PDF_TO_CSS_UNITS;for(const t of this.#U)t.onScaleChanging()}onRotationChanging({pagesRotation:t}){this.commitOrRemove(),this.viewParameters.rotation=t}addToAnnotationStorage(t){t.isEmpty()||!this.#L||this.#L.has(t.id)||this.#L.setValue(t.id,t)}#st(){this.#et.addEventListener("keydown",this.#K)}#nt(){this.#et.removeEventListener("keydown",this.#K)}#rt(){document.addEventListener("copy",this.#z),document.addEventListener("cut",this.#$),document.addEventListener("paste",this.#X)}#it(){document.removeEventListener("copy",this.#z),document.removeEventListener("cut",this.#$),document.removeEventListener("paste",this.#X)}copy(t){if(t.preventDefault(),this.#D&&this.#D.commitOrRemove(),!this.hasSelection)return;const e=[];for(const t of this.#V)t.isEmpty()||e.push(t.serialize());0!==e.length&&t.clipboardData.setData("application/pdfjs",JSON.stringify(e))}cut(t){this.copy(t),this.delete()}paste(t){t.preventDefault();let e=t.clipboardData.getData("application/pdfjs");if(!e)return;try{e=JSON.parse(e)}catch(t){return void(0,s.warn)(`paste: "${t.message}".`)}if(!Array.isArray(e))return;this.unselectAll();const n=this.#O.get(this.#j);try{const t=[];for(const s of e){const e=n.deserialize(s);if(!e)return;t.push(e)}const s=()=>{for(const e of t)this.#at(e);this.#ot(t)},r=()=>{for(const e of t)e.remove()};this.addCommands({cmd:s,undo:r,mustExec:!0})}catch(t){(0,s.warn)(`paste: "${t.message}".`)}}keydown(t){this.getActive()?.shouldGetKeyboardEvents()||c._keyboardManager.exec(this,t)}onEditingAction(t){["undo","redo","delete","selectAll"].includes(t.name)&&this[t.name]()}#lt(t){Object.entries(t).some((([t,e])=>this.#tt[t]!==e))&&this.#q.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(this.#tt,t)})}#ct(t){this.#q.dispatch("annotationeditorparamschanged",{source:this,details:t})}setEditingState(t){t?(this.#st(),this.#rt(),this.#lt({isEditing:this.#W!==s.AnnotationEditorType.NONE,isEmpty:this.#dt(),hasSomethingToUndo:this.#N.hasSomethingToUndo(),hasSomethingToRedo:this.#N.hasSomethingToRedo(),hasSelectedEditor:!1})):(this.#nt(),this.#it(),this.#lt({isEditing:!1}))}registerEditorTypes(t){if(!this.#B){this.#B=t;for(const t of this.#B)this.#ct(t.defaultPropertiesToUpdate)}}getId(){return this.#G.getId()}get currentLayer(){return this.#O.get(this.#j)}get currentPageIndex(){return this.#j}addLayer(t){this.#O.set(t.pageIndex,t),this.#H?t.enable():t.disable()}removeLayer(t){this.#O.delete(t.pageIndex)}updateMode(t){if(this.#W=t,t===s.AnnotationEditorType.NONE)this.setEditingState(!1),this.#ht();else{this.setEditingState(!0),this.#ut();for(const e of this.#O.values())e.updateMode(t)}}updateToolbar(t){t!==this.#W&&this.#q.dispatch("switchannotationeditormode",{source:this,mode:t})}updateParams(t,e){if(this.#B){for(const n of this.#V)n.updateParams(t,e);for(const n of this.#B)n.updateDefaultParams(t,e)}}#ut(){if(!this.#H){this.#H=!0;for(const t of this.#O.values())t.enable()}}#ht(){if(this.unselectAll(),this.#H){this.#H=!1;for(const t of this.#O.values())t.disable()}}getEditors(t){const e=[];for(const n of this.#I.values())n.pageIndex===t&&e.push(n);return e}getEditor(t){return this.#I.get(t)}addEditor(t){this.#I.set(t.id,t)}removeEditor(t){this.#I.delete(t.id),this.unselect(t),this.#L?.remove(t.id)}#at(t){const e=this.#O.get(t.pageIndex);e?e.addOrRebuild(t):this.addEditor(t)}setActiveEditor(t){this.#D!==t&&(this.#D=t,t&&this.#ct(t.propertiesToUpdate))}toggleSelected(t){if(this.#V.has(t))return this.#V.delete(t),t.unselect(),void this.#lt({hasSelectedEditor:this.hasSelection});this.#V.add(t),t.select(),this.#ct(t.propertiesToUpdate),this.#lt({hasSelectedEditor:!0})}setSelected(t){for(const e of this.#V)e!==t&&e.unselect();this.#V.clear(),this.#V.add(t),t.select(),this.#ct(t.propertiesToUpdate),this.#lt({hasSelectedEditor:!0})}isSelected(t){return this.#V.has(t)}unselect(t){t.unselect(),this.#V.delete(t),this.#lt({hasSelectedEditor:this.hasSelection})}get hasSelection(){return 0!==this.#V.size}undo(){this.#N.undo(),this.#lt({hasSomethingToUndo:this.#N.hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:this.#dt()})}redo(){this.#N.redo(),this.#lt({hasSomethingToUndo:!0,hasSomethingToRedo:this.#N.hasSomethingToRedo(),isEmpty:this.#dt()})}addCommands(t){this.#N.add(t),this.#lt({hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:this.#dt()})}#dt(){if(0===this.#I.size)return!0;if(1===this.#I.size)for(const t of this.#I.values())return t.isEmpty();return!1}delete(){if(this.commitOrRemove(),!this.hasSelection)return;const t=[...this.#V];this.addCommands({cmd:()=>{for(const e of t)e.remove()},undo:()=>{for(const e of t)this.#at(e)},mustExec:!0})}commitOrRemove(){this.#D?.commitOrRemove()}#ot(t){this.#V.clear();for(const e of t)e.isEmpty()||(this.#V.add(e),e.select());this.#lt({hasSelectedEditor:!0})}selectAll(){for(const t of this.#V)t.commit();this.#ot(this.#I.values())}unselectAll(){if(this.#D)this.#D.commitOrRemove();else if(0!==this.#V.size){for(const t of this.#V)t.unselect();this.#V.clear(),this.#lt({hasSelectedEditor:!1})}}isActive(t){return this.#D===t}getActive(){return this.#D}getMode(){return this.#W}}e.AnnotationEditorUIManager=c},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StatTimer=e.RenderingCancelledException=e.PixelsPerInch=e.PageViewport=e.PDFDateString=e.DOMStandardFontDataFactory=e.DOMSVGFactory=e.DOMFilterFactory=e.DOMCanvasFactory=e.DOMCMapReaderFactory=e.AnnotationPrefix=void 0,e.deprecated=function(t){console.log("Deprecated API usage: "+t)},e.getColorValues=function(t){const e=document.createElement("span");e.style.visibility="hidden",document.body.append(e);for(const n of t.keys()){e.style.color=n;const s=window.getComputedStyle(e).color;t.set(n,_(s))}e.remove()},e.getCurrentTransform=function(t){const{a:e,b:n,c:s,d:r,e:i,f:a}=t.getTransform();return[e,n,s,r,i,a]},e.getCurrentTransformInverse=function(t){const{a:e,b:n,c:s,d:r,e:i,f:a}=t.getTransform().invertSelf();return[e,n,s,r,i,a]},e.getFilenameFromUrl=function(t,e=!1){return e||([t]=t.split(/[#?]/,1)),t.substring(t.lastIndexOf("/")+1)},e.getPdfFilenameFromUrl=function(t,e="document.pdf"){if("string"!=typeof t)return e;if(f(t))return(0,r.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),e;const n=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,s=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/.exec(t);let i=n.exec(s[1])||n.exec(s[2])||n.exec(s[3]);if(i&&(i=i[0],i.includes("%")))try{i=n.exec(decodeURIComponent(i))[0]}catch(t){}return i||e},e.getRGB=_,e.getXfaPageViewport=function(t,{scale:e=1,rotation:n=0}){const{width:s,height:r}=t.attributes.style,i=[0,0,parseInt(s),parseInt(r)];return new p({viewBox:i,scale:e,rotation:n})},e.isDataScheme=f,e.isPdfFile=function(t){return"string"==typeof t&&/\.pdf$/i.test(t)},e.isValidFetchUrl=m,e.loadScript=function(t,e=!1){return new Promise(((n,s)=>{const r=document.createElement("script");r.src=t,r.onload=function(t){e&&r.remove(),n(t)},r.onerror=function(){s(new Error(`Cannot load script at: ${r.src}`))},(document.head||document.documentElement).append(r)}))},e.setLayerDimensions=function(t,e,n=!1,s=!0){if(e instanceof p){const{pageWidth:s,pageHeight:r}=e.rawDims,{style:i}=t,a=`calc(var(--scale-factor) * ${s}px)`,o=`calc(var(--scale-factor) * ${r}px)`;n&&e.rotation%180!=0?(i.width=o,i.height=a):(i.width=a,i.height=o)}s&&t.setAttribute("data-main-rotation",e.rotation)};var s=n(7),r=n(1);const i="http://www.w3.org/2000/svg";e.AnnotationPrefix="pdfjs_internal_id_";class a{static CSS=96;static PDF=72;static PDF_TO_CSS_UNITS=this.CSS/this.PDF}e.PixelsPerInch=a;class o extends s.BaseFilterFactory{#pt;#gt;#e;#ft;#mt;#bt;#_t;#P=0;constructor({docId:t,ownerDocument:e=globalThis.document}={}){super(),this.#e=t,this.#ft=e}get#vt(){return this.#pt||=new Map}get#At(){if(!this.#gt){const t=this.#ft.createElement("div"),{style:e}=t;e.visibility="hidden",e.contain="strict",e.width=e.height=0,e.position="absolute",e.top=e.left=0,e.zIndex=-1;const n=this.#ft.createElementNS(i,"svg");n.setAttribute("width",0),n.setAttribute("height",0),this.#gt=this.#ft.createElementNS(i,"defs"),t.append(n),n.append(this.#gt),this.#ft.body.append(t)}return this.#gt}#yt(t,e,n){const s=this.#ft.createElementNS(i,e);s.setAttribute("type","discrete"),s.setAttribute("tableValues",n),t.append(s)}addFilter(t){if(!t)return"none";let e,n,s,r,a=this.#vt.get(t);if(a)return a;if(1===t.length){const i=t[0],a=new Array(256);for(let t=0;t<256;t++)a[t]=i[t]/255;r=e=n=s=a.join(",")}else{const[i,a,o]=t,l=new Array(256),c=new Array(256),d=new Array(256);for(let t=0;t<256;t++)l[t]=i[t]/255,c[t]=a[t]/255,d[t]=o[t]/255;e=l.join(","),n=c.join(","),s=d.join(","),r=`${e}${n}${s}`}if(a=this.#vt.get(r),a)return this.#vt.set(t,a),a;const o=`g_${this.#e}_transfer_map_${this.#P++}`,l=`url(#${o})`;this.#vt.set(t,l),this.#vt.set(r,l);const c=this.#ft.createElementNS(i,"filter",i);c.setAttribute("id",o),c.setAttribute("color-interpolation-filters","sRGB");const d=this.#ft.createElementNS(i,"feComponentTransfer");return c.append(d),this.#yt(d,"feFuncR",e),this.#yt(d,"feFuncG",n),this.#yt(d,"feFuncB",s),this.#At.append(c),l}addHCMFilter(t,e){const n=`${t}-${e}`;if(this.#bt===n)return this.#_t;if(this.#bt=n,this.#_t="none",this.#mt?.remove(),!t||!e)return this.#_t;this.#At.style.color=t;const s=_(t=getComputedStyle(this.#At).getPropertyValue("color"));t=r.Util.makeHexColor(...s),this.#At.style.color=e;const a=_(e=getComputedStyle(this.#At).getPropertyValue("color"));if(e=r.Util.makeHexColor(...a),this.#At.style.color="","#000000"===t&&"#ffffff"===e||t===e)return this.#_t;const o=new Array(256);for(let t=0;t<=255;t++){const e=t/255;o[t]=e<=.03928?e/12.92:((e+.055)/1.055)**2.4}const l=o.join(","),c=`g_${this.#e}_hcm_filter`,d=this.#mt=this.#ft.createElementNS(i,"filter",i);d.setAttribute("id",c),d.setAttribute("color-interpolation-filters","sRGB");let h=this.#ft.createElementNS(i,"feComponentTransfer");d.append(h),this.#yt(h,"feFuncR",l),this.#yt(h,"feFuncG",l),this.#yt(h,"feFuncB",l);const u=this.#ft.createElementNS(i,"feColorMatrix");u.setAttribute("type","matrix"),u.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),d.append(u),h=this.#ft.createElementNS(i,"feComponentTransfer"),d.append(h);const p=(t,e)=>{const n=s[t]/255,r=a[t]/255,i=new Array(e+1);for(let t=0;t<=e;t++)i[t]=n+t/e*(r-n);return i.join(",")};return this.#yt(h,"feFuncR",p(0,5)),this.#yt(h,"feFuncG",p(1,5)),this.#yt(h,"feFuncB",p(2,5)),this.#At.append(d),this.#_t=`url(#${c})`,this.#_t}destroy(t=!1){t&&this.#_t||(this.#gt&&(this.#gt.parentNode.parentNode.remove(),this.#gt=null),this.#pt&&(this.#pt.clear(),this.#pt=null),this.#P=0)}}e.DOMFilterFactory=o;class l extends s.BaseCanvasFactory{constructor({ownerDocument:t=globalThis.document}={}){super(),this._document=t}_createCanvas(t,e){const n=this._document.createElement("canvas");return n.width=t,n.height=e,n}}async function c(t,e=!1){if(m(t,document.baseURI)){const n=await fetch(t);if(!n.ok)throw new Error(n.statusText);return e?new Uint8Array(await n.arrayBuffer()):(0,r.stringToBytes)(await n.text())}return new Promise(((n,s)=>{const i=new XMLHttpRequest;i.open("GET",t,!0),e&&(i.responseType="arraybuffer"),i.onreadystatechange=()=>{if(i.readyState===XMLHttpRequest.DONE){if(200===i.status||0===i.status){let t;if(e&&i.response?t=new Uint8Array(i.response):!e&&i.responseText&&(t=(0,r.stringToBytes)(i.responseText)),t)return void n(t)}s(new Error(i.statusText))}},i.send(null)}))}e.DOMCanvasFactory=l;class d extends s.BaseCMapReaderFactory{_fetchData(t,e){return c(t,this.isCompressed).then((t=>({cMapData:t,compressionType:e})))}}e.DOMCMapReaderFactory=d;class h extends s.BaseStandardFontDataFactory{_fetchData(t){return c(t,!0)}}e.DOMStandardFontDataFactory=h;class u extends s.BaseSVGFactory{_createSVG(t){return document.createElementNS(i,t)}}e.DOMSVGFactory=u;class p{constructor({viewBox:t,scale:e,rotation:n,offsetX:s=0,offsetY:r=0,dontFlip:i=!1}){this.viewBox=t,this.scale=e,this.rotation=n,this.offsetX=s,this.offsetY=r;const a=(t[2]+t[0])/2,o=(t[3]+t[1])/2;let l,c,d,h,u,p,g,f;switch((n%=360)<0&&(n+=360),n){case 180:l=-1,c=0,d=0,h=1;break;case 90:l=0,c=1,d=1,h=0;break;case 270:l=0,c=-1,d=-1,h=0;break;case 0:l=1,c=0,d=0,h=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}i&&(d=-d,h=-h),0===l?(u=Math.abs(o-t[1])*e+s,p=Math.abs(a-t[0])*e+r,g=(t[3]-t[1])*e,f=(t[2]-t[0])*e):(u=Math.abs(a-t[0])*e+s,p=Math.abs(o-t[1])*e+r,g=(t[2]-t[0])*e,f=(t[3]-t[1])*e),this.transform=[l*e,c*e,d*e,h*e,u-l*e*a-d*e*o,p-c*e*a-h*e*o],this.width=g,this.height=f}get rawDims(){const{viewBox:t}=this;return(0,r.shadow)(this,"rawDims",{pageWidth:t[2]-t[0],pageHeight:t[3]-t[1],pageX:t[0],pageY:t[1]})}clone({scale:t=this.scale,rotation:e=this.rotation,offsetX:n=this.offsetX,offsetY:s=this.offsetY,dontFlip:r=!1}={}){return new p({viewBox:this.viewBox.slice(),scale:t,rotation:e,offsetX:n,offsetY:s,dontFlip:r})}convertToViewportPoint(t,e){return r.Util.applyTransform([t,e],this.transform)}convertToViewportRectangle(t){const e=r.Util.applyTransform([t[0],t[1]],this.transform),n=r.Util.applyTransform([t[2],t[3]],this.transform);return[e[0],e[1],n[0],n[1]]}convertToPdfPoint(t,e){return r.Util.applyInverseTransform([t,e],this.transform)}}e.PageViewport=p;class g extends r.BaseException{constructor(t,e,n=0){super(t,"RenderingCancelledException"),this.type=e,this.extraDelay=n}}function f(t){const e=t.length;let n=0;for(;n<e&&""===t[n].trim();)n++;return"data:"===t.substring(n,n+5).toLowerCase()}function m(t,e){try{const{protocol:n}=e?new URL(t,e):new URL(t);return"http:"===n||"https:"===n}catch(t){return!1}}let b;function _(t){if(t.startsWith("#")){const e=parseInt(t.slice(1),16);return[(16711680&e)>>16,(65280&e)>>8,255&e]}return t.startsWith("rgb(")?t.slice(4,-1).split(",").map((t=>parseInt(t))):t.startsWith("rgba(")?t.slice(5,-1).split(",").map((t=>parseInt(t))).slice(0,3):((0,r.warn)(`Not a valid color format: "${t}"`),[0,0,0])}e.RenderingCancelledException=g,e.StatTimer=class{started=Object.create(null);times=[];time(t){t in this.started&&(0,r.warn)(`Timer is already running for ${t}`),this.started[t]=Date.now()}timeEnd(t){t in this.started||(0,r.warn)(`Timer has not been started for ${t}`),this.times.push({name:t,start:this.started[t],end:Date.now()}),delete this.started[t]}toString(){const t=[];let e=0;for(const{name:t}of this.times)e=Math.max(t.length,e);for(const{name:n,start:s,end:r}of this.times)t.push(`${n.padEnd(e)} ${r-s}ms\n`);return t.join("")}},e.PDFDateString=class{static toDateObject(t){if(!t||"string"!=typeof t)return null;b||(b=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const e=b.exec(t);if(!e)return null;const n=parseInt(e[1],10);let s=parseInt(e[2],10);s=s>=1&&s<=12?s-1:0;let r=parseInt(e[3],10);r=r>=1&&r<=31?r:1;let i=parseInt(e[4],10);i=i>=0&&i<=23?i:0;let a=parseInt(e[5],10);a=a>=0&&a<=59?a:0;let o=parseInt(e[6],10);o=o>=0&&o<=59?o:0;const l=e[7]||"Z";let c=parseInt(e[8],10);c=c>=0&&c<=23?c:0;let d=parseInt(e[9],10)||0;return d=d>=0&&d<=59?d:0,"-"===l?(i+=c,a+=d):"+"===l&&(i-=c,a-=d),new Date(Date.UTC(n,s,r,i,a,o))}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BaseStandardFontDataFactory=e.BaseSVGFactory=e.BaseFilterFactory=e.BaseCanvasFactory=e.BaseCMapReaderFactory=void 0;var s=n(1);class r{constructor(){this.constructor===r&&(0,s.unreachable)("Cannot initialize BaseFilterFactory.")}addFilter(t){return"none"}addHCMFilter(t,e){return"none"}destroy(t=!1){}}e.BaseFilterFactory=r;class i{constructor(){this.constructor===i&&(0,s.unreachable)("Cannot initialize BaseCanvasFactory.")}create(t,e){if(t<=0||e<=0)throw new Error("Invalid canvas size");const n=this._createCanvas(t,e);return{canvas:n,context:n.getContext("2d")}}reset(t,e,n){if(!t.canvas)throw new Error("Canvas is not specified");if(e<=0||n<=0)throw new Error("Invalid canvas size");t.canvas.width=e,t.canvas.height=n}destroy(t){if(!t.canvas)throw new Error("Canvas is not specified");t.canvas.width=0,t.canvas.height=0,t.canvas=null,t.context=null}_createCanvas(t,e){(0,s.unreachable)("Abstract method `_createCanvas` called.")}}e.BaseCanvasFactory=i;class a{constructor({baseUrl:t=null,isCompressed:e=!0}){this.constructor===a&&(0,s.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=t,this.isCompressed=e}async fetch({name:t}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!t)throw new Error("CMap name must be specified.");const e=this.baseUrl+t+(this.isCompressed?".bcmap":""),n=this.isCompressed?s.CMapCompressionType.BINARY:s.CMapCompressionType.NONE;return this._fetchData(e,n).catch((t=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${e}`)}))}_fetchData(t,e){(0,s.unreachable)("Abstract method `_fetchData` called.")}}e.BaseCMapReaderFactory=a;class o{constructor({baseUrl:t=null}){this.constructor===o&&(0,s.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=t}async fetch({filename:t}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!t)throw new Error("Font filename must be specified.");const e=`${this.baseUrl}${t}`;return this._fetchData(e).catch((t=>{throw new Error(`Unable to load font data at: ${e}`)}))}_fetchData(t){(0,s.unreachable)("Abstract method `_fetchData` called.")}}e.BaseStandardFontDataFactory=o;class l{constructor(){this.constructor===l&&(0,s.unreachable)("Cannot initialize BaseSVGFactory.")}create(t,e,n=!1){if(t<=0||e<=0)throw new Error("Invalid SVG dimensions");const s=this._createSVG("svg:svg");return s.setAttribute("version","1.1"),n||(s.setAttribute("width",`${t}px`),s.setAttribute("height",`${e}px`)),s.setAttribute("preserveAspectRatio","none"),s.setAttribute("viewBox",`0 0 ${t} ${e}`),s}createElement(t){if("string"!=typeof t)throw new Error("Invalid SVG element type");return this._createSVG(t)}_createSVG(t){(0,s.unreachable)("Abstract method `_createSVG` called.")}}e.BaseSVGFactory=l},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MurmurHash3_64=void 0;var s=n(1);const r=3285377520,i=4294901760,a=65535;e.MurmurHash3_64=class{constructor(t){this.h1=t?4294967295&t:r,this.h2=t?4294967295&t:r}update(t){let e,n;if("string"==typeof t){e=new Uint8Array(2*t.length),n=0;for(let s=0,r=t.length;s<r;s++){const r=t.charCodeAt(s);r<=255?e[n++]=r:(e[n++]=r>>>8,e[n++]=255&r)}}else{if(!(0,s.isArrayBuffer)(t))throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");e=t.slice(),n=e.byteLength}const r=n>>2,o=n-4*r,l=new Uint32Array(e.buffer,0,r);let c=0,d=0,h=this.h1,u=this.h2;const p=3432918353,g=461845907,f=11601,m=13715;for(let t=0;t<r;t++)1&t?(c=l[t],c=c*p&i|c*f&a,c=c<<15|c>>>17,c=c*g&i|c*m&a,h^=c,h=h<<13|h>>>19,h=5*h+3864292196):(d=l[t],d=d*p&i|d*f&a,d=d<<15|d>>>17,d=d*g&i|d*m&a,u^=d,u=u<<13|u>>>19,u=5*u+3864292196);switch(c=0,o){case 3:c^=e[4*r+2]<<16;case 2:c^=e[4*r+1]<<8;case 1:c^=e[4*r],c=c*p&i|c*f&a,c=c<<15|c>>>17,c=c*g&i|c*m&a,1&r?h^=c:u^=c}this.h1=h,this.h2=u}hexdigest(){let t=this.h1,e=this.h2;return t^=e>>>1,t=3981806797*t&i|36045*t&a,e=4283543511*e&i|(2950163797*(e<<16|t>>>16)&i)>>>16,t^=e>>>1,t=444984403*t&i|60499*t&a,e=3301882366*e&i|(3120437893*(e<<16|t>>>16)&i)>>>16,t^=e>>>1,(t>>>0).toString(16).padStart(8,"0")+(e>>>0).toString(16).padStart(8,"0")}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FontLoader=e.FontFaceObject=void 0;var s=n(1),r=n(10);e.FontLoader=class{constructor({ownerDocument:t=globalThis.document,styleElement:e=null}){this._document=t,this.nativeFontFaces=[],this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(t){this.nativeFontFaces.push(t),this._document.fonts.add(t)}insertRule(t){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const e=this.styleElement.sheet;e.insertRule(t,e.cssRules.length)}clear(){for(const t of this.nativeFontFaces)this._document.fonts.delete(t);this.nativeFontFaces.length=0,this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async bind(t){if(t.attached||t.missingFile)return;if(t.attached=!0,this.isFontLoadingAPISupported){const e=t.createNativeFontFace();if(e){this.addNativeFontFace(e);try{await e.loaded}catch(n){throw(0,s.warn)(`Failed to load font '${e.family}': '${n}'.`),t.disableFontFace=!0,n}}return}const e=t.createFontFaceRule();if(e){if(this.insertRule(e),this.isSyncFontLoadingSupported)return;await new Promise((e=>{const n=this._queueLoadingCallback(e);this._prepareFontLoadEvent(t,n)}))}}get isFontLoadingAPISupported(){const t=!!this._document?.fonts;return(0,s.shadow)(this,"isFontLoadingAPISupported",t)}get isSyncFontLoadingSupported(){let t=!1;return(r.isNodeJS||"undefined"!=typeof navigator&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(t=!0),(0,s.shadow)(this,"isSyncFontLoadingSupported",t)}_queueLoadingCallback(t){const{loadingRequests:e}=this,n={done:!1,complete:function(){for((0,s.assert)(!n.done,"completeRequest() cannot be called twice."),n.done=!0;e.length>0&&e[0].done;){const t=e.shift();setTimeout(t.callback,0)}},callback:t};return e.push(n),n}get _loadTestFont(){const t=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return(0,s.shadow)(this,"_loadTestFont",t)}_prepareFontLoadEvent(t,e){function n(t,e){return t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|255&t.charCodeAt(e+3)}function r(t,e,n,s){return t.substring(0,e)+s+t.substring(e+n)}let i,a;const o=this._document.createElement("canvas");o.width=1,o.height=1;const l=o.getContext("2d");let c=0;const d=`lt${Date.now()}${this.loadTestFontId++}`;let h=this._loadTestFont;h=r(h,976,d.length,d);const u=1482184792;let p=n(h,16);for(i=0,a=d.length-3;i<a;i+=4)p=p-u+n(d,i)|0;i<d.length&&(p=p-u+n(d+"XXX",i)|0),h=r(h,16,4,(0,s.string32)(p));const g=`@font-face {font-family:"${d}";src:url(data:font/opentype;base64,${btoa(h)});}`;this.insertRule(g);const f=this._document.createElement("div");f.style.visibility="hidden",f.style.width=f.style.height="10px",f.style.position="absolute",f.style.top=f.style.left="0px";for(const e of[t.loadedName,d]){const t=this._document.createElement("span");t.textContent="Hi",t.style.fontFamily=e,f.append(t)}this._document.body.append(f),function t(e,n){if(++c>30)return(0,s.warn)("Load test font never loaded."),void n();l.font="30px "+e,l.fillText(".",0,20),l.getImageData(0,0,1,1).data[3]>0?n():setTimeout(t.bind(null,e,n))}(d,(()=>{f.remove(),e.complete()}))}},e.FontFaceObject=class{constructor(t,{isEvalSupported:e=!0,disableFontFace:n=!1,ignoreErrors:s=!1,inspectFont:r=null}){this.compiledGlyphs=Object.create(null);for(const e in t)this[e]=t[e];this.isEvalSupported=!1!==e,this.disableFontFace=!0===n,this.ignoreErrors=!0===s,this._inspectFont=r}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;let t;if(this.cssFontInfo){const e={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(e.style=`oblique ${this.cssFontInfo.italicAngle}deg`),t=new FontFace(this.cssFontInfo.fontFamily,this.data,e)}else t=new FontFace(this.loadedName,this.data,{});return this._inspectFont?.(this),t}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;const t=(0,s.bytesToString)(this.data),e=`url(data:${this.mimetype};base64,${btoa(t)});`;let n;if(this.cssFontInfo){let t=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(t+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),n=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${t}src:${e}}`}else n=`@font-face {font-family:"${this.loadedName}";src:${e}}`;return this._inspectFont?.(this,e),n}getPathGenerator(t,e){if(void 0!==this.compiledGlyphs[e])return this.compiledGlyphs[e];let n;try{n=t.get(this.loadedName+"_path_"+e)}catch(t){if(!this.ignoreErrors)throw t;return(0,s.warn)(`getPathGenerator - ignoring character: "${t}".`),this.compiledGlyphs[e]=function(t,e){}}if(this.isEvalSupported&&s.FeatureTest.isEvalSupported){const t=[];for(const e of n){const n=void 0!==e.args?e.args.join(","):"";t.push("c.",e.cmd,"(",n,");\n")}return this.compiledGlyphs[e]=new Function("c","size",t.join(""))}return this.compiledGlyphs[e]=function(t,e){for(const s of n)"scale"===s.cmd&&(s.args=[e,-e]),t[s.cmd].apply(t,s.args)}}}},(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isNodeJS=void 0;const n=!("object"!=typeof process||process+""!="[object process]"||process.versions.nw||process.versions.electron&&process.type&&"browser"!==process.type);e.isNodeJS=n},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CanvasGraphics=void 0;var s=n(1),r=n(6),i=n(12),a=n(13),o=n(10);const l=4096,c=16;class d{constructor(t){this.canvasFactory=t,this.cache=Object.create(null)}getCanvas(t,e,n){let s;return void 0!==this.cache[t]?(s=this.cache[t],this.canvasFactory.reset(s,e,n)):(s=this.canvasFactory.create(e,n),this.cache[t]=s),s}delete(t){delete this.cache[t]}clear(){for(const t in this.cache){const e=this.cache[t];this.canvasFactory.destroy(e),delete this.cache[t]}}}function h(t,e,n,s,i,a,o,l,c,d){const[h,u,p,g,f,m]=(0,r.getCurrentTransform)(t);if(0===u&&0===p){const r=o*h+f,b=Math.round(r),_=l*g+m,v=Math.round(_),A=(o+c)*h+f,y=Math.abs(Math.round(A)-b)||1,S=(l+d)*g+m,x=Math.abs(Math.round(S)-v)||1;return t.setTransform(Math.sign(h),0,0,Math.sign(g),b,v),t.drawImage(e,n,s,i,a,0,0,y,x),t.setTransform(h,u,p,g,f,m),[y,x]}if(0===h&&0===g){const r=l*p+f,b=Math.round(r),_=o*u+m,v=Math.round(_),A=(l+d)*p+f,y=Math.abs(Math.round(A)-b)||1,S=(o+c)*u+m,x=Math.abs(Math.round(S)-v)||1;return t.setTransform(0,Math.sign(u),Math.sign(p),0,b,v),t.drawImage(e,n,s,i,a,0,0,x,y),t.setTransform(h,u,p,g,f,m),[x,y]}return t.drawImage(e,n,s,i,a,o,l,c,d),[Math.hypot(h,u)*c,Math.hypot(p,g)*d]}class u{constructor(t,e){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=s.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=s.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=s.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,t,e])}clone(){const t=Object.create(this);return t.clipBox=this.clipBox.slice(),t}setCurrentPoint(t,e){this.x=t,this.y=e}updatePathMinMax(t,e,n){[e,n]=s.Util.applyTransform([e,n],t),this.minX=Math.min(this.minX,e),this.minY=Math.min(this.minY,n),this.maxX=Math.max(this.maxX,e),this.maxY=Math.max(this.maxY,n)}updateRectMinMax(t,e){const n=s.Util.applyTransform(e,t),r=s.Util.applyTransform(e.slice(2),t);this.minX=Math.min(this.minX,n[0],r[0]),this.minY=Math.min(this.minY,n[1],r[1]),this.maxX=Math.max(this.maxX,n[0],r[0]),this.maxY=Math.max(this.maxY,n[1],r[1])}updateScalingPathMinMax(t,e){s.Util.scaleMinMax(t,e),this.minX=Math.min(this.minX,e[0]),this.maxX=Math.max(this.maxX,e[1]),this.minY=Math.min(this.minY,e[2]),this.maxY=Math.max(this.maxY,e[3])}updateCurvePathMinMax(t,e,n,r,i,a,o,l,c,d){const h=s.Util.bezierBoundingBox(e,n,r,i,a,o,l,c);if(d)return d[0]=Math.min(d[0],h[0],h[2]),d[1]=Math.max(d[1],h[0],h[2]),d[2]=Math.min(d[2],h[1],h[3]),void(d[3]=Math.max(d[3],h[1],h[3]));this.updateRectMinMax(t,h)}getPathBoundingBox(t=i.PathType.FILL,e=null){const n=[this.minX,this.minY,this.maxX,this.maxY];if(t===i.PathType.STROKE){e||(0,s.unreachable)("Stroke bounding box must include transform.");const t=s.Util.singularValueDecompose2dScale(e),r=t[0]*this.lineWidth/2,i=t[1]*this.lineWidth/2;n[0]-=r,n[1]-=i,n[2]+=r,n[3]+=i}return n}updateClipFromPath(){const t=s.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(t||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(t){this.clipBox=t,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(t=i.PathType.FILL,e=null){return s.Util.intersect(this.clipBox,this.getPathBoundingBox(t,e))}}function p(t,e){if("undefined"!=typeof ImageData&&e instanceof ImageData)return void t.putImageData(e,0,0);const n=e.height,r=e.width,i=n%c,a=(n-i)/c,o=0===i?a:a+1,l=t.createImageData(r,c);let d,h=0;const u=e.data,p=l.data;let g,f,m,b;if(e.kind===s.ImageKind.GRAYSCALE_1BPP){const e=u.byteLength,n=new Uint32Array(p.buffer,0,p.byteLength>>2),b=n.length,_=r+7>>3,v=4294967295,A=s.FeatureTest.isLittleEndian?4278190080:255;for(g=0;g<o;g++){for(m=g<a?c:i,d=0,f=0;f<m;f++){const t=e-h;let s=0;const i=t>_?r:8*t-7,a=-8&i;let o=0,l=0;for(;s<a;s+=8)l=u[h++],n[d++]=128&l?v:A,n[d++]=64&l?v:A,n[d++]=32&l?v:A,n[d++]=16&l?v:A,n[d++]=8&l?v:A,n[d++]=4&l?v:A,n[d++]=2&l?v:A,n[d++]=1&l?v:A;for(;s<i;s++)0===o&&(l=u[h++],o=128),n[d++]=l&o?v:A,o>>=1}for(;d<b;)n[d++]=0;t.putImageData(l,0,g*c)}}else if(e.kind===s.ImageKind.RGBA_32BPP){for(f=0,b=r*c*4,g=0;g<a;g++)p.set(u.subarray(h,h+b)),h+=b,t.putImageData(l,0,f),f+=c;g<o&&(b=r*i*4,p.set(u.subarray(h,h+b)),t.putImageData(l,0,f))}else{if(e.kind!==s.ImageKind.RGB_24BPP)throw new Error(`bad image kind: ${e.kind}`);for(m=c,b=r*m,g=0;g<o;g++){for(g>=a&&(m=i,b=r*m),d=0,f=b;f--;)p[d++]=u[h++],p[d++]=u[h++],p[d++]=u[h++],p[d++]=255;t.putImageData(l,0,g*c)}}}function g(t,e){if(e.bitmap)return void t.drawImage(e.bitmap,0,0);const n=e.height,s=e.width,r=n%c,i=(n-r)/c,o=0===r?i:i+1,l=t.createImageData(s,c);let d=0;const h=e.data,u=l.data;for(let e=0;e<o;e++){const n=e<i?c:r;({srcPos:d}=(0,a.convertBlackAndWhiteToRGBA)({src:h,srcPos:d,dest:u,width:s,height:n,nonBlackColor:0})),t.putImageData(l,0,e*c)}}function f(t,e){const n=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const s of n)void 0!==t[s]&&(e[s]=t[s]);void 0!==t.setLineDash&&(e.setLineDash(t.getLineDash()),e.lineDashOffset=t.lineDashOffset)}function m(t){t.strokeStyle=t.fillStyle="#000000",t.fillRule="nonzero",t.globalAlpha=1,t.lineWidth=1,t.lineCap="butt",t.lineJoin="miter",t.miterLimit=10,t.globalCompositeOperation="source-over",t.font="10px sans-serif",void 0!==t.setLineDash&&(t.setLineDash([]),t.lineDashOffset=0),o.isNodeJS||(t.filter="none")}function b(t,e,n,s){const r=t.length;for(let i=3;i<r;i+=4){const r=t[i];if(0===r)t[i-3]=e,t[i-2]=n,t[i-1]=s;else if(r<255){const a=255-r;t[i-3]=t[i-3]*r+e*a>>8,t[i-2]=t[i-2]*r+n*a>>8,t[i-1]=t[i-1]*r+s*a>>8}}}function _(t,e,n){const s=t.length;for(let r=3;r<s;r+=4){const s=n?n[t[r]]:t[r];e[r]=e[r]*s*.00392156862745098|0}}function v(t,e,n){const s=t.length;for(let r=3;r<s;r+=4){const s=77*t[r-3]+152*t[r-2]+28*t[r-1];e[r]=n?e[r]*n[s>>8]>>8:e[r]*s>>16}}function A(t,e){const n=s.Util.singularValueDecompose2dScale(t);n[0]=Math.fround(n[0]),n[1]=Math.fround(n[1]);const i=Math.fround((globalThis.devicePixelRatio||1)*r.PixelsPerInch.PDF_TO_CSS_UNITS);return void 0!==e?e:n[0]<=i||n[1]<=i}const y=["butt","round","square"],S=["miter","round","bevel"],x={},E={};class C{constructor(t,e,n,s,r,{optionalContentConfig:i,markedContentStack:a=null},o,l){this.ctx=t,this.current=new u(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=e,this.objs=n,this.canvasFactory=s,this.filterFactory=r,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=a||[],this.optionalContentConfig=i,this.cachedCanvases=new d(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=o,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=l,this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(t,e=null){return"string"==typeof t?t.startsWith("g_")?this.commonObjs.get(t):this.objs.get(t):e}beginDrawing({transform:t,viewport:e,transparency:n=!1,background:s=null}){const i=this.ctx.canvas.width,a=this.ctx.canvas.height,o=this.ctx.fillStyle;if(this.ctx.fillStyle=s||"#ffffff",this.ctx.fillRect(0,0,i,a),this.ctx.fillStyle=o,n){const t=this.cachedCanvases.getCanvas("transparent",i,a);this.compositeCtx=this.ctx,this.transparentCanvas=t.canvas,this.ctx=t.context,this.ctx.save(),this.ctx.transform(...(0,r.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),m(this.ctx),t&&(this.ctx.transform(...t),this.outputScaleX=t[0],this.outputScaleY=t[0]),this.ctx.transform(...e.transform),this.viewportScale=e.scale,this.baseTransform=(0,r.getCurrentTransform)(this.ctx)}executeOperatorList(t,e,n,r){const i=t.argsArray,a=t.fnArray;let o=e||0;const l=i.length;if(l===o)return o;const c=l-o>10&&"function"==typeof n,d=c?Date.now()+15:0;let h=0;const u=this.commonObjs,p=this.objs;let g;for(;;){if(void 0!==r&&o===r.nextBreakPoint)return r.breakIt(o,n),o;if(g=a[o],g!==s.OPS.dependency)this[g].apply(this,i[o]);else for(const t of i[o]){const e=t.startsWith("g_")?u:p;if(!e.has(t))return e.get(t,n),o}if(o++,o===l)return o;if(c&&++h>10){if(Date.now()>d)return n(),o;h=0}}}#St(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)}endDrawing(){this.#St(),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const t of this._cachedBitmapsMap.values()){for(const e of t.values())"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement&&(e.width=e.height=0);t.clear()}this._cachedBitmapsMap.clear(),this.#xt()}#xt(){if(this.pageColors){const t=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if("none"!==t){const e=this.ctx.filter;this.ctx.filter=t,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=e}}}_scaleImage(t,e){const n=t.width,s=t.height;let r,i,a=Math.max(Math.hypot(e[0],e[1]),1),o=Math.max(Math.hypot(e[2],e[3]),1),l=n,c=s,d="prescale1";for(;a>2&&l>1||o>2&&c>1;){let e=l,n=c;a>2&&l>1&&(e=l>=16384?Math.floor(l/2)-1||1:Math.ceil(l/2),a/=l/e),o>2&&c>1&&(n=c>=16384?Math.floor(c/2)-1||1:Math.ceil(c)/2,o/=c/n),r=this.cachedCanvases.getCanvas(d,e,n),i=r.context,i.clearRect(0,0,e,n),i.drawImage(t,0,0,l,c,0,0,e,n),t=r.canvas,l=e,c=n,d="prescale1"===d?"prescale2":"prescale1"}return{img:t,paintWidth:l,paintHeight:c}}_createMaskCanvas(t){const e=this.ctx,{width:n,height:a}=t,o=this.current.fillColor,l=this.current.patternFill,c=(0,r.getCurrentTransform)(e);let d,u,p,f;if((t.bitmap||t.data)&&t.count>1){const e=t.bitmap||t.data.buffer;u=JSON.stringify(l?c:[c.slice(0,4),o]),d=this._cachedBitmapsMap.get(e),d||(d=new Map,this._cachedBitmapsMap.set(e,d));const n=d.get(u);if(n&&!l)return{canvas:n,offsetX:Math.round(Math.min(c[0],c[2])+c[4]),offsetY:Math.round(Math.min(c[1],c[3])+c[5])};p=n}p||(f=this.cachedCanvases.getCanvas("maskCanvas",n,a),g(f.context,t));let m=s.Util.transform(c,[1/n,0,0,-1/a,0,0]);m=s.Util.transform(m,[1,0,0,1,0,-a]);const b=s.Util.applyTransform([0,0],m),_=s.Util.applyTransform([n,a],m),v=s.Util.normalizeRect([b[0],b[1],_[0],_[1]]),y=Math.round(v[2]-v[0])||1,S=Math.round(v[3]-v[1])||1,x=this.cachedCanvases.getCanvas("fillCanvas",y,S),E=x.context,C=Math.min(b[0],_[0]),w=Math.min(b[1],_[1]);E.translate(-C,-w),E.transform(...m),p||(p=this._scaleImage(f.canvas,(0,r.getCurrentTransformInverse)(E)),p=p.img,d&&l&&d.set(u,p)),E.imageSmoothingEnabled=A((0,r.getCurrentTransform)(E),t.interpolate),h(E,p,0,0,p.width,p.height,0,0,n,a),E.globalCompositeOperation="source-in";const P=s.Util.transform((0,r.getCurrentTransformInverse)(E),[1,0,0,1,-C,-w]);return E.fillStyle=l?o.getPattern(e,this,P,i.PathType.FILL):o,E.fillRect(0,0,n,a),d&&!l&&(this.cachedCanvases.delete("fillCanvas"),d.set(u,x.canvas)),{canvas:x.canvas,offsetX:Math.round(C),offsetY:Math.round(w)}}setLineWidth(t){t!==this.current.lineWidth&&(this._cachedScaleForStroking=null),this.current.lineWidth=t,this.ctx.lineWidth=t}setLineCap(t){this.ctx.lineCap=y[t]}setLineJoin(t){this.ctx.lineJoin=S[t]}setMiterLimit(t){this.ctx.miterLimit=t}setDash(t,e){const n=this.ctx;void 0!==n.setLineDash&&(n.setLineDash(t),n.lineDashOffset=e)}setRenderingIntent(t){}setFlatness(t){}setGState(t){for(const[e,n]of t)switch(e){case"LW":this.setLineWidth(n);break;case"LC":this.setLineCap(n);break;case"LJ":this.setLineJoin(n);break;case"ML":this.setMiterLimit(n);break;case"D":this.setDash(n[0],n[1]);break;case"RI":this.setRenderingIntent(n);break;case"FL":this.setFlatness(n);break;case"Font":this.setFont(n[0],n[1]);break;case"CA":this.current.strokeAlpha=n;break;case"ca":this.current.fillAlpha=n,this.ctx.globalAlpha=n;break;case"BM":this.ctx.globalCompositeOperation=n;break;case"SMask":this.current.activeSMask=n?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(n)}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const t=this.inSMaskMode;this.current.activeSMask&&!t?this.beginSMaskMode():!this.current.activeSMask&&t&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const t=this.ctx.canvas.width,e=this.ctx.canvas.height,n="smaskGroupAt"+this.groupLevel,s=this.cachedCanvases.getCanvas(n,t,e);this.suspendedCtx=this.ctx,this.ctx=s.context;const i=this.ctx;i.setTransform(...(0,r.getCurrentTransform)(this.suspendedCtx)),f(this.suspendedCtx,i),function(t,e){if(t._removeMirroring)throw new Error("Context is already forwarding operations.");t.__originalSave=t.save,t.__originalRestore=t.restore,t.__originalRotate=t.rotate,t.__originalScale=t.scale,t.__originalTranslate=t.translate,t.__originalTransform=t.transform,t.__originalSetTransform=t.setTransform,t.__originalResetTransform=t.resetTransform,t.__originalClip=t.clip,t.__originalMoveTo=t.moveTo,t.__originalLineTo=t.lineTo,t.__originalBezierCurveTo=t.bezierCurveTo,t.__originalRect=t.rect,t.__originalClosePath=t.closePath,t.__originalBeginPath=t.beginPath,t._removeMirroring=()=>{t.save=t.__originalSave,t.restore=t.__originalRestore,t.rotate=t.__originalRotate,t.scale=t.__originalScale,t.translate=t.__originalTranslate,t.transform=t.__originalTransform,t.setTransform=t.__originalSetTransform,t.resetTransform=t.__originalResetTransform,t.clip=t.__originalClip,t.moveTo=t.__originalMoveTo,t.lineTo=t.__originalLineTo,t.bezierCurveTo=t.__originalBezierCurveTo,t.rect=t.__originalRect,t.closePath=t.__originalClosePath,t.beginPath=t.__originalBeginPath,delete t._removeMirroring},t.save=function(){e.save(),this.__originalSave()},t.restore=function(){e.restore(),this.__originalRestore()},t.translate=function(t,n){e.translate(t,n),this.__originalTranslate(t,n)},t.scale=function(t,n){e.scale(t,n),this.__originalScale(t,n)},t.transform=function(t,n,s,r,i,a){e.transform(t,n,s,r,i,a),this.__originalTransform(t,n,s,r,i,a)},t.setTransform=function(t,n,s,r,i,a){e.setTransform(t,n,s,r,i,a),this.__originalSetTransform(t,n,s,r,i,a)},t.resetTransform=function(){e.resetTransform(),this.__originalResetTransform()},t.rotate=function(t){e.rotate(t),this.__originalRotate(t)},t.clip=function(t){e.clip(t),this.__originalClip(t)},t.moveTo=function(t,n){e.moveTo(t,n),this.__originalMoveTo(t,n)},t.lineTo=function(t,n){e.lineTo(t,n),this.__originalLineTo(t,n)},t.bezierCurveTo=function(t,n,s,r,i,a){e.bezierCurveTo(t,n,s,r,i,a),this.__originalBezierCurveTo(t,n,s,r,i,a)},t.rect=function(t,n,s,r){e.rect(t,n,s,r),this.__originalRect(t,n,s,r)},t.closePath=function(){e.closePath(),this.__originalClosePath()},t.beginPath=function(){e.beginPath(),this.__originalBeginPath()}}(i,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),f(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(t){if(!this.current.activeSMask)return;t?(t[0]=Math.floor(t[0]),t[1]=Math.floor(t[1]),t[2]=Math.ceil(t[2]),t[3]=Math.ceil(t[3])):t=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const e=this.current.activeSMask;(function(t,e,n,s){const r=s[0],i=s[1],a=s[2]-r,o=s[3]-i;0!==a&&0!==o&&(function(t,e,n,s,r,i,a,o,l,c,d){const h=!!i,u=h?i[0]:0,p=h?i[1]:0,g=h?i[2]:0;let f;f="Luminosity"===r?v:_;const m=Math.min(s,Math.ceil(1048576/n));for(let r=0;r<s;r+=m){const i=Math.min(m,s-r),_=t.getImageData(o-c,r+(l-d),n,i),v=e.getImageData(o,r+l,n,i);h&&b(_.data,u,p,g),f(_.data,v.data,a),e.putImageData(v,o,r+l)}}(e.context,n,a,o,e.subtype,e.backdrop,e.transferMap,r,i,e.offsetX,e.offsetY),t.save(),t.globalAlpha=1,t.globalCompositeOperation="source-over",t.setTransform(1,0,0,1,0,0),t.drawImage(n.canvas,0,0),t.restore())})(this.suspendedCtx,e,this.ctx,t),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(f(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const t=this.current;this.stateStack.push(t),this.current=t.clone()}restore(){0===this.stateStack.length&&this.inSMaskMode&&this.endSMaskMode(),0!==this.stateStack.length&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),f(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null)}transform(t,e,n,s,r,i){this.ctx.transform(t,e,n,s,r,i),this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null}constructPath(t,e,n){const i=this.ctx,a=this.current;let o,l,c=a.x,d=a.y;const h=(0,r.getCurrentTransform)(i),u=0===h[0]&&0===h[3]||0===h[1]&&0===h[2],p=u?n.slice(0):null;for(let n=0,r=0,g=t.length;n<g;n++)switch(0|t[n]){case s.OPS.rectangle:c=e[r++],d=e[r++];const t=e[r++],n=e[r++],g=c+t,f=d+n;i.moveTo(c,d),0===t||0===n?i.lineTo(g,f):(i.lineTo(g,d),i.lineTo(g,f),i.lineTo(c,f)),u||a.updateRectMinMax(h,[c,d,g,f]),i.closePath();break;case s.OPS.moveTo:c=e[r++],d=e[r++],i.moveTo(c,d),u||a.updatePathMinMax(h,c,d);break;case s.OPS.lineTo:c=e[r++],d=e[r++],i.lineTo(c,d),u||a.updatePathMinMax(h,c,d);break;case s.OPS.curveTo:o=c,l=d,c=e[r+4],d=e[r+5],i.bezierCurveTo(e[r],e[r+1],e[r+2],e[r+3],c,d),a.updateCurvePathMinMax(h,o,l,e[r],e[r+1],e[r+2],e[r+3],c,d,p),r+=6;break;case s.OPS.curveTo2:o=c,l=d,i.bezierCurveTo(c,d,e[r],e[r+1],e[r+2],e[r+3]),a.updateCurvePathMinMax(h,o,l,c,d,e[r],e[r+1],e[r+2],e[r+3],p),c=e[r+2],d=e[r+3],r+=4;break;case s.OPS.curveTo3:o=c,l=d,c=e[r+2],d=e[r+3],i.bezierCurveTo(e[r],e[r+1],c,d,c,d),a.updateCurvePathMinMax(h,o,l,e[r],e[r+1],c,d,c,d,p),r+=4;break;case s.OPS.closePath:i.closePath()}u&&a.updateScalingPathMinMax(h,p),a.setCurrentPoint(c,d)}closePath(){this.ctx.closePath()}stroke(t=!0){const e=this.ctx,n=this.current.strokeColor;e.globalAlpha=this.current.strokeAlpha,this.contentVisible&&("object"==typeof n&&n?.getPattern?(e.save(),e.strokeStyle=n.getPattern(e,this,(0,r.getCurrentTransformInverse)(e),i.PathType.STROKE),this.rescaleAndStroke(!1),e.restore()):this.rescaleAndStroke(!0)),t&&this.consumePath(this.current.getClippedPathBoundingBox()),e.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(t=!0){const e=this.ctx,n=this.current.fillColor;let s=!1;this.current.patternFill&&(e.save(),e.fillStyle=n.getPattern(e,this,(0,r.getCurrentTransformInverse)(e),i.PathType.FILL),s=!0);const a=this.current.getClippedPathBoundingBox();this.contentVisible&&null!==a&&(this.pendingEOFill?(e.fill("evenodd"),this.pendingEOFill=!1):e.fill()),s&&e.restore(),t&&this.consumePath(a)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=x}eoClip(){this.pendingClip=E}beginText(){this.current.textMatrix=s.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const t=this.pendingTextPaths,e=this.ctx;if(void 0!==t){e.save(),e.beginPath();for(const n of t)e.setTransform(...n.transform),e.translate(n.x,n.y),n.addToPath(e,n.fontSize);e.restore(),e.clip(),e.beginPath(),delete this.pendingTextPaths}else e.beginPath()}setCharSpacing(t){this.current.charSpacing=t}setWordSpacing(t){this.current.wordSpacing=t}setHScale(t){this.current.textHScale=t/100}setLeading(t){this.current.leading=-t}setFont(t,e){const n=this.commonObjs.get(t),r=this.current;if(!n)throw new Error(`Can't find font for ${t}`);if(r.fontMatrix=n.fontMatrix||s.FONT_IDENTITY_MATRIX,0!==r.fontMatrix[0]&&0!==r.fontMatrix[3]||(0,s.warn)("Invalid font matrix for font "+t),e<0?(e=-e,r.fontDirection=-1):r.fontDirection=1,this.current.font=n,this.current.fontSize=e,n.isType3Font)return;const i=n.loadedName||"sans-serif";let a="normal";n.black?a="900":n.bold&&(a="bold");const o=n.italic?"italic":"normal",l=`"${i}", ${n.fallbackName}`;let c=e;e<16?c=16:e>100&&(c=100),this.current.fontSizeScale=e/c,this.ctx.font=`${o} ${a} ${c}px ${l}`}setTextRenderingMode(t){this.current.textRenderingMode=t}setTextRise(t){this.current.textRise=t}moveText(t,e){this.current.x=this.current.lineX+=t,this.current.y=this.current.lineY+=e}setLeadingMoveText(t,e){this.setLeading(-e),this.moveText(t,e)}setTextMatrix(t,e,n,s,r,i){this.current.textMatrix=[t,e,n,s,r,i],this.current.textMatrixScale=Math.hypot(t,e),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(t,e,n,i){const a=this.ctx,o=this.current,l=o.font,c=o.textRenderingMode,d=o.fontSize/o.fontSizeScale,h=c&s.TextRenderingMode.FILL_STROKE_MASK,u=!!(c&s.TextRenderingMode.ADD_TO_PATH_FLAG),p=o.patternFill&&!l.missingFile;let g;(l.disableFontFace||u||p)&&(g=l.getPathGenerator(this.commonObjs,t)),l.disableFontFace||p?(a.save(),a.translate(e,n),a.beginPath(),g(a,d),i&&a.setTransform(...i),h!==s.TextRenderingMode.FILL&&h!==s.TextRenderingMode.FILL_STROKE||a.fill(),h!==s.TextRenderingMode.STROKE&&h!==s.TextRenderingMode.FILL_STROKE||a.stroke(),a.restore()):(h!==s.TextRenderingMode.FILL&&h!==s.TextRenderingMode.FILL_STROKE||a.fillText(t,e,n),h!==s.TextRenderingMode.STROKE&&h!==s.TextRenderingMode.FILL_STROKE||a.strokeText(t,e,n)),u&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:(0,r.getCurrentTransform)(a),x:e,y:n,fontSize:d,addToPath:g})}get isFontSubpixelAAEnabled(){const{context:t}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);t.scale(1.5,1),t.fillText("I",0,10);const e=t.getImageData(0,0,10,10).data;let n=!1;for(let t=3;t<e.length;t+=4)if(e[t]>0&&e[t]<255){n=!0;break}return(0,s.shadow)(this,"isFontSubpixelAAEnabled",n)}showText(t){const e=this.current,n=e.font;if(n.isType3Font)return this.showType3Text(t);const a=e.fontSize;if(0===a)return;const o=this.ctx,l=e.fontSizeScale,c=e.charSpacing,d=e.wordSpacing,h=e.fontDirection,u=e.textHScale*h,p=t.length,g=n.vertical,f=g?1:-1,m=n.defaultVMetrics,b=a*e.fontMatrix[0],_=e.textRenderingMode===s.TextRenderingMode.FILL&&!n.disableFontFace&&!e.patternFill;let v;if(o.save(),o.transform(...e.textMatrix),o.translate(e.x,e.y+e.textRise),h>0?o.scale(u,-1):o.scale(u,1),e.patternFill){o.save();const t=e.fillColor.getPattern(o,this,(0,r.getCurrentTransformInverse)(o),i.PathType.FILL);v=(0,r.getCurrentTransform)(o),o.restore(),o.fillStyle=t}let A=e.lineWidth;const y=e.textMatrixScale;if(0===y||0===A){const t=e.textRenderingMode&s.TextRenderingMode.FILL_STROKE_MASK;t!==s.TextRenderingMode.STROKE&&t!==s.TextRenderingMode.FILL_STROKE||(A=this.getSinglePixelWidth())}else A/=y;if(1!==l&&(o.scale(l,l),A/=l),o.lineWidth=A,n.isInvalidPDFjsFont){const n=[];let s=0;for(const e of t)n.push(e.unicode),s+=e.width;return o.fillText(n.join(""),0,0),e.x+=s*b*u,o.restore(),void this.compose()}let S,x=0;for(S=0;S<p;++S){const e=t[S];if("number"==typeof e){x+=f*e*a/1e3;continue}let s=!1;const r=(e.isSpace?d:0)+c,i=e.fontChar,u=e.accent;let p,A,y,E=e.width;if(g){const t=e.vmetric||m,n=-(e.vmetric?t[1]:.5*E)*b,s=t[2]*b;E=t?-t[0]:E,p=n/l,A=(x+s)/l}else p=x/l,A=0;if(n.remeasure&&E>0){const t=1e3*o.measureText(i).width/a*l;if(E<t&&this.isFontSubpixelAAEnabled){const e=E/t;s=!0,o.save(),o.scale(e,1),p/=e}else E!==t&&(p+=(E-t)/2e3*a/l)}if(this.contentVisible&&(e.isInFont||n.missingFile))if(_&&!u)o.fillText(i,p,A);else if(this.paintChar(i,p,A,v),u){const t=p+a*u.offset.x/l,e=A-a*u.offset.y/l;this.paintChar(u.fontChar,t,e,v)}y=g?E*b-r*h:E*b+r*h,x+=y,s&&o.restore()}g?e.y-=x:e.x+=x*u,o.restore(),this.compose()}showType3Text(t){const e=this.ctx,n=this.current,r=n.font,i=n.fontSize,a=n.fontDirection,o=r.vertical?1:-1,l=n.charSpacing,c=n.wordSpacing,d=n.textHScale*a,h=n.fontMatrix||s.FONT_IDENTITY_MATRIX,u=t.length;let p,g,f,m;if(n.textRenderingMode!==s.TextRenderingMode.INVISIBLE&&0!==i){for(this._cachedScaleForStroking=null,this._cachedGetSinglePixelWidth=null,e.save(),e.transform(...n.textMatrix),e.translate(n.x,n.y),e.scale(d,a),p=0;p<u;++p){if(g=t[p],"number"==typeof g){m=o*g*i/1e3,this.ctx.translate(m,0),n.x+=m*d;continue}const a=(g.isSpace?c:0)+l,u=r.charProcOperatorList[g.operatorListId];u?(this.contentVisible&&(this.processingType3=g,this.save(),e.scale(i,i),e.transform(...h),this.executeOperatorList(u),this.restore()),f=s.Util.applyTransform([g.width,0],h)[0]*i+a,e.translate(f,0),n.x+=f*d):(0,s.warn)(`Type3 character "${g.operatorListId}" is not available.`)}e.restore(),this.processingType3=null}}setCharWidth(t,e){}setCharWidthAndBounds(t,e,n,s,r,i){this.ctx.rect(n,s,r-n,i-s),this.ctx.clip(),this.endPath()}getColorN_Pattern(t){let e;if("TilingPattern"===t[0]){const n=t[1],s=this.baseTransform||(0,r.getCurrentTransform)(this.ctx),a={createCanvasGraphics:t=>new C(t,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};e=new i.TilingPattern(t,n,this.ctx,a,s)}else e=this._getPattern(t[1],t[2]);return e}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(t,e,n){const r=s.Util.makeHexColor(t,e,n);this.ctx.strokeStyle=r,this.current.strokeColor=r}setFillRGBColor(t,e,n){const r=s.Util.makeHexColor(t,e,n);this.ctx.fillStyle=r,this.current.fillColor=r,this.current.patternFill=!1}_getPattern(t,e=null){let n;return this.cachedPatterns.has(t)?n=this.cachedPatterns.get(t):(n=(0,i.getShadingPattern)(this.getObject(t)),this.cachedPatterns.set(t,n)),e&&(n.matrix=e),n}shadingFill(t){if(!this.contentVisible)return;const e=this.ctx;this.save();const n=this._getPattern(t);e.fillStyle=n.getPattern(e,this,(0,r.getCurrentTransformInverse)(e),i.PathType.SHADING);const a=(0,r.getCurrentTransformInverse)(e);if(a){const t=e.canvas,n=t.width,r=t.height,i=s.Util.applyTransform([0,0],a),o=s.Util.applyTransform([0,r],a),l=s.Util.applyTransform([n,0],a),c=s.Util.applyTransform([n,r],a),d=Math.min(i[0],o[0],l[0],c[0]),h=Math.min(i[1],o[1],l[1],c[1]),u=Math.max(i[0],o[0],l[0],c[0]),p=Math.max(i[1],o[1],l[1],c[1]);this.ctx.fillRect(d,h,u-d,p-h)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,s.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,s.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(t,e){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(t)&&6===t.length&&this.transform(...t),this.baseTransform=(0,r.getCurrentTransform)(this.ctx),e)){const t=e[2]-e[0],n=e[3]-e[1];this.ctx.rect(e[0],e[1],t,n),this.current.updateRectMinMax((0,r.getCurrentTransform)(this.ctx),e),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(t){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const e=this.ctx;t.isolated||(0,s.info)("TODO: Support non-isolated groups."),t.knockout&&(0,s.warn)("Knockout groups not supported.");const n=(0,r.getCurrentTransform)(e);if(t.matrix&&e.transform(...t.matrix),!t.bbox)throw new Error("Bounding box is required.");let i=s.Util.getAxialAlignedBoundingBox(t.bbox,(0,r.getCurrentTransform)(e));const a=[0,0,e.canvas.width,e.canvas.height];i=s.Util.intersect(i,a)||[0,0,0,0];const o=Math.floor(i[0]),c=Math.floor(i[1]);let d=Math.max(Math.ceil(i[2])-o,1),h=Math.max(Math.ceil(i[3])-c,1),u=1,p=1;d>l&&(u=d/l,d=l),h>l&&(p=h/l,h=l),this.current.startNewPathAndClipBox([0,0,d,h]);let g="groupAt"+this.groupLevel;t.smask&&(g+="_smask_"+this.smaskCounter++%2);const m=this.cachedCanvases.getCanvas(g,d,h),b=m.context;b.scale(1/u,1/p),b.translate(-o,-c),b.transform(...n),t.smask?this.smaskStack.push({canvas:m.canvas,context:b,offsetX:o,offsetY:c,scaleX:u,scaleY:p,subtype:t.smask.subtype,backdrop:t.smask.backdrop,transferMap:t.smask.transferMap||null,startTransformInverse:null}):(e.setTransform(1,0,0,1,0,0),e.translate(o,c),e.scale(u,p),e.save()),f(e,b),this.ctx=b,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(e),this.groupLevel++}endGroup(t){if(!this.contentVisible)return;this.groupLevel--;const e=this.ctx,n=this.groupStack.pop();if(this.ctx=n,this.ctx.imageSmoothingEnabled=!1,t.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const t=(0,r.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...t);const n=s.Util.getAxialAlignedBoundingBox([0,0,e.canvas.width,e.canvas.height],t);this.ctx.drawImage(e.canvas,0,0),this.ctx.restore(),this.compose(n)}}beginAnnotation(t,e,n,i,a){if(this.#St(),m(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(e)&&4===e.length){const i=e[2]-e[0],o=e[3]-e[1];if(a&&this.annotationCanvasMap){(n=n.slice())[4]-=e[0],n[5]-=e[1],(e=e.slice())[0]=e[1]=0,e[2]=i,e[3]=o;const[a,l]=s.Util.singularValueDecompose2dScale((0,r.getCurrentTransform)(this.ctx)),{viewportScale:c}=this,d=Math.ceil(i*this.outputScaleX*c),h=Math.ceil(o*this.outputScaleY*c);this.annotationCanvas=this.canvasFactory.create(d,h);const{canvas:u,context:p}=this.annotationCanvas;this.annotationCanvasMap.set(t,u),this.annotationCanvas.savedCtx=this.ctx,this.ctx=p,this.ctx.save(),this.ctx.setTransform(a,0,0,-l,0,o*l),m(this.ctx)}else m(this.ctx),this.ctx.rect(e[0],e[1],i,o),this.ctx.clip(),this.endPath()}this.current=new u(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...n),this.transform(...i)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),this.#xt(),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(t){if(!this.contentVisible)return;const e=t.count;(t=this.getObject(t.data,t)).count=e;const n=this.ctx,s=this.processingType3;if(s&&(void 0===s.compiled&&(s.compiled=function(t){const{width:e,height:n}=t;if(e>1e3||n>1e3)return null;const s=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),r=e+1;let i,a,o,l=new Uint8Array(r*(n+1));const c=e+7&-8;let d=new Uint8Array(c*n),h=0;for(const e of t.data){let t=128;for(;t>0;)d[h++]=e&t?0:255,t>>=1}let u=0;for(h=0,0!==d[h]&&(l[0]=1,++u),a=1;a<e;a++)d[h]!==d[h+1]&&(l[a]=d[h]?2:1,++u),h++;for(0!==d[h]&&(l[a]=2,++u),i=1;i<n;i++){h=i*c,o=i*r,d[h-c]!==d[h]&&(l[o]=d[h]?1:8,++u);let t=(d[h]?4:0)+(d[h-c]?8:0);for(a=1;a<e;a++)t=(t>>2)+(d[h+1]?4:0)+(d[h-c+1]?8:0),s[t]&&(l[o+a]=s[t],++u),h++;if(d[h-c]!==d[h]&&(l[o+a]=d[h]?2:4,++u),u>1e3)return null}for(h=c*(n-1),o=i*r,0!==d[h]&&(l[o]=8,++u),a=1;a<e;a++)d[h]!==d[h+1]&&(l[o+a]=d[h]?4:8,++u),h++;if(0!==d[h]&&(l[o+a]=4,++u),u>1e3)return null;const p=new Int32Array([0,r,-1,0,-r,0,0,0,1]),g=new Path2D;for(i=0;u&&i<=n;i++){let t=i*r;const n=t+e;for(;t<n&&!l[t];)t++;if(t===n)continue;g.moveTo(t%r,i);const s=t;let a=l[t];do{const e=p[a];do{t+=e}while(!l[t]);const n=l[t];5!==n&&10!==n?(a=n,l[t]=0):(a=n&51*a>>4,l[t]&=a>>2|a<<2),g.lineTo(t%r,t/r|0),l[t]||--u}while(s!==t);--i}return d=null,l=null,function(t){t.save(),t.scale(1/e,-1/n),t.translate(0,-n),t.fill(g),t.beginPath(),t.restore()}}(t)),s.compiled))return void s.compiled(n);const r=this._createMaskCanvas(t),i=r.canvas;n.save(),n.setTransform(1,0,0,1,0,0),n.drawImage(i,r.offsetX,r.offsetY),n.restore(),this.compose()}paintImageMaskXObjectRepeat(t,e,n=0,i=0,a,o){if(!this.contentVisible)return;t=this.getObject(t.data,t);const l=this.ctx;l.save();const c=(0,r.getCurrentTransform)(l);l.transform(e,n,i,a,0,0);const d=this._createMaskCanvas(t);l.setTransform(1,0,0,1,d.offsetX-c[4],d.offsetY-c[5]);for(let t=0,r=o.length;t<r;t+=2){const r=s.Util.transform(c,[e,n,i,a,o[t],o[t+1]]),[h,u]=s.Util.applyTransform([0,0],r);l.drawImage(d.canvas,h,u)}l.restore(),this.compose()}paintImageMaskXObjectGroup(t){if(!this.contentVisible)return;const e=this.ctx,n=this.current.fillColor,s=this.current.patternFill;for(const a of t){const{data:t,width:o,height:l,transform:c}=a,d=this.cachedCanvases.getCanvas("maskCanvas",o,l),u=d.context;u.save(),g(u,this.getObject(t,a)),u.globalCompositeOperation="source-in",u.fillStyle=s?n.getPattern(u,this,(0,r.getCurrentTransformInverse)(e),i.PathType.FILL):n,u.fillRect(0,0,o,l),u.restore(),e.save(),e.transform(...c),e.scale(1,-1),h(e,d.canvas,0,0,o,l,0,-1,1,1),e.restore()}this.compose()}paintImageXObject(t){if(!this.contentVisible)return;const e=this.getObject(t);e?this.paintInlineImageXObject(e):(0,s.warn)("Dependent image isn't ready yet")}paintImageXObjectRepeat(t,e,n,r){if(!this.contentVisible)return;const i=this.getObject(t);if(!i)return void(0,s.warn)("Dependent image isn't ready yet");const a=i.width,o=i.height,l=[];for(let t=0,s=r.length;t<s;t+=2)l.push({transform:[e,0,0,n,r[t],r[t+1]],x:0,y:0,w:a,h:o});this.paintInlineImageXObjectGroup(i,l)}applyTransferMapsToCanvas(t){return"none"!==this.current.transferMaps&&(t.filter=this.current.transferMaps,t.drawImage(t.canvas,0,0),t.filter="none"),t.canvas}applyTransferMapsToBitmap(t){if("none"===this.current.transferMaps)return t.bitmap;const{bitmap:e,width:n,height:s}=t,r=this.cachedCanvases.getCanvas("inlineImage",n,s),i=r.context;return i.filter=this.current.transferMaps,i.drawImage(e,0,0),i.filter="none",r.canvas}paintInlineImageXObject(t){if(!this.contentVisible)return;const e=t.width,n=t.height,s=this.ctx;let i;if(this.save(),o.isNodeJS||(s.filter="none"),s.scale(1/e,-1/n),t.bitmap)i=this.applyTransferMapsToBitmap(t);else if("function"==typeof HTMLElement&&t instanceof HTMLElement||!t.data)i=t;else{const s=this.cachedCanvases.getCanvas("inlineImage",e,n).context;p(s,t),i=this.applyTransferMapsToCanvas(s)}const a=this._scaleImage(i,(0,r.getCurrentTransformInverse)(s));s.imageSmoothingEnabled=A((0,r.getCurrentTransform)(s),t.interpolate),h(s,a.img,0,0,a.paintWidth,a.paintHeight,0,-n,e,n),this.compose(),this.restore()}paintInlineImageXObjectGroup(t,e){if(!this.contentVisible)return;const n=this.ctx;let s;if(t.bitmap)s=t.bitmap;else{const e=t.width,n=t.height,r=this.cachedCanvases.getCanvas("inlineImage",e,n).context;p(r,t),s=this.applyTransferMapsToCanvas(r)}for(const t of e)n.save(),n.transform(...t.transform),n.scale(1,-1),h(n,s,t.x,t.y,t.w,t.h,0,-1,1,1),n.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(t){}markPointProps(t,e){}beginMarkedContent(t){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(t,e){"OC"===t?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(e)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(t){const e=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(t);const n=this.ctx;this.pendingClip&&(e||(this.pendingClip===E?n.clip("evenodd"):n.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),n.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const t=(0,r.getCurrentTransform)(this.ctx);if(0===t[1]&&0===t[2])this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(t[0]),Math.abs(t[3]));else{const e=Math.abs(t[0]*t[3]-t[2]*t[1]),n=Math.hypot(t[0],t[2]),s=Math.hypot(t[1],t[3]);this._cachedGetSinglePixelWidth=Math.max(n,s)/e}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(!this._cachedScaleForStroking){const{lineWidth:t}=this.current,e=(0,r.getCurrentTransform)(this.ctx);let n,s;if(0===e[1]&&0===e[2]){const r=Math.abs(e[0]),i=Math.abs(e[3]);if(0===t)n=1/r,s=1/i;else{const e=r*t,a=i*t;n=e<1?1/e:1,s=a<1?1/a:1}}else{const r=Math.abs(e[0]*e[3]-e[2]*e[1]),i=Math.hypot(e[0],e[1]),a=Math.hypot(e[2],e[3]);if(0===t)n=a/r,s=i/r;else{const e=t*r;n=a>e?a/e:1,s=i>e?i/e:1}}this._cachedScaleForStroking=[n,s]}return this._cachedScaleForStroking}rescaleAndStroke(t){const{ctx:e}=this,{lineWidth:n}=this.current,[s,i]=this.getScaleForStroking();if(e.lineWidth=n||1,1===s&&1===i)return void e.stroke();let a,o,l;t&&(a=(0,r.getCurrentTransform)(e),o=e.getLineDash().slice(),l=e.lineDashOffset),e.scale(s,i);const c=Math.max(s,i);e.setLineDash(e.getLineDash().map((t=>t/c))),e.lineDashOffset/=c,e.stroke(),t&&(e.setTransform(...a),e.setLineDash(o),e.lineDashOffset=l)}isContentVisible(){for(let t=this.markedContentStack.length-1;t>=0;t--)if(!this.markedContentStack[t].visible)return!1;return!0}}e.CanvasGraphics=C;for(const t in s.OPS)void 0!==C.prototype[t]&&(C.prototype[s.OPS[t]]=C.prototype[t])},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TilingPattern=e.PathType=void 0,e.getShadingPattern=function(t){switch(t[0]){case"RadialAxial":return new l(t);case"Mesh":return new h(t);case"Dummy":return new u}throw new Error(`Unknown IR type: ${t[0]}`)};var s=n(1),r=n(6);const i={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};function a(t,e){if(!e)return;const n=e[2]-e[0],s=e[3]-e[1],r=new Path2D;r.rect(e[0],e[1],n,s),t.clip(r)}e.PathType=i;class o{constructor(){this.constructor===o&&(0,s.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,s.unreachable)("Abstract method `getPattern` called.")}}class l extends o{constructor(t){super(),this._type=t[1],this._bbox=t[2],this._colorStops=t[3],this._p0=t[4],this._p1=t[5],this._r0=t[6],this._r1=t[7],this.matrix=null}_createGradient(t){let e;"axial"===this._type?e=t.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):"radial"===this._type&&(e=t.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const t of this._colorStops)e.addColorStop(t[0],t[1]);return e}getPattern(t,e,n,o){let l;if(o===i.STROKE||o===i.FILL){const i=e.current.getClippedPathBoundingBox(o,(0,r.getCurrentTransform)(t))||[0,0,0,0],c=Math.ceil(i[2]-i[0])||1,d=Math.ceil(i[3]-i[1])||1,h=e.cachedCanvases.getCanvas("pattern",c,d,!0),u=h.context;u.clearRect(0,0,u.canvas.width,u.canvas.height),u.beginPath(),u.rect(0,0,u.canvas.width,u.canvas.height),u.translate(-i[0],-i[1]),n=s.Util.transform(n,[1,0,0,1,i[0],i[1]]),u.transform(...e.baseTransform),this.matrix&&u.transform(...this.matrix),a(u,this._bbox),u.fillStyle=this._createGradient(u),u.fill(),l=t.createPattern(h.canvas,"no-repeat");const p=new DOMMatrix(n);l.setTransform(p)}else a(t,this._bbox),l=this._createGradient(t);return l}}function c(t,e,n,s,r,i,a,o){const l=e.coords,c=e.colors,d=t.data,h=4*t.width;let u;l[n+1]>l[s+1]&&(u=n,n=s,s=u,u=i,i=a,a=u),l[s+1]>l[r+1]&&(u=s,s=r,r=u,u=a,a=o,o=u),l[n+1]>l[s+1]&&(u=n,n=s,s=u,u=i,i=a,a=u);const p=(l[n]+e.offsetX)*e.scaleX,g=(l[n+1]+e.offsetY)*e.scaleY,f=(l[s]+e.offsetX)*e.scaleX,m=(l[s+1]+e.offsetY)*e.scaleY,b=(l[r]+e.offsetX)*e.scaleX,_=(l[r+1]+e.offsetY)*e.scaleY;if(g>=_)return;const v=c[i],A=c[i+1],y=c[i+2],S=c[a],x=c[a+1],E=c[a+2],C=c[o],w=c[o+1],P=c[o+2],T=Math.round(g),k=Math.round(_);let R,M,F,D,I,O,L,N;for(let t=T;t<=k;t++){if(t<m){let e;e=t<g?0:(g-t)/(g-m),R=p-(p-f)*e,M=v-(v-S)*e,F=A-(A-x)*e,D=y-(y-E)*e}else{let e;e=t>_?1:m===_?0:(m-t)/(m-_),R=f-(f-b)*e,M=S-(S-C)*e,F=x-(x-w)*e,D=E-(E-P)*e}let e;e=t<g?0:t>_?1:(g-t)/(g-_),I=p-(p-b)*e,O=v-(v-C)*e,L=A-(A-w)*e,N=y-(y-P)*e;const n=Math.round(Math.min(R,I)),s=Math.round(Math.max(R,I));let r=h*t+4*n;for(let t=n;t<=s;t++)e=(R-t)/(R-I),e<0?e=0:e>1&&(e=1),d[r++]=M-(M-O)*e|0,d[r++]=F-(F-L)*e|0,d[r++]=D-(D-N)*e|0,d[r++]=255}}function d(t,e,n){const s=e.coords,r=e.colors;let i,a;switch(e.type){case"lattice":const o=e.verticesPerRow,l=Math.floor(s.length/o)-1,d=o-1;for(i=0;i<l;i++){let e=i*o;for(let i=0;i<d;i++,e++)c(t,n,s[e],s[e+1],s[e+o],r[e],r[e+1],r[e+o]),c(t,n,s[e+o+1],s[e+1],s[e+o],r[e+o+1],r[e+1],r[e+o])}break;case"triangles":for(i=0,a=s.length;i<a;i+=3)c(t,n,s[i],s[i+1],s[i+2],r[i],r[i+1],r[i+2]);break;default:throw new Error("illegal figure")}}class h extends o{constructor(t){super(),this._coords=t[2],this._colors=t[3],this._figures=t[4],this._bounds=t[5],this._bbox=t[7],this._background=t[8],this.matrix=null}_createMeshCanvas(t,e,n){const s=Math.floor(this._bounds[0]),r=Math.floor(this._bounds[1]),i=Math.ceil(this._bounds[2])-s,a=Math.ceil(this._bounds[3])-r,o=Math.min(Math.ceil(Math.abs(i*t[0]*1.1)),3e3),l=Math.min(Math.ceil(Math.abs(a*t[1]*1.1)),3e3),c=i/o,h=a/l,u={coords:this._coords,colors:this._colors,offsetX:-s,offsetY:-r,scaleX:1/c,scaleY:1/h},p=o+4,g=l+4,f=n.getCanvas("mesh",p,g,!1),m=f.context,b=m.createImageData(o,l);if(e){const t=b.data;for(let n=0,s=t.length;n<s;n+=4)t[n]=e[0],t[n+1]=e[1],t[n+2]=e[2],t[n+3]=255}for(const t of this._figures)d(b,t,u);return m.putImageData(b,2,2),{canvas:f.canvas,offsetX:s-2*c,offsetY:r-2*h,scaleX:c,scaleY:h}}getPattern(t,e,n,o){let l;if(a(t,this._bbox),o===i.SHADING)l=s.Util.singularValueDecompose2dScale((0,r.getCurrentTransform)(t));else if(l=s.Util.singularValueDecompose2dScale(e.baseTransform),this.matrix){const t=s.Util.singularValueDecompose2dScale(this.matrix);l=[l[0]*t[0],l[1]*t[1]]}const c=this._createMeshCanvas(l,o===i.SHADING?null:this._background,e.cachedCanvases);return o!==i.SHADING&&(t.setTransform(...e.baseTransform),this.matrix&&t.transform(...this.matrix)),t.translate(c.offsetX,c.offsetY),t.scale(c.scaleX,c.scaleY),t.createPattern(c.canvas,"no-repeat")}}class u extends o{getPattern(){return"hotpink"}}class p{static MAX_PATTERN_SIZE=3e3;constructor(t,e,n,s,r){this.operatorList=t[2],this.matrix=t[3]||[1,0,0,1,0,0],this.bbox=t[4],this.xstep=t[5],this.ystep=t[6],this.paintType=t[7],this.tilingType=t[8],this.color=e,this.ctx=n,this.canvasGraphicsFactory=s,this.baseTransform=r}createPatternCanvas(t){const e=this.operatorList,n=this.bbox,i=this.xstep,a=this.ystep,o=this.paintType,l=this.tilingType,c=this.color,d=this.canvasGraphicsFactory;(0,s.info)("TilingType: "+l);const h=n[0],u=n[1],p=n[2],g=n[3],f=s.Util.singularValueDecompose2dScale(this.matrix),m=s.Util.singularValueDecompose2dScale(this.baseTransform),b=[f[0]*m[0],f[1]*m[1]],_=this.getSizeAndScale(i,this.ctx.canvas.width,b[0]),v=this.getSizeAndScale(a,this.ctx.canvas.height,b[1]),A=t.cachedCanvases.getCanvas("pattern",_.size,v.size,!0),y=A.context,S=d.createCanvasGraphics(y);S.groupLevel=t.groupLevel,this.setFillAndStrokeStyleToContext(S,o,c);let x=h,E=u,C=p,w=g;return h<0&&(x=0,C+=Math.abs(h)),u<0&&(E=0,w+=Math.abs(u)),y.translate(-_.scale*x,-v.scale*E),S.transform(_.scale,0,0,v.scale,0,0),y.save(),this.clipBbox(S,x,E,C,w),S.baseTransform=(0,r.getCurrentTransform)(S.ctx),S.executeOperatorList(e),S.endDrawing(),{canvas:A.canvas,scaleX:_.scale,scaleY:v.scale,offsetX:x,offsetY:E}}getSizeAndScale(t,e,n){t=Math.abs(t);const s=Math.max(p.MAX_PATTERN_SIZE,e);let r=Math.ceil(t*n);return r>=s?r=s:n=r/t,{scale:n,size:r}}clipBbox(t,e,n,s,i){const a=s-e,o=i-n;t.ctx.rect(e,n,a,o),t.current.updateRectMinMax((0,r.getCurrentTransform)(t.ctx),[e,n,s,i]),t.clip(),t.endPath()}setFillAndStrokeStyleToContext(t,e,n){const r=t.ctx,i=t.current;switch(e){case 1:const t=this.ctx;r.fillStyle=t.fillStyle,r.strokeStyle=t.strokeStyle,i.fillColor=t.fillStyle,i.strokeColor=t.strokeStyle;break;case 2:const a=s.Util.makeHexColor(n[0],n[1],n[2]);r.fillStyle=a,r.strokeStyle=a,i.fillColor=a,i.strokeColor=a;break;default:throw new s.FormatError(`Unsupported paint type: ${e}`)}}getPattern(t,e,n,r){let a=n;r!==i.SHADING&&(a=s.Util.transform(a,e.baseTransform),this.matrix&&(a=s.Util.transform(a,this.matrix)));const o=this.createPatternCanvas(e);let l=new DOMMatrix(a);l=l.translate(o.offsetX,o.offsetY),l=l.scale(1/o.scaleX,1/o.scaleY);const c=t.createPattern(o.canvas,"repeat");return c.setTransform(l),c}}e.TilingPattern=p},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.convertBlackAndWhiteToRGBA=r,e.convertToRGBA=function(t){switch(t.kind){case s.ImageKind.GRAYSCALE_1BPP:return r(t);case s.ImageKind.RGB_24BPP:return function({src:t,srcPos:e=0,dest:n,destPos:r=0,width:i,height:a}){let o=0;const l=t.length>>2,c=new Uint32Array(t.buffer,e,l);if(s.FeatureTest.isLittleEndian){for(;o<l-2;o+=3,r+=4){const t=c[o],e=c[o+1],s=c[o+2];n[r]=4278190080|t,n[r+1]=t>>>24|e<<8|4278190080,n[r+2]=e>>>16|s<<16|4278190080,n[r+3]=s>>>8|4278190080}for(let e=4*o,s=t.length;e<s;e+=3)n[r++]=t[e]|t[e+1]<<8|t[e+2]<<16|4278190080}else{for(;o<l-2;o+=3,r+=4){const t=c[o],e=c[o+1],s=c[o+2];n[r]=255|t,n[r+1]=t<<24|e>>>8|255,n[r+2]=e<<16|s>>>16|255,n[r+3]=s<<8|255}for(let e=4*o,s=t.length;e<s;e+=3)n[r++]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|255}return{srcPos:e,destPos:r}}(t)}return null},e.grayToRGBA=function(t,e){if(s.FeatureTest.isLittleEndian)for(let n=0,s=t.length;n<s;n++)e[n]=65793*t[n]|4278190080;else for(let n=0,s=t.length;n<s;n++)e[n]=16843008*t[n]|255};var s=n(1);function r({src:t,srcPos:e=0,dest:n,width:r,height:i,nonBlackColor:a=4294967295,inverseDecode:o=!1}){const l=s.FeatureTest.isLittleEndian?4278190080:255,[c,d]=o?[a,l]:[l,a],h=r>>3,u=7&r,p=t.length;n=new Uint32Array(n.buffer);let g=0;for(let s=0;s<i;s++){for(const s=e+h;e<s;e++){const s=e<p?t[e]:255;n[g++]=128&s?d:c,n[g++]=64&s?d:c,n[g++]=32&s?d:c,n[g++]=16&s?d:c,n[g++]=8&s?d:c,n[g++]=4&s?d:c,n[g++]=2&s?d:c,n[g++]=1&s?d:c}if(0===u)continue;const s=e<p?t[e++]:255;for(let t=0;t<u;t++)n[g++]=s&1<<7-t?d:c}return{srcPos:e,destPos:g}}},(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.GlobalWorkerOptions=void 0;const n=Object.create(null);e.GlobalWorkerOptions=n,n.workerPort=null,n.workerSrc=""},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MessageHandler=void 0;var s=n(1);function r(t){switch(t instanceof Error||"object"==typeof t&&null!==t||(0,s.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),t.name){case"AbortException":return new s.AbortException(t.message);case"MissingPDFException":return new s.MissingPDFException(t.message);case"PasswordException":return new s.PasswordException(t.message,t.code);case"UnexpectedResponseException":return new s.UnexpectedResponseException(t.message,t.status);case"UnknownErrorException":return new s.UnknownErrorException(t.message,t.details);default:return new s.UnknownErrorException(t.message,t.toString())}}e.MessageHandler=class{constructor(t,e,n){this.sourceName=t,this.targetName=e,this.comObj=n,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=t=>{const e=t.data;if(e.targetName!==this.sourceName)return;if(e.stream)return void this.#Et(e);if(e.callback){const t=e.callbackId,n=this.callbackCapabilities[t];if(!n)throw new Error(`Cannot resolve callback ${t}`);if(delete this.callbackCapabilities[t],1===e.callback)n.resolve(e.data);else{if(2!==e.callback)throw new Error("Unexpected callback case");n.reject(r(e.reason))}return}const s=this.actionHandler[e.action];if(!s)throw new Error(`Unknown action from worker: ${e.action}`);if(e.callbackId){const t=this.sourceName,i=e.sourceName;new Promise((function(t){t(s(e.data))})).then((function(s){n.postMessage({sourceName:t,targetName:i,callback:1,callbackId:e.callbackId,data:s})}),(function(s){n.postMessage({sourceName:t,targetName:i,callback:2,callbackId:e.callbackId,reason:r(s)})}))}else e.streamId?this.#Ct(e):s(e.data)},n.addEventListener("message",this._onComObjOnMessage)}on(t,e){const n=this.actionHandler;if(n[t])throw new Error(`There is already an actionName called "${t}"`);n[t]=e}send(t,e,n){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,data:e},n)}sendWithPromise(t,e,n){const r=this.callbackId++,i=new s.PromiseCapability;this.callbackCapabilities[r]=i;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,callbackId:r,data:e},n)}catch(t){i.reject(t)}return i.promise}sendWithStream(t,e,n,i){const a=this.streamId++,o=this.sourceName,l=this.targetName,c=this.comObj;return new ReadableStream({start:n=>{const r=new s.PromiseCapability;return this.streamControllers[a]={controller:n,startCall:r,pullCall:null,cancelCall:null,isClosed:!1},c.postMessage({sourceName:o,targetName:l,action:t,streamId:a,data:e,desiredSize:n.desiredSize},i),r.promise},pull:t=>{const e=new s.PromiseCapability;return this.streamControllers[a].pullCall=e,c.postMessage({sourceName:o,targetName:l,stream:6,streamId:a,desiredSize:t.desiredSize}),e.promise},cancel:t=>{(0,s.assert)(t instanceof Error,"cancel must have a valid reason");const e=new s.PromiseCapability;return this.streamControllers[a].cancelCall=e,this.streamControllers[a].isClosed=!0,c.postMessage({sourceName:o,targetName:l,stream:1,streamId:a,reason:r(t)}),e.promise}},n)}#Ct(t){const e=t.streamId,n=this.sourceName,i=t.sourceName,a=this.comObj,o=this,l=this.actionHandler[t.action],c={enqueue(t,r=1,o){if(this.isCancelled)return;const l=this.desiredSize;this.desiredSize-=r,l>0&&this.desiredSize<=0&&(this.sinkCapability=new s.PromiseCapability,this.ready=this.sinkCapability.promise),a.postMessage({sourceName:n,targetName:i,stream:4,streamId:e,chunk:t},o)},close(){this.isCancelled||(this.isCancelled=!0,a.postMessage({sourceName:n,targetName:i,stream:3,streamId:e}),delete o.streamSinks[e])},error(t){(0,s.assert)(t instanceof Error,"error must have a valid reason"),this.isCancelled||(this.isCancelled=!0,a.postMessage({sourceName:n,targetName:i,stream:5,streamId:e,reason:r(t)}))},sinkCapability:new s.PromiseCapability,onPull:null,onCancel:null,isCancelled:!1,desiredSize:t.desiredSize,ready:null};c.sinkCapability.resolve(),c.ready=c.sinkCapability.promise,this.streamSinks[e]=c,new Promise((function(e){e(l(t.data,c))})).then((function(){a.postMessage({sourceName:n,targetName:i,stream:8,streamId:e,success:!0})}),(function(t){a.postMessage({sourceName:n,targetName:i,stream:8,streamId:e,reason:r(t)})}))}#Et(t){const e=t.streamId,n=this.sourceName,i=t.sourceName,a=this.comObj,o=this.streamControllers[e],l=this.streamSinks[e];switch(t.stream){case 8:t.success?o.startCall.resolve():o.startCall.reject(r(t.reason));break;case 7:t.success?o.pullCall.resolve():o.pullCall.reject(r(t.reason));break;case 6:if(!l){a.postMessage({sourceName:n,targetName:i,stream:7,streamId:e,success:!0});break}l.desiredSize<=0&&t.desiredSize>0&&l.sinkCapability.resolve(),l.desiredSize=t.desiredSize,new Promise((function(t){t(l.onPull?.())})).then((function(){a.postMessage({sourceName:n,targetName:i,stream:7,streamId:e,success:!0})}),(function(t){a.postMessage({sourceName:n,targetName:i,stream:7,streamId:e,reason:r(t)})}));break;case 4:if((0,s.assert)(o,"enqueue should have stream controller"),o.isClosed)break;o.controller.enqueue(t.chunk);break;case 3:if((0,s.assert)(o,"close should have stream controller"),o.isClosed)break;o.isClosed=!0,o.controller.close(),this.#wt(o,e);break;case 5:(0,s.assert)(o,"error should have stream controller"),o.controller.error(r(t.reason)),this.#wt(o,e);break;case 2:t.success?o.cancelCall.resolve():o.cancelCall.reject(r(t.reason)),this.#wt(o,e);break;case 1:if(!l)break;new Promise((function(e){e(l.onCancel?.(r(t.reason)))})).then((function(){a.postMessage({sourceName:n,targetName:i,stream:2,streamId:e,success:!0})}),(function(t){a.postMessage({sourceName:n,targetName:i,stream:2,streamId:e,reason:r(t)})})),l.sinkCapability.reject(r(t.reason)),l.isCancelled=!0,delete this.streamSinks[e];break;default:throw new Error("Unexpected stream case")}}async#wt(t,e){await Promise.allSettled([t.startCall?.promise,t.pullCall?.promise,t.cancelCall?.promise]),delete this.streamControllers[e]}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Metadata=void 0;var s=n(1);e.Metadata=class{#Pt;#Tt;constructor({parsedData:t,rawData:e}){this.#Pt=t,this.#Tt=e}getRaw(){return this.#Tt}get(t){return this.#Pt.get(t)??null}getAll(){return(0,s.objectFromMap)(this.#Pt)}has(t){return this.#Pt.has(t)}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.OptionalContentConfig=void 0;var s=n(1),r=n(8);const i=Symbol("INTERNAL");class a{#kt=!0;constructor(t,e){this.name=t,this.intent=e}get visible(){return this.#kt}_setVisible(t,e){t!==i&&(0,s.unreachable)("Internal method `_setVisible` called."),this.#kt=e}}e.OptionalContentConfig=class{#Rt=null;#Mt=new Map;#Ft=null;#Dt=null;constructor(t){if(this.name=null,this.creator=null,null!==t){this.name=t.name,this.creator=t.creator,this.#Dt=t.order;for(const e of t.groups)this.#Mt.set(e.id,new a(e.name,e.intent));if("OFF"===t.baseState)for(const t of this.#Mt.values())t._setVisible(i,!1);for(const e of t.on)this.#Mt.get(e)._setVisible(i,!0);for(const e of t.off)this.#Mt.get(e)._setVisible(i,!1);this.#Ft=this.getHash()}}#It(t){const e=t.length;if(e<2)return!0;const n=t[0];for(let r=1;r<e;r++){const e=t[r];let i;if(Array.isArray(e))i=this.#It(e);else{if(!this.#Mt.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;i=this.#Mt.get(e).visible}switch(n){case"And":if(!i)return!1;break;case"Or":if(i)return!0;break;case"Not":return!i;default:return!0}}return"And"===n}isVisible(t){if(0===this.#Mt.size)return!0;if(!t)return(0,s.warn)("Optional content group not defined."),!0;if("OCG"===t.type)return this.#Mt.has(t.id)?this.#Mt.get(t.id).visible:((0,s.warn)(`Optional content group not found: ${t.id}`),!0);if("OCMD"===t.type){if(t.expression)return this.#It(t.expression);if(!t.policy||"AnyOn"===t.policy){for(const e of t.ids){if(!this.#Mt.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;if(this.#Mt.get(e).visible)return!0}return!1}if("AllOn"===t.policy){for(const e of t.ids){if(!this.#Mt.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;if(!this.#Mt.get(e).visible)return!1}return!0}if("AnyOff"===t.policy){for(const e of t.ids){if(!this.#Mt.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;if(!this.#Mt.get(e).visible)return!0}return!1}if("AllOff"===t.policy){for(const e of t.ids){if(!this.#Mt.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;if(this.#Mt.get(e).visible)return!1}return!0}return(0,s.warn)(`Unknown optional content policy ${t.policy}.`),!0}return(0,s.warn)(`Unknown group type ${t.type}.`),!0}setVisibility(t,e=!0){this.#Mt.has(t)?(this.#Mt.get(t)._setVisible(i,!!e),this.#Rt=null):(0,s.warn)(`Optional content group not found: ${t}`)}get hasInitialVisibility(){return this.getHash()===this.#Ft}getOrder(){return this.#Mt.size?this.#Dt?this.#Dt.slice():[...this.#Mt.keys()]:null}getGroups(){return this.#Mt.size>0?(0,s.objectFromMap)(this.#Mt):null}getGroup(t){return this.#Mt.get(t)||null}getHash(){if(null!==this.#Rt)return this.#Rt;const t=new r.MurmurHash3_64;for(const[e,n]of this.#Mt)t.update(`${e}:${n.visible}`);return this.#Rt=t.hexdigest()}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PDFDataTransportStream=void 0;var s=n(1),r=n(6);e.PDFDataTransportStream=class{constructor({length:t,initialData:e,progressiveDone:n=!1,contentDispositionFilename:r=null,disableRange:i=!1,disableStream:a=!1},o){if((0,s.assert)(o,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=n,this._contentDispositionFilename=r,e?.length>0){const t=e instanceof Uint8Array&&e.byteLength===e.buffer.byteLength?e.buffer:new Uint8Array(e).buffer;this._queuedChunks.push(t)}this._pdfDataRangeTransport=o,this._isStreamingSupported=!a,this._isRangeSupported=!i,this._contentLength=t,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener(((t,e)=>{this._onReceiveData({begin:t,chunk:e})})),this._pdfDataRangeTransport.addProgressListener(((t,e)=>{this._onProgress({loaded:t,total:e})})),this._pdfDataRangeTransport.addProgressiveReadListener((t=>{this._onReceiveData({chunk:t})})),this._pdfDataRangeTransport.addProgressiveDoneListener((()=>{this._onProgressiveDone()})),this._pdfDataRangeTransport.transportReady()}_onReceiveData({begin:t,chunk:e}){const n=e instanceof Uint8Array&&e.byteLength===e.buffer.byteLength?e.buffer:new Uint8Array(e).buffer;if(void 0===t)this._fullRequestReader?this._fullRequestReader._enqueue(n):this._queuedChunks.push(n);else{const e=this._rangeReaders.some((function(e){return e._begin===t&&(e._enqueue(n),!0)}));(0,s.assert)(e,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}_onProgress(t){void 0===t.total?this._rangeReaders[0]?.onProgress?.({loaded:t.loaded}):this._fullRequestReader?.onProgress?.({loaded:t.loaded,total:t.total})}_onProgressiveDone(){this._fullRequestReader?.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(t){const e=this._rangeReaders.indexOf(t);e>=0&&this._rangeReaders.splice(e,1)}getFullReader(){(0,s.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const t=this._queuedChunks;return this._queuedChunks=null,new i(this,t,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const n=new a(this,t,e);return this._pdfDataRangeTransport.requestDataRange(t,e),this._rangeReaders.push(n),n}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeReaders.slice(0))e.cancel(t);this._pdfDataRangeTransport.abort()}};class i{constructor(t,e,n=!1,s=null){this._stream=t,this._done=n||!1,this._filename=(0,r.isPdfFile)(s)?s:null,this._queuedChunks=e||[],this._loaded=0;for(const t of this._queuedChunks)this._loaded+=t.byteLength;this._requests=[],this._headersReady=Promise.resolve(),t._fullRequestReader=this,this.onProgress=null}_enqueue(t){this._done||(this._requests.length>0?this._requests.shift().resolve({value:t,done:!1}):this._queuedChunks.push(t),this._loaded+=t.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=new s.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class a{constructor(t,e,n){this._stream=t,this._begin=e,this._end=n,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(t){if(!this._done){if(0===this._requests.length)this._queuedChunk=t;else{this._requests.shift().resolve({value:t,done:!1});for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=new s.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.XfaText=void 0;class n{static textContent(t){const e=[],s={items:e,styles:Object.create(null)};return function t(s){if(!s)return;let r=null;const i=s.name;if("#text"===i)r=s.value;else{if(!n.shouldBuildText(i))return;s?.attributes?.textContent?r=s.attributes.textContent:s.value&&(r=s.value)}if(null!==r&&e.push({str:r}),s.children)for(const e of s.children)t(e)}(t),s}static shouldBuildText(t){return!("textarea"===t||"input"===t||"option"===t||"select"===t)}}e.XfaText=n},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.NodeStandardFontDataFactory=e.NodeFilterFactory=e.NodeCanvasFactory=e.NodeCMapReaderFactory=void 0;var s=n(7);const r=function(t){return new Promise(((e,n)=>{__webpack_require__(7274).readFile(t,((t,s)=>{!t&&s?e(new Uint8Array(s)):n(new Error(t))}))}))};class i extends s.BaseFilterFactory{}e.NodeFilterFactory=i;class a extends s.BaseCanvasFactory{_createCanvas(t,e){return __webpack_require__(6301).createCanvas(t,e)}}e.NodeCanvasFactory=a;class o extends s.BaseCMapReaderFactory{_fetchData(t,e){return r(t).then((t=>({cMapData:t,compressionType:e})))}}e.NodeCMapReaderFactory=o;class l extends s.BaseStandardFontDataFactory{_fetchData(t){return r(t)}}e.NodeStandardFontDataFactory=l},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PDFNodeStream=void 0;var s=n(1),r=n(22);const i=__webpack_require__(7274),a=__webpack_require__(2454),o=__webpack_require__(6812),l=__webpack_require__(535),c=/^file:\/\/\/[a-zA-Z]:\//;e.PDFNodeStream=class{constructor(t){this.source=t,this.url=function(t){const e=l.parse(t);return"file:"===e.protocol||e.host?e:/^[a-z]:[/\\]/i.test(t)?l.parse(`file:///${t}`):(e.host||(e.protocol="file:"),e)}(t.url),this.isHttp="http:"===this.url.protocol||"https:"===this.url.protocol,this.isFsUrl="file:"===this.url.protocol,this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}getFullReader(){return(0,s.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new f(this):new p(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const n=this.isFsUrl?new m(this,t,e):new g(this,t,e);return this._rangeRequestReaders.push(n),n}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeRequestReaders.slice(0))e.cancel(t)}};class d{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null;const e=t.source;this._contentLength=e.length,this._loaded=0,this._filename=null,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._readableStream=null,this._readCapability=new s.PromiseCapability,this._headersCapability=new s.PromiseCapability}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=new s.PromiseCapability,this.read()):(this._loaded+=t.length,this.onProgress?.({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",(()=>{this._readCapability.resolve()})),t.on("end",(()=>{t.destroy(),this._done=!0,this._readCapability.resolve()})),t.on("error",(t=>{this._error(t)})),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new s.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class h{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=new s.PromiseCapability;const e=t.source;this._isStreamingSupported=!e.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=new s.PromiseCapability,this.read()):(this._loaded+=t.length,this.onProgress?.({loaded:this._loaded}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",(()=>{this._readCapability.resolve()})),t.on("end",(()=>{t.destroy(),this._done=!0,this._readCapability.resolve()})),t.on("error",(t=>{this._error(t)})),this._storedError&&this._readableStream.destroy(this._storedError)}}function u(t,e){return{protocol:t.protocol,auth:t.auth,host:t.hostname,port:t.port,path:t.path,method:"GET",headers:e}}class p extends d{constructor(t){super(t);const e=e=>{if(404===e.statusCode){const t=new s.MissingPDFException(`Missing PDF "${this._url}".`);return this._storedError=t,void this._headersCapability.reject(t)}this._headersCapability.resolve(),this._setReadableStream(e);const n=t=>this._readableStream.headers[t.toLowerCase()],{allowRangeRequests:i,suggestedLength:a}=(0,r.validateRangeRequestCapabilities)({getResponseHeader:n,isHttp:t.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=i,this._contentLength=a||this._contentLength,this._filename=(0,r.extractFilenameFromHeader)(n)};this._request=null,"http:"===this._url.protocol?this._request=a.request(u(this._url,t.httpHeaders),e):this._request=o.request(u(this._url,t.httpHeaders),e),this._request.on("error",(t=>{this._storedError=t,this._headersCapability.reject(t)})),this._request.end()}}class g extends h{constructor(t,e,n){super(t),this._httpHeaders={};for(const e in t.httpHeaders){const n=t.httpHeaders[e];void 0!==n&&(this._httpHeaders[e]=n)}this._httpHeaders.Range=`bytes=${e}-${n-1}`;const r=t=>{if(404!==t.statusCode)this._setReadableStream(t);else{const t=new s.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=t}};this._request=null,"http:"===this._url.protocol?this._request=a.request(u(this._url,this._httpHeaders),r):this._request=o.request(u(this._url,this._httpHeaders),r),this._request.on("error",(t=>{this._storedError=t})),this._request.end()}}class f extends d{constructor(t){super(t);let e=decodeURIComponent(this._url.path);c.test(this._url.href)&&(e=e.replace(/^\//,"")),i.lstat(e,((t,n)=>{if(t)return"ENOENT"===t.code&&(t=new s.MissingPDFException(`Missing PDF "${e}".`)),this._storedError=t,void this._headersCapability.reject(t);this._contentLength=n.size,this._setReadableStream(i.createReadStream(e)),this._headersCapability.resolve()}))}}class m extends h{constructor(t,e,n){super(t);let s=decodeURIComponent(this._url.path);c.test(this._url.href)&&(s=s.replace(/^\//,"")),this._setReadableStream(i.createReadStream(s,{start:e,end:n-1}))}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.createResponseStatusError=function(t,e){return 404===t||0===t&&e.startsWith("file:")?new s.MissingPDFException('Missing PDF "'+e+'".'):new s.UnexpectedResponseException(`Unexpected server response (${t}) while retrieving PDF "${e}".`,t)},e.extractFilenameFromHeader=function(t){const e=t("Content-Disposition");if(e){let t=(0,r.getFilenameFromContentDispositionHeader)(e);if(t.includes("%"))try{t=decodeURIComponent(t)}catch(t){}if((0,i.isPdfFile)(t))return t}return null},e.validateRangeRequestCapabilities=function({getResponseHeader:t,isHttp:e,rangeChunkSize:n,disableRange:s}){const r={allowRangeRequests:!1,suggestedLength:void 0},i=parseInt(t("Content-Length"),10);return Number.isInteger(i)?(r.suggestedLength=i,i<=2*n||s||!e||"bytes"!==t("Accept-Ranges")||"identity"!==(t("Content-Encoding")||"identity")||(r.allowRangeRequests=!0),r):r},e.validateResponseStatus=function(t){return 200===t||206===t};var s=n(1),r=n(23),i=n(6)},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getFilenameFromContentDispositionHeader=function(t){let e=!0,n=r("filename\\*","i").exec(t);if(n){n=n[1];let t=o(n);return t=unescape(t),t=l(t),t=c(t),a(t)}if(n=function(t){const e=[];let n;const s=r("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;null!==(n=s.exec(t));){let[,t,s,r]=n;if(t=parseInt(t,10),t in e){if(0===t)break}else e[t]=[s,r]}const i=[];for(let t=0;t<e.length&&t in e;++t){let[n,s]=e[t];s=o(s),n&&(s=unescape(s),0===t&&(s=l(s))),i.push(s)}return i.join("")}(t),n)return a(c(n));if(n=r("filename","i").exec(t),n){n=n[1];let t=o(n);return t=c(t),a(t)}function r(t,e){return new RegExp("(?:^|;)\\s*"+t+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',e)}function i(t,n){if(t){if(!/^[\x00-\xFF]+$/.test(n))return n;try{const r=new TextDecoder(t,{fatal:!0}),i=(0,s.stringToBytes)(n);n=r.decode(i),e=!1}catch(t){}}return n}function a(t){return e&&/[\x80-\xff]/.test(t)&&(t=i("utf-8",t),e&&(t=i("iso-8859-1",t))),t}function o(t){if(t.startsWith('"')){const e=t.slice(1).split('\\"');for(let t=0;t<e.length;++t){const n=e[t].indexOf('"');-1!==n&&(e[t]=e[t].slice(0,n),e.length=t+1),e[t]=e[t].replaceAll(/\\(.)/g,"$1")}t=e.join('"')}return t}function l(t){const e=t.indexOf("'");return-1===e?t:i(t.slice(0,e),t.slice(e+1).replace(/^[^']*'/,""))}function c(t){return!t.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(t)?t:t.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,(function(t,e,n,s){if("q"===n||"Q"===n)return i(e,s=(s=s.replaceAll("_"," ")).replaceAll(/=([0-9a-fA-F]{2})/g,(function(t,e){return String.fromCharCode(parseInt(e,16))})));try{s=atob(s)}catch(t){}return i(e,s)}))}return""};var s=n(1)},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PDFNetworkStream=void 0;var s=n(1),r=n(22);class i{constructor(t,e={}){this.url=t,this.isHttp=/^https?:/i.test(t),this.httpHeaders=this.isHttp&&e.httpHeaders||Object.create(null),this.withCredentials=e.withCredentials||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(t,e,n){const s={begin:t,end:e};for(const t in n)s[t]=n[t];return this.request(s)}requestFull(t){return this.request(t)}request(t){const e=new XMLHttpRequest,n=this.currXhrId++,s=this.pendingRequests[n]={xhr:e};e.open("GET",this.url),e.withCredentials=this.withCredentials;for(const t in this.httpHeaders){const n=this.httpHeaders[t];void 0!==n&&e.setRequestHeader(t,n)}return this.isHttp&&"begin"in t&&"end"in t?(e.setRequestHeader("Range",`bytes=${t.begin}-${t.end-1}`),s.expectedStatus=206):s.expectedStatus=200,e.responseType="arraybuffer",t.onError&&(e.onerror=function(n){t.onError(e.status)}),e.onreadystatechange=this.onStateChange.bind(this,n),e.onprogress=this.onProgress.bind(this,n),s.onHeadersReceived=t.onHeadersReceived,s.onDone=t.onDone,s.onError=t.onError,s.onProgress=t.onProgress,e.send(null),n}onProgress(t,e){const n=this.pendingRequests[t];n&&n.onProgress?.(e)}onStateChange(t,e){const n=this.pendingRequests[t];if(!n)return;const r=n.xhr;if(r.readyState>=2&&n.onHeadersReceived&&(n.onHeadersReceived(),delete n.onHeadersReceived),4!==r.readyState)return;if(!(t in this.pendingRequests))return;if(delete this.pendingRequests[t],0===r.status&&this.isHttp)return void n.onError?.(r.status);const i=r.status||200;if((200!==i||206!==n.expectedStatus)&&i!==n.expectedStatus)return void n.onError?.(r.status);const a=function(t){const e=t.response;return"string"!=typeof e?e:(0,s.stringToBytes)(e).buffer}(r);if(206===i){const t=r.getResponseHeader("Content-Range"),e=/bytes (\d+)-(\d+)\/(\d+)/.exec(t);n.onDone({begin:parseInt(e[1],10),chunk:a})}else a?n.onDone({begin:0,chunk:a}):n.onError?.(r.status)}getRequestXhr(t){return this.pendingRequests[t].xhr}isPendingRequest(t){return t in this.pendingRequests}abortRequest(t){const e=this.pendingRequests[t].xhr;delete this.pendingRequests[t],e.abort()}}e.PDFNetworkStream=class{constructor(t){this._source=t,this._manager=new i(t.url,{httpHeaders:t.httpHeaders,withCredentials:t.withCredentials}),this._rangeChunkSize=t.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(t){const e=this._rangeRequestReaders.indexOf(t);e>=0&&this._rangeRequestReaders.splice(e,1)}getFullReader(){return(0,s.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new a(this._manager,this._source),this._fullRequestReader}getRangeReader(t,e){const n=new o(this._manager,t,e);return n.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(n),n}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeRequestReaders.slice(0))e.cancel(t)}};class a{constructor(t,e){this._manager=t;const n={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=e.url,this._fullRequestId=t.requestFull(n),this._headersReceivedCapability=new s.PromiseCapability,this._disableRange=e.disableRange||!1,this._contentLength=e.length,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const t=this._fullRequestId,e=this._manager.getRequestXhr(t),n=t=>e.getResponseHeader(t),{allowRangeRequests:s,suggestedLength:i}=(0,r.validateRangeRequestCapabilities)({getResponseHeader:n,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});s&&(this._isRangeSupported=!0),this._contentLength=i||this._contentLength,this._filename=(0,r.extractFilenameFromHeader)(n),this._isRangeSupported&&this._manager.abortRequest(t),this._headersReceivedCapability.resolve()}_onDone(t){if(t&&(this._requests.length>0?this._requests.shift().resolve({value:t.chunk,done:!1}):this._cachedChunks.push(t.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(t){this._storedError=(0,r.createResponseStatusError)(t,this._url),this._headersReceivedCapability.reject(this._storedError);for(const t of this._requests)t.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(t){this.onProgress?.({loaded:t.loaded,total:t.lengthComputable?t.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=new s.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._headersReceivedCapability.reject(t);for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class o{constructor(t,e,n){this._manager=t;const s={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=t.url,this._requestId=t.requestRange(e,n,s),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){this.onClosed?.(this)}_onDone(t){const e=t.chunk;this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunk=e,this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(t){this._storedError=(0,r.createResponseStatusError)(t,this._url);for(const t of this._requests)t.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(t){this.isStreamingSupported||this.onProgress?.({loaded:t.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(null!==this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=new s.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.PDFFetchStream=void 0;var s=n(1),r=n(22);function i(t,e,n){return{method:"GET",headers:t,signal:n.signal,mode:"cors",credentials:e?"include":"same-origin",redirect:"follow"}}function a(t){const e=new Headers;for(const n in t){const s=t[n];void 0!==s&&e.append(n,s)}return e}function o(t){return t instanceof Uint8Array?t.buffer:t instanceof ArrayBuffer?t:((0,s.warn)(`getArrayBuffer - unexpected data format: ${t}`),new Uint8Array(t).buffer)}e.PDFFetchStream=class{constructor(t){this.source=t,this.isHttp=/^https?:/i.test(t.url),this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}getFullReader(){return(0,s.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new l(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const n=new c(this,t,e);return this._rangeRequestReaders.push(n),n}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeRequestReaders.slice(0))e.cancel(t)}};class l{constructor(t){this._stream=t,this._reader=null,this._loaded=0,this._filename=null;const e=t.source;this._withCredentials=e.withCredentials||!1,this._contentLength=e.length,this._headersCapability=new s.PromiseCapability,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._headers=a(this._stream.httpHeaders);const n=e.url;fetch(n,i(this._headers,this._withCredentials,this._abortController)).then((t=>{if(!(0,r.validateResponseStatus)(t.status))throw(0,r.createResponseStatusError)(t.status,n);this._reader=t.body.getReader(),this._headersCapability.resolve();const e=e=>t.headers.get(e),{allowRangeRequests:i,suggestedLength:a}=(0,r.validateRangeRequestCapabilities)({getResponseHeader:e,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=i,this._contentLength=a||this._contentLength,this._filename=(0,r.extractFilenameFromHeader)(e),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new s.AbortException("Streaming is disabled."))})).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress?.({loaded:this._loaded,total:this._contentLength}),{value:o(t),done:!1})}cancel(t){this._reader?.cancel(t),this._abortController.abort()}}class c{constructor(t,e,n){this._stream=t,this._reader=null,this._loaded=0;const o=t.source;this._withCredentials=o.withCredentials||!1,this._readCapability=new s.PromiseCapability,this._isStreamingSupported=!o.disableStream,this._abortController=new AbortController,this._headers=a(this._stream.httpHeaders),this._headers.append("Range",`bytes=${e}-${n-1}`);const l=o.url;fetch(l,i(this._headers,this._withCredentials,this._abortController)).then((t=>{if(!(0,r.validateResponseStatus)(t.status))throw(0,r.createResponseStatusError)(t.status,l);this._readCapability.resolve(),this._reader=t.body.getReader()})).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress?.({loaded:this._loaded}),{value:o(t),done:!1})}cancel(t){this._reader?.cancel(t),this._abortController.abort()}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TextLayerRenderTask=void 0,e.renderTextLayer=function(t){t.textContentSource||!t.textContent&&!t.textContentStream||((0,r.deprecated)("The TextLayerRender `textContent`/`textContentStream` parameters will be removed in the future, please use `textContentSource` instead."),t.textContentSource=t.textContent||t.textContentStream);const{container:e,viewport:n}=t,s=getComputedStyle(e),i=s.getPropertyValue("visibility"),a=parseFloat(s.getPropertyValue("--scale-factor"));"visible"===i&&(!a||Math.abs(a-n.scale)>1e-5)&&console.error("The `--scale-factor` CSS-variable must be set, to the same value as `viewport.scale`, either on the `container`-element itself or higher up in the DOM.");const o=new d(t);return o._render(),o},e.updateTextLayer=function({container:t,viewport:e,textDivs:n,textDivProperties:s,isOffscreenCanvasSupported:i,mustRotate:a=!0,mustRescale:l=!0}){if(a&&(0,r.setLayerDimensions)(t,{rotation:e.rotation}),l){const t=o(0,i),r={prevFontSize:null,prevFontFamily:null,div:null,scale:e.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:t};for(const t of n)r.properties=s.get(t),r.div=t,c(r)}};var s=n(1),r=n(6);const i=30,a=new Map;function o(t,e){let n;if(e&&s.FeatureTest.isOffscreenCanvasSupported)n=new OffscreenCanvas(t,t).getContext("2d",{alpha:!1});else{const e=document.createElement("canvas");e.width=e.height=t,n=e.getContext("2d",{alpha:!1})}return n}function l(t,e,n){const r=document.createElement("span"),l={angle:0,canvasWidth:0,hasText:""!==e.str,hasEOL:e.hasEOL,fontSize:0};t._textDivs.push(r);const c=s.Util.transform(t._transform,e.transform);let d=Math.atan2(c[1],c[0]);const h=n[e.fontName];h.vertical&&(d+=Math.PI/2);const u=Math.hypot(c[2],c[3]),p=u*function(t,e){const n=a.get(t);if(n)return n;const s=o(i,e);s.font=`30px ${t}`;const r=s.measureText("");let l=r.fontBoundingBoxAscent,c=Math.abs(r.fontBoundingBoxDescent);if(l){const e=l/(l+c);return a.set(t,e),s.canvas.width=s.canvas.height=0,e}s.strokeStyle="red",s.clearRect(0,0,i,i),s.strokeText("g",0,0);let d=s.getImageData(0,0,i,i).data;c=0;for(let t=d.length-1-3;t>=0;t-=4)if(d[t]>0){c=Math.ceil(t/4/i);break}s.clearRect(0,0,i,i),s.strokeText("A",0,i),d=s.getImageData(0,0,i,i).data,l=0;for(let t=0,e=d.length;t<e;t+=4)if(d[t]>0){l=i-Math.floor(t/4/i);break}if(s.canvas.width=s.canvas.height=0,l){const e=l/(l+c);return a.set(t,e),e}return a.set(t,.8),.8}(h.fontFamily,t._isOffscreenCanvasSupported);let g,f;0===d?(g=c[4],f=c[5]-p):(g=c[4]+p*Math.sin(d),f=c[5]-p*Math.cos(d));const m="calc(var(--scale-factor)*",b=r.style;t._container===t._rootContainer?(b.left=`${(100*g/t._pageWidth).toFixed(2)}%`,b.top=`${(100*f/t._pageHeight).toFixed(2)}%`):(b.left=`${m}${g.toFixed(2)}px)`,b.top=`${m}${f.toFixed(2)}px)`),b.fontSize=`${m}${u.toFixed(2)}px)`,b.fontFamily=h.fontFamily,l.fontSize=u,r.setAttribute("role","presentation"),r.textContent=e.str,r.dir=e.dir,t._fontInspectorEnabled&&(r.dataset.fontName=e.fontName),0!==d&&(l.angle=d*(180/Math.PI));let _=!1;if(e.str.length>1)_=!0;else if(" "!==e.str&&e.transform[0]!==e.transform[3]){const t=Math.abs(e.transform[0]),n=Math.abs(e.transform[3]);t!==n&&Math.max(t,n)/Math.min(t,n)>1.5&&(_=!0)}_&&(l.canvasWidth=h.vertical?e.height:e.width),t._textDivProperties.set(r,l),t._isReadableStream&&t._layoutText(r)}function c(t){const{div:e,scale:n,properties:s,ctx:r,prevFontSize:i,prevFontFamily:a}=t,{style:o}=e;let l="";if(0!==s.canvasWidth&&s.hasText){const{fontFamily:c}=o,{canvasWidth:d,fontSize:h}=s;i===h&&a===c||(r.font=`${h*n}px ${c}`,t.prevFontSize=h,t.prevFontFamily=c);const{width:u}=r.measureText(e.textContent);u>0&&(l=`scaleX(${d*n/u})`)}0!==s.angle&&(l=`rotate(${s.angle}deg) ${l}`),l.length>0&&(o.transform=l)}class d{constructor({textContentSource:t,container:e,viewport:n,textDivs:i,textDivProperties:a,textContentItemsStr:l,isOffscreenCanvasSupported:c}){this._textContentSource=t,this._isReadableStream=t instanceof ReadableStream,this._container=this._rootContainer=e,this._textDivs=i||[],this._textContentItemsStr=l||[],this._isOffscreenCanvasSupported=c,this._fontInspectorEnabled=!!globalThis.FontInspector?.enabled,this._reader=null,this._textDivProperties=a||new WeakMap,this._canceled=!1,this._capability=new s.PromiseCapability,this._layoutTextParams={prevFontSize:null,prevFontFamily:null,div:null,scale:n.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:o(0,c)};const{pageWidth:d,pageHeight:h,pageX:u,pageY:p}=n.rawDims;this._transform=[1,0,0,-1,-u,p+h],this._pageWidth=d,this._pageHeight=h,(0,r.setLayerDimensions)(e,n),this._capability.promise.finally((()=>{this._layoutTextParams=null})).catch((()=>{}))}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new s.AbortException("TextLayer task cancelled.")).catch((()=>{})),this._reader=null),this._capability.reject(new s.AbortException("TextLayer task cancelled."))}_processItems(t,e){for(const n of t)if(void 0!==n.str)this._textContentItemsStr.push(n.str),l(this,n,e);else if("beginMarkedContentProps"===n.type||"beginMarkedContent"===n.type){const t=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),null!==n.id&&this._container.setAttribute("id",`${n.id}`),t.append(this._container)}else"endMarkedContent"===n.type&&(this._container=this._container.parentNode)}_layoutText(t){const e=this._layoutTextParams.properties=this._textDivProperties.get(t);if(this._layoutTextParams.div=t,c(this._layoutTextParams),e.hasText&&this._container.append(t),e.hasEOL){const t=document.createElement("br");t.setAttribute("role","presentation"),this._container.append(t)}}_render(){const t=new s.PromiseCapability;let e=Object.create(null);if(this._isReadableStream){const n=()=>{this._reader.read().then((({value:s,done:r})=>{r?t.resolve():(Object.assign(e,s.styles),this._processItems(s.items,e),n())}),t.reject)};this._reader=this._textContentSource.getReader(),n()}else{if(!this._textContentSource)throw new Error('No "textContentSource" parameter specified.');{const{items:e,styles:n}=this._textContentSource;this._processItems(e,n),t.resolve()}}t.promise.then((()=>{e=null,function(t){if(t._canceled)return;const e=t._textDivs,n=t._capability;if(e.length>1e5)n.resolve();else{if(!t._isReadableStream)for(const n of e)t._layoutText(n);n.resolve()}}(this)}),this._capability.reject)}}e.TextLayerRenderTask=d},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AnnotationEditorLayer=void 0;var s=n(1),r=n(5),i=n(28),a=n(29),o=n(6);class l{#Ot;#Lt=!1;#Nt=this.pointerup.bind(this);#jt=this.pointerdown.bind(this);#Bt=new Map;#Ut=!1;#qt=!1;#Gt;static _initialized=!1;constructor(t){l._initialized||(l._initialized=!0,i.FreeTextEditor.initialize(t.l10n),a.InkEditor.initialize(t.l10n)),t.uiManager.registerEditorTypes([i.FreeTextEditor,a.InkEditor]),this.#Gt=t.uiManager,this.pageIndex=t.pageIndex,this.div=t.div,this.#Ot=t.accessibilityManager,this.#Gt.addLayer(this)}get isEmpty(){return 0===this.#Bt.size}updateToolbar(t){this.#Gt.updateToolbar(t)}updateMode(t=this.#Gt.getMode()){this.#Ht(),t===s.AnnotationEditorType.INK?(this.addInkEditorIfNeeded(!1),this.disableClick()):this.enableClick(),this.#Gt.unselectAll(),t!==s.AnnotationEditorType.NONE&&(this.div.classList.toggle("freeTextEditing",t===s.AnnotationEditorType.FREETEXT),this.div.classList.toggle("inkEditing",t===s.AnnotationEditorType.INK),this.div.hidden=!1)}addInkEditorIfNeeded(t){if(t||this.#Gt.getMode()===s.AnnotationEditorType.INK){if(!t)for(const t of this.#Bt.values())if(t.isEmpty())return void t.setInBackground();this.#Wt({offsetX:0,offsetY:0}).setInBackground()}}setEditingState(t){this.#Gt.setEditingState(t)}addCommands(t){this.#Gt.addCommands(t)}enable(){this.div.style.pointerEvents="auto";for(const t of this.#Bt.values())t.enableEditing()}disable(){this.div.style.pointerEvents="none";for(const t of this.#Bt.values())t.disableEditing();this.#Ht(),this.isEmpty&&(this.div.hidden=!0)}setActiveEditor(t){this.#Gt.getActive()!==t&&this.#Gt.setActiveEditor(t)}enableClick(){this.div.addEventListener("pointerdown",this.#jt),this.div.addEventListener("pointerup",this.#Nt)}disableClick(){this.div.removeEventListener("pointerdown",this.#jt),this.div.removeEventListener("pointerup",this.#Nt)}attach(t){this.#Bt.set(t.id,t)}detach(t){this.#Bt.delete(t.id),this.#Ot?.removePointerInTextLayer(t.contentDiv)}remove(t){this.#Gt.removeEditor(t),this.detach(t),t.div.style.display="none",setTimeout((()=>{t.div.style.display="",t.div.remove(),t.isAttachedToDOM=!1,document.activeElement===document.body&&this.#Gt.focusMainContainer()}),0),this.#qt||this.addInkEditorIfNeeded(!1)}#Vt(t){t.parent!==this&&(this.attach(t),t.parent?.detach(t),t.setParent(this),t.div&&t.isAttachedToDOM&&(t.div.remove(),this.div.append(t.div)))}add(t){if(this.#Vt(t),this.#Gt.addEditor(t),this.attach(t),!t.isAttachedToDOM){const e=t.render();this.div.append(e),t.isAttachedToDOM=!0}this.moveEditorInDOM(t),t.onceAdded(),this.#Gt.addToAnnotationStorage(t)}moveEditorInDOM(t){this.#Ot?.moveElementInDOM(this.div,t.div,t.contentDiv,!0)}addOrRebuild(t){t.needsToBeRebuilt()?t.rebuild():this.add(t)}addANewEditor(t){this.addCommands({cmd:()=>{this.addOrRebuild(t)},undo:()=>{t.remove()},mustExec:!0})}addUndoableEditor(t){this.addCommands({cmd:()=>{this.addOrRebuild(t)},undo:()=>{t.remove()},mustExec:!1})}getNextId(){return this.#Gt.getId()}#zt(t){switch(this.#Gt.getMode()){case s.AnnotationEditorType.FREETEXT:return new i.FreeTextEditor(t);case s.AnnotationEditorType.INK:return new a.InkEditor(t)}return null}deserialize(t){switch(t.annotationType){case s.AnnotationEditorType.FREETEXT:return i.FreeTextEditor.deserialize(t,this,this.#Gt);case s.AnnotationEditorType.INK:return a.InkEditor.deserialize(t,this,this.#Gt)}return null}#Wt(t){const e=this.getNextId(),n=this.#zt({parent:this,id:e,x:t.offsetX,y:t.offsetY,uiManager:this.#Gt});return n&&this.add(n),n}setSelected(t){this.#Gt.setSelected(t)}toggleSelected(t){this.#Gt.toggleSelected(t)}isSelected(t){return this.#Gt.isSelected(t)}unselect(t){this.#Gt.unselect(t)}pointerup(t){const{isMac:e}=s.FeatureTest.platform;0!==t.button||t.ctrlKey&&e||t.target===this.div&&this.#Ut&&(this.#Ut=!1,this.#Lt?this.#Wt(t):this.#Lt=!0)}pointerdown(t){const{isMac:e}=s.FeatureTest.platform;if(0!==t.button||t.ctrlKey&&e)return;if(t.target!==this.div)return;this.#Ut=!0;const n=this.#Gt.getActive();this.#Lt=!n||n.isEmpty()}drop(t){const e=t.dataTransfer.getData("text/plain"),n=this.#Gt.getEditor(e);if(!n)return;t.preventDefault(),t.dataTransfer.dropEffect="move",this.#Vt(n);const s=this.div.getBoundingClientRect(),r=t.clientX-s.x,i=t.clientY-s.y;n.translate(r-n.startX,i-n.startY),this.moveEditorInDOM(n),n.div.focus()}dragover(t){t.preventDefault()}destroy(){this.#Gt.getActive()?.parent===this&&this.#Gt.setActiveEditor(null);for(const t of this.#Bt.values())this.#Ot?.removePointerInTextLayer(t.contentDiv),t.setParent(null),t.isAttachedToDOM=!1,t.div.remove();this.div=null,this.#Bt.clear(),this.#Gt.removeLayer(this)}#Ht(){this.#qt=!0;for(const t of this.#Bt.values())t.isEmpty()&&t.remove();this.#qt=!1}render({viewport:t}){this.viewport=t,(0,o.setLayerDimensions)(this.div,t),(0,r.bindEvents)(this,this.div,["dragover","drop"]);for(const t of this.#Gt.getEditors(this.pageIndex))this.add(t);this.updateMode()}update({viewport:t}){this.#Gt.commitOrRemove(),this.viewport=t,(0,o.setLayerDimensions)(this.div,{rotation:t.rotation}),this.updateMode()}get pageDimensions(){const{pageWidth:t,pageHeight:e}=this.viewport.rawDims;return[t,e]}}e.AnnotationEditorLayer=l},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.FreeTextEditor=void 0;var s=n(1),r=n(5),i=n(4);class a extends i.AnnotationEditor{#$t=this.editorDivBlur.bind(this);#Xt=this.editorDivFocus.bind(this);#Kt=this.editorDivInput.bind(this);#Yt=this.editorDivKeydown.bind(this);#Zt;#Jt="";#Qt=`${this.id}-editor`;#te=!1;#ee;static _freeTextDefaultContent="";static _l10nPromise;static _internalPadding=0;static _defaultColor=null;static _defaultFontSize=10;static _keyboardManager=new r.KeyboardManager([[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],a.prototype.commitOrRemove]]);static _type="freetext";constructor(t){super({...t,name:"freeTextEditor"}),this.#Zt=t.color||a._defaultColor||i.AnnotationEditor._defaultLineColor,this.#ee=t.fontSize||a._defaultFontSize}static initialize(t){this._l10nPromise=new Map(["free_text2_default_content","editor_free_text2_aria_label"].map((e=>[e,t.get(e)])));const e=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(e.getPropertyValue("--freetext-padding"))}static updateDefaultParams(t,e){switch(t){case s.AnnotationEditorParamsType.FREETEXT_SIZE:a._defaultFontSize=e;break;case s.AnnotationEditorParamsType.FREETEXT_COLOR:a._defaultColor=e}}updateParams(t,e){switch(t){case s.AnnotationEditorParamsType.FREETEXT_SIZE:this.#ne(e);break;case s.AnnotationEditorParamsType.FREETEXT_COLOR:this.#se(e)}}static get defaultPropertiesToUpdate(){return[[s.AnnotationEditorParamsType.FREETEXT_SIZE,a._defaultFontSize],[s.AnnotationEditorParamsType.FREETEXT_COLOR,a._defaultColor||i.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[s.AnnotationEditorParamsType.FREETEXT_SIZE,this.#ee],[s.AnnotationEditorParamsType.FREETEXT_COLOR,this.#Zt]]}#ne(t){const e=t=>{this.editorDiv.style.fontSize=`calc(${t}px * var(--scale-factor))`,this.translate(0,-(t-this.#ee)*this.parentScale),this.#ee=t,this.#re()},n=this.#ee;this.addCommands({cmd:()=>{e(t)},undo:()=>{e(n)},mustExec:!0,type:s.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})}#se(t){const e=this.#Zt;this.addCommands({cmd:()=>{this.#Zt=this.editorDiv.style.color=t},undo:()=>{this.#Zt=this.editorDiv.style.color=e},mustExec:!0,type:s.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})}getInitialTranslation(){const t=this.parentScale;return[-a._internalPadding*t,-(a._internalPadding+this.#ee)*t]}rebuild(){super.rebuild(),null!==this.div&&(this.isAttachedToDOM||this.parent.add(this))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(s.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this.div.draggable=!1,this.div.removeAttribute("aria-activedescendant"),this.editorDiv.addEventListener("keydown",this.#Yt),this.editorDiv.addEventListener("focus",this.#Xt),this.editorDiv.addEventListener("blur",this.#$t),this.editorDiv.addEventListener("input",this.#Kt))}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",this.#Qt),this.div.draggable=!0,this.editorDiv.removeEventListener("keydown",this.#Yt),this.editorDiv.removeEventListener("focus",this.#Xt),this.editorDiv.removeEventListener("blur",this.#$t),this.editorDiv.removeEventListener("input",this.#Kt),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freeTextEditing"))}focusin(t){super.focusin(t),t.target!==this.editorDiv&&this.editorDiv.focus()}onceAdded(){this.width||(this.enableEditMode(),this.editorDiv.focus())}isEmpty(){return!this.editorDiv||""===this.editorDiv.innerText.trim()}remove(){this.isEditing=!1,this.parent.setEditingState(!0),this.parent.div.classList.add("freeTextEditing"),super.remove()}#ie(){const t=this.editorDiv.getElementsByTagName("div");if(0===t.length)return this.editorDiv.innerText;const e=[];for(const n of t)e.push(n.innerText.replace(/\r\n?|\n/,""));return e.join("\n")}#re(){const[t,e]=this.parentDimensions;let n;if(this.isAttachedToDOM)n=this.div.getBoundingClientRect();else{const{currentLayer:t,div:e}=this,s=e.style.display;e.style.display="hidden",t.div.append(this.div),n=e.getBoundingClientRect(),e.remove(),e.style.display=s}this.width=n.width/t,this.height=n.height/e}commit(){this.isInEditMode()&&(super.commit(),this.#te||(this.#te=!0,this.parent.addUndoableEditor(this)),this.disableEditMode(),this.#Jt=this.#ie().trimEnd(),this.#re())}shouldGetKeyboardEvents(){return this.isInEditMode()}dblclick(t){this.enableEditMode(),this.editorDiv.focus()}keydown(t){t.target===this.div&&"Enter"===t.key&&(this.enableEditMode(),this.editorDiv.focus())}editorDivKeydown(t){a._keyboardManager.exec(this,t)}editorDivFocus(t){this.isEditing=!0}editorDivBlur(t){this.isEditing=!1}editorDivInput(t){this.parent.div.classList.toggle("freeTextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let t,e;this.width&&(t=this.x,e=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",this.#Qt),this.enableEditing(),a._l10nPromise.get("editor_free_text2_aria_label").then((t=>this.editorDiv?.setAttribute("aria-label",t))),a._l10nPromise.get("free_text2_default_content").then((t=>this.editorDiv?.setAttribute("default-content",t))),this.editorDiv.contentEditable=!0;const{style:n}=this.editorDiv;if(n.fontSize=`calc(${this.#ee}px * var(--scale-factor))`,n.color=this.#Zt,this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,r.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[n,s]=this.parentDimensions;this.setAt(t*n,e*s,this.width*n,this.height*s);for(const t of this.#Jt.split("\n")){const e=document.createElement("div");e.append(t?document.createTextNode(t):document.createElement("br")),this.editorDiv.append(e)}this.div.draggable=!0,this.editorDiv.contentEditable=!1}else this.div.draggable=!1,this.editorDiv.contentEditable=!0;return this.div}get contentDiv(){return this.editorDiv}static deserialize(t,e,n){const r=super.deserialize(t,e,n);return r.#ee=t.fontSize,r.#Zt=s.Util.makeHexColor(...t.color),r.#Jt=t.value,r}serialize(){if(this.isEmpty())return null;const t=a._internalPadding*this.parentScale,e=this.getRect(t,t),n=i.AnnotationEditor._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:this.#Zt);return{annotationType:s.AnnotationEditorType.FREETEXT,color:n,fontSize:this.#ee,value:this.#Jt,pageIndex:this.pageIndex,rect:e,rotation:this.rotation}}}e.FreeTextEditor=a},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.InkEditor=void 0,Object.defineProperty(e,"fitCurve",{enumerable:!0,get:function(){return i.fitCurve}});var s=n(1),r=n(4),i=n(30),a=n(5);const o=16;class l extends r.AnnotationEditor{#ae=0;#oe=0;#le=0;#ce=this.canvasPointermove.bind(this);#de=this.canvasPointerleave.bind(this);#he=this.canvasPointerup.bind(this);#ue=this.canvasPointerdown.bind(this);#pe=!1;#ge=!1;#fe=null;#me=null;#be=0;#_e=0;#ve=null;static _defaultColor=null;static _defaultOpacity=1;static _defaultThickness=1;static _l10nPromise;static _type="ink";constructor(t){super({...t,name:"inkEditor"}),this.color=t.color||null,this.thickness=t.thickness||null,this.opacity=t.opacity||null,this.paths=[],this.bezierPath2D=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0}static initialize(t){this._l10nPromise=new Map(["editor_ink_canvas_aria_label","editor_ink2_aria_label"].map((e=>[e,t.get(e)])))}static updateDefaultParams(t,e){switch(t){case s.AnnotationEditorParamsType.INK_THICKNESS:l._defaultThickness=e;break;case s.AnnotationEditorParamsType.INK_COLOR:l._defaultColor=e;break;case s.AnnotationEditorParamsType.INK_OPACITY:l._defaultOpacity=e/100}}updateParams(t,e){switch(t){case s.AnnotationEditorParamsType.INK_THICKNESS:this.#Ae(e);break;case s.AnnotationEditorParamsType.INK_COLOR:this.#se(e);break;case s.AnnotationEditorParamsType.INK_OPACITY:this.#ye(e)}}static get defaultPropertiesToUpdate(){return[[s.AnnotationEditorParamsType.INK_THICKNESS,l._defaultThickness],[s.AnnotationEditorParamsType.INK_COLOR,l._defaultColor||r.AnnotationEditor._defaultLineColor],[s.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*l._defaultOpacity)]]}get propertiesToUpdate(){return[[s.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||l._defaultThickness],[s.AnnotationEditorParamsType.INK_COLOR,this.color||l._defaultColor||r.AnnotationEditor._defaultLineColor],[s.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*(this.opacity??l._defaultOpacity))]]}#Ae(t){const e=this.thickness;this.addCommands({cmd:()=>{this.thickness=t,this.#Se()},undo:()=>{this.thickness=e,this.#Se()},mustExec:!0,type:s.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})}#se(t){const e=this.color;this.addCommands({cmd:()=>{this.color=t,this.#xe()},undo:()=>{this.color=e,this.#xe()},mustExec:!0,type:s.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})}#ye(t){t/=100;const e=this.opacity;this.addCommands({cmd:()=>{this.opacity=t,this.#xe()},undo:()=>{this.opacity=e,this.#xe()},mustExec:!0,type:s.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})}rebuild(){super.rebuild(),null!==this.div&&(this.canvas||(this.#Ee(),this.#Ce()),this.isAttachedToDOM||(this.parent.add(this),this.#we()),this.#Se())}remove(){null!==this.canvas&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,this.#me.disconnect(),this.#me=null,super.remove())}setParent(t){!this.parent&&t?this._uiManager.removeShouldRescale(this):this.parent&&null===t&&this._uiManager.addShouldRescale(this),super.setParent(t)}onScaleChanging(){const[t,e]=this.parentDimensions,n=this.width*t,s=this.height*e;this.setDimensions(n,s)}enableEditMode(){this.#pe||null===this.canvas||(super.enableEditMode(),this.div.draggable=!1,this.canvas.addEventListener("pointerdown",this.#ue),this.canvas.addEventListener("pointerup",this.#he))}disableEditMode(){this.isInEditMode()&&null!==this.canvas&&(super.disableEditMode(),this.div.draggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",this.#ue),this.canvas.removeEventListener("pointerup",this.#he))}onceAdded(){this.div.draggable=!this.isEmpty()}isEmpty(){return 0===this.paths.length||1===this.paths.length&&0===this.paths[0].length}#Pe(){const{parentRotation:t,parentDimensions:[e,n]}=this;switch(t){case 90:return[0,n,n,e];case 180:return[e,n,e,n];case 270:return[e,0,n,e];default:return[0,0,e,n]}}#Te(){const{ctx:t,color:e,opacity:n,thickness:s,parentScale:r,scaleFactor:i}=this;t.lineWidth=s*r/i,t.lineCap="round",t.lineJoin="round",t.miterLimit=10,t.strokeStyle=`${e}${(0,a.opacityToHex)(n)}`}#ke(t,e){this.isEditing=!0,this.#ge||(this.#ge=!0,this.#we(),this.thickness||=l._defaultThickness,this.color||=l._defaultColor||r.AnnotationEditor._defaultLineColor,this.opacity??=l._defaultOpacity),this.currentPath.push([t,e]),this.#fe=null,this.#Te(),this.ctx.beginPath(),this.ctx.moveTo(t,e),this.#ve=()=>{this.#ve&&(this.#fe&&(this.isEmpty()?(this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)):this.#xe(),this.ctx.lineTo(...this.#fe),this.#fe=null,this.ctx.stroke()),window.requestAnimationFrame(this.#ve))},window.requestAnimationFrame(this.#ve)}#Re(t,e){const[n,s]=this.currentPath.at(-1);t===n&&e===s||(this.currentPath.push([t,e]),this.#fe=[t,e])}#Me(t,e){this.ctx.closePath(),this.#ve=null,t=Math.min(Math.max(t,0),this.canvas.width),e=Math.min(Math.max(e,0),this.canvas.height);const[n,s]=this.currentPath.at(-1);let r;if(t===n&&e===s||this.currentPath.push([t,e]),1!==this.currentPath.length)r=(0,i.fitCurve)(this.currentPath,30,null);else{const n=[t,e];r=[[n,n.slice(),n.slice(),n]]}const a=l.#Fe(r);this.currentPath.length=0,this.addCommands({cmd:()=>{this.paths.push(r),this.bezierPath2D.push(a),this.rebuild()},undo:()=>{this.paths.pop(),this.bezierPath2D.pop(),0===this.paths.length?this.remove():(this.canvas||(this.#Ee(),this.#Ce()),this.#Se())},mustExec:!0})}#xe(){if(this.isEmpty())return void this.#De();this.#Te();const{canvas:t,ctx:e}=this;e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,t.width,t.height),this.#De();for(const t of this.bezierPath2D)e.stroke(t)}commit(){this.#pe||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),this.#pe=!0,this.div.classList.add("disabled"),this.#Se(!0),this.parent.addInkEditorIfNeeded(!0),this.parent.moveEditorInDOM(this),this.div.focus({preventScroll:!0}))}focusin(t){super.focusin(t),this.enableEditMode()}canvasPointerdown(t){0===t.button&&this.isInEditMode()&&!this.#pe&&(this.setInForeground(),"mouse"!==t.type&&this.div.focus(),t.stopPropagation(),this.canvas.addEventListener("pointerleave",this.#de),this.canvas.addEventListener("pointermove",this.#ce),this.#ke(t.offsetX,t.offsetY))}canvasPointermove(t){t.stopPropagation(),this.#Re(t.offsetX,t.offsetY)}canvasPointerup(t){0===t.button&&this.isInEditMode()&&0!==this.currentPath.length&&(t.stopPropagation(),this.#Ie(t),this.setInBackground())}canvasPointerleave(t){this.#Ie(t),this.setInBackground()}#Ie(t){this.#Me(t.offsetX,t.offsetY),this.canvas.removeEventListener("pointerleave",this.#de),this.canvas.removeEventListener("pointermove",this.#ce),this.addToAnnotationStorage()}#Ee(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",l._l10nPromise.get("editor_ink_canvas_aria_label").then((t=>this.canvas?.setAttribute("aria-label",t))),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")}#Ce(){this.#me=new ResizeObserver((t=>{const e=t[0].contentRect;e.width&&e.height&&this.setDimensions(e.width,e.height)})),this.#me.observe(this.div)}render(){if(this.div)return this.div;let t,e;this.width&&(t=this.x,e=this.y),super.render(),l._l10nPromise.get("editor_ink2_aria_label").then((t=>this.div?.setAttribute("aria-label",t)));const[n,s,r,i]=this.#Pe();if(this.setAt(n,s,0,0),this.setDims(r,i),this.#Ee(),this.width){const[n,s]=this.parentDimensions;this.setAt(t*n,e*s,this.width*n,this.height*s),this.#ge=!0,this.#we(),this.setDims(this.width*n,this.height*s),this.#xe(),this.#Oe(),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return this.#Ce(),this.div}#we(){if(!this.#ge)return;const[t,e]=this.parentDimensions;this.canvas.width=Math.ceil(this.width*t),this.canvas.height=Math.ceil(this.height*e),this.#De()}setDimensions(t,e){const n=Math.round(t),s=Math.round(e);if(this.#be===n&&this.#_e===s)return;this.#be=n,this.#_e=s,this.canvas.style.visibility="hidden",this.#ae&&Math.abs(this.#ae-t/e)>.01&&(e=Math.ceil(t/this.#ae),this.setDims(t,e));const[r,i]=this.parentDimensions;this.width=t/r,this.height=e/i,this.#pe&&this.#Le(t,e),this.#we(),this.#xe(),this.canvas.style.visibility="visible",this.fixDims()}#Le(t,e){const n=this.#Ne(),s=(t-n)/this.#le,r=(e-n)/this.#oe;this.scaleFactor=Math.min(s,r)}#De(){const t=this.#Ne()/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+t,this.translationY*this.scaleFactor+t)}static#Fe(t){const e=new Path2D;for(let n=0,s=t.length;n<s;n++){const[s,r,i,a]=t[n];0===n&&e.moveTo(...s),e.bezierCurveTo(r[0],r[1],i[0],i[1],a[0],a[1])}return e}#je(t,e,n,s){const r=[],i=this.thickness/2;let a,o;for(const l of this.paths){a=[],o=[];for(let r=0,c=l.length;r<c;r++){const[c,d,h,u]=l[r],p=t*(c[0]+e)+i,g=s-t*(c[1]+n)-i,f=t*(d[0]+e)+i,m=s-t*(d[1]+n)-i,b=t*(h[0]+e)+i,_=s-t*(h[1]+n)-i,v=t*(u[0]+e)+i,A=s-t*(u[1]+n)-i;0===r&&(a.push(p,g),o.push(p,g)),a.push(f,m,b,_,v,A),this.#Be(p,g,f,m,b,_,v,A,4,o)}r.push({bezier:a,points:o})}return r}#Be(t,e,n,s,r,i,a,o,l,c){if(this.#Ue(t,e,n,s,r,i,a,o))c.push(a,o);else{for(let d=1;d<l-1;d++){const h=d/l,u=1-h;let p=h*t+u*n,g=h*e+u*s,f=h*n+u*r,m=h*s+u*i;p=h*p+u*f,g=h*g+u*m,f=h*f+u*(h*r+u*a),m=h*m+u*(h*i+u*o),p=h*p+u*f,g=h*g+u*m,c.push(p,g)}c.push(a,o)}}#Ue(t,e,n,s,r,i,a,o){const l=(3*n-2*t-a)**2,c=(3*s-2*e-o)**2,d=(3*r-t-2*a)**2,h=(3*i-e-2*o)**2;return Math.max(l,d)+Math.max(c,h)<=10}#qe(){let t=1/0,e=-1/0,n=1/0,r=-1/0;for(const i of this.paths)for(const[a,o,l,c]of i){const i=s.Util.bezierBoundingBox(...a,...o,...l,...c);t=Math.min(t,i[0]),n=Math.min(n,i[1]),e=Math.max(e,i[2]),r=Math.max(r,i[3])}return[t,n,e,r]}#Ne(){return this.#pe?Math.ceil(this.thickness*this.parentScale):0}#Se(t=!1){if(this.isEmpty())return;if(!this.#pe)return void this.#xe();const e=this.#qe(),n=this.#Ne();this.#le=Math.max(o,e[2]-e[0]),this.#oe=Math.max(o,e[3]-e[1]);const s=Math.ceil(n+this.#le*this.scaleFactor),r=Math.ceil(n+this.#oe*this.scaleFactor),[i,a]=this.parentDimensions;this.width=s/i,this.height=r/a,this.#ae=s/r,this.#Oe();const l=this.translationX,c=this.translationY;this.translationX=-e[0],this.translationY=-e[1],this.#we(),this.#xe(),this.#be=s,this.#_e=r,this.setDims(s,r);const d=t?n/this.scaleFactor/2:0;this.translate(l-this.translationX-d,c-this.translationY-d)}#Oe(){const{style:t}=this.div;this.#ae>=1?(t.minHeight="16px",t.minWidth=`${Math.round(this.#ae*o)}px`):(t.minWidth="16px",t.minHeight=`${Math.round(o/this.#ae)}px`)}static deserialize(t,e,n){const r=super.deserialize(t,e,n);r.thickness=t.thickness,r.color=s.Util.makeHexColor(...t.color),r.opacity=t.opacity;const[i,a]=r.pageDimensions,l=r.width*i,c=r.height*a,d=r.parentScale,h=t.thickness/2;r.#ae=l/c,r.#pe=!0,r.#be=Math.round(l),r.#_e=Math.round(c);for(const{bezier:e}of t.paths){const t=[];r.paths.push(t);let n=d*(e[0]-h),s=d*(c-e[1]-h);for(let r=2,i=e.length;r<i;r+=6){const i=d*(e[r]-h),a=d*(c-e[r+1]-h),o=d*(e[r+2]-h),l=d*(c-e[r+3]-h),u=d*(e[r+4]-h),p=d*(c-e[r+5]-h);t.push([[n,s],[i,a],[o,l],[u,p]]),n=u,s=p}const i=this.#Fe(t);r.bezierPath2D.push(i)}const u=r.#qe();return r.#le=Math.max(o,u[2]-u[0]),r.#oe=Math.max(o,u[3]-u[1]),r.#Le(l,c),r}serialize(){if(this.isEmpty())return null;const t=this.getRect(0,0),e=this.rotation%180==0?t[3]-t[1]:t[2]-t[0],n=r.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:s.AnnotationEditorType.INK,color:n,thickness:this.thickness,opacity:this.opacity,paths:this.#je(this.scaleFactor/this.parentScale,this.translationX,this.translationY,e),pageIndex:this.pageIndex,rect:t,rotation:this.rotation}}}e.InkEditor=l},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.fitCurve=void 0;const s=n(31);e.fitCurve=s},t=>{function e(t,r,i,a,o){var c,d,h,u,p,g,f,m,b,_,v,A,y;if(2===t.length)return A=l.vectorLen(l.subtract(t[0],t[1]))/3,[c=[t[0],l.addArrays(t[0],l.mulItems(r,A)),l.addArrays(t[1],l.mulItems(i,A)),t[1]]];if(d=function(t){var e,n,s,r=[];return t.forEach(((t,i)=>{e=i?n+l.vectorLen(l.subtract(t,s)):0,r.push(e),n=e,s=t})),r=r.map((t=>t/n))}(t),[c,u,g]=n(t,d,d,r,i,o),0===u||u<a)return[c];if(u<a*a)for(h=d,p=u,f=g,y=0;y<20;y++){if(h=s(c,t,h),[c,u,g]=n(t,d,h,r,i,o),u<a)return[c];if(g===f){let t=u/p;if(t>.9999&&t<1.0001)break}p=u,f=g}return v=[],(m=l.subtract(t[g-1],t[g+1])).every((t=>0===t))&&(m=l.subtract(t[g-1],t[g]),[m[0],m[1]]=[-m[1],m[0]]),b=l.normalize(m),_=l.mulItems(b,-1),(v=v.concat(e(t.slice(0,g+1),r,b,a,o))).concat(e(t.slice(g),_,i,a,o))}function n(t,e,n,s,r,o){var d,h,u;return d=function(t,e,n,s){var r,i,a,o,d,h,u,p,g,f,m,b,_,v,A,y,S,x=t[0],E=t[t.length-1];for(r=[x,null,null,E],i=l.zeros_Xx2x2(e.length),_=0,v=e.length;_<v;_++)S=1-(y=e[_]),(a=i[_])[0]=l.mulItems(n,3*y*(S*S)),a[1]=l.mulItems(s,3*S*(y*y));for(o=[[0,0],[0,0]],d=[0,0],_=0,v=t.length;_<v;_++)y=e[_],a=i[_],o[0][0]+=l.dot(a[0],a[0]),o[0][1]+=l.dot(a[0],a[1]),o[1][0]+=l.dot(a[0],a[1]),o[1][1]+=l.dot(a[1],a[1]),A=l.subtract(t[_],c.q([x,x,E,E],y)),d[0]+=l.dot(a[0],A),d[1]+=l.dot(a[1],A);return h=o[0][0]*o[1][1]-o[1][0]*o[0][1],u=o[0][0]*d[1]-o[1][0]*d[0],p=d[0]*o[1][1]-d[1]*o[0][1],f=0===h?0:u/h,(g=0===h?0:p/h)<(m=1e-6*(b=l.vectorLen(l.subtract(x,E))))||f<m?(r[1]=l.addArrays(x,l.mulItems(n,b/3)),r[2]=l.addArrays(E,l.mulItems(s,b/3))):(r[1]=l.addArrays(x,l.mulItems(n,g)),r[2]=l.addArrays(E,l.mulItems(s,f))),r}(t,n,s,r),[h,u]=function(t,e,n){var s,r,o,d,h,u,p,g;r=0,o=Math.floor(t.length/2);const f=i(e,10);for(h=0,u=t.length;h<u;h++)p=t[h],g=a(0,n[h],f,10),(s=(d=l.subtract(c.q(e,g),p))[0]*d[0]+d[1]*d[1])>r&&(r=s,o=h);return[r,o]}(t,d,e),o&&o({bez:d,points:t,params:e,maxErr:h,maxPoint:u}),[d,h,u]}function s(t,e,n){return n.map(((n,s)=>r(t,e[s],n)))}function r(t,e,n){var s=l.subtract(c.q(t,n),e),r=c.qprime(t,n),i=l.mulMatrix(s,r),a=l.sum(l.squareItems(r))+2*l.mulMatrix(s,c.qprimeprime(t,n));return 0===a?n:n-i/a}var i=function(t,e){for(var n,s=[0],r=t[0],i=0,a=1;a<=e;a++)n=c.q(t,a/e),i+=l.vectorLen(l.subtract(n,r)),s.push(i),r=n;return s.map((t=>t/i))};function a(t,e,n,s){if(e<0)return 0;if(e>1)return 1;for(var r,i,a,o,l=1;l<=s;l++)if(e<=n[l]){a=(l-1)/s,i=l/s,o=(e-(r=n[l-1]))/(n[l]-r)*(i-a)+a;break}return o}function o(t,e){return l.normalize(l.subtract(t,e))}class l{static zeros_Xx2x2(t){for(var e=[];t--;)e.push([0,0]);return e}static mulItems(t,e){return t.map((t=>t*e))}static mulMatrix(t,e){return t.reduce(((t,n,s)=>t+n*e[s]),0)}static subtract(t,e){return t.map(((t,n)=>t-e[n]))}static addArrays(t,e){return t.map(((t,n)=>t+e[n]))}static addItems(t,e){return t.map((t=>t+e))}static sum(t){return t.reduce(((t,e)=>t+e))}static dot(t,e){return l.mulMatrix(t,e)}static vectorLen(t){return Math.hypot(...t)}static divItems(t,e){return t.map((t=>t/e))}static squareItems(t){return t.map((t=>t*t))}static normalize(t){return this.divItems(t,this.vectorLen(t))}}class c{static q(t,e){var n=1-e,s=l.mulItems(t[0],n*n*n),r=l.mulItems(t[1],3*n*n*e),i=l.mulItems(t[2],3*n*e*e),a=l.mulItems(t[3],e*e*e);return l.addArrays(l.addArrays(s,r),l.addArrays(i,a))}static qprime(t,e){var n=1-e,s=l.mulItems(l.subtract(t[1],t[0]),3*n*n),r=l.mulItems(l.subtract(t[2],t[1]),6*n*e),i=l.mulItems(l.subtract(t[3],t[2]),3*e*e);return l.addArrays(l.addArrays(s,r),i)}static qprimeprime(t,e){return l.addArrays(l.mulItems(l.addArrays(l.subtract(t[2],l.mulItems(t[1],2)),t[0]),6*(1-e)),l.mulItems(l.addArrays(l.subtract(t[3],l.mulItems(t[2],2)),t[1]),6*e))}}t.exports=function(t,n,s){if(!Array.isArray(t))throw new TypeError("First argument should be an array");if(t.forEach((e=>{if(!Array.isArray(e)||e.some((t=>"number"!=typeof t))||e.length!==t[0].length)throw Error("Each point should be an array of numbers. Each point should have the same amount of numbers.")})),(t=t.filter(((e,n)=>0===n||!e.every(((e,s)=>e===t[n-1][s]))))).length<2)return[];const r=t.length,i=o(t[1],t[0]),a=o(t[r-2],t[r-1]);return e(t,i,a,n,s)},t.exports.fitCubic=e,t.exports.createTangent=o},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AnnotationLayer=void 0;var s=n(1),r=n(6),i=n(3),a=n(33),o=n(34);const l=1e3,c=new WeakSet;function d(t){return{width:t[2]-t[0],height:t[3]-t[1]}}class h{static create(t){switch(t.data.annotationType){case s.AnnotationType.LINK:return new p(t);case s.AnnotationType.TEXT:return new g(t);case s.AnnotationType.WIDGET:switch(t.data.fieldType){case"Tx":return new m(t);case"Btn":return t.data.radioButton?new _(t):t.data.checkBox?new b(t):new v(t);case"Ch":return new A(t)}return new f(t);case s.AnnotationType.POPUP:return new y(t);case s.AnnotationType.FREETEXT:return new x(t);case s.AnnotationType.LINE:return new E(t);case s.AnnotationType.SQUARE:return new C(t);case s.AnnotationType.CIRCLE:return new w(t);case s.AnnotationType.POLYLINE:return new P(t);case s.AnnotationType.CARET:return new k(t);case s.AnnotationType.INK:return new R(t);case s.AnnotationType.POLYGON:return new T(t);case s.AnnotationType.HIGHLIGHT:return new M(t);case s.AnnotationType.UNDERLINE:return new F(t);case s.AnnotationType.SQUIGGLY:return new D(t);case s.AnnotationType.STRIKEOUT:return new I(t);case s.AnnotationType.STAMP:return new O(t);case s.AnnotationType.FILEATTACHMENT:return new L(t);default:return new u(t)}}}class u{constructor(t,{isRenderable:e=!1,ignoreBorder:n=!1,createQuadrilaterals:s=!1}={}){this.isRenderable=e,this.data=t.data,this.layer=t.layer,this.page=t.page,this.viewport=t.viewport,this.linkService=t.linkService,this.downloadManager=t.downloadManager,this.imageResourcesPath=t.imageResourcesPath,this.renderForms=t.renderForms,this.svgFactory=t.svgFactory,this.annotationStorage=t.annotationStorage,this.enableScripting=t.enableScripting,this.hasJSActions=t.hasJSActions,this._fieldObjects=t.fieldObjects,e&&(this.container=this._createContainer(n)),s&&(this.quadrilaterals=this._createQuadrilaterals(n))}_createContainer(t=!1){const{data:e,page:n,viewport:r}=this,i=document.createElement("section");i.setAttribute("data-annotation-id",e.id),e.noRotate&&i.classList.add("norotate");const{pageWidth:a,pageHeight:o,pageX:l,pageY:c}=r.rawDims,{width:h,height:u}=d(e.rect),p=s.Util.normalizeRect([e.rect[0],n.view[3]-e.rect[1]+n.view[1],e.rect[2],n.view[3]-e.rect[3]+n.view[1]]);if(!t&&e.borderStyle.width>0){i.style.borderWidth=`${e.borderStyle.width}px`;const t=e.borderStyle.horizontalCornerRadius,n=e.borderStyle.verticalCornerRadius;if(t>0||n>0){const e=`calc(${t}px * var(--scale-factor)) / calc(${n}px * var(--scale-factor))`;i.style.borderRadius=e}else if(this instanceof _){const t=`calc(${h}px * var(--scale-factor)) / calc(${u}px * var(--scale-factor))`;i.style.borderRadius=t}switch(e.borderStyle.style){case s.AnnotationBorderStyleType.SOLID:i.style.borderStyle="solid";break;case s.AnnotationBorderStyleType.DASHED:i.style.borderStyle="dashed";break;case s.AnnotationBorderStyleType.BEVELED:(0,s.warn)("Unimplemented border style: beveled");break;case s.AnnotationBorderStyleType.INSET:(0,s.warn)("Unimplemented border style: inset");break;case s.AnnotationBorderStyleType.UNDERLINE:i.style.borderBottomStyle="solid"}const r=e.borderColor||null;r?i.style.borderColor=s.Util.makeHexColor(0|r[0],0|r[1],0|r[2]):i.style.borderWidth=0}i.style.left=100*(p[0]-l)/a+"%",i.style.top=100*(p[1]-c)/o+"%";const{rotation:g}=e;return e.hasOwnCanvas||0===g?(i.style.width=100*h/a+"%",i.style.height=100*u/o+"%"):this.setRotation(g,i),i}setRotation(t,e=this.container){const{pageWidth:n,pageHeight:s}=this.viewport.rawDims,{width:r,height:i}=d(this.data.rect);let a,o;t%180==0?(a=100*r/n,o=100*i/s):(a=100*i/n,o=100*r/s),e.style.width=`${a}%`,e.style.height=`${o}%`,e.setAttribute("data-main-rotation",(360-t)%360)}get _commonActions(){const t=(t,e,n)=>{const s=n.detail[t];n.target.style[e]=a.ColorConverters[`${s[0]}_HTML`](s.slice(1))};return(0,s.shadow)(this,"_commonActions",{display:t=>{const e=t.detail.display%2==1;this.container.style.visibility=e?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:e,print:0===t.detail.display||3===t.detail.display})},print:t=>{this.annotationStorage.setValue(this.data.id,{print:t.detail.print})},hidden:t=>{this.container.style.visibility=t.detail.hidden?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{hidden:t.detail.hidden})},focus:t=>{setTimeout((()=>t.target.focus({preventScroll:!1})),0)},userName:t=>{t.target.title=t.detail.userName},readonly:t=>{t.detail.readonly?t.target.setAttribute("readonly",""):t.target.removeAttribute("readonly")},required:t=>{this._setRequired(t.target,t.detail.required)},bgColor:e=>{t("bgColor","backgroundColor",e)},fillColor:e=>{t("fillColor","backgroundColor",e)},fgColor:e=>{t("fgColor","color",e)},textColor:e=>{t("textColor","color",e)},borderColor:e=>{t("borderColor","borderColor",e)},strokeColor:e=>{t("strokeColor","borderColor",e)},rotation:t=>{const e=t.detail.rotation;this.setRotation(e),this.annotationStorage.setValue(this.data.id,{rotation:e})}})}_dispatchEventFromSandbox(t,e){const n=this._commonActions;for(const s of Object.keys(e.detail)){const r=t[s]||n[s];r?.(e)}}_setDefaultPropertiesFromJS(t){if(!this.enableScripting)return;const e=this.annotationStorage.getRawValue(this.data.id);if(!e)return;const n=this._commonActions;for(const[s,r]of Object.entries(e)){const i=n[s];i&&(i({detail:{[s]:r},target:t}),delete e[s])}}_createQuadrilaterals(t=!1){if(!this.data.quadPoints)return null;const e=[],n=this.data.rect;for(const n of this.data.quadPoints)this.data.rect=[n[2].x,n[2].y,n[1].x,n[1].y],e.push(this._createContainer(t));return this.data.rect=n,e}_createPopup(t,e){let n=this.container;this.quadrilaterals&&(t||=this.quadrilaterals,n=this.quadrilaterals[0]),t||((t=document.createElement("div")).classList.add("popupTriggerArea"),n.append(t));const s=new S({container:n,trigger:t,color:e.color,titleObj:e.titleObj,modificationDate:e.modificationDate,contentsObj:e.contentsObj,richText:e.richText,hideWrapper:!0}).render();s.style.left="100%",n.append(s)}_renderQuadrilaterals(t){for(const e of this.quadrilaterals)e.classList.add(t);return this.quadrilaterals}render(){(0,s.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(t,e=null){const n=[];if(this._fieldObjects){const r=this._fieldObjects[t];if(r)for(const{page:t,id:i,exportValues:a}of r){if(-1===t)continue;if(i===e)continue;const r="string"==typeof a?a:null,o=document.querySelector(`[data-element-id="${i}"]`);!o||c.has(o)?n.push({id:i,exportValue:r,domElement:o}):(0,s.warn)(`_getElementsByName - element not allowed: ${i}`)}return n}for(const s of document.getElementsByName(t)){const{exportValue:t}=s,r=s.getAttribute("data-element-id");r!==e&&c.has(s)&&n.push({id:r,exportValue:t,domElement:s})}return n}}class p extends u{constructor(t,e=null){super(t,{isRenderable:!0,ignoreBorder:!!e?.ignoreBorder,createQuadrilaterals:!0}),this.isTooltipOnly=t.data.isTooltipOnly}render(){const{data:t,linkService:e}=this,n=document.createElement("a");n.setAttribute("data-element-id",t.id);let s=!1;return t.url?(e.addLinkAttributes(n,t.url,t.newWindow),s=!0):t.action?(this._bindNamedAction(n,t.action),s=!0):t.attachment?(this._bindAttachment(n,t.attachment),s=!0):t.setOCGState?(this.#Ge(n,t.setOCGState),s=!0):t.dest?(this._bindLink(n,t.dest),s=!0):(t.actions&&(t.actions.Action||t.actions["Mouse Up"]||t.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(n,t),s=!0),t.resetForm?(this._bindResetFormAction(n,t.resetForm),s=!0):this.isTooltipOnly&&!s&&(this._bindLink(n,""),s=!0)),this.quadrilaterals?this._renderQuadrilaterals("linkAnnotation").map(((t,e)=>{const s=0===e?n:n.cloneNode();return t.append(s),t})):(this.container.classList.add("linkAnnotation"),s&&this.container.append(n),this.container)}#He(){this.container.setAttribute("data-internal-link","")}_bindLink(t,e){t.href=this.linkService.getDestinationHash(e),t.onclick=()=>(e&&this.linkService.goToDestination(e),!1),(e||""===e)&&this.#He()}_bindNamedAction(t,e){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.linkService.executeNamedAction(e),!1),this.#He()}_bindAttachment(t,e){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.downloadManager?.openOrDownloadData(this.container,e.content,e.filename),!1),this.#He()}#Ge(t,e){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.linkService.executeSetOCGState(e),!1),this.#He()}_bindJSAction(t,e){t.href=this.linkService.getAnchorUrl("");const n=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const s of Object.keys(e.actions)){const r=n.get(s);r&&(t[r]=()=>(this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e.id,name:s}}),!1))}t.onclick||(t.onclick=()=>!1),this.#He()}_bindResetFormAction(t,e){const n=t.onclick;if(n||(t.href=this.linkService.getAnchorUrl("")),this.#He(),!this._fieldObjects)return(0,s.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),void(n||(t.onclick=()=>!1));t.onclick=()=>{n?.();const{fields:t,refs:r,include:i}=e,a=[];if(0!==t.length||0!==r.length){const e=new Set(r);for(const n of t){const t=this._fieldObjects[n]||[];for(const{id:n}of t)e.add(n)}for(const t of Object.values(this._fieldObjects))for(const n of t)e.has(n.id)===i&&a.push(n)}else for(const t of Object.values(this._fieldObjects))a.push(...t);const o=this.annotationStorage,l=[];for(const t of a){const{id:e}=t;switch(l.push(e),t.type){case"text":{const n=t.defaultValue||"";o.setValue(e,{value:n});break}case"checkbox":case"radiobutton":{const n=t.defaultValue===t.exportValues;o.setValue(e,{value:n});break}case"combobox":case"listbox":{const n=t.defaultValue||"";o.setValue(e,{value:n});break}default:continue}const n=document.querySelector(`[data-element-id="${e}"]`);n&&(c.has(n)?n.dispatchEvent(new Event("resetform")):(0,s.warn)(`_bindResetFormAction - element not allowed: ${e}`))}return this.enableScripting&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:l,name:"ResetForm"}}),!1}}}class g extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str)})}render(){this.container.classList.add("textAnnotation");const t=document.createElement("img");return t.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",t.alt="[{{type}} Annotation]",t.dataset.l10nId="text_annotation_type",t.dataset.l10nArgs=JSON.stringify({type:this.data.name}),this.data.hasPopup||this._createPopup(t,this.data),this.container.append(t),this.container}}class f extends u{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}showElementAndHideCanvas(t){this.data.hasOwnCanvas&&("CANVAS"===t.previousSibling?.nodeName&&(t.previousSibling.hidden=!0),t.hidden=!1)}_getKeyModifier(t){const{isWin:e,isMac:n}=s.FeatureTest.platform;return e&&t.ctrlKey||n&&t.metaKey}_setEventListener(t,e,n,s){e.includes("mouse")?t.addEventListener(e,(t=>{this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:n,value:s(t),shift:t.shiftKey,modifier:this._getKeyModifier(t)}})})):t.addEventListener(e,(t=>{this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:n,value:s(t)}})}))}_setEventListeners(t,e,n){for(const[s,r]of e)("Action"===r||this.data.actions?.[r])&&this._setEventListener(t,s,r,n)}_setBackgroundColor(t){const e=this.data.backgroundColor||null;t.style.backgroundColor=null===e?"transparent":s.Util.makeHexColor(e[0],e[1],e[2])}_setTextStyle(t){const{fontColor:e}=this.data.defaultAppearanceData,n=this.data.defaultAppearanceData.fontSize||9,r=t.style;let i;const a=t=>Math.round(10*t)/10;if(this.data.multiLine){const t=Math.abs(this.data.rect[3]-this.data.rect[1]-2),e=t/(Math.round(t/(s.LINE_FACTOR*n))||1);i=Math.min(n,a(e/s.LINE_FACTOR))}else{const t=Math.abs(this.data.rect[3]-this.data.rect[1]-2);i=Math.min(n,a(t/s.LINE_FACTOR))}r.fontSize=`calc(${i}px * var(--scale-factor))`,r.color=s.Util.makeHexColor(e[0],e[1],e[2]),null!==this.data.textAlignment&&(r.textAlign=["left","center","right"][this.data.textAlignment])}_setRequired(t,e){e?t.setAttribute("required",!0):t.removeAttribute("required"),t.setAttribute("aria-required",e)}}class m extends f{constructor(t){super(t,{isRenderable:t.renderForms||!t.data.hasAppearance&&!!t.data.fieldValue})}setPropertyOnSiblings(t,e,n,s){const r=this.annotationStorage;for(const i of this._getElementsByName(t.name,t.id))i.domElement&&(i.domElement[e]=n),r.setValue(i.id,{[s]:n})}render(){const t=this.annotationStorage,e=this.data.id;this.container.classList.add("textWidgetAnnotation");let n=null;if(this.renderForms){const s=t.getValue(e,{value:this.data.fieldValue});let r=s.formattedValue||s.value||"";const i=t.getValue(e,{charLimit:this.data.maxLen}).charLimit;i&&r.length>i&&(r=r.slice(0,i));const a={userValue:r,formattedValue:null,lastCommittedValue:null,commitKey:1};this.data.multiLine?(n=document.createElement("textarea"),n.textContent=r,this.data.doNotScroll&&(n.style.overflowY="hidden")):(n=document.createElement("input"),n.type="text",n.setAttribute("value",r),this.data.doNotScroll&&(n.style.overflowX="hidden")),this.data.hasOwnCanvas&&(n.hidden=!0),c.add(n),n.setAttribute("data-element-id",e),n.disabled=this.data.readOnly,n.name=this.data.fieldName,n.tabIndex=l,this._setRequired(n,this.data.required),i&&(n.maxLength=i),n.addEventListener("input",(s=>{t.setValue(e,{value:s.target.value}),this.setPropertyOnSiblings(n,"value",s.target.value,"value")})),n.addEventListener("resetform",(t=>{const e=this.data.defaultFieldValue??"";n.value=a.userValue=e,a.formattedValue=null}));let o=t=>{const{formattedValue:e}=a;null!=e&&(t.target.value=e),t.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){n.addEventListener("focus",(t=>{const{target:e}=t;a.userValue&&(e.value=a.userValue),a.lastCommittedValue=e.value,a.commitKey=1})),n.addEventListener("updatefromsandbox",(n=>{this.showElementAndHideCanvas(n.target);const s={value(n){a.userValue=n.detail.value??"",t.setValue(e,{value:a.userValue.toString()}),n.target.value=a.userValue},formattedValue(n){const{formattedValue:s}=n.detail;a.formattedValue=s,null!=s&&n.target!==document.activeElement&&(n.target.value=s),t.setValue(e,{formattedValue:s})},selRange(t){t.target.setSelectionRange(...t.detail.selRange)},charLimit:n=>{const{charLimit:s}=n.detail,{target:r}=n;if(0===s)return void r.removeAttribute("maxLength");r.setAttribute("maxLength",s);let i=a.userValue;!i||i.length<=s||(i=i.slice(0,s),r.value=a.userValue=i,t.setValue(e,{value:i}),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:i,willCommit:!0,commitKey:1,selStart:r.selectionStart,selEnd:r.selectionEnd}}))}};this._dispatchEventFromSandbox(s,n)})),n.addEventListener("keydown",(t=>{a.commitKey=1;let n=-1;if("Escape"===t.key?n=0:"Enter"!==t.key||this.data.multiLine?"Tab"===t.key&&(a.commitKey=3):n=2,-1===n)return;const{value:s}=t.target;a.lastCommittedValue!==s&&(a.lastCommittedValue=s,a.userValue=s,this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:s,willCommit:!0,commitKey:n,selStart:t.target.selectionStart,selEnd:t.target.selectionEnd}}))}));const s=o;o=null,n.addEventListener("blur",(t=>{if(!t.relatedTarget)return;const{value:n}=t.target;a.userValue=n,a.lastCommittedValue!==n&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:n,willCommit:!0,commitKey:a.commitKey,selStart:t.target.selectionStart,selEnd:t.target.selectionEnd}}),s(t)})),this.data.actions?.Keystroke&&n.addEventListener("beforeinput",(t=>{a.lastCommittedValue=null;const{data:n,target:s}=t,{value:r,selectionStart:i,selectionEnd:o}=s;let l=i,c=o;switch(t.inputType){case"deleteWordBackward":{const t=r.substring(0,i).match(/\w*[^\w]*$/);t&&(l-=t[0].length);break}case"deleteWordForward":{const t=r.substring(i).match(/^[^\w]*\w*/);t&&(c+=t[0].length);break}case"deleteContentBackward":i===o&&(l-=1);break;case"deleteContentForward":i===o&&(c+=1)}t.preventDefault(),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:r,change:n||"",willCommit:!1,selStart:l,selEnd:c}})})),this._setEventListeners(n,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(t=>t.target.value))}if(o&&n.addEventListener("blur",o),this.data.comb){const t=(this.data.rect[2]-this.data.rect[0])/i;n.classList.add("comb"),n.style.letterSpacing=`calc(${t}px * var(--scale-factor) - 1ch)`}}else n=document.createElement("div"),n.textContent=this.data.fieldValue,n.style.verticalAlign="middle",n.style.display="table-cell";return this._setTextStyle(n),this._setBackgroundColor(n),this._setDefaultPropertiesFromJS(n),this.container.append(n),this.container}}class b extends f{constructor(t){super(t,{isRenderable:t.renderForms})}render(){const t=this.annotationStorage,e=this.data,n=e.id;let s=t.getValue(n,{value:e.exportValue===e.fieldValue}).value;"string"==typeof s&&(s="Off"!==s,t.setValue(n,{value:s})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const r=document.createElement("input");return c.add(r),r.setAttribute("data-element-id",n),r.disabled=e.readOnly,this._setRequired(r,this.data.required),r.type="checkbox",r.name=e.fieldName,s&&r.setAttribute("checked",!0),r.setAttribute("exportValue",e.exportValue),r.tabIndex=l,r.addEventListener("change",(s=>{const{name:r,checked:i}=s.target;for(const s of this._getElementsByName(r,n)){const n=i&&s.exportValue===e.exportValue;s.domElement&&(s.domElement.checked=n),t.setValue(s.id,{value:n})}t.setValue(n,{value:i})})),r.addEventListener("resetform",(t=>{const n=e.defaultFieldValue||"Off";t.target.checked=n===e.exportValue})),this.enableScripting&&this.hasJSActions&&(r.addEventListener("updatefromsandbox",(e=>{const s={value(e){e.target.checked="Off"!==e.detail.value,t.setValue(n,{value:e.target.checked})}};this._dispatchEventFromSandbox(s,e)})),this._setEventListeners(r,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(t=>t.target.checked))),this._setBackgroundColor(r),this._setDefaultPropertiesFromJS(r),this.container.append(r),this.container}}class _ extends f{constructor(t){super(t,{isRenderable:t.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const t=this.annotationStorage,e=this.data,n=e.id;let s=t.getValue(n,{value:e.fieldValue===e.buttonValue}).value;"string"==typeof s&&(s=s!==e.buttonValue,t.setValue(n,{value:s}));const r=document.createElement("input");if(c.add(r),r.setAttribute("data-element-id",n),r.disabled=e.readOnly,this._setRequired(r,this.data.required),r.type="radio",r.name=e.fieldName,s&&r.setAttribute("checked",!0),r.tabIndex=l,r.addEventListener("change",(e=>{const{name:s,checked:r}=e.target;for(const e of this._getElementsByName(s,n))t.setValue(e.id,{value:!1});t.setValue(n,{value:r})})),r.addEventListener("resetform",(t=>{const n=e.defaultFieldValue;t.target.checked=null!=n&&n===e.buttonValue})),this.enableScripting&&this.hasJSActions){const s=e.buttonValue;r.addEventListener("updatefromsandbox",(e=>{const r={value:e=>{const r=s===e.detail.value;for(const s of this._getElementsByName(e.target.name)){const e=r&&s.id===n;s.domElement&&(s.domElement.checked=e),t.setValue(s.id,{value:e})}}};this._dispatchEventFromSandbox(r,e)})),this._setEventListeners(r,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(t=>t.target.checked))}return this._setBackgroundColor(r),this._setDefaultPropertiesFromJS(r),this.container.append(r),this.container}}class v extends p{constructor(t){super(t,{ignoreBorder:t.data.hasAppearance})}render(){const t=super.render();t.classList.add("buttonWidgetAnnotation","pushButton"),this.data.alternativeText&&(t.title=this.data.alternativeText);const e=t.lastChild;return this.enableScripting&&this.hasJSActions&&e&&(this._setDefaultPropertiesFromJS(e),e.addEventListener("updatefromsandbox",(t=>{this._dispatchEventFromSandbox({},t)}))),t}}class A extends f{constructor(t){super(t,{isRenderable:t.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const t=this.annotationStorage,e=this.data.id,n=t.getValue(e,{value:this.data.fieldValue}),s=document.createElement("select");c.add(s),s.setAttribute("data-element-id",e),s.disabled=this.data.readOnly,this._setRequired(s,this.data.required),s.name=this.data.fieldName,s.tabIndex=l;let r=this.data.combo&&this.data.options.length>0;this.data.combo||(s.size=this.data.options.length,this.data.multiSelect&&(s.multiple=!0)),s.addEventListener("resetform",(t=>{const e=this.data.defaultFieldValue;for(const t of s.options)t.selected=t.value===e}));for(const t of this.data.options){const e=document.createElement("option");e.textContent=t.displayValue,e.value=t.exportValue,n.value.includes(t.exportValue)&&(e.setAttribute("selected",!0),r=!1),s.append(e)}let i=null;if(r){const t=document.createElement("option");t.value=" ",t.setAttribute("hidden",!0),t.setAttribute("selected",!0),s.prepend(t),i=()=>{t.remove(),s.removeEventListener("input",i),i=null},s.addEventListener("input",i)}const a=t=>{const e=t?"value":"textContent",{options:n,multiple:r}=s;return r?Array.prototype.filter.call(n,(t=>t.selected)).map((t=>t[e])):-1===n.selectedIndex?null:n[n.selectedIndex][e]};let o=a(!1);const d=t=>{const e=t.target.options;return Array.prototype.map.call(e,(t=>({displayValue:t.textContent,exportValue:t.value})))};return this.enableScripting&&this.hasJSActions?(s.addEventListener("updatefromsandbox",(n=>{const r={value(n){i?.();const r=n.detail.value,l=new Set(Array.isArray(r)?r:[r]);for(const t of s.options)t.selected=l.has(t.value);t.setValue(e,{value:a(!0)}),o=a(!1)},multipleSelection(t){s.multiple=!0},remove(n){const r=s.options,i=n.detail.remove;r[i].selected=!1,s.remove(i),r.length>0&&-1===Array.prototype.findIndex.call(r,(t=>t.selected))&&(r[0].selected=!0),t.setValue(e,{value:a(!0),items:d(n)}),o=a(!1)},clear(n){for(;0!==s.length;)s.remove(0);t.setValue(e,{value:null,items:[]}),o=a(!1)},insert(n){const{index:r,displayValue:i,exportValue:l}=n.detail.insert,c=s.children[r],h=document.createElement("option");h.textContent=i,h.value=l,c?c.before(h):s.append(h),t.setValue(e,{value:a(!0),items:d(n)}),o=a(!1)},items(n){const{items:r}=n.detail;for(;0!==s.length;)s.remove(0);for(const t of r){const{displayValue:e,exportValue:n}=t,r=document.createElement("option");r.textContent=e,r.value=n,s.append(r)}s.options.length>0&&(s.options[0].selected=!0),t.setValue(e,{value:a(!0),items:d(n)}),o=a(!1)},indices(n){const s=new Set(n.detail.indices);for(const t of n.target.options)t.selected=s.has(t.index);t.setValue(e,{value:a(!0)}),o=a(!1)},editable(t){t.target.disabled=!t.detail.editable}};this._dispatchEventFromSandbox(r,n)})),s.addEventListener("input",(n=>{const s=a(!0);t.setValue(e,{value:s}),n.preventDefault(),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:o,changeEx:s,willCommit:!1,commitKey:1,keyDown:!1}})})),this._setEventListeners(s,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],(t=>t.target.value))):s.addEventListener("input",(function(n){t.setValue(e,{value:a(!0)})})),this.data.combo&&this._setTextStyle(s),this._setBackgroundColor(s),this._setDefaultPropertiesFromJS(s),this.container.append(s),this.container}}class y extends u{static IGNORE_TYPES=new Set(["Line","Square","Circle","PolyLine","Polygon","Ink"]);constructor(t){const{data:e}=t;super(t,{isRenderable:!y.IGNORE_TYPES.has(e.parentType)&&!!(e.titleObj?.str||e.contentsObj?.str||e.richText?.str)})}render(){this.container.classList.add("popupAnnotation");const t=this.layer.querySelectorAll(`[data-annotation-id="${this.data.parentId}"]`);if(0===t.length)return this.container;const e=new S({container:this.container,trigger:Array.from(t),color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText}),n=this.page,r=s.Util.normalizeRect([this.data.parentRect[0],n.view[3]-this.data.parentRect[1]+n.view[1],this.data.parentRect[2],n.view[3]-this.data.parentRect[3]+n.view[1]]),i=r[0]+this.data.parentRect[2]-this.data.parentRect[0],a=r[1],{pageWidth:o,pageHeight:l,pageX:c,pageY:d}=this.viewport.rawDims;return this.container.style.left=100*(i-c)/o+"%",this.container.style.top=100*(a-d)/l+"%",this.container.append(e.render()),this.container}}class S{constructor(t){this.container=t.container,this.trigger=t.trigger,this.color=t.color,this.titleObj=t.titleObj,this.modificationDate=t.modificationDate,this.contentsObj=t.contentsObj,this.richText=t.richText,this.hideWrapper=t.hideWrapper||!1,this.pinned=!1}render(){const t=document.createElement("div");t.classList.add("popupWrapper"),this.hideElement=this.hideWrapper?t:this.container,this.hideElement.hidden=!0;const e=document.createElement("div");e.classList.add("popup");const n=this.color;if(n){const t=.7*(255-n[0])+n[0],r=.7*(255-n[1])+n[1],i=.7*(255-n[2])+n[2];e.style.backgroundColor=s.Util.makeHexColor(0|t,0|r,0|i)}const i=document.createElement("h1");i.dir=this.titleObj.dir,i.textContent=this.titleObj.str,e.append(i);const a=r.PDFDateString.toDateObject(this.modificationDate);if(a){const t=document.createElement("span");t.classList.add("popupDate"),t.textContent="{{date}}, {{time}}",t.dataset.l10nId="annotation_date_string",t.dataset.l10nArgs=JSON.stringify({date:a.toLocaleDateString(),time:a.toLocaleTimeString()}),e.append(t)}if(!this.richText?.str||this.contentsObj?.str&&this.contentsObj.str!==this.richText.str){const t=this._formatContents(this.contentsObj);e.append(t)}else o.XfaLayer.render({xfaHtml:this.richText.html,intent:"richText",div:e}),e.lastChild.classList.add("richText","popupContent");Array.isArray(this.trigger)||(this.trigger=[this.trigger]);for(const t of this.trigger)t.addEventListener("click",this._toggle.bind(this)),t.addEventListener("mouseover",this._show.bind(this,!1)),t.addEventListener("mouseout",this._hide.bind(this,!1));return e.addEventListener("click",this._hide.bind(this,!0)),t.append(e),t}_formatContents({str:t,dir:e}){const n=document.createElement("p");n.classList.add("popupContent"),n.dir=e;const s=t.split(/(?:\r\n?|\n)/);for(let t=0,e=s.length;t<e;++t){const r=s[t];n.append(document.createTextNode(r)),t<e-1&&n.append(document.createElement("br"))}return n}_toggle(){this.pinned?this._hide(!0):this._show(!0)}_show(t=!1){t&&(this.pinned=!0),this.hideElement.hidden&&(this.hideElement.hidden=!1,this.container.style.zIndex=parseInt(this.container.style.zIndex)+1e3)}_hide(t=!0){t&&(this.pinned=!1),this.hideElement.hidden||this.pinned||(this.hideElement.hidden=!0,this.container.style.zIndex=parseInt(this.container.style.zIndex)-1e3)}}class x extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0}),this.textContent=t.data.textContent}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const t=document.createElement("div");t.classList.add("annotationTextContent"),t.setAttribute("role","comment");for(const e of this.textContent){const n=document.createElement("span");n.textContent=e,t.append(n)}this.container.append(t)}return this.data.hasPopup||this._createPopup(null,this.data),this.container}}class E extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0})}render(){this.container.classList.add("lineAnnotation");const t=this.data,{width:e,height:n}=d(t.rect),s=this.svgFactory.create(e,n,!0),r=this.svgFactory.createElement("svg:line");return r.setAttribute("x1",t.rect[2]-t.lineCoordinates[0]),r.setAttribute("y1",t.rect[3]-t.lineCoordinates[1]),r.setAttribute("x2",t.rect[2]-t.lineCoordinates[2]),r.setAttribute("y2",t.rect[3]-t.lineCoordinates[3]),r.setAttribute("stroke-width",t.borderStyle.width||1),r.setAttribute("stroke","transparent"),r.setAttribute("fill","transparent"),s.append(r),this.container.append(s),this._createPopup(r,t),this.container}}class C extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0})}render(){this.container.classList.add("squareAnnotation");const t=this.data,{width:e,height:n}=d(t.rect),s=this.svgFactory.create(e,n,!0),r=t.borderStyle.width,i=this.svgFactory.createElement("svg:rect");return i.setAttribute("x",r/2),i.setAttribute("y",r/2),i.setAttribute("width",e-r),i.setAttribute("height",n-r),i.setAttribute("stroke-width",r||1),i.setAttribute("stroke","transparent"),i.setAttribute("fill","transparent"),s.append(i),this.container.append(s),this._createPopup(i,t),this.container}}class w extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0})}render(){this.container.classList.add("circleAnnotation");const t=this.data,{width:e,height:n}=d(t.rect),s=this.svgFactory.create(e,n,!0),r=t.borderStyle.width,i=this.svgFactory.createElement("svg:ellipse");return i.setAttribute("cx",e/2),i.setAttribute("cy",n/2),i.setAttribute("rx",e/2-r/2),i.setAttribute("ry",n/2-r/2),i.setAttribute("stroke-width",r||1),i.setAttribute("stroke","transparent"),i.setAttribute("fill","transparent"),s.append(i),this.container.append(s),this._createPopup(i,t),this.container}}class P extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0}),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const t=this.data,{width:e,height:n}=d(t.rect),s=this.svgFactory.create(e,n,!0);let r=[];for(const e of t.vertices){const n=e.x-t.rect[0],s=t.rect[3]-e.y;r.push(n+","+s)}r=r.join(" ");const i=this.svgFactory.createElement(this.svgElementName);return i.setAttribute("points",r),i.setAttribute("stroke-width",t.borderStyle.width||1),i.setAttribute("stroke","transparent"),i.setAttribute("fill","transparent"),s.append(i),this.container.append(s),this._createPopup(i,t),this.container}}class T extends P{constructor(t){super(t),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class k extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),this.data.hasPopup||this._createPopup(null,this.data),this.container}}class R extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0}),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const t=this.data,{width:e,height:n}=d(t.rect),s=this.svgFactory.create(e,n,!0);for(const e of t.inkLists){let n=[];for(const s of e){const e=s.x-t.rect[0],r=t.rect[3]-s.y;n.push(`${e},${r}`)}n=n.join(" ");const r=this.svgFactory.createElement(this.svgElementName);r.setAttribute("points",n),r.setAttribute("stroke-width",t.borderStyle.width||1),r.setAttribute("stroke","transparent"),r.setAttribute("fill","transparent"),this._createPopup(r,t),s.append(r)}return this.container.append(s),this.container}}class M extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("highlightAnnotation"):(this.container.classList.add("highlightAnnotation"),this.container)}}class F extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("underlineAnnotation"):(this.container.classList.add("underlineAnnotation"),this.container)}}class D extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("squigglyAnnotation"):(this.container.classList.add("squigglyAnnotation"),this.container)}}class I extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0,createQuadrilaterals:!0})}render(){return this.data.hasPopup||this._createPopup(null,this.data),this.quadrilaterals?this._renderQuadrilaterals("strikeoutAnnotation"):(this.container.classList.add("strikeoutAnnotation"),this.container)}}class O extends u{constructor(t){super(t,{isRenderable:!!(t.data.hasPopup||t.data.titleObj?.str||t.data.contentsObj?.str||t.data.richText?.str),ignoreBorder:!0})}render(){return this.container.classList.add("stampAnnotation"),this.data.hasPopup||this._createPopup(null,this.data),this.container}}class L extends u{constructor(t){super(t,{isRenderable:!0});const{filename:e,content:n}=this.data.file;this.filename=(0,r.getFilenameFromUrl)(e,!0),this.content=n,this.linkService.eventBus?.dispatch("fileattachmentannotation",{source:this,filename:e,content:n})}render(){let t;return this.container.classList.add("fileAttachmentAnnotation"),this.data.hasAppearance?t=document.createElement("div"):(t=document.createElement("img"),t.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(this.data.name)?"paperclip":"pushpin"}.svg`),t.classList.add("popupTriggerArea"),t.addEventListener("dblclick",this._download.bind(this)),!this.data.hasPopup&&(this.data.titleObj?.str||this.data.contentsObj?.str||this.data.richText)&&this._createPopup(t,this.data),this.container.append(t),this.container}_download(){this.downloadManager?.openOrDownloadData(this.container,this.content,this.filename)}}class N{static#We(t,e,n,s){const i=t.firstChild||t;i.id=`${r.AnnotationPrefix}${e}`,n.append(t),s?.moveElementInDOM(n,t,i,!1)}static render(t){const{annotations:e,div:n,viewport:a,accessibilityManager:o}=t;(0,r.setLayerDimensions)(n,a);const l={data:null,layer:n,page:t.page,viewport:a,linkService:t.linkService,downloadManager:t.downloadManager,imageResourcesPath:t.imageResourcesPath||"",renderForms:!1!==t.renderForms,svgFactory:new r.DOMSVGFactory,annotationStorage:t.annotationStorage||new i.AnnotationStorage,enableScripting:!0===t.enableScripting,hasJSActions:t.hasJSActions,fieldObjects:t.fieldObjects};let c=0;for(const t of e){if(t.noHTML)continue;if(t.annotationType!==s.AnnotationType.POPUP){const{width:e,height:n}=d(t.rect);if(e<=0||n<=0)continue}l.data=t;const e=h.create(l);if(!e.isRenderable)continue;const r=e.render();if(t.hidden&&(r.style.visibility="hidden"),Array.isArray(r))for(const e of r)e.style.zIndex=c++,N.#We(e,t.id,n,o);else r.style.zIndex=c++,e instanceof y?n.prepend(r):N.#We(r,t.id,n,o)}this.#Ve(n,t.annotationCanvasMap)}static update(t){const{annotationCanvasMap:e,div:n,viewport:s}=t;(0,r.setLayerDimensions)(n,{rotation:s.rotation}),this.#Ve(n,e),n.hidden=!1}static#Ve(t,e){if(e){for(const[n,s]of e){const e=t.querySelector(`[data-annotation-id="${n}"]`);if(!e)continue;const{firstChild:r}=e;r?"CANVAS"===r.nodeName?r.replaceWith(s):r.before(s):e.append(s)}e.clear()}}}e.AnnotationLayer=N},(t,e)=>{function n(t){return Math.floor(255*Math.max(0,Math.min(1,t))).toString(16).padStart(2,"0")}Object.defineProperty(e,"__esModule",{value:!0}),e.ColorConverters=void 0,e.ColorConverters=class{static CMYK_G([t,e,n,s]){return["G",1-Math.min(1,.3*t+.59*n+.11*e+s)]}static G_CMYK([t]){return["CMYK",0,0,0,1-t]}static G_RGB([t]){return["RGB",t,t,t]}static G_HTML([t]){const e=n(t);return`#${e}${e}${e}`}static RGB_G([t,e,n]){return["G",.3*t+.59*e+.11*n]}static RGB_HTML([t,e,s]){return`#${n(t)}${n(e)}${n(s)}`}static T_HTML(){return"#00000000"}static CMYK_RGB([t,e,n,s]){return["RGB",1-Math.min(1,t+s),1-Math.min(1,n+s),1-Math.min(1,e+s)]}static CMYK_HTML(t){const e=this.CMYK_RGB(t).slice(1);return this.RGB_HTML(e)}static RGB_CMYK([t,e,n]){const s=1-t,r=1-e,i=1-n;return["CMYK",s,r,i,Math.min(s,r,i)]}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.XfaLayer=void 0;var s=n(19);e.XfaLayer=class{static setupStorage(t,e,n,s,r){const i=s.getValue(e,{value:null});switch(n.name){case"textarea":if(null!==i.value&&(t.textContent=i.value),"print"===r)break;t.addEventListener("input",(t=>{s.setValue(e,{value:t.target.value})}));break;case"input":if("radio"===n.attributes.type||"checkbox"===n.attributes.type){if(i.value===n.attributes.xfaOn?t.setAttribute("checked",!0):i.value===n.attributes.xfaOff&&t.removeAttribute("checked"),"print"===r)break;t.addEventListener("change",(t=>{s.setValue(e,{value:t.target.checked?t.target.getAttribute("xfaOn"):t.target.getAttribute("xfaOff")})}))}else{if(null!==i.value&&t.setAttribute("value",i.value),"print"===r)break;t.addEventListener("input",(t=>{s.setValue(e,{value:t.target.value})}))}break;case"select":if(null!==i.value)for(const t of n.children)t.attributes.value===i.value&&(t.attributes.selected=!0);t.addEventListener("input",(t=>{const n=t.target.options,r=-1===n.selectedIndex?"":n[n.selectedIndex].value;s.setValue(e,{value:r})}))}}static setAttributes({html:t,element:e,storage:n=null,intent:s,linkService:r}){const{attributes:i}=e,a=t instanceof HTMLAnchorElement;"radio"===i.type&&(i.name=`${i.name}-${s}`);for(const[e,n]of Object.entries(i))if(null!=n)switch(e){case"class":n.length&&t.setAttribute(e,n.join(" "));break;case"dataId":break;case"id":t.setAttribute("data-element-id",n);break;case"style":Object.assign(t.style,n);break;case"textContent":t.textContent=n;break;default:(!a||"href"!==e&&"newWindow"!==e)&&t.setAttribute(e,n)}a&&r.addLinkAttributes(t,i.href,i.newWindow),n&&i.dataId&&this.setupStorage(t,i.dataId,e,n)}static render(t){const e=t.annotationStorage,n=t.linkService,r=t.xfaHtml,i=t.intent||"display",a=document.createElement(r.name);r.attributes&&this.setAttributes({html:a,element:r,intent:i,linkService:n});const o=[[r,-1,a]],l=t.div;if(l.append(a),t.viewport){const e=`matrix(${t.viewport.transform.join(",")})`;l.style.transform=e}"richText"!==i&&l.setAttribute("class","xfaLayer xfaFont");const c=[];for(;o.length>0;){const[t,r,a]=o.at(-1);if(r+1===t.children.length){o.pop();continue}const l=t.children[++o.at(-1)[1]];if(null===l)continue;const{name:d}=l;if("#text"===d){const t=document.createTextNode(l.value);c.push(t),a.append(t);continue}let h;if(h=l?.attributes?.xmlns?document.createElementNS(l.attributes.xmlns,d):document.createElement(d),a.append(h),l.attributes&&this.setAttributes({html:h,element:l,storage:e,intent:i,linkService:n}),l.children&&l.children.length>0)o.push([l,-1,h]);else if(l.value){const t=document.createTextNode(l.value);s.XfaText.shouldBuildText(d)&&c.push(t),h.append(t)}}for(const t of l.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))t.setAttribute("readOnly",!0);return{textDivs:c}}static update(t){const e=`matrix(${t.viewport.transform.join(",")})`;t.div.style.transform=e,t.div.hidden=!1}}},(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SVGGraphics=void 0;var s=n(6),r=n(1),i=n(10);let a=class{constructor(){(0,r.unreachable)("Not implemented: SVGGraphics")}};e.SVGGraphics=a;{const o={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},l="http://www.w3.org/XML/1998/namespace",c="http://www.w3.org/1999/xlink",d=["butt","round","square"],h=["miter","round","bevel"],u=function(t,e="",n=!1){if(URL.createObjectURL&&"undefined"!=typeof Blob&&!n)return URL.createObjectURL(new Blob([t],{type:e}));const s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let r=`data:${e};base64,`;for(let e=0,n=t.length;e<n;e+=3){const i=255&t[e],a=255&t[e+1],o=255&t[e+2];r+=s[i>>2]+s[(3&i)<<4|a>>4]+s[e+1<n?(15&a)<<2|o>>6:64]+s[e+2<n?63&o:64]}return r},p=function(){const t=new Uint8Array([137,80,78,71,13,10,26,10]),e=new Int32Array(256);for(let t=0;t<256;t++){let n=t;for(let t=0;t<8;t++)n=1&n?3988292384^n>>1&2147483647:n>>1&2147483647;e[t]=n}function n(t,n,s,r){let i=r;const a=n.length;s[i]=a>>24&255,s[i+1]=a>>16&255,s[i+2]=a>>8&255,s[i+3]=255&a,i+=4,s[i]=255&t.charCodeAt(0),s[i+1]=255&t.charCodeAt(1),s[i+2]=255&t.charCodeAt(2),s[i+3]=255&t.charCodeAt(3),i+=4,s.set(n,i),i+=n.length;const o=function(t,n,s){let r=-1;for(let i=n;i<s;i++){const n=255&(r^t[i]);r=r>>>8^e[n]}return-1^r}(s,r+4,i);s[i]=o>>24&255,s[i+1]=o>>16&255,s[i+2]=o>>8&255,s[i+3]=255&o}function s(t){let e=t.length;const n=65535,s=Math.ceil(e/n),r=new Uint8Array(2+e+5*s+4);let i=0;r[i++]=120,r[i++]=156;let a=0;for(;e>n;)r[i++]=0,r[i++]=255,r[i++]=255,r[i++]=0,r[i++]=0,r.set(t.subarray(a,a+n),i),i+=n,a+=n,e-=n;r[i++]=1,r[i++]=255&e,r[i++]=e>>8&255,r[i++]=255&~e,r[i++]=(65535&~e)>>8&255,r.set(t.subarray(a),i),i+=t.length-a;const o=function(t,e,n){let s=1,r=0;for(let e=0;e<n;++e)s=(s+(255&t[e]))%65521,r=(r+s)%65521;return r<<16|s}(t,0,t.length);return r[i++]=o>>24&255,r[i++]=o>>16&255,r[i++]=o>>8&255,r[i++]=255&o,r}return function(e,a,o){return function(e,a,o,l){const c=e.width,d=e.height;let h,p,g;const f=e.data;switch(a){case r.ImageKind.GRAYSCALE_1BPP:p=0,h=1,g=c+7>>3;break;case r.ImageKind.RGB_24BPP:p=2,h=8,g=3*c;break;case r.ImageKind.RGBA_32BPP:p=6,h=8,g=4*c;break;default:throw new Error("invalid format")}const m=new Uint8Array((1+g)*d);let b=0,_=0;for(let t=0;t<d;++t)m[b++]=0,m.set(f.subarray(_,_+g),b),_+=g,b+=g;if(a===r.ImageKind.GRAYSCALE_1BPP&&l){b=0;for(let t=0;t<d;t++){b++;for(let t=0;t<g;t++)m[b++]^=255}}const v=new Uint8Array([c>>24&255,c>>16&255,c>>8&255,255&c,d>>24&255,d>>16&255,d>>8&255,255&d,h,p,0,0,0]),A=function(t){if(!i.isNodeJS)return s(t);try{let e;e=parseInt(process.versions.node)>=8?t:Buffer.from(t);const n=__webpack_require__(1797).deflateSync(e,{level:9});return n instanceof Uint8Array?n:new Uint8Array(n)}catch(t){(0,r.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+t)}return s(t)}(m),y=t.length+36+v.length+A.length,S=new Uint8Array(y);let x=0;return S.set(t,x),x+=t.length,n("IHDR",v,S,x),x+=12+v.length,n("IDATA",A,S,x),x+=12+A.length,n("IEND",new Uint8Array(0),S,x),u(S,"image/png",o)}(e,void 0===e.kind?r.ImageKind.GRAYSCALE_1BPP:e.kind,a,o)}}();class g{constructor(){this.fontSizeScale=1,this.fontWeight=o.fontWeight,this.fontSize=0,this.textMatrix=r.IDENTITY_MATRIX,this.fontMatrix=r.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=r.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=o.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(t,e){this.x=t,this.y=e}}function f(t){let e=[];const n=[];for(const s of t)"save"!==s.fn?"restore"===s.fn?e=n.pop():e.push(s):(e.push({fnId:92,fn:"group",items:[]}),n.push(e),e=e.at(-1).items);return e}function m(t){if(Number.isInteger(t))return t.toString();const e=t.toFixed(10);let n=e.length-1;if("0"!==e[n])return e;do{n--}while("0"===e[n]);return e.substring(0,"."===e[n]?n:n+1)}function b(t){if(0===t[4]&&0===t[5]){if(0===t[1]&&0===t[2])return 1===t[0]&&1===t[3]?"":`scale(${m(t[0])} ${m(t[3])})`;if(t[0]===t[3]&&t[1]===-t[2])return`rotate(${m(180*Math.acos(t[0])/Math.PI)})`}else if(1===t[0]&&0===t[1]&&0===t[2]&&1===t[3])return`translate(${m(t[4])} ${m(t[5])})`;return`matrix(${m(t[0])} ${m(t[1])} ${m(t[2])} ${m(t[3])} ${m(t[4])} ${m(t[5])})`}let _=0,v=0,A=0;e.SVGGraphics=a=class{constructor(t,e,n=!1){(0,s.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."),this.svgFactory=new s.DOMSVGFactory,this.current=new g,this.transformMatrix=r.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=t,this.objs=e,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!n,this._operatorIdMapping=[];for(const t in r.OPS)this._operatorIdMapping[r.OPS[t]]=t}getObject(t,e=null){return"string"==typeof t?t.startsWith("g_")?this.commonObjs.get(t):this.objs.get(t):e}save(){this.transformStack.push(this.transformMatrix);const t=this.current;this.extraStack.push(t),this.current=t.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(t){this.save(),this.executeOpTree(t),this.restore()}loadDependencies(t){const e=t.fnArray,n=t.argsArray;for(let t=0,s=e.length;t<s;t++)if(e[t]===r.OPS.dependency)for(const e of n[t]){const t=e.startsWith("g_")?this.commonObjs:this.objs,n=new Promise((n=>{t.get(e,n)}));this.current.dependencies.push(n)}return Promise.all(this.current.dependencies)}transform(t,e,n,s,i,a){const o=[t,e,n,s,i,a];this.transformMatrix=r.Util.transform(this.transformMatrix,o),this.tgrp=null}getSVG(t,e){this.viewport=e;const n=this._initialize(e);return this.loadDependencies(t).then((()=>(this.transformMatrix=r.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(t)),n)))}convertOpList(t){const e=this._operatorIdMapping,n=t.argsArray,s=t.fnArray,r=[];for(let t=0,i=s.length;t<i;t++){const i=s[t];r.push({fnId:i,fn:e[i],args:n[t]})}return f(r)}executeOpTree(t){for(const e of t){const t=e.fn,n=e.fnId,s=e.args;switch(0|n){case r.OPS.beginText:this.beginText();break;case r.OPS.dependency:break;case r.OPS.setLeading:this.setLeading(s);break;case r.OPS.setLeadingMoveText:this.setLeadingMoveText(s[0],s[1]);break;case r.OPS.setFont:this.setFont(s);break;case r.OPS.showText:case r.OPS.showSpacedText:this.showText(s[0]);break;case r.OPS.endText:this.endText();break;case r.OPS.moveText:this.moveText(s[0],s[1]);break;case r.OPS.setCharSpacing:this.setCharSpacing(s[0]);break;case r.OPS.setWordSpacing:this.setWordSpacing(s[0]);break;case r.OPS.setHScale:this.setHScale(s[0]);break;case r.OPS.setTextMatrix:this.setTextMatrix(s[0],s[1],s[2],s[3],s[4],s[5]);break;case r.OPS.setTextRise:this.setTextRise(s[0]);break;case r.OPS.setTextRenderingMode:this.setTextRenderingMode(s[0]);break;case r.OPS.setLineWidth:this.setLineWidth(s[0]);break;case r.OPS.setLineJoin:this.setLineJoin(s[0]);break;case r.OPS.setLineCap:this.setLineCap(s[0]);break;case r.OPS.setMiterLimit:this.setMiterLimit(s[0]);break;case r.OPS.setFillRGBColor:this.setFillRGBColor(s[0],s[1],s[2]);break;case r.OPS.setStrokeRGBColor:this.setStrokeRGBColor(s[0],s[1],s[2]);break;case r.OPS.setStrokeColorN:this.setStrokeColorN(s);break;case r.OPS.setFillColorN:this.setFillColorN(s);break;case r.OPS.shadingFill:this.shadingFill(s[0]);break;case r.OPS.setDash:this.setDash(s[0],s[1]);break;case r.OPS.setRenderingIntent:this.setRenderingIntent(s[0]);break;case r.OPS.setFlatness:this.setFlatness(s[0]);break;case r.OPS.setGState:this.setGState(s[0]);break;case r.OPS.fill:this.fill();break;case r.OPS.eoFill:this.eoFill();break;case r.OPS.stroke:this.stroke();break;case r.OPS.fillStroke:this.fillStroke();break;case r.OPS.eoFillStroke:this.eoFillStroke();break;case r.OPS.clip:this.clip("nonzero");break;case r.OPS.eoClip:this.clip("evenodd");break;case r.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case r.OPS.paintImageXObject:this.paintImageXObject(s[0]);break;case r.OPS.paintInlineImageXObject:this.paintInlineImageXObject(s[0]);break;case r.OPS.paintImageMaskXObject:this.paintImageMaskXObject(s[0]);break;case r.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(s[0],s[1]);break;case r.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case r.OPS.closePath:this.closePath();break;case r.OPS.closeStroke:this.closeStroke();break;case r.OPS.closeFillStroke:this.closeFillStroke();break;case r.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case r.OPS.nextLine:this.nextLine();break;case r.OPS.transform:this.transform(s[0],s[1],s[2],s[3],s[4],s[5]);break;case r.OPS.constructPath:this.constructPath(s[0],s[1]);break;case r.OPS.endPath:this.endPath();break;case 92:this.group(e.items);break;default:(0,r.warn)(`Unimplemented operator ${t}`)}}}setWordSpacing(t){this.current.wordSpacing=t}setCharSpacing(t){this.current.charSpacing=t}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(t,e,n,s,r,i){const a=this.current;a.textMatrix=a.lineMatrix=[t,e,n,s,r,i],a.textMatrixScale=Math.hypot(t,e),a.x=a.lineX=0,a.y=a.lineY=0,a.xcoords=[],a.ycoords=[],a.tspan=this.svgFactory.createElement("svg:tspan"),a.tspan.setAttributeNS(null,"font-family",a.fontFamily),a.tspan.setAttributeNS(null,"font-size",`${m(a.fontSize)}px`),a.tspan.setAttributeNS(null,"y",m(-a.y)),a.txtElement=this.svgFactory.createElement("svg:text"),a.txtElement.append(a.tspan)}beginText(){const t=this.current;t.x=t.lineX=0,t.y=t.lineY=0,t.textMatrix=r.IDENTITY_MATRIX,t.lineMatrix=r.IDENTITY_MATRIX,t.textMatrixScale=1,t.tspan=this.svgFactory.createElement("svg:tspan"),t.txtElement=this.svgFactory.createElement("svg:text"),t.txtgrp=this.svgFactory.createElement("svg:g"),t.xcoords=[],t.ycoords=[]}moveText(t,e){const n=this.current;n.x=n.lineX+=t,n.y=n.lineY+=e,n.xcoords=[],n.ycoords=[],n.tspan=this.svgFactory.createElement("svg:tspan"),n.tspan.setAttributeNS(null,"font-family",n.fontFamily),n.tspan.setAttributeNS(null,"font-size",`${m(n.fontSize)}px`),n.tspan.setAttributeNS(null,"y",m(-n.y))}showText(t){const e=this.current,n=e.font,s=e.fontSize;if(0===s)return;const i=e.fontSizeScale,a=e.charSpacing,c=e.wordSpacing,d=e.fontDirection,h=e.textHScale*d,u=n.vertical,p=u?1:-1,g=n.defaultVMetrics,f=s*e.fontMatrix[0];let _=0;for(const r of t){if(null===r){_+=d*c;continue}if("number"==typeof r){_+=p*r*s/1e3;continue}const t=(r.isSpace?c:0)+a,o=r.fontChar;let l,h,m,b=r.width;if(u){let t;const e=r.vmetric||g;t=r.vmetric?e[1]:.5*b,t=-t*f;const n=e[2]*f;b=e?-e[0]:b,l=t/i,h=(_+n)/i}else l=_/i,h=0;(r.isInFont||n.missingFile)&&(e.xcoords.push(e.x+l),u&&e.ycoords.push(-e.y+h),e.tspan.textContent+=o),m=u?b*f-t*d:b*f+t*d,_+=m}e.tspan.setAttributeNS(null,"x",e.xcoords.map(m).join(" ")),u?e.tspan.setAttributeNS(null,"y",e.ycoords.map(m).join(" ")):e.tspan.setAttributeNS(null,"y",m(-e.y)),u?e.y-=_:e.x+=_*h,e.tspan.setAttributeNS(null,"font-family",e.fontFamily),e.tspan.setAttributeNS(null,"font-size",`${m(e.fontSize)}px`),e.fontStyle!==o.fontStyle&&e.tspan.setAttributeNS(null,"font-style",e.fontStyle),e.fontWeight!==o.fontWeight&&e.tspan.setAttributeNS(null,"font-weight",e.fontWeight);const v=e.textRenderingMode&r.TextRenderingMode.FILL_STROKE_MASK;if(v===r.TextRenderingMode.FILL||v===r.TextRenderingMode.FILL_STROKE?(e.fillColor!==o.fillColor&&e.tspan.setAttributeNS(null,"fill",e.fillColor),e.fillAlpha<1&&e.tspan.setAttributeNS(null,"fill-opacity",e.fillAlpha)):e.textRenderingMode===r.TextRenderingMode.ADD_TO_PATH?e.tspan.setAttributeNS(null,"fill","transparent"):e.tspan.setAttributeNS(null,"fill","none"),v===r.TextRenderingMode.STROKE||v===r.TextRenderingMode.FILL_STROKE){const t=1/(e.textMatrixScale||1);this._setStrokeAttributes(e.tspan,t)}let A=e.textMatrix;0!==e.textRise&&(A=A.slice(),A[5]+=e.textRise),e.txtElement.setAttributeNS(null,"transform",`${b(A)} scale(${m(h)}, -1)`),e.txtElement.setAttributeNS(l,"xml:space","preserve"),e.txtElement.append(e.tspan),e.txtgrp.append(e.txtElement),this._ensureTransformGroup().append(e.txtElement)}setLeadingMoveText(t,e){this.setLeading(-e),this.moveText(t,e)}addFontStyle(t){if(!t.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.append(this.cssStyle));const e=u(t.data,t.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${t.loadedName}"; src: url(${e}); }\n`}setFont(t){const e=this.current,n=this.commonObjs.get(t[0]);let s=t[1];e.font=n,!this.embedFonts||n.missingFile||this.embeddedFonts[n.loadedName]||(this.addFontStyle(n),this.embeddedFonts[n.loadedName]=n),e.fontMatrix=n.fontMatrix||r.FONT_IDENTITY_MATRIX;let i="normal";n.black?i="900":n.bold&&(i="bold");const a=n.italic?"italic":"normal";s<0?(s=-s,e.fontDirection=-1):e.fontDirection=1,e.fontSize=s,e.fontFamily=n.loadedName,e.fontWeight=i,e.fontStyle=a,e.tspan=this.svgFactory.createElement("svg:tspan"),e.tspan.setAttributeNS(null,"y",m(-e.y)),e.xcoords=[],e.ycoords=[]}endText(){const t=this.current;t.textRenderingMode&r.TextRenderingMode.ADD_TO_PATH_FLAG&&t.txtElement?.hasChildNodes()&&(t.element=t.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(t){t>0&&(this.current.lineWidth=t)}setLineCap(t){this.current.lineCap=d[t]}setLineJoin(t){this.current.lineJoin=h[t]}setMiterLimit(t){this.current.miterLimit=t}setStrokeAlpha(t){this.current.strokeAlpha=t}setStrokeRGBColor(t,e,n){this.current.strokeColor=r.Util.makeHexColor(t,e,n)}setFillAlpha(t){this.current.fillAlpha=t}setFillRGBColor(t,e,n){this.current.fillColor=r.Util.makeHexColor(t,e,n),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(t){this.current.strokeColor=this._makeColorN_Pattern(t)}setFillColorN(t){this.current.fillColor=this._makeColorN_Pattern(t)}shadingFill(t){const e=this.viewport.width,n=this.viewport.height,s=r.Util.inverseTransform(this.transformMatrix),i=r.Util.applyTransform([0,0],s),a=r.Util.applyTransform([0,n],s),o=r.Util.applyTransform([e,0],s),l=r.Util.applyTransform([e,n],s),c=Math.min(i[0],a[0],o[0],l[0]),d=Math.min(i[1],a[1],o[1],l[1]),h=Math.max(i[0],a[0],o[0],l[0]),u=Math.max(i[1],a[1],o[1],l[1]),p=this.svgFactory.createElement("svg:rect");p.setAttributeNS(null,"x",c),p.setAttributeNS(null,"y",d),p.setAttributeNS(null,"width",h-c),p.setAttributeNS(null,"height",u-d),p.setAttributeNS(null,"fill",this._makeShadingPattern(t)),this.current.fillAlpha<1&&p.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().append(p)}_makeColorN_Pattern(t){return"TilingPattern"===t[0]?this._makeTilingPattern(t):this._makeShadingPattern(t)}_makeTilingPattern(t){const e=t[1],n=t[2],s=t[3]||r.IDENTITY_MATRIX,[i,a,o,l]=t[4],c=t[5],d=t[6],h=t[7],u="shading"+A++,[p,g,f,m]=r.Util.normalizeRect([...r.Util.applyTransform([i,a],s),...r.Util.applyTransform([o,l],s)]),[b,_]=r.Util.singularValueDecompose2dScale(s),v=c*b,y=d*_,S=this.svgFactory.createElement("svg:pattern");S.setAttributeNS(null,"id",u),S.setAttributeNS(null,"patternUnits","userSpaceOnUse"),S.setAttributeNS(null,"width",v),S.setAttributeNS(null,"height",y),S.setAttributeNS(null,"x",`${p}`),S.setAttributeNS(null,"y",`${g}`);const x=this.svg,E=this.transformMatrix,C=this.current.fillColor,w=this.current.strokeColor,P=this.svgFactory.create(f-p,m-g);if(this.svg=P,this.transformMatrix=s,2===h){const t=r.Util.makeHexColor(...e);this.current.fillColor=t,this.current.strokeColor=t}return this.executeOpTree(this.convertOpList(n)),this.svg=x,this.transformMatrix=E,this.current.fillColor=C,this.current.strokeColor=w,S.append(P.childNodes[0]),this.defs.append(S),`url(#${u})`}_makeShadingPattern(t){switch("string"==typeof t&&(t=this.objs.get(t)),t[0]){case"RadialAxial":const e="shading"+A++,n=t[3];let s;switch(t[1]){case"axial":const n=t[4],r=t[5];s=this.svgFactory.createElement("svg:linearGradient"),s.setAttributeNS(null,"id",e),s.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),s.setAttributeNS(null,"x1",n[0]),s.setAttributeNS(null,"y1",n[1]),s.setAttributeNS(null,"x2",r[0]),s.setAttributeNS(null,"y2",r[1]);break;case"radial":const i=t[4],a=t[5],o=t[6],l=t[7];s=this.svgFactory.createElement("svg:radialGradient"),s.setAttributeNS(null,"id",e),s.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),s.setAttributeNS(null,"cx",a[0]),s.setAttributeNS(null,"cy",a[1]),s.setAttributeNS(null,"r",l),s.setAttributeNS(null,"fx",i[0]),s.setAttributeNS(null,"fy",i[1]),s.setAttributeNS(null,"fr",o);break;default:throw new Error(`Unknown RadialAxial type: ${t[1]}`)}for(const t of n){const e=this.svgFactory.createElement("svg:stop");e.setAttributeNS(null,"offset",t[0]),e.setAttributeNS(null,"stop-color",t[1]),s.append(e)}return this.defs.append(s),`url(#${e})`;case"Mesh":return(0,r.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${t[0]}`)}}setDash(t,e){this.current.dashArray=t,this.current.dashPhase=e}constructPath(t,e){const n=this.current;let s=n.x,i=n.y,a=[],o=0;for(const n of t)switch(0|n){case r.OPS.rectangle:s=e[o++],i=e[o++];const t=s+e[o++],n=i+e[o++];a.push("M",m(s),m(i),"L",m(t),m(i),"L",m(t),m(n),"L",m(s),m(n),"Z");break;case r.OPS.moveTo:s=e[o++],i=e[o++],a.push("M",m(s),m(i));break;case r.OPS.lineTo:s=e[o++],i=e[o++],a.push("L",m(s),m(i));break;case r.OPS.curveTo:s=e[o+4],i=e[o+5],a.push("C",m(e[o]),m(e[o+1]),m(e[o+2]),m(e[o+3]),m(s),m(i)),o+=6;break;case r.OPS.curveTo2:a.push("C",m(s),m(i),m(e[o]),m(e[o+1]),m(e[o+2]),m(e[o+3])),s=e[o+2],i=e[o+3],o+=4;break;case r.OPS.curveTo3:s=e[o+2],i=e[o+3],a.push("C",m(e[o]),m(e[o+1]),m(s),m(i),m(s),m(i)),o+=4;break;case r.OPS.closePath:a.push("Z")}a=a.join(" "),n.path&&t.length>0&&t[0]!==r.OPS.rectangle&&t[0]!==r.OPS.moveTo?a=n.path.getAttributeNS(null,"d")+a:(n.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().append(n.path)),n.path.setAttributeNS(null,"d",a),n.path.setAttributeNS(null,"fill","none"),n.element=n.path,n.setCurrentPoint(s,i)}endPath(){const t=this.current;if(t.path=null,!this.pendingClip)return;if(!t.element)return void(this.pendingClip=null);const e="clippath"+_++,n=this.svgFactory.createElement("svg:clipPath");n.setAttributeNS(null,"id",e),n.setAttributeNS(null,"transform",b(this.transformMatrix));const s=t.element.cloneNode(!0);if("evenodd"===this.pendingClip?s.setAttributeNS(null,"clip-rule","evenodd"):s.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,n.append(s),this.defs.append(n),t.activeClipUrl){t.clipGroup=null;for(const t of this.extraStack)t.clipGroup=null;n.setAttributeNS(null,"clip-path",t.activeClipUrl)}t.activeClipUrl=`url(#${e})`,this.tgrp=null}clip(t){this.pendingClip=t}closePath(){const t=this.current;if(t.path){const e=`${t.path.getAttributeNS(null,"d")}Z`;t.path.setAttributeNS(null,"d",e)}}setLeading(t){this.current.leading=-t}setTextRise(t){this.current.textRise=t}setTextRenderingMode(t){this.current.textRenderingMode=t}setHScale(t){this.current.textHScale=t/100}setRenderingIntent(t){}setFlatness(t){}setGState(t){for(const[e,n]of t)switch(e){case"LW":this.setLineWidth(n);break;case"LC":this.setLineCap(n);break;case"LJ":this.setLineJoin(n);break;case"ML":this.setMiterLimit(n);break;case"D":this.setDash(n[0],n[1]);break;case"RI":this.setRenderingIntent(n);break;case"FL":this.setFlatness(n);break;case"Font":this.setFont(n);break;case"CA":this.setStrokeAlpha(n);break;case"ca":this.setFillAlpha(n);break;default:(0,r.warn)(`Unimplemented graphic state operator ${e}`)}}fill(){const t=this.current;t.element&&(t.element.setAttributeNS(null,"fill",t.fillColor),t.element.setAttributeNS(null,"fill-opacity",t.fillAlpha),this.endPath())}stroke(){const t=this.current;t.element&&(this._setStrokeAttributes(t.element),t.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(t,e=1){const n=this.current;let s=n.dashArray;1!==e&&s.length>0&&(s=s.map((function(t){return e*t}))),t.setAttributeNS(null,"stroke",n.strokeColor),t.setAttributeNS(null,"stroke-opacity",n.strokeAlpha),t.setAttributeNS(null,"stroke-miterlimit",m(n.miterLimit)),t.setAttributeNS(null,"stroke-linecap",n.lineCap),t.setAttributeNS(null,"stroke-linejoin",n.lineJoin),t.setAttributeNS(null,"stroke-width",m(e*n.lineWidth)+"px"),t.setAttributeNS(null,"stroke-dasharray",s.map(m).join(" ")),t.setAttributeNS(null,"stroke-dashoffset",m(e*n.dashPhase)+"px")}eoFill(){this.current.element?.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){this.current.element?.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const t=this.svgFactory.createElement("svg:rect");t.setAttributeNS(null,"x","0"),t.setAttributeNS(null,"y","0"),t.setAttributeNS(null,"width","1px"),t.setAttributeNS(null,"height","1px"),t.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().append(t)}paintImageXObject(t){const e=this.getObject(t);e?this.paintInlineImageXObject(e):(0,r.warn)(`Dependent image with object ID ${t} is not ready yet`)}paintInlineImageXObject(t,e){const n=t.width,s=t.height,r=p(t,this.forceDataSchema,!!e),i=this.svgFactory.createElement("svg:rect");i.setAttributeNS(null,"x","0"),i.setAttributeNS(null,"y","0"),i.setAttributeNS(null,"width",m(n)),i.setAttributeNS(null,"height",m(s)),this.current.element=i,this.clip("nonzero");const a=this.svgFactory.createElement("svg:image");a.setAttributeNS(c,"xlink:href",r),a.setAttributeNS(null,"x","0"),a.setAttributeNS(null,"y",m(-s)),a.setAttributeNS(null,"width",m(n)+"px"),a.setAttributeNS(null,"height",m(s)+"px"),a.setAttributeNS(null,"transform",`scale(${m(1/n)} ${m(-1/s)})`),e?e.append(a):this._ensureTransformGroup().append(a)}paintImageMaskXObject(t){const e=this.getObject(t.data,t);if(e.bitmap)return void(0,r.warn)("paintImageMaskXObject: ImageBitmap support is not implemented, ensure that the `isOffscreenCanvasSupported` API parameter is disabled.");const n=this.current,s=e.width,i=e.height,a=n.fillColor;n.maskId="mask"+v++;const o=this.svgFactory.createElement("svg:mask");o.setAttributeNS(null,"id",n.maskId);const l=this.svgFactory.createElement("svg:rect");l.setAttributeNS(null,"x","0"),l.setAttributeNS(null,"y","0"),l.setAttributeNS(null,"width",m(s)),l.setAttributeNS(null,"height",m(i)),l.setAttributeNS(null,"fill",a),l.setAttributeNS(null,"mask",`url(#${n.maskId})`),this.defs.append(o),this._ensureTransformGroup().append(l),this.paintInlineImageXObject(e,o)}paintFormXObjectBegin(t,e){if(Array.isArray(t)&&6===t.length&&this.transform(t[0],t[1],t[2],t[3],t[4],t[5]),e){const t=e[2]-e[0],n=e[3]-e[1],s=this.svgFactory.createElement("svg:rect");s.setAttributeNS(null,"x",e[0]),s.setAttributeNS(null,"y",e[1]),s.setAttributeNS(null,"width",m(t)),s.setAttributeNS(null,"height",m(n)),this.current.element=s,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(t){const e=this.svgFactory.create(t.width,t.height),n=this.svgFactory.createElement("svg:defs");e.append(n),this.defs=n;const s=this.svgFactory.createElement("svg:g");return s.setAttributeNS(null,"transform",b(t.transform)),e.append(s),this.svg=s,e}_ensureClipGroup(){if(!this.current.clipGroup){const t=this.svgFactory.createElement("svg:g");t.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.append(t),this.current.clipGroup=t}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",b(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().append(this.tgrp):this.svg.append(this.tgrp)),this.tgrp}}}}],__webpack_module_cache__={};function __w_pdfjs_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t](n,n.exports,__w_pdfjs_require__),n.exports}var __nested_webpack_exports__={};return(()=>{var t=__nested_webpack_exports__;Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"AbortException",{enumerable:!0,get:function(){return e.AbortException}}),Object.defineProperty(t,"AnnotationEditorLayer",{enumerable:!0,get:function(){return i.AnnotationEditorLayer}}),Object.defineProperty(t,"AnnotationEditorParamsType",{enumerable:!0,get:function(){return e.AnnotationEditorParamsType}}),Object.defineProperty(t,"AnnotationEditorType",{enumerable:!0,get:function(){return e.AnnotationEditorType}}),Object.defineProperty(t,"AnnotationEditorUIManager",{enumerable:!0,get:function(){return a.AnnotationEditorUIManager}}),Object.defineProperty(t,"AnnotationLayer",{enumerable:!0,get:function(){return o.AnnotationLayer}}),Object.defineProperty(t,"AnnotationMode",{enumerable:!0,get:function(){return e.AnnotationMode}}),Object.defineProperty(t,"CMapCompressionType",{enumerable:!0,get:function(){return e.CMapCompressionType}}),Object.defineProperty(t,"FeatureTest",{enumerable:!0,get:function(){return e.FeatureTest}}),Object.defineProperty(t,"GlobalWorkerOptions",{enumerable:!0,get:function(){return l.GlobalWorkerOptions}}),Object.defineProperty(t,"InvalidPDFException",{enumerable:!0,get:function(){return e.InvalidPDFException}}),Object.defineProperty(t,"MissingPDFException",{enumerable:!0,get:function(){return e.MissingPDFException}}),Object.defineProperty(t,"OPS",{enumerable:!0,get:function(){return e.OPS}}),Object.defineProperty(t,"PDFDataRangeTransport",{enumerable:!0,get:function(){return n.PDFDataRangeTransport}}),Object.defineProperty(t,"PDFDateString",{enumerable:!0,get:function(){return s.PDFDateString}}),Object.defineProperty(t,"PDFWorker",{enumerable:!0,get:function(){return n.PDFWorker}}),Object.defineProperty(t,"PasswordResponses",{enumerable:!0,get:function(){return e.PasswordResponses}}),Object.defineProperty(t,"PermissionFlag",{enumerable:!0,get:function(){return e.PermissionFlag}}),Object.defineProperty(t,"PixelsPerInch",{enumerable:!0,get:function(){return s.PixelsPerInch}}),Object.defineProperty(t,"PromiseCapability",{enumerable:!0,get:function(){return e.PromiseCapability}}),Object.defineProperty(t,"RenderingCancelledException",{enumerable:!0,get:function(){return s.RenderingCancelledException}}),Object.defineProperty(t,"SVGGraphics",{enumerable:!0,get:function(){return c.SVGGraphics}}),Object.defineProperty(t,"UnexpectedResponseException",{enumerable:!0,get:function(){return e.UnexpectedResponseException}}),Object.defineProperty(t,"Util",{enumerable:!0,get:function(){return e.Util}}),Object.defineProperty(t,"VerbosityLevel",{enumerable:!0,get:function(){return e.VerbosityLevel}}),Object.defineProperty(t,"XfaLayer",{enumerable:!0,get:function(){return d.XfaLayer}}),Object.defineProperty(t,"build",{enumerable:!0,get:function(){return n.build}}),Object.defineProperty(t,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return e.createValidAbsoluteUrl}}),Object.defineProperty(t,"getDocument",{enumerable:!0,get:function(){return n.getDocument}}),Object.defineProperty(t,"getFilenameFromUrl",{enumerable:!0,get:function(){return s.getFilenameFromUrl}}),Object.defineProperty(t,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return s.getPdfFilenameFromUrl}}),Object.defineProperty(t,"getXfaPageViewport",{enumerable:!0,get:function(){return s.getXfaPageViewport}}),Object.defineProperty(t,"isDataScheme",{enumerable:!0,get:function(){return s.isDataScheme}}),Object.defineProperty(t,"isPdfFile",{enumerable:!0,get:function(){return s.isPdfFile}}),Object.defineProperty(t,"loadScript",{enumerable:!0,get:function(){return s.loadScript}}),Object.defineProperty(t,"normalizeUnicode",{enumerable:!0,get:function(){return e.normalizeUnicode}}),Object.defineProperty(t,"renderTextLayer",{enumerable:!0,get:function(){return r.renderTextLayer}}),Object.defineProperty(t,"setLayerDimensions",{enumerable:!0,get:function(){return s.setLayerDimensions}}),Object.defineProperty(t,"shadow",{enumerable:!0,get:function(){return e.shadow}}),Object.defineProperty(t,"updateTextLayer",{enumerable:!0,get:function(){return r.updateTextLayer}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return n.version}});var e=__w_pdfjs_require__(1),n=__w_pdfjs_require__(2),s=__w_pdfjs_require__(6),r=__w_pdfjs_require__(26),i=__w_pdfjs_require__(27),a=__w_pdfjs_require__(5),o=__w_pdfjs_require__(32),l=__w_pdfjs_require__(14),c=__w_pdfjs_require__(35),d=__w_pdfjs_require__(34)})(),__nested_webpack_exports__})(),module.exports=factory()},4049:(t,e,n)=>{"use strict";var s=n(6257);function r(){}function i(){}i.resetWarningCache=r,t.exports=function(){function t(t,e,n,r,i,a){if(a!==s){var o=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw o.name="Invariant Violation",o}}function e(){return t}t.isRequired=t;var n={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:i,resetWarningCache:r};return n.PropTypes=n,n}},507:(t,e,n)=>{t.exports=n(4049)()},6257:t=>{"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},7083:(t,e,n)=>{"use strict";n.d(e,{Z:()=>C});var s=n(959),r=n(507),i=n.n(r),a=n(8225),o=n(4951),l=n(5341),c=n(8624),d=n(6619),h=n(5215),u=n(9886),p=n(6341),g=n(7085);const f=1,m=2;var b=n(7681),_=n(500),v=n(2554),A=function(t,e){var n={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.indexOf(s)<0&&(n[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(t);r<s.length;r++)e.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(t,s[r])&&(n[s[r]]=t[s[r]])}return n};const{PDFDataRangeTransport:y}=h,S=(t,e)=>{switch(e){case f:t(prompt("Enter the password to open this PDF file."));break;case m:t(prompt("Invalid password. Please try again."))}},x=(0,s.forwardRef)((function(t,e){var{children:n,className:r,error:i="Failed to load PDF file.",externalLinkRel:f,externalLinkTarget:m,file:v,inputRef:x,imageResourcesPath:E,loading:C="Loading PDF…",noData:w="No PDF file specified.",onItemClick:P,onLoadError:T,onLoadProgress:k,onLoadSuccess:R,onPassword:M=S,onSourceError:F,onSourceSuccess:D,options:I,renderMode:O,rotate:L}=t,N=A(t,["children","className","error","externalLinkRel","externalLinkTarget","file","inputRef","imageResourcesPath","loading","noData","onItemClick","onLoadError","onLoadProgress","onLoadSuccess","onPassword","onSourceError","onSourceSuccess","options","renderMode","rotate"]);const[j,B]=(0,_.Z)(),{value:U,error:q}=j,[G,H]=(0,_.Z)(),{value:W,error:V}=G,z=(0,s.useRef)(new g.Z),$=(0,s.useRef)([]),X=(0,s.useRef)({scrollPageIntoView:t=>{const{dest:e,pageNumber:n,pageIndex:s=n-1}=t;if(P)return void P({dest:e,pageIndex:s,pageNumber:n});const r=$.current[s];r?r.scrollIntoView():(0,d.Z)(!1,`An internal link leading to page ${n} was clicked, but neither <Document> was provided with onItemClick nor it was able to find the page within itself. Either provide onItemClick to <Document> and handle navigating by yourself or ensure that all pages are rendered within <Document>.`)}});(0,s.useImperativeHandle)(e,(()=>({linkService:z,pages:$,viewer:X})),[]),(0,s.useEffect)((function(){B({type:"RESET"})}),[v,B]);const K=(0,s.useCallback)((()=>{return t=this,e=void 0,s=function*(){if(!v)return null;if("string"==typeof v)return(0,b.gJ)(v)?{data:(0,b.us)(v)}:((0,b.tN)(),{url:v});if(v instanceof y)return{range:v};if((0,b.eP)(v))return{data:v};if(b.jU&&(0,b.Lj)(v))return{data:yield(0,b.eR)(v)};if((0,c.Z)("object"==typeof v,"Invalid parameter in file, need either Uint8Array, string or a parameter object"),(0,c.Z)("data"in v||"range"in v||"url"in v,"Invalid parameter object: need either .data, .range or .url"),"url"in v&&"string"==typeof v.url){if((0,b.gJ)(v.url)){const{url:t}=v,e=A(v,["url"]),n=(0,b.us)(t);return Object.assign({data:n},e)}(0,b.tN)()}return v},new((n=void 0)||(n=Promise))((function(r,i){function a(t){try{l(s.next(t))}catch(t){i(t)}}function o(t){try{l(s.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,o)}l((s=s.apply(t,e||[])).next())}));var t,e,n,s}),[v]);function Y(t,e){$.current[t]=e}function Z(t){delete $.current[t]}(0,s.useEffect)((()=>{const t=(0,o.Z)(K());return t.promise.then((t=>{B({type:"RESOLVE",value:t})})).catch((t=>{B({type:"REJECT",error:t})})),()=>{(0,b.LJ)(t)}}),[K,B]),(0,s.useEffect)((()=>{void 0!==U&&(!1!==U?D&&D():q&&((0,d.Z)(!1,q.toString()),F&&F(q)))}),[U]),(0,s.useEffect)((function(){H({type:"RESET"})}),[H,U]),(0,s.useEffect)((function(){if(!U)return;const t=I?Object.assign(Object.assign({},U),I):U,e=h.getDocument(t);k&&(e.onProgress=k),M&&(e.onPassword=M);const n=e;return n.promise.then((t=>{H({type:"RESOLVE",value:t})})).catch((t=>{n.destroyed||H({type:"REJECT",error:t})})),()=>{n.destroy()}}),[I,H,U]),(0,s.useEffect)((()=>{void 0!==W&&(!1!==W?W&&(R&&R(W),$.current=new Array(W.numPages),z.current.setDocument(W)):V&&((0,d.Z)(!1,V.toString()),T&&T(V)))}),[W]),(0,s.useEffect)((function(){z.current.setViewer(X.current),z.current.setExternalLinkRel(f),z.current.setExternalLinkTarget(m)}),[f,m]);const J=(0,s.useMemo)((()=>({imageResourcesPath:E,linkService:z.current,onItemClick:P,pdf:W,registerPage:Y,renderMode:O,rotate:L,unregisterPage:Z})),[E,P,W,O,L]),Q=(0,s.useMemo)((()=>(0,a.ZP)(N,(()=>W))),[N,W]);return s.createElement("div",Object.assign({className:(0,l.Z)("react-pdf__Document",r),ref:x,style:{"--scale-factor":"1"}},Q),v?null==W?s.createElement(p.Z,{type:"loading"},"function"==typeof C?C():C):!1===W?s.createElement(p.Z,{type:"error"},"function"==typeof i?i():i):s.createElement(u.Z.Provider,{value:J},n):s.createElement(p.Z,{type:"no-data"},"function"==typeof w?w():w))})),E=i().oneOfType([i().func,i().node]);x.propTypes=Object.assign(Object.assign({},v.Gg),{children:i().node,className:v.$n,error:E,externalLinkRel:i().string,externalLinkTarget:i().oneOf(["_self","_blank","_parent","_top"]),file:v.zE,imageResourcesPath:i().string,inputRef:v.dq,loading:E,noData:E,onItemClick:i().func,onLoadError:i().func,onLoadProgress:i().func,onLoadSuccess:i().func,onPassword:i().func,onSourceError:i().func,onSourceSuccess:i().func,options:i().shape({canvasFactory:i().any,canvasMaxAreaInBytes:i().number,cMapPacked:i().bool,CMapReaderFactory:i().any,cMapUrl:i().string,disableAutoFetch:i().bool,disableFontFace:i().bool,disableRange:i().bool,disableStream:i().bool,docBaseUrl:i().string,enableXfa:i().bool,filterFactory:i().any,fontExtraProperties:i().bool,httpHeaders:i().object,isEvalSupported:i().bool,isOffscreenCanvasSupported:i().bool,length:i().number,maxImageSize:i().number,ownerDocument:i().any,password:i().string,pdfBug:i().bool,rangeChunkSize:i().number,StandardFontDataFactory:i().any,standardFontDataUrl:i().string,stopAtErrors:i().bool,useSystemFonts:i().bool,useWorkerFetch:i().bool,verbosity:i().number,withCredentials:i().bool,worker:i().any}),rotate:i().number});const C=x},9886:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});const s=(0,n(959).createContext)(null)},7085:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});var s=n(8624);class r{constructor(){this.externalLinkEnabled=!0,this.externalLinkRel=void 0,this.externalLinkTarget=void 0,this.isInPresentationMode=!1,this.pdfDocument=void 0,this.pdfViewer=void 0}setDocument(t){this.pdfDocument=t}setViewer(t){this.pdfViewer=t}setExternalLinkRel(t){this.externalLinkRel=t}setExternalLinkTarget(t){this.externalLinkTarget=t}setHistory(){}get pagesCount(){return this.pdfDocument?this.pdfDocument.numPages:0}get page(){return(0,s.Z)(this.pdfViewer,"PDF viewer is not initialized."),this.pdfViewer.currentPageNumber||0}set page(t){(0,s.Z)(this.pdfViewer,"PDF viewer is not initialized."),this.pdfViewer.currentPageNumber=t}get rotation(){return 0}set rotation(t){}goToDestination(t){return new Promise((e=>{(0,s.Z)(this.pdfDocument,"PDF document not loaded."),(0,s.Z)(t,"Destination is not specified."),"string"==typeof t?this.pdfDocument.getDestination(t).then(e):Array.isArray(t)?e(t):t.then(e)})).then((t=>{(0,s.Z)(Array.isArray(t),`"${t}" is not a valid destination array.`);const e=t[0];new Promise((t=>{(0,s.Z)(this.pdfDocument,"PDF document not loaded."),e instanceof Object?this.pdfDocument.getPageIndex(e).then((e=>{t(e)})).catch((()=>{(0,s.Z)(!1,`"${e}" is not a valid page reference.`)})):"number"==typeof e?t(e):(0,s.Z)(!1,`"${e}" is not a valid destination reference.`)})).then((e=>{const n=e+1;(0,s.Z)(this.pdfViewer,"PDF viewer is not initialized."),(0,s.Z)(n>=1&&n<=this.pagesCount,`"${n}" is not a valid page number.`),this.pdfViewer.scrollPageIntoView({dest:t,pageIndex:e,pageNumber:n})}))}))}navigateTo(t){this.goToDestination(t)}goToPage(t){const e=t-1;(0,s.Z)(this.pdfViewer,"PDF viewer is not initialized."),(0,s.Z)(t>=1&&t<=this.pagesCount,`"${t}" is not a valid page number.`),this.pdfViewer.scrollPageIntoView({pageIndex:e,pageNumber:t})}addLinkAttributes(t,e,n){t.href=e,t.rel=this.externalLinkRel||"noopener noreferrer nofollow",t.target=n?"_blank":this.externalLinkTarget||""}getDestinationHash(){return"#"}getAnchorUrl(){return"#"}setHash(){}executeNamedAction(){}cachePageRef(){}isPageVisible(){return!0}isPageCached(){return!0}executeSetOCGState(){}}},6341:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var s=n(959),r=n(507),i=n.n(r);function a({children:t,type:e}){return s.createElement("div",{className:`react-pdf__message react-pdf__message--${e}`},t)}a.propTypes={children:i().node,type:i().oneOf(["error","loading","no-data"]).isRequired}},738:(t,e,n)=>{"use strict";n.d(e,{Z:()=>L});var s=n(959),r=n(507),i=n.n(r),a=n(4951),o=n(8225),l=n(5341);function c(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.filter(Boolean);return n.length<=1?n[0]||null:function(t){n.forEach((function(e){"function"==typeof e?e(t):e&&(e.current=t)}))}}var d=n(8624),h=n(6619);const u=(0,s.createContext)(null);var p=n(6341),g=n(5215);const f={Document:null,DocumentFragment:null,Part:"group",Sect:"group",Div:"group",Aside:"note",NonStruct:"none",P:null,H:"heading",Title:null,FENote:"note",Sub:"group",Lbl:null,Span:null,Em:null,Strong:null,Link:"link",Annot:"note",Form:"form",Ruby:null,RB:null,RT:null,RP:null,Warichu:null,WT:null,WP:null,L:"list",LI:"listitem",LBody:null,Table:"table",TR:"row",TH:"columnheader",TD:"cell",THead:"columnheader",TBody:null,TFoot:null,Caption:null,Figure:"figure",Formula:null,Artifact:null},m=/^H(\d+)$/;function b(t){return"children"in t}function _(t){return!!b(t)&&1===t.children.length&&0 in t.children&&"id"in t.children[0]}function v(t){const e={};if(b(t)){if(void 0!==t.alt&&(e["aria-label"]=t.alt),void 0!==t.lang&&(e.lang=t.lang),_(t)){const[n]=t.children;if(n){const t=v(n);return Object.assign(Object.assign({},e),t)}}}else"id"in t&&(e["aria-owns"]=t.id);return e}function A(t){return t?Object.assign(Object.assign({},function(t){const e={};if(b(t)){const{role:n}=t,s=n.match(m);if(s)e.role="heading",e["aria-level"]=Number(s[1]);else if(function(t){return t in f}(n)){const t=f[n];t&&(e.role=t)}}return e}(t)),v(t)):null}function y({className:t,node:e}){const n=(0,s.useMemo)((()=>A(e)),[e]),r=(0,s.useMemo)((()=>b(e)?_(e)?null:e.children.map(((t,e)=>s.createElement(y,{key:e,node:t}))):null),[e]);return s.createElement("span",Object.assign({className:t},n),r)}function S(){return(0,s.useContext)(u)}y.propTypes={node:i().oneOfType([i().shape({children:i().object,role:i().string}),i().shape({id:i().string,type:i().string})]).isRequired};var x=n(500),E=n(7681);function C(){const t=S();(0,d.Z)(t,"Unable to find Page context.");const{onGetStructTreeError:e,onGetStructTreeSuccess:n}=t,[r,i]=(0,x.Z)(),{value:o,error:l}=r,{customTextRenderer:c,page:u}=t;return(0,s.useEffect)((function(){i({type:"RESET"})}),[i,u]),(0,s.useEffect)((function(){if(c)return;if(!u)return;const t=(0,a.Z)(u.getStructTree()),e=t;return t.promise.then((t=>{i({type:"RESOLVE",value:t})})).catch((t=>{i({type:"REJECT",error:t})})),()=>(0,E.LJ)(e)}),[c,u,i]),(0,s.useEffect)((()=>{void 0!==o&&(!1!==o?o&&n&&n(o):l&&((0,h.Z)(!1,l.toString()),e&&e(l)))}),[o]),o?s.createElement(y,{className:"react-pdf__Page__structTree structTree",node:o}):null}var w=n(2554);const P=g.AnnotationMode;function T(t){const e=S();(0,d.Z)(e,"Unable to find Page context.");const n=Object.assign(Object.assign({},e),t),{_className:r,canvasBackground:i,devicePixelRatio:a=(0,E.x_)(),onRenderError:o,onRenderSuccess:l,page:u,renderForms:p,renderTextLayer:g,rotate:f,scale:m}=n,{canvasRef:b}=t;(0,d.Z)(u,"Attempted to render page canvas, but no page was specified.");const _=(0,s.useRef)(null);function v(t){(0,E.DE)(t)||((0,h.Z)(!1,t.toString()),o&&o(t))}const A=(0,s.useMemo)((()=>u.getViewport({scale:m*a,rotation:f})),[a,u,f,m]),y=(0,s.useMemo)((()=>u.getViewport({scale:m,rotation:f})),[u,f,m]);(0,s.useEffect)((function(){if(!u)return;u.cleanup();const{current:t}=_;if(!t)return;t.width=A.width,t.height=A.height,t.style.width=`${Math.floor(y.width)}px`,t.style.height=`${Math.floor(y.height)}px`,t.style.visibility="hidden";const e={annotationMode:p?P.ENABLE_FORMS:P.ENABLE,canvasContext:t.getContext("2d",{alpha:!1}),viewport:A};i&&(e.background=i);const n=u.render(e),s=n;return n.promise.then((()=>{t.style.visibility="",u&&l&&l((0,E.XZ)(u,m))})).catch(v),()=>(0,E.LJ)(s)}),[i,_,a,u,p,A,y]);const x=(0,s.useCallback)((()=>{const{current:t}=_;t&&(t.width=0,t.height=0)}),[_]);return(0,s.useEffect)((()=>x),[x]),s.createElement("canvas",{className:`${r}__canvas`,dir:"ltr",ref:c(b,_),style:{display:"block",userSelect:"none"}},g?s.createElement(C,null):null)}function k(){const t=S();(0,d.Z)(t,"Unable to find Page context.");const{_className:e,onRenderSuccess:n,onRenderError:r,page:i,rotate:o,scale:l}=t;(0,d.Z)(i,"Attempted to render page SVG, but no page was specified.");const[c,u]=(0,x.Z)(),{value:p,error:f}=c,m=(0,s.useMemo)((()=>i.getViewport({scale:l,rotation:o})),[i,o,l]);(0,s.useEffect)((function(){u({type:"RESET"})}),[i,u,m]),(0,s.useEffect)((function(){if(!i)return;const t=(0,a.Z)(i.getOperatorList());return t.promise.then((t=>{new g.SVGGraphics(i.commonObjs,i.objs).getSVG(t,m).then((t=>{u({type:"RESOLVE",value:t})})).catch((t=>{u({type:"REJECT",error:t})}))})).catch((t=>{u({type:"REJECT",error:t})})),()=>(0,E.LJ)(t)}),[i,u,m]),(0,s.useEffect)((()=>{void 0!==p&&(!1!==p?i&&n&&n((0,E.XZ)(i,l)):f&&((0,E.DE)(f)||((0,h.Z)(!1,f.toString()),r&&r(f))))}),[p]);const{width:b,height:_}=m;return s.createElement("div",{className:`${e}__svg`,ref:t=>function(t){if(!t||!p)return;t.firstElementChild||t.appendChild(p);const{width:e,height:n}=m;p.setAttribute("width",`${e}`),p.setAttribute("height",`${n}`)}(t),style:{display:"block",backgroundColor:"white",overflow:"hidden",width:b,height:_,userSelect:"none"}})}function R(){const t=S();(0,d.Z)(t,"Unable to find Page context.");const{customTextRenderer:e,onGetTextError:n,onGetTextSuccess:r,onRenderTextLayerError:i,onRenderTextLayerSuccess:o,page:c,pageIndex:u,pageNumber:p,rotate:f,scale:m}=t;(0,d.Z)(c,"Attempted to load page text content, but no page was specified.");const[b,_]=(0,x.Z)(),{value:v,error:A}=b,y=(0,s.useRef)(null),C=(0,s.useRef)();(0,h.Z)(1===parseInt(window.getComputedStyle(document.body).getPropertyValue("--react-pdf-text-layer"),10),"TextLayer styles not found. Read more: https://github.com/wojtekmaj/react-pdf#support-for-text-layer"),(0,s.useEffect)((function(){_({type:"RESET"})}),[c,_]),(0,s.useEffect)((function(){if(!c)return;const t=(0,a.Z)(c.getTextContent()),e=t;return t.promise.then((t=>{_({type:"RESOLVE",value:t})})).catch((t=>{_({type:"REJECT",error:t})})),()=>(0,E.LJ)(e)}),[c,_]),(0,s.useEffect)((()=>{void 0!==v&&(!1!==v?v&&r&&r(v):A&&((0,h.Z)(!1,A.toString()),n&&n(A)))}),[v]);const w=(0,s.useCallback)((()=>{o&&o()}),[o]),P=(0,s.useCallback)((t=>{(0,h.Z)(!1,t.toString()),i&&i(t)}),[i]),T=(0,s.useMemo)((()=>c.getViewport({scale:m,rotation:f})),[c,f,m]);return(0,s.useLayoutEffect)((function(){if(!c||!v)return;const{current:t}=y;if(!t)return;t.innerHTML="";const n=c.streamTextContent({includeMarkedContent:!0}),s={container:t,textContentSource:n,viewport:T},r=g.renderTextLayer(s),i=r;return r.promise.then((()=>{const n=document.createElement("div");n.className="endOfContent",t.append(n),C.current=n;const s=Boolean(t.querySelector(".markedContent"))?t.querySelectorAll(".markedContent > *:not(.markedContent"):t.children;if(e){let t=0;v.items.forEach(((n,r)=>{if(!function(t){return"str"in t}(n))return;const i=s[t];if(!i)return;const a=e(Object.assign({pageIndex:u,pageNumber:p,itemIndex:r},n));i.innerHTML=a,t+=n.str&&n.hasEOL?2:1}))}w()})).catch(P),()=>(0,E.LJ)(i)}),[e,P,w,c,u,p,v,T]),s.createElement("div",{className:(0,l.Z)("react-pdf__Page__textContent","textLayer"),onMouseUp:function(){const t=C.current;t&&t.classList.remove("active")},onMouseDown:function(){const t=C.current;t&&t.classList.add("active")},ref:y})}T.propTypes={canvasRef:w.dq};var M=n(9886);function F(){return(0,s.useContext)(M.Z)}function D(){const t=F();(0,d.Z)(t,"Unable to find Document context. Did you wrap <Page /> in <Document />?");const e=S();(0,d.Z)(e,"Unable to find Page context.");const n=Object.assign(Object.assign({},t),e),{imageResourcesPath:r,linkService:i,onGetAnnotationsError:o,onGetAnnotationsSuccess:c,onRenderAnnotationLayerError:u,onRenderAnnotationLayerSuccess:p,page:f,pdf:m,renderForms:b,rotate:_,scale:v=1}=n;(0,d.Z)(f,"Attempted to load page annotations, but no page was specified.");const[A,y]=(0,x.Z)(),{value:C,error:w}=A,P=(0,s.useRef)(null);(0,h.Z)(1===parseInt(window.getComputedStyle(document.body).getPropertyValue("--react-pdf-annotation-layer"),10),"AnnotationLayer styles not found. Read more: https://github.com/wojtekmaj/react-pdf#support-for-annotations"),(0,s.useEffect)((function(){y({type:"RESET"})}),[y,f]),(0,s.useEffect)((function(){if(!f)return;const t=(0,a.Z)(f.getAnnotations()),e=t;return t.promise.then((t=>{y({type:"RESOLVE",value:t})})).catch((t=>{y({type:"REJECT",error:t})})),()=>{(0,E.LJ)(e)}}),[y,f,b]),(0,s.useEffect)((()=>{void 0!==C&&(!1!==C?C&&c&&c(C):w&&((0,h.Z)(!1,w.toString()),o&&o(w)))}),[C]);const T=(0,s.useMemo)((()=>f.getViewport({scale:v,rotation:_})),[f,_,v]);return(0,s.useEffect)((function(){if(!m||!f||!C)return;const{current:t}=P;if(!t)return;const e=T.clone({dontFlip:!0}),n={annotations:C,annotationStorage:m.annotationStorage,div:t,downloadManager:null,imageResourcesPath:r,linkService:i,page:f,renderForms:b,viewport:e};t.innerHTML="";try{g.AnnotationLayer.render(n),p&&p()}catch(t){!function(t){(0,h.Z)(!1,`${t}`),u&&u(t)}(t)}return()=>{}}),[C,r,i,f,b,T]),s.createElement("div",{className:(0,l.Z)("react-pdf__Page__annotations","annotationLayer"),ref:P})}var I=function(t,e){var n={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.indexOf(s)<0&&(n[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(t);r<s.length;r++)e.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(t,s[r])&&(n[s[r]]=t[s[r]])}return n};const O=1;function L(t){const e=F();(0,d.Z)(e,"Unable to find Document context. Did you wrap <Page /> in <Document />?");const n=Object.assign(Object.assign({},e),t),{_className:r="react-pdf__Page",_enableRegisterUnregisterPage:i=!0,canvasBackground:g,canvasRef:f,children:m,className:b,customRenderer:_,customTextRenderer:v,devicePixelRatio:A,error:y="Failed to load the page.",height:S,inputRef:C,loading:w="Loading page…",noData:P="No page specified.",onGetAnnotationsError:M,onGetAnnotationsSuccess:L,onGetStructTreeError:N,onGetStructTreeSuccess:j,onGetTextError:B,onGetTextSuccess:U,onLoadError:q,onLoadSuccess:G,onRenderAnnotationLayerError:H,onRenderAnnotationLayerSuccess:W,onRenderError:V,onRenderSuccess:z,onRenderTextLayerError:$,onRenderTextLayerSuccess:X,pageIndex:K,pageNumber:Y,pdf:Z,registerPage:J,renderAnnotationLayer:Q=!0,renderForms:tt=!1,renderMode:et="canvas",renderTextLayer:nt=!0,rotate:st,scale:rt=O,unregisterPage:it,width:at}=n,ot=I(n,["_className","_enableRegisterUnregisterPage","canvasBackground","canvasRef","children","className","customRenderer","customTextRenderer","devicePixelRatio","error","height","inputRef","loading","noData","onGetAnnotationsError","onGetAnnotationsSuccess","onGetStructTreeError","onGetStructTreeSuccess","onGetTextError","onGetTextSuccess","onLoadError","onLoadSuccess","onRenderAnnotationLayerError","onRenderAnnotationLayerSuccess","onRenderError","onRenderSuccess","onRenderTextLayerError","onRenderTextLayerSuccess","pageIndex","pageNumber","pdf","registerPage","renderAnnotationLayer","renderForms","renderMode","renderTextLayer","rotate","scale","unregisterPage","width"]),[lt,ct]=(0,x.Z)(),{value:dt,error:ht}=lt,ut=(0,s.useRef)(null);(0,d.Z)(Z,"Attempted to load a page, but no document was specified.");const pt=(0,E.T8)(Y)?Y-1:null!=K?K:null,gt=null!=Y?Y:(0,E.T8)(K)?K+1:null,ft=null!=st?st:dt?dt.rotate:null,mt=(0,s.useMemo)((()=>{if(!dt)return null;let t=1;const e=null!=rt?rt:O;if(at||S){const e=dt.getViewport({scale:1,rotation:ft});at?t=at/e.width:S&&(t=S/e.height)}return e*t}),[S,dt,ft,rt,at]);(0,s.useEffect)((function(){return()=>{(0,E.T8)(pt)&&i&&it&&it(pt)}}),[i,Z,pt,it]),(0,s.useEffect)((function(){ct({type:"RESET"})}),[ct,Z,pt]),(0,s.useEffect)((function(){if(!Z||!gt)return;const t=(0,a.Z)(Z.getPage(gt)),e=t;return t.promise.then((t=>{ct({type:"RESOLVE",value:t})})).catch((t=>{ct({type:"REJECT",error:t})})),()=>(0,E.LJ)(e)}),[ct,Z,pt,gt,J]),(0,s.useEffect)((()=>{void 0!==dt&&(!1!==dt?function(){if(G){if(!dt||!mt)return;G((0,E.XZ)(dt,mt))}if(i&&J){if(!(0,E.T8)(pt)||!ut.current)return;J(pt,ut.current)}}():ht&&((0,h.Z)(!1,ht.toString()),q&&q(ht)))}),[dt,mt]);const bt=(0,s.useMemo)((()=>dt&&(0,E.T8)(pt)&&gt&&(0,E.T8)(ft)&&(0,E.T8)(mt)?{_className:r,canvasBackground:g,customTextRenderer:v,devicePixelRatio:A,onGetAnnotationsError:M,onGetAnnotationsSuccess:L,onGetStructTreeError:N,onGetStructTreeSuccess:j,onGetTextError:B,onGetTextSuccess:U,onRenderAnnotationLayerError:H,onRenderAnnotationLayerSuccess:W,onRenderError:V,onRenderSuccess:z,onRenderTextLayerError:$,onRenderTextLayerSuccess:X,page:dt,pageIndex:pt,pageNumber:gt,renderForms:tt,renderTextLayer:nt,rotate:ft,scale:mt}:null),[r,g,v,A,M,L,N,j,B,U,H,W,V,z,$,X,dt,pt,gt,tt,nt,ft,mt]),_t=(0,s.useMemo)((()=>(0,o.ZP)(ot,(()=>dt?mt?(0,E.XZ)(dt,mt):void 0:dt))),[ot,dt,mt]),vt=`${pt}@${mt}/${ft}`,At=`${pt}/${ft}`;return s.createElement("div",Object.assign({className:(0,l.Z)(r,b),"data-page-number":gt,ref:c(C,ut),style:{"--scale-factor":`${mt}`,backgroundColor:g||"white",position:"relative",minWidth:"min-content",minHeight:"min-content"}},_t),gt?null===Z||null==dt?s.createElement(p.Z,{type:"loading"},"function"==typeof w?w():w):!1===Z||!1===dt?s.createElement(p.Z,{type:"error"},"function"==typeof y?y():y):s.createElement(u.Provider,{value:bt},function(){switch(et){case"custom":return(0,d.Z)(_,'renderMode was set to "custom", but no customRenderer was passed.'),s.createElement(_,{key:`${vt}_custom`});case"none":return null;case"svg":return s.createElement(k,{key:`${At}_svg`});default:return s.createElement(T,{key:`${vt}_canvas`,canvasRef:f})}}(),nt?s.createElement(R,{key:`${vt}_text`}):null,Q?s.createElement(D,{key:`${vt}_annotations`}):null,m):s.createElement(p.Z,{type:"no-data"},"function"==typeof P?P():P))}const N=i().oneOfType([i().func,i().node]);L.propTypes=Object.assign(Object.assign({},w.Gg),{canvasBackground:i().string,canvasRef:w.dq,children:i().node,className:w.$n,customRenderer:i().func,customTextRenderer:i().func,devicePixelRatio:i().number,error:N,height:i().number,imageResourcesPath:i().string,inputRef:w.dq,loading:N,noData:N,onGetTextError:i().func,onGetTextSuccess:i().func,onLoadError:i().func,onLoadSuccess:i().func,onRenderError:i().func,onRenderSuccess:i().func,onRenderTextLayerError:i().func,onRenderTextLayerSuccess:i().func,pageIndex:w.qd,pageNumber:w.F$,pdf:w.Ze,renderAnnotationLayer:i().bool,renderForms:i().bool,renderMode:w.DV,renderTextLayer:i().bool,rotate:w.lA,scale:i().number,width:i().number})},500:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});var s=n(959);function r(t,e){switch(e.type){case"RESOLVE":return{value:e.value,error:void 0};case"REJECT":return{value:!1,error:e.error};case"RESET":return{value:void 0,error:void 0};default:return t}}function i(){return(0,s.useReducer)(r,{value:void 0,error:void 0})}},2554:(t,e,n)=>{"use strict";n.d(e,{$n:()=>u,DV:()=>_,F$:()=>f,Gg:()=>c,Ze:()=>m,dq:()=>b,lA:()=>v,qd:()=>g,zE:()=>p});var s=n(507),r=n.n(s),i=n(8225),a=n(5215),o=n(7681),l=n(7085);const c=(()=>{const t={};return i.Tu.forEach((e=>{t[e]=r().func})),t})(),d=r().oneOfType([r().instanceOf(Int8Array),r().instanceOf(Uint8Array),r().instanceOf(Uint8ClampedArray),r().instanceOf(Int16Array),r().instanceOf(Uint16Array),r().instanceOf(Int32Array),r().instanceOf(Uint32Array),r().instanceOf(Float32Array),r().instanceOf(Float64Array)]),h=[r().string,r().instanceOf(ArrayBuffer),r().shape({data:r().oneOfType([r().string,r().instanceOf(ArrayBuffer),r().arrayOf(r().number.isRequired),d]).isRequired}),r().shape({range:r().instanceOf(a.PDFDataRangeTransport).isRequired}),r().shape({url:r().string.isRequired})];"undefined"!=typeof Blob&&h.push(r().instanceOf(Blob));const u=r().oneOfType([r().string,r().arrayOf(r().string)]),p=r().oneOfType(h),g=(r().instanceOf(l.Z),r().oneOf(["_self","_blank","_parent","_top"]),r().shape({commonObjs:r().shape({}).isRequired,getAnnotations:r().func.isRequired,getTextContent:r().func.isRequired,getViewport:r().func.isRequired,render:r().func.isRequired}),function(t,e,n){const{[e]:s,pageNumber:r,pdf:i}=t;if(!(0,o.$K)(i))return null;if((0,o.$K)(s)){if("number"!=typeof s)return new Error(`\`${e}\` of type \`${typeof s}\` supplied to \`${n}\`, expected \`number\`.`);if(s<0)return new Error(`Expected \`${e}\` to be greater or equal to 0.`);const{numPages:t}=i;if(s+1>t)return new Error(`Expected \`${e}\` to be less or equal to ${t-1}.`)}else if(!(0,o.$K)(r))return new Error(`\`${e}\` not supplied. Either pageIndex or pageNumber must be supplied to \`${n}\`.`);return null}),f=function(t,e,n){const{[e]:s,pageIndex:r,pdf:i}=t;if(!(0,o.$K)(i))return null;if((0,o.$K)(s)){if("number"!=typeof s)return new Error(`\`${e}\` of type \`${typeof s}\` supplied to \`${n}\`, expected \`number\`.`);if(s<1)return new Error(`Expected \`${e}\` to be greater or equal to 1.`);const{numPages:t}=i;if(s>t)return new Error(`Expected \`${e}\` to be less or equal to ${t}.`)}else if(!(0,o.$K)(r))return new Error(`\`${e}\` not supplied. Either pageIndex or pageNumber must be supplied to \`${n}\`.`);return null},m=r().oneOfType([r().shape({getDestination:r().func.isRequired,getOutline:r().func.isRequired,getPage:r().func.isRequired,numPages:r().number.isRequired}),r().bool]),b=r().oneOfType([r().func,r().exact({current:r().any})]),_=r().oneOf(["canvas","custom","none","svg"]),v=r().oneOf([0,90,180,270])},7681:(t,e,n)=>{"use strict";n.d(e,{$K:()=>o,DE:()=>_,LJ:()=>m,Lj:()=>d,T8:()=>l,XZ:()=>b,eP:()=>c,eR:()=>v,gJ:()=>h,jU:()=>i,tN:()=>f,us:()=>u,x_:()=>p});var s=n(8624),r=n(6619);const i="undefined"!=typeof document,a=i&&"file:"===window.location.protocol;function o(t){return void 0!==t}function l(t){return o(t)&&null!==t}function c(t){return t instanceof ArrayBuffer}function d(t){return(0,s.Z)(i,"isBlob can only be used in a browser environment"),t instanceof Blob}function h(t){return function(t){return"string"==typeof t}(t)&&/^data:/.test(t)}function u(t){(0,s.Z)(h(t),"Invalid data URI.");const[e="",n=""]=t.split(",");return-1!==e.split(";").indexOf("base64")?atob(n):unescape(n)}function p(){return i&&window.devicePixelRatio||1}const g="On Chromium based browsers, you can use --allow-file-access-from-files flag for debugging purposes.";function f(){(0,r.Z)(!a,`Loading PDF as base64 strings/URLs may not work on protocols other than HTTP/HTTPS. ${g}`)}function m(t){t&&t.cancel&&t.cancel()}function b(t,e){return Object.defineProperty(t,"width",{get(){return this.view[2]*e},configurable:!0}),Object.defineProperty(t,"height",{get(){return this.view[3]*e},configurable:!0}),Object.defineProperty(t,"originalWidth",{get(){return this.view[2]},configurable:!0}),Object.defineProperty(t,"originalHeight",{get(){return this.view[3]},configurable:!0}),t}function _(t){return"RenderingCancelledException"===t.name}function v(t){return new Promise(((e,n)=>{const s=new FileReader;s.onload=()=>{if(!s.result)return n(new Error("Error while reading a file."));e(s.result)},s.onerror=t=>{if(!t.target)return n(new Error("Error while reading a file."));const{error:e}=t.target;if(!e)return n(new Error("Error while reading a file."));switch(e.code){case e.NOT_FOUND_ERR:return n(new Error("Error while reading a file: File not found."));case e.SECURITY_ERR:return n(new Error("Error while reading a file: Security error."));case e.ABORT_ERR:return n(new Error("Error while reading a file: Aborted."));default:return n(new Error("Error while reading a file."))}},s.readAsArrayBuffer(t)}))}},6619:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});const s=function(t,e){}},5341:(t,e,n)=>{"use strict";function s(t){var e,n,r="";if("string"==typeof t||"number"==typeof t)r+=t;else if("object"==typeof t)if(Array.isArray(t))for(e=0;e<t.length;e++)t[e]&&(n=s(t[e]))&&(r&&(r+=" "),r+=n);else for(e in t)t[e]&&(r&&(r+=" "),r+=e);return r}n.d(e,{Z:()=>r});const r=function(){for(var t,e,n=0,r="";n<arguments.length;)(t=arguments[n++])&&(e=s(t))&&(r&&(r+=" "),r+=e);return r}},4951:(t,e,n)=>{"use strict";function s(t){var e=!1;return{promise:new Promise((function(n,s){t.then((function(t){return!e&&n(t)})).catch((function(t){return!e&&s(t)}))})),cancel:function(){e=!0}}}n.d(e,{Z:()=>s})},8225:(t,e,n)=>{"use strict";n.d(e,{Tu:()=>r,ZP:()=>i});var s=function(t,e,n){if(n||2===arguments.length)for(var s,r=0,i=e.length;r<i;r++)!s&&r in e||(s||(s=Array.prototype.slice.call(e,0,r)),s[r]=e[r]);return t.concat(s||Array.prototype.slice.call(e))},r=s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s([],["onCopy","onCut","onPaste"],!0),["onCompositionEnd","onCompositionStart","onCompositionUpdate"],!0),["onFocus","onBlur"],!0),["onInput","onInvalid","onReset","onSubmit"],!0),["onLoad","onError"],!0),["onKeyDown","onKeyPress","onKeyUp"],!0),["onAbort","onCanPlay","onCanPlayThrough","onDurationChange","onEmptied","onEncrypted","onEnded","onError","onLoadedData","onLoadedMetadata","onLoadStart","onPause","onPlay","onPlaying","onProgress","onRateChange","onSeeked","onSeeking","onStalled","onSuspend","onTimeUpdate","onVolumeChange","onWaiting"],!0),["onClick","onContextMenu","onDoubleClick","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"],!0),["onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop"],!0),["onSelect"],!0),["onTouchCancel","onTouchEnd","onTouchMove","onTouchStart"],!0),["onPointerDown","onPointerMove","onPointerUp","onPointerCancel","onGotPointerCapture","onLostPointerCapture","onPointerEnter","onPointerLeave","onPointerOver","onPointerOut"],!0),["onScroll"],!0),["onWheel"],!0),["onAnimationStart","onAnimationEnd","onAnimationIteration"],!0),["onTransitionEnd"],!0),["onChange"],!0),["onToggle"],!0);function i(t,e){var n={};return r.forEach((function(s){var r=t[s];r&&(n[s]=e?function(t){return r(t,e(s))}:r)})),n}},8624:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});var s=!0,r="Invariant failed";function i(t,e){if(!t){if(s)throw new Error(r);var n="function"==typeof e?e():e,i=n?"".concat(r,": ").concat(n):r;throw new Error(i)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,