(()=>{(self.webpackChunkfrontend_util=self.webpackChunkfrontend_util||[]).push([[38],{5789:(he,R,e)=>{"use strict";e.d(R,{A:()=>kt});function n(f){if(f.sheet)return f.sheet;for(var X=0;X<document.styleSheets.length;X++)if(document.styleSheets[X].ownerNode===f)return document.styleSheets[X]}function s(f){var X=document.createElement("style");return X.setAttribute("data-emotion",f.key),f.nonce!==void 0&&X.setAttribute("nonce",f.nonce),X.appendChild(document.createTextNode("")),X.setAttribute("data-s",""),X}var t=function(){function f(xe){var ge=this;this._insertTag=function(Ve){var rt;ge.tags.length===0?ge.insertionPoint?rt=ge.insertionPoint.nextSibling:ge.prepend?rt=ge.container.firstChild:rt=ge.before:rt=ge.tags[ge.tags.length-1].nextSibling,ge.container.insertBefore(Ve,rt),ge.tags.push(Ve)},this.isSpeedy=xe.speedy===void 0?!0:xe.speedy,this.tags=[],this.ctr=0,this.nonce=xe.nonce,this.key=xe.key,this.container=xe.container,this.prepend=xe.prepend,this.insertionPoint=xe.insertionPoint,this.before=null}var X=f.prototype;return X.hydrate=function(ge){ge.forEach(this._insertTag)},X.insert=function(ge){this.ctr%(this.isSpeedy?65e3:1)===0&&this._insertTag(s(this));var Ve=this.tags[this.tags.length-1];if(0)var rt;if(this.isSpeedy){var tn=n(Ve);try{tn.insertRule(ge,tn.cssRules.length)}catch(zt){}}else Ve.appendChild(document.createTextNode(ge));this.ctr++},X.flush=function(){this.tags.forEach(function(ge){return ge.parentNode&&ge.parentNode.removeChild(ge)}),this.tags=[],this.ctr=0},f}(),T=Math.abs,w=String.fromCharCode,g=Object.assign;function d(f,X){return re(f,0)^45?(((X<<2^re(f,0))<<2^re(f,1))<<2^re(f,2))<<2^re(f,3):0}function v(f){return f.trim()}function L(f,X){return(f=X.exec(f))?f[0]:f}function j(f,X,xe){return f.replace(X,xe)}function k(f,X){return f.indexOf(X)}function re(f,X){return f.charCodeAt(X)|0}function K(f,X,xe){return f.slice(X,xe)}function H(f){return f.length}function W(f){return f.length}function B(f,X){return X.push(f),f}function O(f,X){return f.map(X).join("")}var ie=1,J=1,se=0,A=0,M=0,_="";function $(f,X,xe,ge,Ve,rt,tn){return{value:f,root:X,parent:xe,type:ge,props:Ve,children:rt,line:ie,column:J,length:tn,return:""}}function P(f,X){return g($("",null,null,"",null,null,0),f,{length:-f.length},X)}function c(){return M}function h(){return M=A>0?re(_,--A):0,J--,M===10&&(J=1,ie--),M}function b(){return M=A<se?re(_,A++):0,J++,M===10&&(J=1,ie++),M}function N(){return re(_,A)}function q(){return A}function Z(f,X){return K(_,f,X)}function me(f){switch(f){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function _e(f){return ie=J=1,se=H(_=f),A=0,[]}function Te(f){return _="",f}function Le(f){return v(Z(A-1,bt(f===91?f+2:f===40?f+1:f)))}function Fe(f){return Te(ut(_e(f)))}function Ye(f){for(;(M=N())&&M<33;)b();return me(f)>2||me(M)>3?"":" "}function ut(f){for(;b();)switch(me(M)){case 0:append(Ft(A-1),f);break;case 2:append(Le(M),f);break;default:append(from(M),f)}return f}function It(f,X){for(;--X&&b()&&!(M<48||M>102||M>57&&M<65||M>70&&M<97););return Z(f,q()+(X<6&&N()==32&&b()==32))}function bt(f){for(;b();)switch(M){case f:return A;case 34:case 39:f!==34&&f!==39&&bt(M);break;case 40:f===41&&bt(f);break;case 92:b();break}return A}function Et(f,X){for(;b()&&f+M!==57;)if(f+M===84&&N()===47)break;return"/*"+Z(X,A-1)+"*"+w(f===47?f:b())}function Ft(f){for(;!me(N());)b();return Z(f,A)}var Pt="-ms-",dt="-moz-",Ue="-webkit-",Dt="comm",en="rule",Bt="decl",sn="@page",an="@media",ln="@import",Nt="@charset",Zt="@viewport",Oe="@supports",ke="@document",nt="@namespace",de="@keyframes",C="@font-face",Ee="@counter-style",De="@font-feature-values",we="@layer";function z(f,X){for(var xe="",ge=W(f),Ve=0;Ve<ge;Ve++)xe+=X(f[Ve],Ve,f,X)||"";return xe}function Ce(f,X,xe,ge){switch(f.type){case we:if(f.children.length)break;case ln:case Bt:return f.return=f.return||f.value;case Dt:return"";case de:return f.return=f.value+"{"+z(f.children,ge)+"}";case en:f.value=f.props.join(",")}return H(xe=z(f.children,ge))?f.return=f.value+"{"+xe+"}":""}function lt(f){var X=W(f);return function(xe,ge,Ve,rt){for(var tn="",zt=0;zt<X;zt++)tn+=f[zt](xe,ge,Ve,rt)||"";return tn}}function at(f){return function(X){X.root||(X=X.return)&&f(X)}}function et(f,X,xe,ge){if(f.length>-1&&!f.return)switch(f.type){case DECLARATION:f.return=prefix(f.value,f.length,xe);return;case KEYFRAMES:return serialize([copy(f,{value:replace(f.value,"@","@"+WEBKIT)})],ge);case RULESET:if(f.length)return combine(f.props,function(Ve){switch(match(Ve,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return serialize([copy(f,{props:[replace(Ve,/:(read-\w+)/,":"+MOZ+"$1")]})],ge);case"::placeholder":return serialize([copy(f,{props:[replace(Ve,/:(plac\w+)/,":"+WEBKIT+"input-$1")]}),copy(f,{props:[replace(Ve,/:(plac\w+)/,":"+MOZ+"$1")]}),copy(f,{props:[replace(Ve,/:(plac\w+)/,MS+"input-$1")]})],ge)}return""})}}function Ot(f){switch(f.type){case RULESET:f.props=f.props.map(function(X){return combine(tokenize(X),function(xe,ge,Ve){switch(charat(xe,0)){case 12:return substr(xe,1,strlen(xe));case 0:case 40:case 43:case 62:case 126:return xe;case 58:Ve[++ge]==="global"&&(Ve[ge]="",Ve[++ge]="\f"+substr(Ve[ge],ge=1,-1));case 32:return ge===1?"":xe;default:switch(ge){case 0:return f=xe,sizeof(Ve)>1?"":xe;case(ge=sizeof(Ve)-1):case 2:return ge===2?xe+f+f:xe+f;default:return xe}}})})}}function ft(f){return Te(_t("",null,null,null,[""],f=_e(f),0,[0],f))}function _t(f,X,xe,ge,Ve,rt,tn,zt,un){for(var Kt=0,Yt=0,rn=tn,jt=0,bn=0,An=0,nn=1,On=1,Pn=1,xn=0,pn="",jn=Ve,qn=rt,wn=ge,on=pn;On;)switch(An=xn,xn=b()){case 40:if(An!=108&&re(on,rn-1)==58){k(on+=j(Le(xn),"&","&\f"),"&\f")!=-1&&(Pn=-1);break}case 34:case 39:case 91:on+=Le(xn);break;case 9:case 10:case 13:case 32:on+=Ye(An);break;case 92:on+=It(q()-1,7);continue;case 47:switch(N()){case 42:case 47:B(Ut(Et(b(),q()),X,xe),un);break;default:on+="/"}break;case 123*nn:zt[Kt++]=H(on)*Pn;case 125*nn:case 59:case 0:switch(xn){case 0:case 125:On=0;case 59+Yt:Pn==-1&&(on=j(on,/\f/g,"")),bn>0&&H(on)-rn&&B(bn>32?$t(on+";",ge,xe,rn-1):$t(j(on," ","")+";",ge,xe,rn-2),un);break;case 59:on+=";";default:if(B(wn=Lt(on,X,xe,Kt,Yt,Ve,zt,pn,jn=[],qn=[],rn),rt),xn===123)if(Yt===0)_t(on,X,wn,wn,jn,rt,rn,zt,qn);else switch(jt===99&&re(on,3)===110?100:jt){case 100:case 108:case 109:case 115:_t(f,wn,wn,ge&&B(Lt(f,wn,wn,0,0,Ve,zt,pn,Ve,jn=[],rn),qn),Ve,qn,rn,zt,ge?jn:qn);break;default:_t(on,wn,wn,wn,[""],qn,0,zt,qn)}}Kt=Yt=bn=0,nn=Pn=1,pn=on="",rn=tn;break;case 58:rn=1+H(on),bn=An;default:if(nn<1){if(xn==123)--nn;else if(xn==125&&nn++==0&&h()==125)continue}switch(on+=w(xn),xn*nn){case 38:Pn=Yt>0?1:(on+="\f",-1);break;case 44:zt[Kt++]=(H(on)-1)*Pn,Pn=1;break;case 64:N()===45&&(on+=Le(b())),jt=N(),Yt=rn=H(pn=on+=Ft(q())),xn++;break;case 45:An===45&&H(on)==2&&(nn=0)}}return rt}function Lt(f,X,xe,ge,Ve,rt,tn,zt,un,Kt,Yt){for(var rn=Ve-1,jt=Ve===0?rt:[""],bn=W(jt),An=0,nn=0,On=0;An<ge;++An)for(var Pn=0,xn=K(f,rn+1,rn=T(nn=tn[An])),pn=f;Pn<bn;++Pn)(pn=v(nn>0?jt[Pn]+" "+xn:j(xn,/&\f/g,jt[Pn])))&&(un[On++]=pn);return $(f,X,xe,Ve===0?en:zt,un,Kt,Yt)}function Ut(f,X,xe){return $(f,X,xe,Dt,w(c()),K(f,2,-2),0)}function $t(f,X,xe,ge){return $(f,X,xe,Bt,K(f,0,ge),K(f,ge+1,-1),ge)}var mt=function(X,xe,ge){for(var Ve=0,rt=0;Ve=rt,rt=N(),Ve===38&&rt===12&&(xe[ge]=1),!me(rt);)b();return Z(X,A)},G=function(X,xe){var ge=-1,Ve=44;do switch(me(Ve)){case 0:Ve===38&&N()===12&&(xe[ge]=1),X[ge]+=mt(A-1,xe,ge);break;case 2:X[ge]+=Le(Ve);break;case 4:if(Ve===44){X[++ge]=N()===58?"&\f":"",xe[ge]=X[ge].length;break}default:X[ge]+=w(Ve)}while(Ve=b());return X},Q=function(X,xe){return Te(G(_e(X),xe))},y=new WeakMap,m=function(X){if(!(X.type!=="rule"||!X.parent||X.length<1)){for(var xe=X.value,ge=X.parent,Ve=X.column===ge.column&&X.line===ge.line;ge.type!=="rule";)if(ge=ge.parent,!ge)return;if(!(X.props.length===1&&xe.charCodeAt(0)!==58&&!y.get(ge))&&!Ve){y.set(X,!0);for(var rt=[],tn=Q(xe,rt),zt=ge.props,un=0,Kt=0;un<tn.length;un++)for(var Yt=0;Yt<zt.length;Yt++,Kt++)X.props[Kt]=rt[un]?tn[un].replace(/&\f/g,zt[Yt]):zt[Yt]+" "+tn[un]}}},F=function(X){if(X.type==="decl"){var xe=X.value;xe.charCodeAt(0)===108&&xe.charCodeAt(2)===98&&(X.return="",X.value="")}},ee="emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason",V=function(X){return X.type==="comm"&&X.children.indexOf(ee)>-1},Ae=function(X){return function(xe,ge,Ve){if(!(xe.type!=="rule"||X.compat)){var rt=xe.value.match(/(:first|:nth|:nth-last)-child/g);if(rt){for(var tn=!!xe.parent,zt=tn?xe.parent.children:Ve,un=zt.length-1;un>=0;un--){var Kt=zt[un];if(Kt.line<xe.line)break;if(Kt.column<xe.column){if(V(Kt))return;break}}rt.forEach(function(Yt){console.error('The pseudo class "'+Yt+'" is potentially unsafe when doing server-side rendering. Try changing it to "'+Yt.split("-child")[0]+'-of-type".')})}}}},Pe=function(X){return X.type.charCodeAt(1)===105&&X.type.charCodeAt(0)===64},Re=function(X,xe){for(var ge=X-1;ge>=0;ge--)if(!Pe(xe[ge]))return!0;return!1},ye=function(X){X.type="",X.value="",X.return="",X.children="",X.props=""},pe=function(X,xe,ge){Pe(X)&&(X.parent?(console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles."),ye(X)):Re(xe,ge)&&(console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules."),ye(X)))};function Se(f,X){switch(d(f,X)){case 5103:return Ue+"print-"+f+f;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Ue+f+f;case 5349:case 4246:case 4810:case 6968:case 2756:return Ue+f+dt+f+Pt+f+f;case 6828:case 4268:return Ue+f+Pt+f+f;case 6165:return Ue+f+Pt+"flex-"+f+f;case 5187:return Ue+f+j(f,/(\w+).+(:[^]+)/,Ue+"box-$1$2"+Pt+"flex-$1$2")+f;case 5443:return Ue+f+Pt+"flex-item-"+j(f,/flex-|-self/,"")+f;case 4675:return Ue+f+Pt+"flex-line-pack"+j(f,/align-content|flex-|-self/,"")+f;case 5548:return Ue+f+Pt+j(f,"shrink","negative")+f;case 5292:return Ue+f+Pt+j(f,"basis","preferred-size")+f;case 6060:return Ue+"box-"+j(f,"-grow","")+Ue+f+Pt+j(f,"grow","positive")+f;case 4554:return Ue+j(f,/([^-])(transform)/g,"$1"+Ue+"$2")+f;case 6187:return j(j(j(f,/(zoom-|grab)/,Ue+"$1"),/(image-set)/,Ue+"$1"),f,"")+f;case 5495:case 3959:return j(f,/(image-set\([^]*)/,Ue+"$1$`$1");case 4968:return j(j(f,/(.+:)(flex-)?(.*)/,Ue+"box-pack:$3"+Pt+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Ue+f+f;case 4095:case 3583:case 4068:case 2532:return j(f,/(.+)-inline(.+)/,Ue+"$1$2")+f;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(H(f)-1-X>6)switch(re(f,X+1)){case 109:if(re(f,X+4)!==45)break;case 102:return j(f,/(.+:)(.+)-([^]+)/,"$1"+Ue+"$2-$3$1"+dt+(re(f,X+3)==108?"$3":"$2-$3"))+f;case 115:return~k(f,"stretch")?Se(j(f,"stretch","fill-available"),X)+f:f}break;case 4949:if(re(f,X+1)!==115)break;case 6444:switch(re(f,H(f)-3-(~k(f,"!important")&&10))){case 107:return j(f,":",":"+Ue)+f;case 101:return j(f,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Ue+(re(f,14)===45?"inline-":"")+"box$3$1"+Ue+"$2$3$1"+Pt+"$2box$3")+f}break;case 5936:switch(re(f,X+11)){case 114:return Ue+f+Pt+j(f,/[svh]\w+-[tblr]{2}/,"tb")+f;case 108:return Ue+f+Pt+j(f,/[svh]\w+-[tblr]{2}/,"tb-rl")+f;case 45:return Ue+f+Pt+j(f,/[svh]\w+-[tblr]{2}/,"lr")+f}return Ue+f+Pt+f+f}return f}var Xe=function(X,xe,ge,Ve){if(X.length>-1&&!X.return)switch(X.type){case Bt:X.return=Se(X.value,X.length);break;case de:return z([P(X,{value:j(X.value,"@","@"+Ue)})],Ve);case en:if(X.length)return O(X.props,function(rt){switch(L(rt,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return z([P(X,{props:[j(rt,/:(read-\w+)/,":"+dt+"$1")]})],Ve);case"::placeholder":return z([P(X,{props:[j(rt,/:(plac\w+)/,":"+Ue+"input-$1")]}),P(X,{props:[j(rt,/:(plac\w+)/,":"+dt+"$1")]}),P(X,{props:[j(rt,/:(plac\w+)/,Pt+"input-$1")]})],Ve)}return""})}},pt=[Xe],kt=function(X){var xe=X.key;if(xe==="css"){var ge=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(ge,function(nn){var On=nn.getAttribute("data-emotion");On.indexOf(" ")!==-1&&(document.head.appendChild(nn),nn.setAttribute("data-s",""))})}var Ve=X.stylisPlugins||pt,rt={},tn,zt=[];tn=X.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+xe+' "]'),function(nn){for(var On=nn.getAttribute("data-emotion").split(" "),Pn=1;Pn<On.length;Pn++)rt[On[Pn]]=!0;zt.push(nn)});var un,Kt=[m,F];{var Yt,rn=[Ce,at(function(nn){Yt.insert(nn)})],jt=lt(Kt.concat(Ve,rn)),bn=function(On){return z(ft(On),jt)};un=function(On,Pn,xn,pn){Yt=xn,bn(On?On+"{"+Pn.styles+"}":Pn.styles),pn&&(An.inserted[Pn.name]=!0)}}var An={key:xe,sheet:new t({key:xe,container:tn,nonce:X.nonce,speedy:X.speedy,prepend:X.prepend,insertionPoint:X.insertionPoint}),nonce:X.nonce,inserted:rt,registered:{},insert:un};return An.sheet.hydrate(zt),An}},5330:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(s){var t=Object.create(null);return function(T){return t[T]===void 0&&(t[T]=s(T)),t[T]}}},1664:(he,R,e)=>{"use strict";e.d(R,{C:()=>v,T:()=>k,i:()=>w,w:()=>j});var n=e(4999),s=e(5789),t=e(4332),T=e(4440),w=!0,g={}.hasOwnProperty,d=n.createContext(typeof HTMLElement!="undefined"?(0,s.A)({key:"css"}):null),v=d.Provider,L=function(){return useContext(d)},j=function(N){return(0,n.forwardRef)(function(q,Z){var me=(0,n.useContext)(d);return N(q,me,Z)})};w||(j=function(N){return function(q){var Z=(0,n.useContext)(d);return Z===null?(Z=(0,s.A)({key:"css"}),n.createElement(d.Provider,{value:Z},N(q,Z))):N(q,Z)}});var k=n.createContext({}),re=function(){return React.useContext(k)},K=function(N,q){if(typeof q=="function"){var Z=q(N);return Z}return _extends({},N,q)},H=null,W=function(N){var q=React.useContext(k);return N.theme!==q&&(q=H(q)(N.theme)),React.createElement(k.Provider,{value:q},N.children)};function B(b){var N=b.displayName||b.name||"Component",q=function(_e,Te){var Le=React.useContext(k);return React.createElement(b,_extends({theme:Le,ref:Te},_e))},Z=React.forwardRef(q);return Z.displayName="WithTheme("+N+")",hoistNonReactStatics(Z,b)}var O=function(N){var q=N.split(".");return q[q.length-1]},ie=function(N){var q=/^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(N);if(q||(q=/^([A-Za-z0-9$.]+)@/.exec(N),q))return O(q[1])},J=new Set(["renderWithHooks","processChild","finishClassComponent","renderToString"]),se=function(N){return N.replace(/\$/g,"-")},A=function(N){if(N)for(var q=N.split(`
`),Z=0;Z<q.length;Z++){var me=ie(q[Z]);if(me){if(J.has(me))break;if(/^[A-Z]/.test(me))return se(me)}}},M="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",_="__EMOTION_LABEL_PLEASE_DO_NOT_USE__",$=function(N,q){var Z={};for(var me in q)g.call(q,me)&&(Z[me]=q[me]);if(Z[M]=N,0)var _e;return Z},P=function(N){var q=N.cache,Z=N.serialized,me=N.isStringTag;return registerStyles(q,Z,me),useInsertionEffectAlwaysWithSyncFallback(function(){return insertStyles(q,Z,me)}),null},c=null,h=null},4742:(he,R,e)=>{"use strict";e.d(R,{AH:()=>K,i7:()=>H,mL:()=>re});var n=e(1664),s=e(4999),t=e(5366),T=e(4440),w=e(4332),g=e(5789),d=e(6639),v=e.n(d),L={name:"@emotion/react",version:"11.11.4",main:"dist/emotion-react.cjs.js",module:"dist/emotion-react.esm.js",browser:{"./dist/emotion-react.esm.js":"./dist/emotion-react.browser.esm.js"},exports:{".":{module:{worker:"./dist/emotion-react.worker.esm.js",browser:"./dist/emotion-react.browser.esm.js",default:"./dist/emotion-react.esm.js"},import:"./dist/emotion-react.cjs.mjs",default:"./dist/emotion-react.cjs.js"},"./jsx-runtime":{module:{worker:"./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",browser:"./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",default:"./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"},import:"./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",default:"./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"},"./_isolated-hnrs":{module:{worker:"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",browser:"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",default:"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"},import:"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",default:"./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"},"./jsx-dev-runtime":{module:{worker:"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",browser:"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",default:"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"},import:"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",default:"./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"},"./package.json":"./package.json","./types/css-prop":"./types/css-prop.d.ts","./macro":{types:{import:"./macro.d.mts",default:"./macro.d.ts"},default:"./macro.js"}},types:"types/index.d.ts",files:["src","dist","jsx-runtime","jsx-dev-runtime","_isolated-hnrs","types/*.d.ts","macro.*"],sideEffects:!1,author:"Emotion Contributors",license:"MIT",scripts:{"test:typescript":"dtslint types"},dependencies:{"@babel/runtime":"^7.18.3","@emotion/babel-plugin":"^11.11.0","@emotion/cache":"^11.11.0","@emotion/serialize":"^1.1.3","@emotion/use-insertion-effect-with-fallbacks":"^1.0.1","@emotion/utils":"^1.2.1","@emotion/weak-memoize":"^0.3.1","hoist-non-react-statics":"^3.3.1"},peerDependencies:{react:">=16.8.0"},peerDependenciesMeta:{"@types/react":{optional:!0}},devDependencies:{"@definitelytyped/dtslint":"0.0.112","@emotion/css":"11.11.2","@emotion/css-prettifier":"1.1.3","@emotion/server":"11.11.0","@emotion/styled":"11.11.0","html-tag-names":"^1.1.2",react:"16.14.0","svg-tag-names":"^1.1.1",typescript:"^4.5.5"},repository:"https://github.com/emotion-js/emotion/tree/main/packages/react",publishConfig:{access:"public"},"umd:main":"dist/emotion-react.umd.min.js",preconstruct:{entrypoints:["./index.js","./jsx-runtime.js","./jsx-dev-runtime.js","./_isolated-hnrs.js"],umdName:"emotionReact",exports:{envConditions:["browser","worker"],extra:{"./types/css-prop":"./types/css-prop.d.ts","./macro":{types:{import:"./macro.d.mts",default:"./macro.d.ts"},default:"./macro.js"}}}}},j=function($,P){var c=arguments;if(P==null||!hasOwn.call(P,"css"))return React.createElement.apply(void 0,c);var h=c.length,b=new Array(h);b[0]=Emotion,b[1]=createEmotionProps($,P);for(var N=2;N<h;N++)b[N]=c[N];return React.createElement.apply(null,b)},k=!1,re=(0,n.w)(function(_,$){var P=_.styles,c=(0,w.J)([P],void 0,s.useContext(n.T));if(!n.i){for(var h,b=c.name,N=c.styles,q=c.next;q!==void 0;)b+=" "+q.name,N+=q.styles,q=q.next;var Z=$.compat===!0,me=$.insert("",{name:b,styles:N},$.sheet,Z);return Z?null:s.createElement("style",(h={},h["data-emotion"]=$.key+"-global "+b,h.dangerouslySetInnerHTML={__html:me},h.nonce=$.sheet.nonce,h))}var _e=s.useRef();return(0,T.i)(function(){var Te=$.key+"-global",Le=new $.sheet.constructor({key:Te,nonce:$.sheet.nonce,container:$.sheet.container,speedy:$.sheet.isSpeedy}),Fe=!1,Ye=document.querySelector('style[data-emotion="'+Te+" "+c.name+'"]');return $.sheet.tags.length&&(Le.before=$.sheet.tags[0]),Ye!==null&&(Fe=!0,Ye.setAttribute("data-emotion",Te),Le.hydrate([Ye])),_e.current=[Le,Fe],function(){Le.flush()}},[$]),(0,T.i)(function(){var Te=_e.current,Le=Te[0],Fe=Te[1];if(Fe){Te[1]=!1;return}if(c.next!==void 0&&(0,t.sk)($,c.next,!0),Le.tags.length){var Ye=Le.tags[Le.tags.length-1].nextElementSibling;Le.before=Ye,Le.flush()}$.insert("",c,Le,!1)},[$,c.name]),null});function K(){for(var _=arguments.length,$=new Array(_),P=0;P<_;P++)$[P]=arguments[P];return(0,w.J)($)}var H=function(){var $=K.apply(void 0,arguments),P="animation-"+$.name;return{name:P,styles:"@keyframes "+P+"{"+$.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},W=function _($){for(var P=$.length,c=0,h="";c<P;c++){var b=$[c];if(b!=null){var N=void 0;switch(typeof b){case"boolean":break;case"object":{if(Array.isArray(b))N=_(b);else{N="";for(var q in b)b[q]&&q&&(N&&(N+=" "),N+=q)}break}default:N=b}N&&(h&&(h+=" "),h+=N)}}return h};function B(_,$,P){var c=[],h=getRegisteredStyles(_,c,P);return c.length<2?P:h+$(c)}var O=function($){var P=$.cache,c=$.serializedArr;return useInsertionEffectAlwaysWithSyncFallback(function(){for(var h=0;h<c.length;h++)insertStyles(P,c[h],!1)}),null},ie=null;if(0)var J,se,A,M},4332:(he,R,e)=>{"use strict";e.d(R,{J:()=>$});function n(P){for(var c=0,h,b=0,N=P.length;N>=4;++b,N-=4)h=P.charCodeAt(b)&255|(P.charCodeAt(++b)&255)<<8|(P.charCodeAt(++b)&255)<<16|(P.charCodeAt(++b)&255)<<24,h=(h&65535)*1540483477+((h>>>16)*59797<<16),h^=h>>>24,c=(h&65535)*1540483477+((h>>>16)*59797<<16)^(c&65535)*1540483477+((c>>>16)*59797<<16);switch(N){case 3:c^=(P.charCodeAt(b+2)&255)<<16;case 2:c^=(P.charCodeAt(b+1)&255)<<8;case 1:c^=P.charCodeAt(b)&255,c=(c&65535)*1540483477+((c>>>16)*59797<<16)}return c^=c>>>13,c=(c&65535)*1540483477+((c>>>16)*59797<<16),((c^c>>>15)>>>0).toString(36)}var s={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},t=e(5330),T=null,w="You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).",g=/[A-Z]|^ms/g,d=/_EMO_([^_]+?)_([^]*?)_EMO_/g,v=function(c){return c.charCodeAt(1)===45},L=function(c){return c!=null&&typeof c!="boolean"},j=(0,t.A)(function(P){return v(P)?P:P.replace(g,"-$&").toLowerCase()}),k=function(c,h){switch(c){case"animation":case"animationName":if(typeof h=="string")return h.replace(d,function(b,N,q){return _={name:N,styles:q,next:_},N})}return s[c]!==1&&!v(c)&&typeof h=="number"&&h!==0?h+"px":h};if(0)var re,K,H,W,B,O;var ie="Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";function J(P,c,h){if(h==null)return"";if(h.__emotion_styles!==void 0)return h;switch(typeof h){case"boolean":return"";case"object":{if(h.anim===1)return _={name:h.name,styles:h.styles,next:_},h.name;if(h.styles!==void 0){var b=h.next;if(b!==void 0)for(;b!==void 0;)_={name:b.name,styles:b.styles,next:_},b=b.next;var N=h.styles+";";return N}return se(P,c,h)}case"function":{if(P!==void 0){var q=_,Z=h(P);return _=q,J(P,c,Z)}break}case"string":if(0)var me,_e;break}if(c==null)return h;var Te=c[h];return Te!==void 0?Te:h}function se(P,c,h){var b="";if(Array.isArray(h))for(var N=0;N<h.length;N++)b+=J(P,c,h[N])+";";else for(var q in h){var Z=h[q];if(typeof Z!="object")c!=null&&c[Z]!==void 0?b+=q+"{"+c[Z]+"}":L(Z)&&(b+=j(q)+":"+k(q,Z)+";");else if(Array.isArray(Z)&&typeof Z[0]=="string"&&(c==null||c[Z[0]]===void 0))for(var me=0;me<Z.length;me++)L(Z[me])&&(b+=j(q)+":"+k(q,Z[me])+";");else{var _e=J(P,c,Z);switch(q){case"animation":case"animationName":{b+=j(q)+":"+_e+";";break}default:b+=q+"{"+_e+"}"}}}return b}var A=/label:\s*([^\s;\n{]+)\s*(;|$)/g,M,_,$=function(c,h,b){if(c.length===1&&typeof c[0]=="object"&&c[0]!==null&&c[0].styles!==void 0)return c[0];var N=!0,q="";_=void 0;var Z=c[0];Z==null||Z.raw===void 0?(N=!1,q+=J(b,h,Z)):q+=Z[0];for(var me=1;me<c.length;me++)q+=J(b,h,c[me]),N&&(q+=Z[me]);var _e;A.lastIndex=0;for(var Te="",Le;(Le=A.exec(q))!==null;)Te+="-"+Le[1];var Fe=n(q)+Te;return{name:Fe,styles:q,next:_}}},4440:(he,R,e)=>{"use strict";e.d(R,{i:()=>w,s:()=>T});var n=e(4999),s=function(d){return d()},t=n.useInsertionEffect?n.useInsertionEffect:!1,T=t||s,w=t||n.useLayoutEffect},5366:(he,R,e)=>{"use strict";e.d(R,{Rk:()=>s,SF:()=>t,sk:()=>T});var n=!0;function s(w,g,d){var v="";return d.split(" ").forEach(function(L){w[L]!==void 0?g.push(w[L]+";"):v+=L+" "}),v}var t=function(g,d,v){var L=g.key+"-"+d.name;(v===!1||n===!1)&&g.registered[L]===void 0&&(g.registered[L]=d.styles)},T=function(g,d,v){t(g,d,v);var L=g.key+"-"+d.name;if(g.inserted[d.name]===void 0){var j=d;do g.insert(d===j?"."+L:"",j,g.sheet,!0),j=j.next;while(j!==void 0)}}},1331:(he,R,e)=>{"use strict";e.d(R,{h:()=>n});function n(s,t=[]){if(s===void 0)return{};const T={};return Object.keys(s).filter(w=>w.match(/^on[A-Z]/)&&typeof s[w]=="function"&&!t.includes(w)).forEach(w=>{T[w]=s[w]}),T}},400:(he,R,e)=>{"use strict";e.d(R,{g:()=>n});function n(s){return typeof s=="string"}},4679:(he,R,e)=>{"use strict";e.d(R,{Q:()=>re});var n=e(8733),s=e(1772),t=e(5006),T=e(400);function w(K,H,W){return K===void 0||(0,T.g)(K)?H:(0,n.A)({},H,{ownerState:(0,n.A)({},H.ownerState,W)})}var g=e(4164),d=e(1331);function v(K){if(K===void 0)return{};const H={};return Object.keys(K).filter(W=>!(W.match(/^on[A-Z]/)&&typeof K[W]=="function")).forEach(W=>{H[W]=K[W]}),H}function L(K){const{getSlotProps:H,additionalProps:W,externalSlotProps:B,externalForwardedProps:O,className:ie}=K;if(!H){const c=(0,g.A)(W==null?void 0:W.className,ie,O==null?void 0:O.className,B==null?void 0:B.className),h=(0,n.A)({},W==null?void 0:W.style,O==null?void 0:O.style,B==null?void 0:B.style),b=(0,n.A)({},W,O,B);return c.length>0&&(b.className=c),Object.keys(h).length>0&&(b.style=h),{props:b,internalRef:void 0}}const J=(0,d.h)((0,n.A)({},O,B)),se=v(B),A=v(O),M=H(J),_=(0,g.A)(M==null?void 0:M.className,W==null?void 0:W.className,ie,O==null?void 0:O.className,B==null?void 0:B.className),$=(0,n.A)({},M==null?void 0:M.style,W==null?void 0:W.style,O==null?void 0:O.style,B==null?void 0:B.style),P=(0,n.A)({},M,W,A,se);return _.length>0&&(P.className=_),Object.keys($).length>0&&(P.style=$),{props:P,internalRef:M.ref}}function j(K,H,W){return typeof K=="function"?K(H,W):K}const k=["elementType","externalSlotProps","ownerState","skipResolvingSlotProps"];function re(K){var H;const{elementType:W,externalSlotProps:B,ownerState:O,skipResolvingSlotProps:ie=!1}=K,J=(0,s.A)(K,k),se=ie?{}:j(B,O),{props:A,internalRef:M}=L((0,n.A)({},J,{externalSlotProps:se})),_=(0,t.A)(M,se==null?void 0:se.ref,(H=K.additionalProps)==null?void 0:H.ref);return w(W,(0,n.A)({},A,{ref:_}),O)}},5211:(he,R,e)=>{"use strict";"use client";Object.defineProperty(R,"__esModule",{value:!0}),Object.defineProperty(R,"default",{enumerable:!0,get:function(){return n.createSvgIcon}});var n=e(6567)},8833:(he,R,e)=>{"use strict";e.d(R,{A:()=>J});var n=e(1772),s=e(8733),t=e(4999),T=e(4164),w=e(2458),g=e(4747),d=e(7437),v=e(1678),L=e(3932),j=e(8748);function k(se){return(0,j.Ay)("MuiBackdrop",se)}const re=(0,L.A)("MuiBackdrop",["root","invisible"]),K=null;var H=e(7343);const W=["children","className","component","components","componentsProps","invisible","open","slotProps","slots","TransitionComponent","transitionDuration"],B=se=>{const{classes:A,invisible:M}=se,_={root:["root",M&&"invisible"]};return(0,w.A)(_,k,A)},O=(0,g.Ay)("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(se,A)=>{const{ownerState:M}=se;return[A.root,M.invisible&&A.invisible]}})(({ownerState:se})=>(0,s.A)({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},se.invisible&&{backgroundColor:"transparent"})),J=t.forwardRef(function(A,M){var _,$,P;const c=(0,d.A)({props:A,name:"MuiBackdrop"}),{children:h,className:b,component:N="div",components:q={},componentsProps:Z={},invisible:me=!1,open:_e,slotProps:Te={},slots:Le={},TransitionComponent:Fe=v.A,transitionDuration:Ye}=c,ut=(0,n.A)(c,W),It=(0,s.A)({},c,{component:N,invisible:me}),bt=B(It),Et=(_=Te.root)!=null?_:Z.root;return(0,H.jsx)(Fe,(0,s.A)({in:_e,timeout:Ye},ut,{children:(0,H.jsx)(O,(0,s.A)({"aria-hidden":!0},Et,{as:($=(P=Le.root)!=null?P:q.Root)!=null?$:N,className:(0,T.A)(bt.root,b,Et==null?void 0:Et.className),ownerState:(0,s.A)({},It,Et==null?void 0:Et.ownerState),classes:bt,ref:M,children:h}))}))})},7157:(he,R,e)=>{"use strict";e.d(R,{A:()=>se});var n=e(8733),s=e(1772),t=e(4999),T=e(4164),w=e(7397),g=e(9416),d=e(6598),v=e(3529),L=e(7343);const j=["className","component"];function k(A={}){const{themeId:M,defaultTheme:_,defaultClassName:$="MuiBox-root",generateClassName:P}=A,c=(0,w.default)("div",{shouldForwardProp:b=>b!=="theme"&&b!=="sx"&&b!=="as"})(g.A);return t.forwardRef(function(N,q){const Z=(0,v.A)(_),me=(0,d.A)(N),{className:_e,component:Te="div"}=me,Le=(0,s.A)(me,j);return(0,L.jsx)(c,(0,n.A)({as:Te,ref:q,className:(0,T.A)(_e,P?P($):$),theme:M&&Z[M]||Z},Le))})}var re=e(4962),K=e(4478),H=e(7891),W=e(3932);const O=(0,W.A)("MuiBox",["root"]),ie=(0,K.A)(),se=k({themeId:H.A,defaultTheme:ie,defaultClassName:O.root,generateClassName:re.A.generate})},2533:(he,R,e)=>{"use strict";e.d(R,{A:()=>nt});var n=e(8733),s=e(1772),t=e(4999),T=e(4164),w=e(2458),g=e(4747),d=e(7437),v=e(6597),L=e(7403),j=e(1158);function k(de){if(de===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return de}var re=e(9691),K=e(4578);function H(de,C){var Ee=function(z){return C&&(0,t.isValidElement)(z)?C(z):z},De=Object.create(null);return de&&t.Children.map(de,function(we){return we}).forEach(function(we){De[we.key]=Ee(we)}),De}function W(de,C){de=de||{},C=C||{};function Ee(Ot){return Ot in C?C[Ot]:de[Ot]}var De=Object.create(null),we=[];for(var z in de)z in C?we.length&&(De[z]=we,we=[]):we.push(z);var Ce,lt={};for(var at in C){if(De[at])for(Ce=0;Ce<De[at].length;Ce++){var et=De[at][Ce];lt[De[at][Ce]]=Ee(et)}lt[at]=Ee(at)}for(Ce=0;Ce<we.length;Ce++)lt[we[Ce]]=Ee(we[Ce]);return lt}function B(de,C,Ee){return Ee[C]!=null?Ee[C]:de.props[C]}function O(de,C){return H(de.children,function(Ee){return(0,t.cloneElement)(Ee,{onExited:C.bind(null,Ee),in:!0,appear:B(Ee,"appear",de),enter:B(Ee,"enter",de),exit:B(Ee,"exit",de)})})}function ie(de,C,Ee){var De=H(de.children),we=W(C,De);return Object.keys(we).forEach(function(z){var Ce=we[z];if((0,t.isValidElement)(Ce)){var lt=z in C,at=z in De,et=C[z],Ot=(0,t.isValidElement)(et)&&!et.props.in;at&&(!lt||Ot)?we[z]=(0,t.cloneElement)(Ce,{onExited:Ee.bind(null,Ce),in:!0,exit:B(Ce,"exit",de),enter:B(Ce,"enter",de)}):!at&&lt&&!Ot?we[z]=(0,t.cloneElement)(Ce,{in:!1}):at&&lt&&(0,t.isValidElement)(et)&&(we[z]=(0,t.cloneElement)(Ce,{onExited:Ee.bind(null,Ce),in:et.props.in,exit:B(Ce,"exit",de),enter:B(Ce,"enter",de)}))}}),we}var J=Object.values||function(de){return Object.keys(de).map(function(C){return de[C]})},se={component:"div",childFactory:function(C){return C}},A=function(de){(0,re.A)(C,de);function C(De,we){var z;z=de.call(this,De,we)||this;var Ce=z.handleExited.bind(k(z));return z.state={contextValue:{isMounting:!0},handleExited:Ce,firstRender:!0},z}var Ee=C.prototype;return Ee.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},Ee.componentWillUnmount=function(){this.mounted=!1},C.getDerivedStateFromProps=function(we,z){var Ce=z.children,lt=z.handleExited,at=z.firstRender;return{children:at?O(we,lt):ie(we,Ce,lt),firstRender:!1}},Ee.handleExited=function(we,z){var Ce=H(this.props.children);we.key in Ce||(we.props.onExited&&we.props.onExited(z),this.mounted&&this.setState(function(lt){var at=(0,n.A)({},lt.children);return delete at[we.key],{children:at}}))},Ee.render=function(){var we=this.props,z=we.component,Ce=we.childFactory,lt=(0,s.A)(we,["component","childFactory"]),at=this.state.contextValue,et=J(this.state.children).map(Ce);return delete lt.appear,delete lt.enter,delete lt.exit,z===null?t.createElement(K.A.Provider,{value:at},et):t.createElement(K.A.Provider,{value:at},t.createElement(z,lt,et))},C}(t.Component);A.propTypes={},A.defaultProps=se;const M=A;var _=e(4742),$=e(5515),P=e(7343);function c(de){const{className:C,classes:Ee,pulsate:De=!1,rippleX:we,rippleY:z,rippleSize:Ce,in:lt,onExited:at,timeout:et}=de,[Ot,ft]=t.useState(!1),_t=(0,T.A)(C,Ee.ripple,Ee.rippleVisible,De&&Ee.ripplePulsate),Lt={width:Ce,height:Ce,top:-(Ce/2)+z,left:-(Ce/2)+we},Ut=(0,T.A)(Ee.child,Ot&&Ee.childLeaving,De&&Ee.childPulsate);return!lt&&!Ot&&ft(!0),t.useEffect(()=>{if(!lt&&at!=null){const $t=setTimeout(at,et);return()=>{clearTimeout($t)}}},[at,lt,et]),(0,P.jsx)("span",{className:_t,style:Lt,children:(0,P.jsx)("span",{className:Ut})})}const h=c;var b=e(3932);function N(de){return generateUtilityClass("MuiTouchRipple",de)}const Z=(0,b.A)("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]);var me=Math.pow;const _e=["center","classes","className"];let Te=de=>de,Le,Fe,Ye,ut;const It=550,bt=80,Et=(0,_.i7)(Le||(Le=Te`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),Ft=(0,_.i7)(Fe||(Fe=Te`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),Pt=(0,_.i7)(Ye||(Ye=Te`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),dt=(0,g.Ay)("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),Ue=(0,g.Ay)(h,{name:"MuiTouchRipple",slot:"Ripple"})(ut||(ut=Te`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Z.rippleVisible,Et,It,({theme:de})=>de.transitions.easing.easeInOut,Z.ripplePulsate,({theme:de})=>de.transitions.duration.shorter,Z.child,Z.childLeaving,Ft,It,({theme:de})=>de.transitions.easing.easeInOut,Z.childPulsate,Pt,({theme:de})=>de.transitions.easing.easeInOut),en=t.forwardRef(function(C,Ee){const De=(0,d.A)({props:C,name:"MuiTouchRipple"}),{center:we=!1,classes:z={},className:Ce}=De,lt=(0,s.A)(De,_e),[at,et]=t.useState([]),Ot=t.useRef(0),ft=t.useRef(null);t.useEffect(()=>{ft.current&&(ft.current(),ft.current=null)},[at]);const _t=t.useRef(!1),Lt=(0,$.A)(),Ut=t.useRef(null),$t=t.useRef(null),mt=t.useCallback(m=>{const{pulsate:F,rippleX:ee,rippleY:V,rippleSize:Ae,cb:Pe}=m;et(Re=>[...Re,(0,P.jsx)(Ue,{classes:{ripple:(0,T.A)(z.ripple,Z.ripple),rippleVisible:(0,T.A)(z.rippleVisible,Z.rippleVisible),ripplePulsate:(0,T.A)(z.ripplePulsate,Z.ripplePulsate),child:(0,T.A)(z.child,Z.child),childLeaving:(0,T.A)(z.childLeaving,Z.childLeaving),childPulsate:(0,T.A)(z.childPulsate,Z.childPulsate)},timeout:It,pulsate:F,rippleX:ee,rippleY:V,rippleSize:Ae},Ot.current)]),Ot.current+=1,ft.current=Pe},[z]),G=t.useCallback((m={},F={},ee=()=>{})=>{const{pulsate:V=!1,center:Ae=we||F.pulsate,fakeElement:Pe=!1}=F;if((m==null?void 0:m.type)==="mousedown"&&_t.current){_t.current=!1;return}(m==null?void 0:m.type)==="touchstart"&&(_t.current=!0);const Re=Pe?null:$t.current,ye=Re?Re.getBoundingClientRect():{width:0,height:0,left:0,top:0};let pe,Se,Xe;if(Ae||m===void 0||m.clientX===0&&m.clientY===0||!m.clientX&&!m.touches)pe=Math.round(ye.width/2),Se=Math.round(ye.height/2);else{const{clientX:pt,clientY:kt}=m.touches&&m.touches.length>0?m.touches[0]:m;pe=Math.round(pt-ye.left),Se=Math.round(kt-ye.top)}if(Ae)Xe=Math.sqrt((2*me(ye.width,2)+me(ye.height,2))/3),Xe%2===0&&(Xe+=1);else{const pt=Math.max(Math.abs((Re?Re.clientWidth:0)-pe),pe)*2+2,kt=Math.max(Math.abs((Re?Re.clientHeight:0)-Se),Se)*2+2;Xe=Math.sqrt(me(pt,2)+me(kt,2))}m!=null&&m.touches?Ut.current===null&&(Ut.current=()=>{mt({pulsate:V,rippleX:pe,rippleY:Se,rippleSize:Xe,cb:ee})},Lt.start(bt,()=>{Ut.current&&(Ut.current(),Ut.current=null)})):mt({pulsate:V,rippleX:pe,rippleY:Se,rippleSize:Xe,cb:ee})},[we,mt,Lt]),Q=t.useCallback(()=>{G({},{pulsate:!0})},[G]),y=t.useCallback((m,F)=>{if(Lt.clear(),(m==null?void 0:m.type)==="touchend"&&Ut.current){Ut.current(),Ut.current=null,Lt.start(0,()=>{y(m,F)});return}Ut.current=null,et(ee=>ee.length>0?ee.slice(1):ee),ft.current=F},[Lt]);return t.useImperativeHandle(Ee,()=>({pulsate:Q,start:G,stop:y}),[Q,G,y]),(0,P.jsx)(dt,(0,n.A)({className:(0,T.A)(Z.root,z.root,Ce),ref:$t},lt,{children:(0,P.jsx)(M,{component:null,exit:!0,children:at})}))});var Bt=e(8748);function sn(de){return(0,Bt.Ay)("MuiButtonBase",de)}const ln=(0,b.A)("MuiButtonBase",["root","disabled","focusVisible"]),Nt=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],Zt=de=>{const{disabled:C,focusVisible:Ee,focusVisibleClassName:De,classes:we}=de,z={root:["root",C&&"disabled",Ee&&"focusVisible"]},Ce=(0,w.A)(z,sn,we);return Ee&&De&&(Ce.root+=` ${De}`),Ce},Oe=(0,g.Ay)("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(de,C)=>C.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${ln.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),nt=t.forwardRef(function(C,Ee){const De=(0,d.A)({props:C,name:"MuiButtonBase"}),{action:we,centerRipple:z=!1,children:Ce,className:lt,component:at="button",disabled:et=!1,disableRipple:Ot=!1,disableTouchRipple:ft=!1,focusRipple:_t=!1,LinkComponent:Lt="a",onBlur:Ut,onClick:$t,onContextMenu:mt,onDragLeave:G,onFocus:Q,onFocusVisible:y,onKeyDown:m,onKeyUp:F,onMouseDown:ee,onMouseLeave:V,onMouseUp:Ae,onTouchEnd:Pe,onTouchMove:Re,onTouchStart:ye,tabIndex:pe=0,TouchRippleProps:Se,touchRippleRef:Xe,type:pt}=De,kt=(0,s.A)(De,Nt),f=t.useRef(null),X=t.useRef(null),xe=(0,v.A)(X,Xe),{isFocusVisibleRef:ge,onFocus:Ve,onBlur:rt,ref:tn}=(0,j.A)(),[zt,un]=t.useState(!1);et&&zt&&un(!1),t.useImperativeHandle(we,()=>({focusVisible:()=>{un(!0),f.current.focus()}}),[]);const[Kt,Yt]=t.useState(!1);t.useEffect(()=>{Yt(!0)},[]);const rn=Kt&&!Ot&&!et;t.useEffect(()=>{zt&&_t&&!Ot&&Kt&&X.current.pulsate()},[Ot,_t,zt,Kt]);function jt(Jt,lr,hr=ft){return(0,L.A)(Xn=>(lr&&lr(Xn),!hr&&X.current&&X.current[Jt](Xn),!0))}const bn=jt("start",ee),An=jt("stop",mt),nn=jt("stop",G),On=jt("stop",Ae),Pn=jt("stop",Jt=>{zt&&Jt.preventDefault(),V&&V(Jt)}),xn=jt("start",ye),pn=jt("stop",Pe),jn=jt("stop",Re),qn=jt("stop",Jt=>{rt(Jt),ge.current===!1&&un(!1),Ut&&Ut(Jt)},!1),wn=(0,L.A)(Jt=>{f.current||(f.current=Jt.currentTarget),Ve(Jt),ge.current===!0&&(un(!0),y&&y(Jt)),Q&&Q(Jt)}),on=()=>{const Jt=f.current;return at&&at!=="button"&&!(Jt.tagName==="A"&&Jt.href)},rr=t.useRef(!1),$n=(0,L.A)(Jt=>{_t&&!rr.current&&zt&&X.current&&Jt.key===" "&&(rr.current=!0,X.current.stop(Jt,()=>{X.current.start(Jt)})),Jt.target===Jt.currentTarget&&on()&&Jt.key===" "&&Jt.preventDefault(),m&&m(Jt),Jt.target===Jt.currentTarget&&on()&&Jt.key==="Enter"&&!et&&(Jt.preventDefault(),$t&&$t(Jt))}),ur=(0,L.A)(Jt=>{_t&&Jt.key===" "&&X.current&&zt&&!Jt.defaultPrevented&&(rr.current=!1,X.current.stop(Jt,()=>{X.current.pulsate(Jt)})),F&&F(Jt),$t&&Jt.target===Jt.currentTarget&&on()&&Jt.key===" "&&!Jt.defaultPrevented&&$t(Jt)});let er=at;er==="button"&&(kt.href||kt.to)&&(er=Lt);const or={};er==="button"?(or.type=pt===void 0?"button":pt,or.disabled=et):(!kt.href&&!kt.to&&(or.role="button"),et&&(or["aria-disabled"]=et));const ir=(0,v.A)(Ee,tn,f),pr=(0,n.A)({},De,{centerRipple:z,component:at,disabled:et,disableRipple:Ot,disableTouchRipple:ft,focusRipple:_t,tabIndex:pe,focusVisible:zt}),gr=Zt(pr);return(0,P.jsxs)(Oe,(0,n.A)({as:er,className:(0,T.A)(gr.root,lt),ownerState:pr,onBlur:qn,onClick:$t,onContextMenu:An,onFocus:wn,onKeyDown:$n,onKeyUp:ur,onMouseDown:bn,onMouseLeave:Pn,onMouseUp:On,onDragLeave:nn,onTouchEnd:pn,onTouchMove:jn,onTouchStart:xn,ref:ir,tabIndex:et?-1:pe,type:pt},or,kt,{children:[Ce,rn?(0,P.jsx)(en,(0,n.A)({ref:xe,center:z},Se)):null]}))})},1678:(he,R,e)=>{"use strict";e.d(R,{A:()=>re});var n=e(8733),s=e(1772),t=e(4999),T=e(5954),w=e(2756),g=e(9785),d=e(6597),v=e(7343);const L=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],j={entering:{opacity:1},entered:{opacity:1}},re=t.forwardRef(function(H,W){const B=(0,w.A)(),O={enter:B.transitions.duration.enteringScreen,exit:B.transitions.duration.leavingScreen},{addEndListener:ie,appear:J=!0,children:se,easing:A,in:M,onEnter:_,onEntered:$,onEntering:P,onExit:c,onExited:h,onExiting:b,style:N,timeout:q=O,TransitionComponent:Z=T.Ay}=H,me=(0,s.A)(H,L),_e=!0,Te=t.useRef(null),Le=(0,d.A)(Te,se.ref,W),Fe=dt=>Ue=>{if(dt){const Dt=Te.current;Ue===void 0?dt(Dt):dt(Dt,Ue)}},Ye=Fe(P),ut=Fe((dt,Ue)=>{(0,g.q)(dt);const Dt=(0,g.c)({style:N,timeout:q,easing:A},{mode:"enter"});dt.style.webkitTransition=B.transitions.create("opacity",Dt),dt.style.transition=B.transitions.create("opacity",Dt),_&&_(dt,Ue)}),It=Fe($),bt=Fe(b),Et=Fe(dt=>{const Ue=(0,g.c)({style:N,timeout:q,easing:A},{mode:"exit"});dt.style.webkitTransition=B.transitions.create("opacity",Ue),dt.style.transition=B.transitions.create("opacity",Ue),c&&c(dt)}),Ft=Fe(h),Pt=dt=>{ie&&ie(Te.current,dt)};return(0,v.jsx)(Z,(0,n.A)({appear:J,in:M,nodeRef:_e?Te:void 0,onEnter:ut,onEntered:It,onEntering:Ye,onExit:Et,onExited:Ft,onExiting:bt,addEndListener:Pt,timeout:q},me,{children:(dt,Ue)=>t.cloneElement(se,(0,n.A)({style:(0,n.A)({opacity:0,visibility:dt==="exited"&&!M?"hidden":void 0},j[dt],N,se.props.style),ref:Le},Ue))}))})},7076:(he,R,e)=>{"use strict";e.d(R,{A:()=>B});var n=e(8733),s=e(1772),t=e(4999),T=e(5515),w=e(5954),g=e(2756),d=e(9785),v=e(6597),L=e(7343),j=Math.pow;const k=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function re(O){return`scale(${O}, ${j(O,2)})`}const K={entering:{opacity:1,transform:re(1)},entered:{opacity:1,transform:"none"}},H=typeof navigator!="undefined"&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),W=t.forwardRef(function(ie,J){const{addEndListener:se,appear:A=!0,children:M,easing:_,in:$,onEnter:P,onEntered:c,onEntering:h,onExit:b,onExited:N,onExiting:q,style:Z,timeout:me="auto",TransitionComponent:_e=w.Ay}=ie,Te=(0,s.A)(ie,k),Le=(0,T.A)(),Fe=t.useRef(),Ye=(0,g.A)(),ut=t.useRef(null),It=(0,v.A)(ut,M.ref,J),bt=Bt=>sn=>{if(Bt){const an=ut.current;sn===void 0?Bt(an):Bt(an,sn)}},Et=bt(h),Ft=bt((Bt,sn)=>{(0,d.q)(Bt);const{duration:an,delay:ln,easing:Nt}=(0,d.c)({style:Z,timeout:me,easing:_},{mode:"enter"});let Zt;me==="auto"?(Zt=Ye.transitions.getAutoHeightDuration(Bt.clientHeight),Fe.current=Zt):Zt=an,Bt.style.transition=[Ye.transitions.create("opacity",{duration:Zt,delay:ln}),Ye.transitions.create("transform",{duration:H?Zt:Zt*.666,delay:ln,easing:Nt})].join(","),P&&P(Bt,sn)}),Pt=bt(c),dt=bt(q),Ue=bt(Bt=>{const{duration:sn,delay:an,easing:ln}=(0,d.c)({style:Z,timeout:me,easing:_},{mode:"exit"});let Nt;me==="auto"?(Nt=Ye.transitions.getAutoHeightDuration(Bt.clientHeight),Fe.current=Nt):Nt=sn,Bt.style.transition=[Ye.transitions.create("opacity",{duration:Nt,delay:an}),Ye.transitions.create("transform",{duration:H?Nt:Nt*.666,delay:H?an:an||Nt*.333,easing:ln})].join(","),Bt.style.opacity=0,Bt.style.transform=re(.75),b&&b(Bt)}),Dt=bt(N),en=Bt=>{me==="auto"&&Le.start(Fe.current||0,Bt),se&&se(ut.current,Bt)};return(0,L.jsx)(_e,(0,n.A)({appear:A,in:$,nodeRef:ut,onEnter:Ft,onEntered:Pt,onEntering:Et,onExit:Ue,onExited:Dt,onExiting:dt,addEndListener:en,timeout:me==="auto"?null:me},Te,{children:(Bt,sn)=>t.cloneElement(M,(0,n.A)({style:(0,n.A)({opacity:0,transform:re(.75),visibility:Bt==="exited"&&!$?"hidden":void 0},K[Bt],Z,M.props.style),ref:It},sn))}))});W.muiSupportAuto=!0;const B=W},916:(he,R,e)=>{"use strict";e.d(R,{A:()=>A});var n=e(1772),s=e(8733),t=e(4999),T=e(4164),w=e(2458),g=e(1742),d=e(4747),v=e(3487),L=e(7437),j=e(2533),k=e(7289),re=e(6597),K=e(9199),H=e(5150),W=e(7343);const B=["alignItems","autoFocus","component","children","dense","disableGutters","divider","focusVisibleClassName","selected","className"],O=(M,_)=>{const{ownerState:$}=M;return[_.root,$.dense&&_.dense,$.alignItems==="flex-start"&&_.alignItemsFlexStart,$.divider&&_.divider,!$.disableGutters&&_.gutters]},ie=M=>{const{alignItems:_,classes:$,dense:P,disabled:c,disableGutters:h,divider:b,selected:N}=M,q={root:["root",P&&"dense",!h&&"gutters",b&&"divider",c&&"disabled",_==="flex-start"&&"alignItemsFlexStart",N&&"selected"]},Z=(0,w.A)(q,H.Y,$);return(0,s.A)({},$,Z)},J=(0,d.Ay)(j.A,{shouldForwardProp:M=>(0,v.A)(M)||M==="classes",name:"MuiListItemButton",slot:"Root",overridesResolver:O})(({theme:M,ownerState:_})=>(0,s.A)({display:"flex",flexGrow:1,justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minWidth:0,boxSizing:"border-box",textAlign:"left",paddingTop:8,paddingBottom:8,transition:M.transitions.create("background-color",{duration:M.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(M.vars||M).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${H.A.selected}`]:{backgroundColor:M.vars?`rgba(${M.vars.palette.primary.mainChannel} / ${M.vars.palette.action.selectedOpacity})`:(0,g.X4)(M.palette.primary.main,M.palette.action.selectedOpacity),[`&.${H.A.focusVisible}`]:{backgroundColor:M.vars?`rgba(${M.vars.palette.primary.mainChannel} / calc(${M.vars.palette.action.selectedOpacity} + ${M.vars.palette.action.focusOpacity}))`:(0,g.X4)(M.palette.primary.main,M.palette.action.selectedOpacity+M.palette.action.focusOpacity)}},[`&.${H.A.selected}:hover`]:{backgroundColor:M.vars?`rgba(${M.vars.palette.primary.mainChannel} / calc(${M.vars.palette.action.selectedOpacity} + ${M.vars.palette.action.hoverOpacity}))`:(0,g.X4)(M.palette.primary.main,M.palette.action.selectedOpacity+M.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:M.vars?`rgba(${M.vars.palette.primary.mainChannel} / ${M.vars.palette.action.selectedOpacity})`:(0,g.X4)(M.palette.primary.main,M.palette.action.selectedOpacity)}},[`&.${H.A.focusVisible}`]:{backgroundColor:(M.vars||M).palette.action.focus},[`&.${H.A.disabled}`]:{opacity:(M.vars||M).palette.action.disabledOpacity}},_.divider&&{borderBottom:`1px solid ${(M.vars||M).palette.divider}`,backgroundClip:"padding-box"},_.alignItems==="flex-start"&&{alignItems:"flex-start"},!_.disableGutters&&{paddingLeft:16,paddingRight:16},_.dense&&{paddingTop:4,paddingBottom:4})),A=t.forwardRef(function(_,$){const P=(0,L.A)({props:_,name:"MuiListItemButton"}),{alignItems:c="center",autoFocus:h=!1,component:b="div",children:N,dense:q=!1,disableGutters:Z=!1,divider:me=!1,focusVisibleClassName:_e,selected:Te=!1,className:Le}=P,Fe=(0,n.A)(P,B),Ye=t.useContext(K.A),ut=t.useMemo(()=>({dense:q||Ye.dense||!1,alignItems:c,disableGutters:Z}),[c,Ye.dense,q,Z]),It=t.useRef(null);(0,k.A)(()=>{h&&It.current&&It.current.focus()},[h]);const bt=(0,s.A)({},P,{alignItems:c,dense:ut.dense,disableGutters:Z,divider:me,selected:Te}),Et=ie(bt),Ft=(0,re.A)(It,$);return(0,W.jsx)(K.A.Provider,{value:ut,children:(0,W.jsx)(J,(0,s.A)({ref:Ft,href:Fe.href||Fe.to,component:(Fe.href||Fe.to)&&b==="div"?"button":b,focusVisibleClassName:(0,T.A)(Et.focusVisible,_e),ownerState:bt,className:(0,T.A)(Et.root,Le)},Fe,{classes:Et,children:N}))})})},5150:(he,R,e)=>{"use strict";e.d(R,{A:()=>w,Y:()=>t});var n=e(3932),s=e(8748);function t(g){return(0,s.Ay)("MuiListItemButton",g)}const w=(0,n.A)("MuiListItemButton",["root","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","selected"])},9791:(he,R,e)=>{"use strict";e.d(R,{A:()=>se});var n=e(1772),s=e(8733),t=e(4999),T=e(4164),w=e(2458),g=e(1362),d=e(9199),v=e(7437),L=e(4747),j=e(3932),k=e(8748);function re(A){return(0,k.Ay)("MuiListItemText",A)}const H=(0,j.A)("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]);var W=e(7343);const B=["children","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"],O=A=>{const{classes:M,inset:_,primary:$,secondary:P,dense:c}=A,h={root:["root",_&&"inset",c&&"dense",$&&P&&"multiline"],primary:["primary"],secondary:["secondary"]};return(0,w.A)(h,re,M)},ie=(0,L.Ay)("div",{name:"MuiListItemText",slot:"Root",overridesResolver:(A,M)=>{const{ownerState:_}=A;return[{[`& .${H.primary}`]:M.primary},{[`& .${H.secondary}`]:M.secondary},M.root,_.inset&&M.inset,_.primary&&_.secondary&&M.multiline,_.dense&&M.dense]}})(({ownerState:A})=>(0,s.A)({flex:"1 1 auto",minWidth:0,marginTop:4,marginBottom:4},A.primary&&A.secondary&&{marginTop:6,marginBottom:6},A.inset&&{paddingLeft:56})),se=t.forwardRef(function(M,_){const $=(0,v.A)({props:M,name:"MuiListItemText"}),{children:P,className:c,disableTypography:h=!1,inset:b=!1,primary:N,primaryTypographyProps:q,secondary:Z,secondaryTypographyProps:me}=$,_e=(0,n.A)($,B),{dense:Te}=t.useContext(d.A);let Le=N!=null?N:P,Fe=Z;const Ye=(0,s.A)({},$,{disableTypography:h,inset:b,primary:!!Le,secondary:!!Fe,dense:Te}),ut=O(Ye);return Le!=null&&Le.type!==g.A&&!h&&(Le=(0,W.jsx)(g.A,(0,s.A)({variant:Te?"body2":"body1",className:ut.primary,component:q!=null&&q.variant?void 0:"span",display:"block"},q,{children:Le}))),Fe!=null&&Fe.type!==g.A&&!h&&(Fe=(0,W.jsx)(g.A,(0,s.A)({variant:"body2",className:ut.secondary,color:"text.secondary",display:"block"},me,{children:Fe}))),(0,W.jsxs)(ie,(0,s.A)({className:(0,T.A)(ut.root,c),ownerState:Ye,ref:_},_e,{children:[Le,Fe]}))})},9275:(he,R,e)=>{"use strict";e.d(R,{A:()=>J});var n=e(1772),s=e(8733),t=e(4999),T=e(4164),w=e(2458),g=e(4747),d=e(7437),v=e(9199),L=e(3932),j=e(8748);function k(se){return(0,j.Ay)("MuiList",se)}const re=(0,L.A)("MuiList",["root","padding","dense","subheader"]),K=null;var H=e(7343);const W=["children","className","component","dense","disablePadding","subheader"],B=se=>{const{classes:A,disablePadding:M,dense:_,subheader:$}=se,P={root:["root",!M&&"padding",_&&"dense",$&&"subheader"]};return(0,w.A)(P,k,A)},O=(0,g.Ay)("ul",{name:"MuiList",slot:"Root",overridesResolver:(se,A)=>{const{ownerState:M}=se;return[A.root,!M.disablePadding&&A.padding,M.dense&&A.dense,M.subheader&&A.subheader]}})(({ownerState:se})=>(0,s.A)({listStyle:"none",margin:0,padding:0,position:"relative"},!se.disablePadding&&{paddingTop:8,paddingBottom:8},se.subheader&&{paddingTop:0})),J=t.forwardRef(function(A,M){const _=(0,d.A)({props:A,name:"MuiList"}),{children:$,className:P,component:c="ul",dense:h=!1,disablePadding:b=!1,subheader:N}=_,q=(0,n.A)(_,W),Z=t.useMemo(()=>({dense:h}),[h]),me=(0,s.A)({},_,{component:c,dense:h,disablePadding:b}),_e=B(me);return(0,H.jsx)(v.A.Provider,{value:Z,children:(0,H.jsxs)(O,(0,s.A)({as:c,className:(0,T.A)(_e.root,P),ref:M,ownerState:me},q,{children:[N,$]}))})})},9199:(he,R,e)=>{"use strict";e.d(R,{A:()=>t});var n=e(4999);const t=n.createContext({})},9916:(he,R,e)=>{"use strict";e.d(R,{A:()=>Zt});var n=e(1772),s=e(8733),t=e(4999),T=e(4164),w=e(4679),g=e(5006),d=e(6684),v=e(1806),L=e(4864),j=e(1331),k=e(1676),re=e(7532);function K(Oe){const ke=(0,d.A)(Oe);return ke.body===Oe?(0,k.A)(Oe).innerWidth>ke.documentElement.clientWidth:Oe.scrollHeight>Oe.clientHeight}function H(Oe,ke){ke?Oe.setAttribute("aria-hidden","true"):Oe.removeAttribute("aria-hidden")}function W(Oe){return parseInt((0,k.A)(Oe).getComputedStyle(Oe).paddingRight,10)||0}function B(Oe){const nt=["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].indexOf(Oe.tagName)!==-1,de=Oe.tagName==="INPUT"&&Oe.getAttribute("type")==="hidden";return nt||de}function O(Oe,ke,nt,de,C){const Ee=[ke,nt,...de];[].forEach.call(Oe.children,De=>{const we=Ee.indexOf(De)===-1,z=!B(De);we&&z&&H(De,C)})}function ie(Oe,ke){let nt=-1;return Oe.some((de,C)=>ke(de)?(nt=C,!0):!1),nt}function J(Oe,ke){const nt=[],de=Oe.container;if(!ke.disableScrollLock){if(K(de)){const De=(0,re.A)((0,d.A)(de));nt.push({value:de.style.paddingRight,property:"padding-right",el:de}),de.style.paddingRight=`${W(de)+De}px`;const we=(0,d.A)(de).querySelectorAll(".mui-fixed");[].forEach.call(we,z=>{nt.push({value:z.style.paddingRight,property:"padding-right",el:z}),z.style.paddingRight=`${W(z)+De}px`})}let Ee;if(de.parentNode instanceof DocumentFragment)Ee=(0,d.A)(de).body;else{const De=de.parentElement,we=(0,k.A)(de);Ee=(De==null?void 0:De.nodeName)==="HTML"&&we.getComputedStyle(De).overflowY==="scroll"?De:de}nt.push({value:Ee.style.overflow,property:"overflow",el:Ee},{value:Ee.style.overflowX,property:"overflow-x",el:Ee},{value:Ee.style.overflowY,property:"overflow-y",el:Ee}),Ee.style.overflow="hidden"}return()=>{nt.forEach(({value:Ee,el:De,property:we})=>{Ee?De.style.setProperty(we,Ee):De.style.removeProperty(we)})}}function se(Oe){const ke=[];return[].forEach.call(Oe.children,nt=>{nt.getAttribute("aria-hidden")==="true"&&ke.push(nt)}),ke}class A{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(ke,nt){let de=this.modals.indexOf(ke);if(de!==-1)return de;de=this.modals.length,this.modals.push(ke),ke.modalRef&&H(ke.modalRef,!1);const C=se(nt);O(nt,ke.mount,ke.modalRef,C,!0);const Ee=ie(this.containers,De=>De.container===nt);return Ee!==-1?(this.containers[Ee].modals.push(ke),de):(this.containers.push({modals:[ke],container:nt,restore:null,hiddenSiblings:C}),de)}mount(ke,nt){const de=ie(this.containers,Ee=>Ee.modals.indexOf(ke)!==-1),C=this.containers[de];C.restore||(C.restore=J(C,nt))}remove(ke,nt=!0){const de=this.modals.indexOf(ke);if(de===-1)return de;const C=ie(this.containers,De=>De.modals.indexOf(ke)!==-1),Ee=this.containers[C];if(Ee.modals.splice(Ee.modals.indexOf(ke),1),this.modals.splice(de,1),Ee.modals.length===0)Ee.restore&&Ee.restore(),ke.modalRef&&H(ke.modalRef,nt),O(Ee.container,ke.mount,ke.modalRef,Ee.hiddenSiblings,!1),this.containers.splice(C,1);else{const De=Ee.modals[Ee.modals.length-1];De.modalRef&&H(De.modalRef,!1)}return de}isTopModal(ke){return this.modals.length>0&&this.modals[this.modals.length-1]===ke}}function M(Oe){return typeof Oe=="function"?Oe():Oe}function _(Oe){return Oe?Oe.props.hasOwnProperty("in"):!1}const $=new A;function P(Oe){const{container:ke,disableEscapeKeyDown:nt=!1,disableScrollLock:de=!1,manager:C=$,closeAfterTransition:Ee=!1,onTransitionEnter:De,onTransitionExited:we,children:z,onClose:Ce,open:lt,rootRef:at}=Oe,et=t.useRef({}),Ot=t.useRef(null),ft=t.useRef(null),_t=(0,g.A)(ft,at),[Lt,Ut]=t.useState(!lt),$t=_(z);let mt=!0;(Oe["aria-hidden"]==="false"||Oe["aria-hidden"]===!1)&&(mt=!1);const G=()=>(0,d.A)(Ot.current),Q=()=>(et.current.modalRef=ft.current,et.current.mount=Ot.current,et.current),y=()=>{C.mount(Q(),{disableScrollLock:de}),ft.current&&(ft.current.scrollTop=0)},m=(0,v.A)(()=>{const Se=M(ke)||G().body;C.add(Q(),Se),ft.current&&y()}),F=t.useCallback(()=>C.isTopModal(Q()),[C]),ee=(0,v.A)(Se=>{Ot.current=Se,Se&&(lt&&F()?y():ft.current&&H(ft.current,mt))}),V=t.useCallback(()=>{C.remove(Q(),mt)},[mt,C]);t.useEffect(()=>()=>{V()},[V]),t.useEffect(()=>{lt?m():(!$t||!Ee)&&V()},[lt,V,$t,Ee,m]);const Ae=Se=>Xe=>{var pt;(pt=Se.onKeyDown)==null||pt.call(Se,Xe),!(Xe.key!=="Escape"||Xe.which===229||!F())&&(nt||(Xe.stopPropagation(),Ce&&Ce(Xe,"escapeKeyDown")))},Pe=Se=>Xe=>{var pt;(pt=Se.onClick)==null||pt.call(Se,Xe),Xe.target===Xe.currentTarget&&Ce&&Ce(Xe,"backdropClick")};return{getRootProps:(Se={})=>{const Xe=(0,j.h)(Oe);delete Xe.onTransitionEnter,delete Xe.onTransitionExited;const pt=(0,s.A)({},Xe,Se);return(0,s.A)({role:"presentation"},pt,{onKeyDown:Ae(pt),ref:_t})},getBackdropProps:(Se={})=>{const Xe=Se;return(0,s.A)({"aria-hidden":!0},Xe,{onClick:Pe(Xe),open:lt})},getTransitionProps:()=>{const Se=()=>{Ut(!1),De&&De()},Xe=()=>{Ut(!0),we&&we(),Ee&&V()};return{onEnter:(0,L.A)(Se,z==null?void 0:z.props.onEnter),onExited:(0,L.A)(Xe,z==null?void 0:z.props.onExited)}},rootRef:_t,portalRef:ee,isTopModal:F,exited:Lt,hasTransition:$t}}var c=e(2458),h=e(7343);const b=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function N(Oe){const ke=parseInt(Oe.getAttribute("tabindex")||"",10);return Number.isNaN(ke)?Oe.contentEditable==="true"||(Oe.nodeName==="AUDIO"||Oe.nodeName==="VIDEO"||Oe.nodeName==="DETAILS")&&Oe.getAttribute("tabindex")===null?0:Oe.tabIndex:ke}function q(Oe){if(Oe.tagName!=="INPUT"||Oe.type!=="radio"||!Oe.name)return!1;const ke=de=>Oe.ownerDocument.querySelector(`input[type="radio"]${de}`);let nt=ke(`[name="${Oe.name}"]:checked`);return nt||(nt=ke(`[name="${Oe.name}"]`)),nt!==Oe}function Z(Oe){return!(Oe.disabled||Oe.tagName==="INPUT"&&Oe.type==="hidden"||q(Oe))}function me(Oe){const ke=[],nt=[];return Array.from(Oe.querySelectorAll(b)).forEach((de,C)=>{const Ee=N(de);Ee===-1||!Z(de)||(Ee===0?ke.push(de):nt.push({documentOrder:C,tabIndex:Ee,node:de}))}),nt.sort((de,C)=>de.tabIndex===C.tabIndex?de.documentOrder-C.documentOrder:de.tabIndex-C.tabIndex).map(de=>de.node).concat(ke)}function _e(){return!0}function Te(Oe){const{children:ke,disableAutoFocus:nt=!1,disableEnforceFocus:de=!1,disableRestoreFocus:C=!1,getTabbable:Ee=me,isEnabled:De=_e,open:we}=Oe,z=t.useRef(!1),Ce=t.useRef(null),lt=t.useRef(null),at=t.useRef(null),et=t.useRef(null),Ot=t.useRef(!1),ft=t.useRef(null),_t=(0,g.A)(ke.ref,ft),Lt=t.useRef(null);t.useEffect(()=>{!we||!ft.current||(Ot.current=!nt)},[nt,we]),t.useEffect(()=>{if(!we||!ft.current)return;const mt=(0,d.A)(ft.current);return ft.current.contains(mt.activeElement)||(ft.current.hasAttribute("tabIndex")||ft.current.setAttribute("tabIndex","-1"),Ot.current&&ft.current.focus()),()=>{C||(at.current&&at.current.focus&&(z.current=!0,at.current.focus()),at.current=null)}},[we]),t.useEffect(()=>{if(!we||!ft.current)return;const mt=(0,d.A)(ft.current),G=m=>{Lt.current=m,!(de||!De()||m.key!=="Tab")&&mt.activeElement===ft.current&&m.shiftKey&&(z.current=!0,lt.current&&lt.current.focus())},Q=()=>{const m=ft.current;if(m===null)return;if(!mt.hasFocus()||!De()||z.current){z.current=!1;return}if(m.contains(mt.activeElement)||de&&mt.activeElement!==Ce.current&&mt.activeElement!==lt.current)return;if(mt.activeElement!==et.current)et.current=null;else if(et.current!==null)return;if(!Ot.current)return;let F=[];if((mt.activeElement===Ce.current||mt.activeElement===lt.current)&&(F=Ee(ft.current)),F.length>0){var ee,V;const Ae=!!((ee=Lt.current)!=null&&ee.shiftKey&&((V=Lt.current)==null?void 0:V.key)==="Tab"),Pe=F[0],Re=F[F.length-1];typeof Pe!="string"&&typeof Re!="string"&&(Ae?Re.focus():Pe.focus())}else m.focus()};mt.addEventListener("focusin",Q),mt.addEventListener("keydown",G,!0);const y=setInterval(()=>{mt.activeElement&&mt.activeElement.tagName==="BODY"&&Q()},50);return()=>{clearInterval(y),mt.removeEventListener("focusin",Q),mt.removeEventListener("keydown",G,!0)}},[nt,de,C,De,we,Ee]);const Ut=mt=>{at.current===null&&(at.current=mt.relatedTarget),Ot.current=!0,et.current=mt.target;const G=ke.props.onFocus;G&&G(mt)},$t=mt=>{at.current===null&&(at.current=mt.relatedTarget),Ot.current=!0};return(0,h.jsxs)(t.Fragment,{children:[(0,h.jsx)("div",{tabIndex:we?0:-1,onFocus:$t,ref:Ce,"data-testid":"sentinelStart"}),t.cloneElement(ke,{ref:_t,onFocus:Ut}),(0,h.jsx)("div",{tabIndex:we?0:-1,onFocus:$t,ref:lt,"data-testid":"sentinelEnd"})]})}var Le=e(7874),Fe=e(4288),Ye=e(4988);function ut(Oe){return typeof Oe=="function"?Oe():Oe}const It=t.forwardRef(function(ke,nt){const{children:de,container:C,disablePortal:Ee=!1}=ke,[De,we]=t.useState(null),z=(0,g.A)(t.isValidElement(de)?de.ref:null,nt);if((0,Fe.A)(()=>{Ee||we(ut(C)||document.body)},[C,Ee]),(0,Fe.A)(()=>{if(De&&!Ee)return(0,Ye.A)(nt,De),()=>{(0,Ye.A)(nt,null)}},[nt,De,Ee]),Ee){if(t.isValidElement(de)){const Ce={ref:z};return t.cloneElement(de,Ce)}return(0,h.jsx)(t.Fragment,{children:de})}return(0,h.jsx)(t.Fragment,{children:De&&Le.createPortal(de,De)})});var bt=e(4747),Et=e(7437),Ft=e(8833),Pt=e(3932),dt=e(8748);function Ue(Oe){return(0,dt.Ay)("MuiModal",Oe)}const Dt=(0,Pt.A)("MuiModal",["root","hidden","backdrop"]),en=null,Bt=["BackdropComponent","BackdropProps","classes","className","closeAfterTransition","children","container","component","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","onBackdropClick","onClose","onTransitionEnter","onTransitionExited","open","slotProps","slots","theme"],sn=Oe=>{const{open:ke,exited:nt,classes:de}=Oe,C={root:["root",!ke&&nt&&"hidden"],backdrop:["backdrop"]};return(0,c.A)(C,Ue,de)},an=(0,bt.Ay)("div",{name:"MuiModal",slot:"Root",overridesResolver:(Oe,ke)=>{const{ownerState:nt}=Oe;return[ke.root,!nt.open&&nt.exited&&ke.hidden]}})(({theme:Oe,ownerState:ke})=>(0,s.A)({position:"fixed",zIndex:(Oe.vars||Oe).zIndex.modal,right:0,bottom:0,top:0,left:0},!ke.open&&ke.exited&&{visibility:"hidden"})),ln=(0,bt.Ay)(Ft.A,{name:"MuiModal",slot:"Backdrop",overridesResolver:(Oe,ke)=>ke.backdrop})({zIndex:-1}),Zt=t.forwardRef(function(ke,nt){var de,C,Ee,De,we,z;const Ce=(0,Et.A)({name:"MuiModal",props:ke}),{BackdropComponent:lt=ln,BackdropProps:at,className:et,closeAfterTransition:Ot=!1,children:ft,container:_t,component:Lt,components:Ut={},componentsProps:$t={},disableAutoFocus:mt=!1,disableEnforceFocus:G=!1,disableEscapeKeyDown:Q=!1,disablePortal:y=!1,disableRestoreFocus:m=!1,disableScrollLock:F=!1,hideBackdrop:ee=!1,keepMounted:V=!1,onBackdropClick:Ae,open:Pe,slotProps:Re,slots:ye}=Ce,pe=(0,n.A)(Ce,Bt),Se=(0,s.A)({},Ce,{closeAfterTransition:Ot,disableAutoFocus:mt,disableEnforceFocus:G,disableEscapeKeyDown:Q,disablePortal:y,disableRestoreFocus:m,disableScrollLock:F,hideBackdrop:ee,keepMounted:V}),{getRootProps:Xe,getBackdropProps:pt,getTransitionProps:kt,portalRef:f,isTopModal:X,exited:xe,hasTransition:ge}=P((0,s.A)({},Se,{rootRef:nt})),Ve=(0,s.A)({},Se,{exited:xe}),rt=sn(Ve),tn={};if(ft.props.tabIndex===void 0&&(tn.tabIndex="-1"),ge){const{onEnter:bn,onExited:An}=kt();tn.onEnter=bn,tn.onExited=An}const zt=(de=(C=ye==null?void 0:ye.root)!=null?C:Ut.Root)!=null?de:an,un=(Ee=(De=ye==null?void 0:ye.backdrop)!=null?De:Ut.Backdrop)!=null?Ee:lt,Kt=(we=Re==null?void 0:Re.root)!=null?we:$t.root,Yt=(z=Re==null?void 0:Re.backdrop)!=null?z:$t.backdrop,rn=(0,w.Q)({elementType:zt,externalSlotProps:Kt,externalForwardedProps:pe,getSlotProps:Xe,additionalProps:{ref:nt,as:Lt},ownerState:Ve,className:(0,T.A)(et,Kt==null?void 0:Kt.className,rt==null?void 0:rt.root,!Ve.open&&Ve.exited&&(rt==null?void 0:rt.hidden))}),jt=(0,w.Q)({elementType:un,externalSlotProps:Yt,additionalProps:at,getSlotProps:bn=>pt((0,s.A)({},bn,{onClick:An=>{Ae&&Ae(An),bn!=null&&bn.onClick&&bn.onClick(An)}})),className:(0,T.A)(Yt==null?void 0:Yt.className,at==null?void 0:at.className,rt==null?void 0:rt.backdrop),ownerState:Ve});return!V&&!Pe&&(!ge||xe)?null:(0,h.jsx)(It,{ref:f,container:_t,disablePortal:y,children:(0,h.jsxs)(zt,(0,s.A)({},rn,{children:[!ee&&lt?(0,h.jsx)(un,(0,s.A)({},jt)):null,(0,h.jsx)(Te,{disableEnforceFocus:G,disableAutoFocus:mt,disableRestoreFocus:m,isEnabled:X,open:Pe,children:t.cloneElement(ft,tn)})]}))})})},3043:(he,R,e)=>{"use strict";e.d(R,{A:()=>M});var n=e(1772),s=e(8733),t=e(4999),T=e(4164),w=e(2458),g=e(1742),d=e(4747),v=Math.pow;const j=_=>{let $;return _<1?$=5.11916*v(_,2):$=4.5*Math.log(_+1)+2,($/100).toFixed(2)};var k=e(7437),re=e(3932),K=e(8748);function H(_){return(0,K.Ay)("MuiPaper",_)}const W=(0,re.A)("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]),B=null;var O=e(7343);const ie=["className","component","elevation","square","variant"],J=_=>{const{square:$,elevation:P,variant:c,classes:h}=_,b={root:["root",c,!$&&"rounded",c==="elevation"&&`elevation${P}`]};return(0,w.A)(b,H,h)},se=(0,d.Ay)("div",{name:"MuiPaper",slot:"Root",overridesResolver:(_,$)=>{const{ownerState:P}=_;return[$.root,$[P.variant],!P.square&&$.rounded,P.variant==="elevation"&&$[`elevation${P.elevation}`]]}})(({theme:_,ownerState:$})=>{var P;return(0,s.A)({backgroundColor:(_.vars||_).palette.background.paper,color:(_.vars||_).palette.text.primary,transition:_.transitions.create("box-shadow")},!$.square&&{borderRadius:_.shape.borderRadius},$.variant==="outlined"&&{border:`1px solid ${(_.vars||_).palette.divider}`},$.variant==="elevation"&&(0,s.A)({boxShadow:(_.vars||_).shadows[$.elevation]},!_.vars&&_.palette.mode==="dark"&&{backgroundImage:`linear-gradient(${(0,g.X4)("#fff",j($.elevation))}, ${(0,g.X4)("#fff",j($.elevation))})`},_.vars&&{backgroundImage:(P=_.vars.overlays)==null?void 0:P[$.elevation]}))}),M=t.forwardRef(function($,P){const c=(0,k.A)({props:$,name:"MuiPaper"}),{className:h,component:b="div",elevation:N=1,square:q=!1,variant:Z="elevation"}=c,me=(0,n.A)(c,ie),_e=(0,s.A)({},c,{component:b,elevation:N,square:q,variant:Z}),Te=J(_e);return(0,O.jsx)(se,(0,s.A)({as:b,ownerState:_e,className:(0,T.A)(Te.root,h),ref:P},me))})},628:(he,R,e)=>{"use strict";e.d(R,{IJ:()=>me,Ay:()=>Te});var n=e(8733),s=e(1772),t=e(4999),T=e(4164),w=e(4679),g=e(400),d=e(2458),v=e(4747),L=e(7437),j=e(9266),k=e(7943),re=e(5802),K=e(6597),H=e(7076),W=e(9916),B=e(3043),O=e(3932),ie=e(8748);function J(Le){return(0,ie.Ay)("MuiPopover",Le)}const se=(0,O.A)("MuiPopover",["root","paper"]),A=null;var M=e(7343);const _=["onEntering"],$=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","slots","slotProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps","disableScrollLock"],P=["slotProps"];function c(Le,Fe){let Ye=0;return typeof Fe=="number"?Ye=Fe:Fe==="center"?Ye=Le.height/2:Fe==="bottom"&&(Ye=Le.height),Ye}function h(Le,Fe){let Ye=0;return typeof Fe=="number"?Ye=Fe:Fe==="center"?Ye=Le.width/2:Fe==="right"&&(Ye=Le.width),Ye}function b(Le){return[Le.horizontal,Le.vertical].map(Fe=>typeof Fe=="number"?`${Fe}px`:Fe).join(" ")}function N(Le){return typeof Le=="function"?Le():Le}const q=Le=>{const{classes:Fe}=Le,Ye={root:["root"],paper:["paper"]};return(0,d.A)(Ye,J,Fe)},Z=(0,v.Ay)(W.A,{name:"MuiPopover",slot:"Root",overridesResolver:(Le,Fe)=>Fe.root})({}),me=(0,v.Ay)(B.A,{name:"MuiPopover",slot:"Paper",overridesResolver:(Le,Fe)=>Fe.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),Te=t.forwardRef(function(Fe,Ye){var ut,It,bt;const Et=(0,L.A)({props:Fe,name:"MuiPopover"}),{action:Ft,anchorEl:Pt,anchorOrigin:dt={vertical:"top",horizontal:"left"},anchorPosition:Ue,anchorReference:Dt="anchorEl",children:en,className:Bt,container:sn,elevation:an=8,marginThreshold:ln=16,open:Nt,PaperProps:Zt={},slots:Oe,slotProps:ke,transformOrigin:nt={vertical:"top",horizontal:"left"},TransitionComponent:de=H.A,transitionDuration:C="auto",TransitionProps:{onEntering:Ee}={},disableScrollLock:De=!1}=Et,we=(0,s.A)(Et.TransitionProps,_),z=(0,s.A)(Et,$),Ce=(ut=ke==null?void 0:ke.paper)!=null?ut:Zt,lt=t.useRef(),at=(0,K.A)(lt,Ce.ref),et=(0,n.A)({},Et,{anchorOrigin:dt,anchorReference:Dt,elevation:an,marginThreshold:ln,externalPaperSlotProps:Ce,transformOrigin:nt,TransitionComponent:de,transitionDuration:C,TransitionProps:we}),Ot=q(et),ft=t.useCallback(()=>{if(Dt==="anchorPosition")return Ue;const ye=N(Pt),Se=(ye&&ye.nodeType===1?ye:(0,k.A)(lt.current).body).getBoundingClientRect();return{top:Se.top+c(Se,dt.vertical),left:Se.left+h(Se,dt.horizontal)}},[Pt,dt.horizontal,dt.vertical,Ue,Dt]),_t=t.useCallback(ye=>({vertical:c(ye,nt.vertical),horizontal:h(ye,nt.horizontal)}),[nt.horizontal,nt.vertical]),Lt=t.useCallback(ye=>{const pe={width:ye.offsetWidth,height:ye.offsetHeight},Se=_t(pe);if(Dt==="none")return{top:null,left:null,transformOrigin:b(Se)};const Xe=ft();let pt=Xe.top-Se.vertical,kt=Xe.left-Se.horizontal;const f=pt+pe.height,X=kt+pe.width,xe=(0,re.A)(N(Pt)),ge=xe.innerHeight-ln,Ve=xe.innerWidth-ln;if(ln!==null&&pt<ln){const rt=pt-ln;pt-=rt,Se.vertical+=rt}else if(ln!==null&&f>ge){const rt=f-ge;pt-=rt,Se.vertical+=rt}if(ln!==null&&kt<ln){const rt=kt-ln;kt-=rt,Se.horizontal+=rt}else if(X>Ve){const rt=X-Ve;kt-=rt,Se.horizontal+=rt}return{top:`${Math.round(pt)}px`,left:`${Math.round(kt)}px`,transformOrigin:b(Se)}},[Pt,Dt,ft,_t,ln]),[Ut,$t]=t.useState(Nt),mt=t.useCallback(()=>{const ye=lt.current;if(!ye)return;const pe=Lt(ye);pe.top!==null&&(ye.style.top=pe.top),pe.left!==null&&(ye.style.left=pe.left),ye.style.transformOrigin=pe.transformOrigin,$t(!0)},[Lt]);t.useEffect(()=>(De&&window.addEventListener("scroll",mt),()=>window.removeEventListener("scroll",mt)),[Pt,De,mt]);const G=(ye,pe)=>{Ee&&Ee(ye,pe),mt()},Q=()=>{$t(!1)};t.useEffect(()=>{Nt&&mt()}),t.useImperativeHandle(Ft,()=>Nt?{updatePosition:()=>{mt()}}:null,[Nt,mt]),t.useEffect(()=>{if(!Nt)return;const ye=(0,j.A)(()=>{mt()}),pe=(0,re.A)(Pt);return pe.addEventListener("resize",ye),()=>{ye.clear(),pe.removeEventListener("resize",ye)}},[Pt,Nt,mt]);let y=C;C==="auto"&&!de.muiSupportAuto&&(y=void 0);const m=sn||(Pt?(0,k.A)(N(Pt)).body:void 0),F=(It=Oe==null?void 0:Oe.root)!=null?It:Z,ee=(bt=Oe==null?void 0:Oe.paper)!=null?bt:me,V=(0,w.Q)({elementType:ee,externalSlotProps:(0,n.A)({},Ce,{style:Ut?Ce.style:(0,n.A)({},Ce.style,{opacity:0})}),additionalProps:{elevation:an,ref:at},ownerState:et,className:(0,T.A)(Ot.paper,Ce==null?void 0:Ce.className)}),Ae=(0,w.Q)({elementType:F,externalSlotProps:(ke==null?void 0:ke.root)||{},externalForwardedProps:z,additionalProps:{ref:Ye,slotProps:{backdrop:{invisible:!0}},container:m,open:Nt},ownerState:et,className:(0,T.A)(Ot.root,Bt)}),{slotProps:Pe}=Ae,Re=(0,s.A)(Ae,P);return(0,M.jsx)(F,(0,n.A)({},Re,!(0,g.g)(F)&&{slotProps:Pe,disableScrollLock:De},{children:(0,M.jsx)(de,(0,n.A)({appear:!0,in:Nt,onEntering:G,onExited:Q,timeout:y},we,{children:(0,M.jsx)(ee,(0,n.A)({},V,{children:en}))}))}))})},3815:(he,R,e)=>{"use strict";e.d(R,{A:()=>Xr});var n=e(8733),s=e(1772),t=e(4999),T=e(4164),w=e(2458),g=e(4844),d=e(4747),v=e(7437),L=e(3500),j=e(3524),k=e(5006),re=e(1676),K=e(4288),H=e(5220),W=e(7343);const B=["onChange","maxRows","minRows","style","value"];function O(l){return parseInt(l,10)||0}const ie={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}};function J(l){return l==null||Object.keys(l).length===0||l.outerHeightStyle===0&&!l.overflowing}const se=t.forwardRef(function(E,ue){const{onChange:Ie,maxRows:Ge,minRows:ht=1,style:vt,value:yt}=E,I=(0,s.A)(E,B),{current:U}=t.useRef(yt!=null),te=t.useRef(null),ve=(0,k.A)(ue,te),Me=t.useRef(null),Qe=t.useCallback(()=>{const Ze=te.current,gt=(0,re.A)(Ze).getComputedStyle(Ze);if(gt.width==="0px")return{outerHeightStyle:0,overflowing:!1};const it=Me.current;it.style.width=gt.width,it.value=Ze.value||E.placeholder||"x",it.value.slice(-1)===`
`&&(it.value+=" ");const Be=gt.boxSizing,Rt=O(gt.paddingBottom)+O(gt.paddingTop),Ct=O(gt.borderBottomWidth)+O(gt.borderTopWidth),qt=it.scrollHeight;it.value="x";const cn=it.scrollHeight;let vn=qt;ht&&(vn=Math.max(Number(ht)*cn,vn)),Ge&&(vn=Math.min(Number(Ge)*cn,vn)),vn=Math.max(vn,cn);const Mn=vn+(Be==="border-box"?Rt+Ct:0),Fn=Math.abs(vn-qt)<=1;return{outerHeightStyle:Mn,overflowing:Fn}},[Ge,ht,E.placeholder]),He=t.useCallback(()=>{const Ze=Qe();if(J(Ze))return;const Ke=te.current;Ke.style.height=`${Ze.outerHeightStyle}px`,Ke.style.overflow=Ze.overflowing?"hidden":""},[Qe]);(0,K.A)(()=>{const Ze=()=>{He()};let Ke;const gt=()=>{cancelAnimationFrame(Ke),Ke=requestAnimationFrame(()=>{Ze()})},it=(0,H.A)(Ze),Be=te.current,Rt=(0,re.A)(Be);Rt.addEventListener("resize",it);let Ct;return typeof ResizeObserver!="undefined"&&(Ct=new ResizeObserver(Ze),Ct.observe(Be)),()=>{it.clear(),cancelAnimationFrame(Ke),Rt.removeEventListener("resize",it),Ct&&Ct.disconnect()}},[Qe,He]),(0,K.A)(()=>{He()});const $e=Ze=>{U||He(),Ie&&Ie(Ze)};return(0,W.jsxs)(t.Fragment,{children:[(0,W.jsx)("textarea",(0,n.A)({value:yt,onChange:$e,ref:ve,rows:ht,style:vt},I)),(0,W.jsx)("textarea",{"aria-hidden":!0,className:E.className,readOnly:!0,ref:Me,tabIndex:-1,style:(0,n.A)({},ie.shadow,vt,{paddingTop:0,paddingBottom:0})})]})});var A=e(400);function M({props:l,states:E,muiFormControl:ue}){return E.reduce((Ie,Ge)=>(Ie[Ge]=l[Ge],ue&&typeof l[Ge]=="undefined"&&(Ie[Ge]=ue[Ge]),Ie),{})}const $=t.createContext(void 0);function P(){return t.useContext($)}var c=e(6039),h=e(6597),b=e(7289),N=e(8905),q=e(3529);function Z({styles:l,themeId:E,defaultTheme:ue={}}){const Ie=(0,q.A)(ue),Ge=typeof l=="function"?l(E&&Ie[E]||Ie):l;return(0,W.jsx)(N.A,{styles:Ge})}const me=Z;var _e=e(6838),Te=e(7891);function Le(l){return(0,W.jsx)(me,(0,n.A)({},l,{defaultTheme:_e.A,themeId:Te.A}))}const Fe=Le;function Ye(l){return l!=null&&!(Array.isArray(l)&&l.length===0)}function ut(l,E=!1){return l&&(Ye(l.value)&&l.value!==""||E&&Ye(l.defaultValue)&&l.defaultValue!=="")}function It(l){return l.startAdornment}var bt=e(3932),Et=e(8748);function Ft(l){return(0,Et.Ay)("MuiInputBase",l)}const dt=(0,bt.A)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),Ue=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],Dt=(l,E)=>{const{ownerState:ue}=l;return[E.root,ue.formControl&&E.formControl,ue.startAdornment&&E.adornedStart,ue.endAdornment&&E.adornedEnd,ue.error&&E.error,ue.size==="small"&&E.sizeSmall,ue.multiline&&E.multiline,ue.color&&E[`color${(0,c.A)(ue.color)}`],ue.fullWidth&&E.fullWidth,ue.hiddenLabel&&E.hiddenLabel]},en=(l,E)=>{const{ownerState:ue}=l;return[E.input,ue.size==="small"&&E.inputSizeSmall,ue.multiline&&E.inputMultiline,ue.type==="search"&&E.inputTypeSearch,ue.startAdornment&&E.inputAdornedStart,ue.endAdornment&&E.inputAdornedEnd,ue.hiddenLabel&&E.inputHiddenLabel]},Bt=l=>{const{classes:E,color:ue,disabled:Ie,error:Ge,endAdornment:ht,focused:vt,formControl:yt,fullWidth:I,hiddenLabel:U,multiline:te,readOnly:ve,size:Me,startAdornment:Qe,type:He}=l,$e={root:["root",`color${(0,c.A)(ue)}`,Ie&&"disabled",Ge&&"error",I&&"fullWidth",vt&&"focused",yt&&"formControl",Me&&Me!=="medium"&&`size${(0,c.A)(Me)}`,te&&"multiline",Qe&&"adornedStart",ht&&"adornedEnd",U&&"hiddenLabel",ve&&"readOnly"],input:["input",Ie&&"disabled",He==="search"&&"inputTypeSearch",te&&"inputMultiline",Me==="small"&&"inputSizeSmall",U&&"inputHiddenLabel",Qe&&"inputAdornedStart",ht&&"inputAdornedEnd",ve&&"readOnly"]};return(0,w.A)($e,Ft,E)},sn=(0,d.Ay)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:Dt})(({theme:l,ownerState:E})=>(0,n.A)({},l.typography.body1,{color:(l.vars||l).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${dt.disabled}`]:{color:(l.vars||l).palette.text.disabled,cursor:"default"}},E.multiline&&(0,n.A)({padding:"4px 0 5px"},E.size==="small"&&{paddingTop:1}),E.fullWidth&&{width:"100%"})),an=(0,d.Ay)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:en})(({theme:l,ownerState:E})=>{const ue=l.palette.mode==="light",Ie=(0,n.A)({color:"currentColor"},l.vars?{opacity:l.vars.opacity.inputPlaceholder}:{opacity:ue?.42:.5},{transition:l.transitions.create("opacity",{duration:l.transitions.duration.shorter})}),Ge={opacity:"0 !important"},ht=l.vars?{opacity:l.vars.opacity.inputPlaceholder}:{opacity:ue?.42:.5};return(0,n.A)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":Ie,"&::-moz-placeholder":Ie,"&:-ms-input-placeholder":Ie,"&::-ms-input-placeholder":Ie,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${dt.formControl} &`]:{"&::-webkit-input-placeholder":Ge,"&::-moz-placeholder":Ge,"&:-ms-input-placeholder":Ge,"&::-ms-input-placeholder":Ge,"&:focus::-webkit-input-placeholder":ht,"&:focus::-moz-placeholder":ht,"&:focus:-ms-input-placeholder":ht,"&:focus::-ms-input-placeholder":ht},[`&.${dt.disabled}`]:{opacity:1,WebkitTextFillColor:(l.vars||l).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},E.size==="small"&&{paddingTop:1},E.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},E.type==="search"&&{MozAppearance:"textfield"})}),ln=(0,W.jsx)(Fe,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),Zt=t.forwardRef(function(E,ue){var Ie;const Ge=(0,v.A)({props:E,name:"MuiInputBase"}),{"aria-describedby":ht,autoComplete:vt,autoFocus:yt,className:I,components:U={},componentsProps:te={},defaultValue:ve,disabled:Me,disableInjectingGlobalStyles:Qe,endAdornment:He,fullWidth:$e=!1,id:Ze,inputComponent:Ke="input",inputProps:gt={},inputRef:it,maxRows:Be,minRows:Rt,multiline:Ct=!1,name:qt,onBlur:cn,onChange:vn,onClick:Mn,onFocus:Fn,onKeyDown:Dn,onKeyUp:Rn,placeholder:Tn,readOnly:Un,renderSuffix:Vt,rows:En,slotProps:Gt={},slots:gn={},startAdornment:Qn,type:fr="text",value:Er}=Ge,tr=(0,s.A)(Ge,Ue),Wn=gt.value!=null?gt.value:Er,{current:vr}=t.useRef(Wn!=null),sr=t.useRef(),_r=t.useCallback(In=>{},[]),Sr=(0,h.A)(sr,it,gt.ref,_r),[Fr,Br]=t.useState(!1),_n=P(),Vn=M({props:Ge,muiFormControl:_n,states:["color","disabled","error","hiddenLabel","size","required","filled"]});Vn.focused=_n?_n.focused:Fr,t.useEffect(()=>{!_n&&Me&&Fr&&(Br(!1),cn&&cn())},[_n,Me,Fr,cn]);const Nr=_n&&_n.onFilled,Ur=_n&&_n.onEmpty,Ar=t.useCallback(In=>{ut(In)?Nr&&Nr():Ur&&Ur()},[Nr,Ur]);(0,b.A)(()=>{vr&&Ar({value:Wn})},[Wn,Ar,vr]);const eo=In=>{if(Vn.disabled){In.stopPropagation();return}Fn&&Fn(In),gt.onFocus&&gt.onFocus(In),_n&&_n.onFocus?_n.onFocus(In):Br(!0)},to=In=>{cn&&cn(In),gt.onBlur&&gt.onBlur(In),_n&&_n.onBlur?_n.onBlur(In):Br(!1)},no=(In,...kr)=>{if(!vr){const Tr=In.target||sr.current;if(Tr==null)throw new Error((0,j.A)(1));Ar({value:Tr.value})}gt.onChange&&gt.onChange(In,...kr),vn&&vn(In,...kr)};t.useEffect(()=>{Ar(sr.current)},[]);const wr=In=>{sr.current&&In.currentTarget===In.target&&sr.current.focus(),Mn&&Mn(In)};let jr=Ke,Zn=gt;Ct&&jr==="input"&&(En?Zn=(0,n.A)({type:void 0,minRows:En,maxRows:En},Zn):Zn=(0,n.A)({type:void 0,maxRows:Be,minRows:Rt},Zn),jr=se);const Yr=In=>{Ar(In.animationName==="mui-auto-fill-cancel"?sr.current:{value:"x"})};t.useEffect(()=>{_n&&_n.setAdornedStart(!!Qn)},[_n,Qn]);const yr=(0,n.A)({},Ge,{color:Vn.color||"primary",disabled:Vn.disabled,endAdornment:He,error:Vn.error,focused:Vn.focused,formControl:_n,fullWidth:$e,hiddenLabel:Vn.hiddenLabel,multiline:Ct,size:Vn.size,startAdornment:Qn,type:fr}),Cr=Bt(yr),Jr=gn.root||U.Root||sn,Wr=Gt.root||te.root||{},$r=gn.input||U.Input||an;return Zn=(0,n.A)({},Zn,(Ie=Gt.input)!=null?Ie:te.input),(0,W.jsxs)(t.Fragment,{children:[!Qe&&ln,(0,W.jsxs)(Jr,(0,n.A)({},Wr,!(0,A.g)(Jr)&&{ownerState:(0,n.A)({},yr,Wr.ownerState)},{ref:ue,onClick:wr},tr,{className:(0,T.A)(Cr.root,Wr.className,I,Un&&"MuiInputBase-readOnly"),children:[Qn,(0,W.jsx)($.Provider,{value:null,children:(0,W.jsx)($r,(0,n.A)({ownerState:yr,"aria-invalid":Vn.error,"aria-describedby":ht,autoComplete:vt,autoFocus:yt,defaultValue:ve,disabled:Vn.disabled,id:Ze,onAnimationStart:Yr,name:qt,placeholder:Tn,readOnly:Un,required:Vn.required,rows:En,value:Wn,onKeyDown:Dn,onKeyUp:Rn,type:fr},Zn,!(0,A.g)($r)&&{as:jr,ownerState:(0,n.A)({},yr,Zn.ownerState)},{ref:Sr,className:(0,T.A)(Cr.input,Zn.className,Un&&"MuiInputBase-readOnly"),onBlur:to,onChange:no,onFocus:eo}))}),He,Vt?Vt((0,n.A)({},Vn,{startAdornment:Qn})):null]}))]})});var Oe=e(3487);function ke(l){return(0,Et.Ay)("MuiInput",l)}const de=(0,n.A)({},dt,(0,bt.A)("MuiInput",["root","underline","input"])),C=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],Ee=l=>{const{classes:E,disableUnderline:ue}=l,Ie={root:["root",!ue&&"underline"],input:["input"]},Ge=(0,w.A)(Ie,ke,E);return(0,n.A)({},E,Ge)},De=(0,d.Ay)(sn,{shouldForwardProp:l=>(0,Oe.A)(l)||l==="classes",name:"MuiInput",slot:"Root",overridesResolver:(l,E)=>{const{ownerState:ue}=l;return[...Dt(l,E),!ue.disableUnderline&&E.underline]}})(({theme:l,ownerState:E})=>{let Ie=l.palette.mode==="light"?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return l.vars&&(Ie=`rgba(${l.vars.palette.common.onBackgroundChannel} / ${l.vars.opacity.inputUnderline})`),(0,n.A)({position:"relative"},E.formControl&&{"label + &":{marginTop:16}},!E.disableUnderline&&{"&::after":{borderBottom:`2px solid ${(l.vars||l).palette[E.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:l.transitions.create("transform",{duration:l.transitions.duration.shorter,easing:l.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${de.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${de.error}`]:{"&::before, &::after":{borderBottomColor:(l.vars||l).palette.error.main}},"&::before":{borderBottom:`1px solid ${Ie}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:l.transitions.create("border-bottom-color",{duration:l.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${de.disabled}, .${de.error}):before`]:{borderBottom:`2px solid ${(l.vars||l).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${Ie}`}},[`&.${de.disabled}:before`]:{borderBottomStyle:"dotted"}})}),we=(0,d.Ay)(an,{name:"MuiInput",slot:"Input",overridesResolver:en})({}),z=t.forwardRef(function(E,ue){var Ie,Ge,ht,vt;const yt=(0,v.A)({props:E,name:"MuiInput"}),{disableUnderline:I,components:U={},componentsProps:te,fullWidth:ve=!1,inputComponent:Me="input",multiline:Qe=!1,slotProps:He,slots:$e={},type:Ze="text"}=yt,Ke=(0,s.A)(yt,C),gt=Ee(yt),Be={root:{ownerState:{disableUnderline:I}}},Rt=(He!=null?He:te)?(0,L.A)(He!=null?He:te,Be):Be,Ct=(Ie=(Ge=$e.root)!=null?Ge:U.Root)!=null?Ie:De,qt=(ht=(vt=$e.input)!=null?vt:U.Input)!=null?ht:we;return(0,W.jsx)(Zt,(0,n.A)({slots:{root:Ct,input:qt},slotProps:Rt,fullWidth:ve,inputComponent:Me,multiline:Qe,ref:ue,type:Ze},Ke,{classes:gt}))});z.muiName="Input";const Ce=z;function lt(l){return(0,Et.Ay)("MuiFilledInput",l)}const et=(0,n.A)({},dt,(0,bt.A)("MuiFilledInput",["root","underline","input"])),Ot=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],ft=l=>{const{classes:E,disableUnderline:ue}=l,Ie={root:["root",!ue&&"underline"],input:["input"]},Ge=(0,w.A)(Ie,lt,E);return(0,n.A)({},E,Ge)},_t=(0,d.Ay)(sn,{shouldForwardProp:l=>(0,Oe.A)(l)||l==="classes",name:"MuiFilledInput",slot:"Root",overridesResolver:(l,E)=>{const{ownerState:ue}=l;return[...Dt(l,E),!ue.disableUnderline&&E.underline]}})(({theme:l,ownerState:E})=>{var ue;const Ie=l.palette.mode==="light",Ge=Ie?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",ht=Ie?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",vt=Ie?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",yt=Ie?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return(0,n.A)({position:"relative",backgroundColor:l.vars?l.vars.palette.FilledInput.bg:ht,borderTopLeftRadius:(l.vars||l).shape.borderRadius,borderTopRightRadius:(l.vars||l).shape.borderRadius,transition:l.transitions.create("background-color",{duration:l.transitions.duration.shorter,easing:l.transitions.easing.easeOut}),"&:hover":{backgroundColor:l.vars?l.vars.palette.FilledInput.hoverBg:vt,"@media (hover: none)":{backgroundColor:l.vars?l.vars.palette.FilledInput.bg:ht}},[`&.${et.focused}`]:{backgroundColor:l.vars?l.vars.palette.FilledInput.bg:ht},[`&.${et.disabled}`]:{backgroundColor:l.vars?l.vars.palette.FilledInput.disabledBg:yt}},!E.disableUnderline&&{"&::after":{borderBottom:`2px solid ${(ue=(l.vars||l).palette[E.color||"primary"])==null?void 0:ue.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:l.transitions.create("transform",{duration:l.transitions.duration.shorter,easing:l.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${et.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${et.error}`]:{"&::before, &::after":{borderBottomColor:(l.vars||l).palette.error.main}},"&::before":{borderBottom:`1px solid ${l.vars?`rgba(${l.vars.palette.common.onBackgroundChannel} / ${l.vars.opacity.inputUnderline})`:Ge}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:l.transitions.create("border-bottom-color",{duration:l.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${et.disabled}, .${et.error}):before`]:{borderBottom:`1px solid ${(l.vars||l).palette.text.primary}`},[`&.${et.disabled}:before`]:{borderBottomStyle:"dotted"}},E.startAdornment&&{paddingLeft:12},E.endAdornment&&{paddingRight:12},E.multiline&&(0,n.A)({padding:"25px 12px 8px"},E.size==="small"&&{paddingTop:21,paddingBottom:4},E.hiddenLabel&&{paddingTop:16,paddingBottom:17},E.hiddenLabel&&E.size==="small"&&{paddingTop:8,paddingBottom:9}))}),Lt=(0,d.Ay)(an,{name:"MuiFilledInput",slot:"Input",overridesResolver:en})(({theme:l,ownerState:E})=>(0,n.A)({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!l.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:l.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:l.palette.mode==="light"?null:"#fff",caretColor:l.palette.mode==="light"?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},l.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[l.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},E.size==="small"&&{paddingTop:21,paddingBottom:4},E.hiddenLabel&&{paddingTop:16,paddingBottom:17},E.startAdornment&&{paddingLeft:0},E.endAdornment&&{paddingRight:0},E.hiddenLabel&&E.size==="small"&&{paddingTop:8,paddingBottom:9},E.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0})),Ut=t.forwardRef(function(E,ue){var Ie,Ge,ht,vt;const yt=(0,v.A)({props:E,name:"MuiFilledInput"}),{components:I={},componentsProps:U,fullWidth:te=!1,inputComponent:ve="input",multiline:Me=!1,slotProps:Qe,slots:He={},type:$e="text"}=yt,Ze=(0,s.A)(yt,Ot),Ke=(0,n.A)({},yt,{fullWidth:te,inputComponent:ve,multiline:Me,type:$e}),gt=ft(yt),it={root:{ownerState:Ke},input:{ownerState:Ke}},Be=(Qe!=null?Qe:U)?(0,L.A)(it,Qe!=null?Qe:U):it,Rt=(Ie=(Ge=He.root)!=null?Ge:I.Root)!=null?Ie:_t,Ct=(ht=(vt=He.input)!=null?vt:I.Input)!=null?ht:Lt;return(0,W.jsx)(Zt,(0,n.A)({slots:{root:Rt,input:Ct},componentsProps:Be,fullWidth:te,inputComponent:ve,multiline:Me,ref:ue,type:$e},Ze,{classes:gt}))});Ut.muiName="Input";const $t=Ut;var mt;const G=["children","classes","className","label","notched"],Q=(0,d.Ay)("fieldset",{shouldForwardProp:Oe.A})({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),y=(0,d.Ay)("legend",{shouldForwardProp:Oe.A})(({ownerState:l,theme:E})=>(0,n.A)({float:"unset",width:"auto",overflow:"hidden"},!l.withLabel&&{padding:0,lineHeight:"11px",transition:E.transitions.create("width",{duration:150,easing:E.transitions.easing.easeOut})},l.withLabel&&(0,n.A)({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:E.transitions.create("max-width",{duration:50,easing:E.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},l.notched&&{maxWidth:"100%",transition:E.transitions.create("max-width",{duration:100,easing:E.transitions.easing.easeOut,delay:50})})));function m(l){const{className:E,label:ue,notched:Ie}=l,Ge=(0,s.A)(l,G),ht=ue!=null&&ue!=="",vt=(0,n.A)({},l,{notched:Ie,withLabel:ht});return(0,W.jsx)(Q,(0,n.A)({"aria-hidden":!0,className:E,ownerState:vt},Ge,{children:(0,W.jsx)(y,{ownerState:vt,children:ht?(0,W.jsx)("span",{children:ue}):mt||(mt=(0,W.jsx)("span",{className:"notranslate",children:"\u200B"}))})}))}function F(l){return(0,Et.Ay)("MuiOutlinedInput",l)}const V=(0,n.A)({},dt,(0,bt.A)("MuiOutlinedInput",["root","notchedOutline","input"])),Ae=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],Pe=l=>{const{classes:E}=l,ue={root:["root"],notchedOutline:["notchedOutline"],input:["input"]},Ie=(0,w.A)(ue,F,E);return(0,n.A)({},E,Ie)},Re=(0,d.Ay)(sn,{shouldForwardProp:l=>(0,Oe.A)(l)||l==="classes",name:"MuiOutlinedInput",slot:"Root",overridesResolver:Dt})(({theme:l,ownerState:E})=>{const ue=l.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return(0,n.A)({position:"relative",borderRadius:(l.vars||l).shape.borderRadius,[`&:hover .${V.notchedOutline}`]:{borderColor:(l.vars||l).palette.text.primary},"@media (hover: none)":{[`&:hover .${V.notchedOutline}`]:{borderColor:l.vars?`rgba(${l.vars.palette.common.onBackgroundChannel} / 0.23)`:ue}},[`&.${V.focused} .${V.notchedOutline}`]:{borderColor:(l.vars||l).palette[E.color].main,borderWidth:2},[`&.${V.error} .${V.notchedOutline}`]:{borderColor:(l.vars||l).palette.error.main},[`&.${V.disabled} .${V.notchedOutline}`]:{borderColor:(l.vars||l).palette.action.disabled}},E.startAdornment&&{paddingLeft:14},E.endAdornment&&{paddingRight:14},E.multiline&&(0,n.A)({padding:"16.5px 14px"},E.size==="small"&&{padding:"8.5px 14px"}))}),ye=(0,d.Ay)(m,{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(l,E)=>E.notchedOutline})(({theme:l})=>{const E=l.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:l.vars?`rgba(${l.vars.palette.common.onBackgroundChannel} / 0.23)`:E}}),pe=(0,d.Ay)(an,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:en})(({theme:l,ownerState:E})=>(0,n.A)({padding:"16.5px 14px"},!l.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:l.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:l.palette.mode==="light"?null:"#fff",caretColor:l.palette.mode==="light"?null:"#fff",borderRadius:"inherit"}},l.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[l.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},E.size==="small"&&{padding:"8.5px 14px"},E.multiline&&{padding:0},E.startAdornment&&{paddingLeft:0},E.endAdornment&&{paddingRight:0})),Se=t.forwardRef(function(E,ue){var Ie,Ge,ht,vt,yt;const I=(0,v.A)({props:E,name:"MuiOutlinedInput"}),{components:U={},fullWidth:te=!1,inputComponent:ve="input",label:Me,multiline:Qe=!1,notched:He,slots:$e={},type:Ze="text"}=I,Ke=(0,s.A)(I,Ae),gt=Pe(I),it=P(),Be=M({props:I,muiFormControl:it,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),Rt=(0,n.A)({},I,{color:Be.color||"primary",disabled:Be.disabled,error:Be.error,focused:Be.focused,formControl:it,fullWidth:te,hiddenLabel:Be.hiddenLabel,multiline:Qe,size:Be.size,type:Ze}),Ct=(Ie=(Ge=$e.root)!=null?Ge:U.Root)!=null?Ie:Re,qt=(ht=(vt=$e.input)!=null?vt:U.Input)!=null?ht:pe;return(0,W.jsx)(Zt,(0,n.A)({slots:{root:Ct,input:qt},renderSuffix:cn=>(0,W.jsx)(ye,{ownerState:Rt,className:gt.notchedOutline,label:Me!=null&&Me!==""&&Be.required?yt||(yt=(0,W.jsxs)(t.Fragment,{children:[Me,"\u2009","*"]})):Me,notched:typeof He!="undefined"?He:!!(cn.startAdornment||cn.filled||cn.focused)}),fullWidth:te,inputComponent:ve,multiline:Qe,ref:ue,type:Ze},Ke,{classes:(0,n.A)({},gt,{notchedOutline:null})}))});Se.muiName="Input";const Xe=Se;function pt(l){return(0,Et.Ay)("MuiFormLabel",l)}const f=(0,bt.A)("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),X=["children","className","color","component","disabled","error","filled","focused","required"],xe=l=>{const{classes:E,color:ue,focused:Ie,disabled:Ge,error:ht,filled:vt,required:yt}=l,I={root:["root",`color${(0,c.A)(ue)}`,Ge&&"disabled",ht&&"error",vt&&"filled",Ie&&"focused",yt&&"required"],asterisk:["asterisk",ht&&"error"]};return(0,w.A)(I,pt,E)},ge=(0,d.Ay)("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:l},E)=>(0,n.A)({},E.root,l.color==="secondary"&&E.colorSecondary,l.filled&&E.filled)})(({theme:l,ownerState:E})=>(0,n.A)({color:(l.vars||l).palette.text.secondary},l.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${f.focused}`]:{color:(l.vars||l).palette[E.color].main},[`&.${f.disabled}`]:{color:(l.vars||l).palette.text.disabled},[`&.${f.error}`]:{color:(l.vars||l).palette.error.main}})),Ve=(0,d.Ay)("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(l,E)=>E.asterisk})(({theme:l})=>({[`&.${f.error}`]:{color:(l.vars||l).palette.error.main}})),tn=t.forwardRef(function(E,ue){const Ie=(0,v.A)({props:E,name:"MuiFormLabel"}),{children:Ge,className:ht,component:vt="label"}=Ie,yt=(0,s.A)(Ie,X),I=P(),U=M({props:Ie,muiFormControl:I,states:["color","required","focused","disabled","error","filled"]}),te=(0,n.A)({},Ie,{color:U.color||"primary",component:vt,disabled:U.disabled,error:U.error,filled:U.filled,focused:U.focused,required:U.required}),ve=xe(te);return(0,W.jsxs)(ge,(0,n.A)({as:vt,ownerState:te,className:(0,T.A)(ve.root,ht),ref:ue},yt,{children:[Ge,U.required&&(0,W.jsxs)(Ve,{ownerState:te,"aria-hidden":!0,className:ve.asterisk,children:["\u2009","*"]})]}))});function zt(l){return(0,Et.Ay)("MuiInputLabel",l)}const un=(0,bt.A)("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]),Kt=null,Yt=["disableAnimation","margin","shrink","variant","className"],rn=l=>{const{classes:E,formControl:ue,size:Ie,shrink:Ge,disableAnimation:ht,variant:vt,required:yt}=l,I={root:["root",ue&&"formControl",!ht&&"animated",Ge&&"shrink",Ie&&Ie!=="normal"&&`size${(0,c.A)(Ie)}`,vt],asterisk:[yt&&"asterisk"]},U=(0,w.A)(I,zt,E);return(0,n.A)({},E,U)},jt=(0,d.Ay)(tn,{shouldForwardProp:l=>(0,Oe.A)(l)||l==="classes",name:"MuiInputLabel",slot:"Root",overridesResolver:(l,E)=>{const{ownerState:ue}=l;return[{[`& .${f.asterisk}`]:E.asterisk},E.root,ue.formControl&&E.formControl,ue.size==="small"&&E.sizeSmall,ue.shrink&&E.shrink,!ue.disableAnimation&&E.animated,ue.focused&&E.focused,E[ue.variant]]}})(({theme:l,ownerState:E})=>(0,n.A)({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},E.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},E.size==="small"&&{transform:"translate(0, 17px) scale(1)"},E.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!E.disableAnimation&&{transition:l.transitions.create(["color","transform","max-width"],{duration:l.transitions.duration.shorter,easing:l.transitions.easing.easeOut})},E.variant==="filled"&&(0,n.A)({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},E.size==="small"&&{transform:"translate(12px, 13px) scale(1)"},E.shrink&&(0,n.A)({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},E.size==="small"&&{transform:"translate(12px, 4px) scale(0.75)"})),E.variant==="outlined"&&(0,n.A)({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},E.size==="small"&&{transform:"translate(14px, 9px) scale(1)"},E.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"}))),An=t.forwardRef(function(E,ue){const Ie=(0,v.A)({name:"MuiInputLabel",props:E}),{disableAnimation:Ge=!1,shrink:ht,className:vt}=Ie,yt=(0,s.A)(Ie,Yt),I=P();let U=ht;typeof U=="undefined"&&I&&(U=I.filled||I.focused||I.adornedStart);const te=M({props:Ie,muiFormControl:I,states:["size","variant","required","focused"]}),ve=(0,n.A)({},Ie,{disableAnimation:Ge,formControl:I,shrink:U,size:te.size,variant:te.variant,required:te.required,focused:te.focused}),Me=rn(ve);return(0,W.jsx)(jt,(0,n.A)({"data-shrink":U,ownerState:ve,ref:ue,className:(0,T.A)(Me.root,vt)},yt,{classes:Me}))});var nn=e(5525);function On(l){return(0,Et.Ay)("MuiFormControl",l)}const Pn=(0,bt.A)("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]),xn=null,pn=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],jn=l=>{const{classes:E,margin:ue,fullWidth:Ie}=l,Ge={root:["root",ue!=="none"&&`margin${(0,c.A)(ue)}`,Ie&&"fullWidth"]};return(0,w.A)(Ge,On,E)},qn=(0,d.Ay)("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:l},E)=>(0,n.A)({},E.root,E[`margin${(0,c.A)(l.margin)}`],l.fullWidth&&E.fullWidth)})(({ownerState:l})=>(0,n.A)({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},l.margin==="normal"&&{marginTop:16,marginBottom:8},l.margin==="dense"&&{marginTop:8,marginBottom:4},l.fullWidth&&{width:"100%"})),on=t.forwardRef(function(E,ue){const Ie=(0,v.A)({props:E,name:"MuiFormControl"}),{children:Ge,className:ht,color:vt="primary",component:yt="div",disabled:I=!1,error:U=!1,focused:te,fullWidth:ve=!1,hiddenLabel:Me=!1,margin:Qe="none",required:He=!1,size:$e="medium",variant:Ze="outlined"}=Ie,Ke=(0,s.A)(Ie,pn),gt=(0,n.A)({},Ie,{color:vt,component:yt,disabled:I,error:U,fullWidth:ve,hiddenLabel:Me,margin:Qe,required:He,size:$e,variant:Ze}),it=jn(gt),[Be,Rt]=t.useState(()=>{let Rn=!1;return Ge&&t.Children.forEach(Ge,Tn=>{if(!(0,nn.A)(Tn,["Input","Select"]))return;const Un=(0,nn.A)(Tn,["Select"])?Tn.props.input:Tn;Un&&It(Un.props)&&(Rn=!0)}),Rn}),[Ct,qt]=t.useState(()=>{let Rn=!1;return Ge&&t.Children.forEach(Ge,Tn=>{(0,nn.A)(Tn,["Input","Select"])&&(ut(Tn.props,!0)||ut(Tn.props.inputProps,!0))&&(Rn=!0)}),Rn}),[cn,vn]=t.useState(!1);I&&cn&&vn(!1);const Mn=te!==void 0&&!I?te:cn;let Fn;const Dn=t.useMemo(()=>({adornedStart:Be,setAdornedStart:Rt,color:vt,disabled:I,error:U,filled:Ct,focused:Mn,fullWidth:ve,hiddenLabel:Me,size:$e,onBlur:()=>{vn(!1)},onEmpty:()=>{qt(!1)},onFilled:()=>{qt(!0)},onFocus:()=>{vn(!0)},registerEffect:Fn,required:He,variant:Ze}),[Be,vt,I,U,Ct,Mn,ve,Me,Fn,He,$e,Ze]);return(0,W.jsx)($.Provider,{value:Dn,children:(0,W.jsx)(qn,(0,n.A)({as:yt,ownerState:gt,className:(0,T.A)(it.root,ht),ref:ue},Ke,{children:Ge}))})});function rr(l){return(0,Et.Ay)("MuiFormHelperText",l)}const ur=(0,bt.A)("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);var er;const or=["children","className","component","disabled","error","filled","focused","margin","required","variant"],ir=l=>{const{classes:E,contained:ue,size:Ie,disabled:Ge,error:ht,filled:vt,focused:yt,required:I}=l,U={root:["root",Ge&&"disabled",ht&&"error",Ie&&`size${(0,c.A)(Ie)}`,ue&&"contained",yt&&"focused",vt&&"filled",I&&"required"]};return(0,w.A)(U,rr,E)},pr=(0,d.Ay)("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(l,E)=>{const{ownerState:ue}=l;return[E.root,ue.size&&E[`size${(0,c.A)(ue.size)}`],ue.contained&&E.contained,ue.filled&&E.filled]}})(({theme:l,ownerState:E})=>(0,n.A)({color:(l.vars||l).palette.text.secondary},l.typography.caption,{textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,[`&.${ur.disabled}`]:{color:(l.vars||l).palette.text.disabled},[`&.${ur.error}`]:{color:(l.vars||l).palette.error.main}},E.size==="small"&&{marginTop:4},E.contained&&{marginLeft:14,marginRight:14})),Jt=t.forwardRef(function(E,ue){const Ie=(0,v.A)({props:E,name:"MuiFormHelperText"}),{children:Ge,className:ht,component:vt="p"}=Ie,yt=(0,s.A)(Ie,or),I=P(),U=M({props:Ie,muiFormControl:I,states:["variant","size","disabled","error","filled","focused","required"]}),te=(0,n.A)({},Ie,{component:vt,contained:U.variant==="filled"||U.variant==="outlined",variant:U.variant,size:U.size,disabled:U.disabled,error:U.error,filled:U.filled,focused:U.focused,required:U.required}),ve=ir(te);return(0,W.jsx)(pr,(0,n.A)({as:vt,ownerState:te,className:(0,T.A)(ve.root,ht),ref:ue},yt,{children:Ge===" "?er||(er=(0,W.jsx)("span",{className:"notranslate",children:"\u200B"})):Ge}))});var lr=e(6225),hr=e(7943),Xn=e(4679);const Or=null,xr=t.createContext();function o(l){let{value:E}=l,ue=_objectWithoutPropertiesLoose(l,Or);return _jsx(xr.Provider,_extends({value:E!=null?E:!0},ue))}const i=()=>{const l=t.useContext(xr);return l!=null?l:!1},p=null;var S=e(9275),D=e(7532);const ce=D.A,ne=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function fe(l,E,ue){return l===E?l.firstChild:E&&E.nextElementSibling?E.nextElementSibling:ue?null:l.firstChild}function be(l,E,ue){return l===E?ue?l.firstChild:l.lastChild:E&&E.previousElementSibling?E.previousElementSibling:ue?null:l.lastChild}function tt(l,E){if(E===void 0)return!0;let ue=l.innerText;return ue===void 0&&(ue=l.textContent),ue=ue.trim().toLowerCase(),ue.length===0?!1:E.repeating?ue[0]===E.keys[0]:ue.indexOf(E.keys.join(""))===0}function Ne(l,E,ue,Ie,Ge,ht){let vt=!1,yt=Ge(l,E,E?ue:!1);for(;yt;){if(yt===l.firstChild){if(vt)return!1;vt=!0}const I=Ie?!1:yt.disabled||yt.getAttribute("aria-disabled")==="true";if(!yt.hasAttribute("tabindex")||!tt(yt,ht)||I)yt=Ge(l,yt,ue);else return yt.focus(),!0}return!1}const st=t.forwardRef(function(E,ue){const{actions:Ie,autoFocus:Ge=!1,autoFocusItem:ht=!1,children:vt,className:yt,disabledItemsFocusable:I=!1,disableListWrap:U=!1,onKeyDown:te,variant:ve="selectedMenu"}=E,Me=(0,s.A)(E,ne),Qe=t.useRef(null),He=t.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});(0,b.A)(()=>{Ge&&Qe.current.focus()},[Ge]),t.useImperativeHandle(Ie,()=>({adjustStyleForScrollbar:(it,{direction:Be})=>{const Rt=!Qe.current.style.width;if(it.clientHeight<Qe.current.clientHeight&&Rt){const Ct=`${ce((0,hr.A)(it))}px`;Qe.current.style[Be==="rtl"?"paddingLeft":"paddingRight"]=Ct,Qe.current.style.width=`calc(100% + ${Ct})`}return Qe.current}}),[]);const $e=it=>{const Be=Qe.current,Rt=it.key,Ct=(0,hr.A)(Be).activeElement;if(Rt==="ArrowDown")it.preventDefault(),Ne(Be,Ct,U,I,fe);else if(Rt==="ArrowUp")it.preventDefault(),Ne(Be,Ct,U,I,be);else if(Rt==="Home")it.preventDefault(),Ne(Be,null,U,I,fe);else if(Rt==="End")it.preventDefault(),Ne(Be,null,U,I,be);else if(Rt.length===1){const qt=He.current,cn=Rt.toLowerCase(),vn=performance.now();qt.keys.length>0&&(vn-qt.lastTime>500?(qt.keys=[],qt.repeating=!0,qt.previousKeyMatched=!0):qt.repeating&&cn!==qt.keys[0]&&(qt.repeating=!1)),qt.lastTime=vn,qt.keys.push(cn);const Mn=Ct&&!qt.repeating&&tt(Ct,qt);qt.previousKeyMatched&&(Mn||Ne(Be,Ct,!1,I,fe,qt))?it.preventDefault():qt.previousKeyMatched=!1}te&&te(it)},Ze=(0,h.A)(Qe,ue);let Ke=-1;t.Children.forEach(vt,(it,Be)=>{if(!t.isValidElement(it)){Ke===Be&&(Ke+=1,Ke>=vt.length&&(Ke=-1));return}it.props.disabled||(ve==="selectedMenu"&&it.props.selected||Ke===-1)&&(Ke=Be),Ke===Be&&(it.props.disabled||it.props.muiSkipListHighlight||it.type.muiSkipListHighlight)&&(Ke+=1,Ke>=vt.length&&(Ke=-1))});const gt=t.Children.map(vt,(it,Be)=>{if(Be===Ke){const Rt={};return ht&&(Rt.autoFocus=!0),it.props.tabIndex===void 0&&ve==="selectedMenu"&&(Rt.tabIndex=0),t.cloneElement(it,Rt)}return it});return(0,W.jsx)(S.A,(0,n.A)({role:"menu",ref:Ze,className:yt,onKeyDown:$e,tabIndex:Ge?0:-1},Me,{children:gt}))});var je=e(628);function Je(l){return(0,Et.Ay)("MuiMenu",l)}const ze=(0,bt.A)("MuiMenu",["root","paper","list"]),Tt=null,Ht=["onEntering"],Wt=["autoFocus","children","className","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant","slots","slotProps"],Qt={vertical:"top",horizontal:"right"},ct={vertical:"top",horizontal:"left"},yn=l=>{const{classes:E}=l,ue={root:["root"],paper:["paper"],list:["list"]};return(0,w.A)(ue,Je,E)},dn=(0,d.Ay)(je.Ay,{shouldForwardProp:l=>(0,Oe.A)(l)||l==="classes",name:"MuiMenu",slot:"Root",overridesResolver:(l,E)=>E.root})({}),le=(0,d.Ay)(je.IJ,{name:"MuiMenu",slot:"Paper",overridesResolver:(l,E)=>E.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),mn=(0,d.Ay)(st,{name:"MuiMenu",slot:"List",overridesResolver:(l,E)=>E.list})({outline:0}),fn=t.forwardRef(function(E,ue){var Ie,Ge;const ht=(0,v.A)({props:E,name:"MuiMenu"}),{autoFocus:vt=!0,children:yt,className:I,disableAutoFocusItem:U=!1,MenuListProps:te={},onClose:ve,open:Me,PaperProps:Qe={},PopoverClasses:He,transitionDuration:$e="auto",TransitionProps:{onEntering:Ze}={},variant:Ke="selectedMenu",slots:gt={},slotProps:it={}}=ht,Be=(0,s.A)(ht.TransitionProps,Ht),Rt=(0,s.A)(ht,Wt),Ct=i(),qt=(0,n.A)({},ht,{autoFocus:vt,disableAutoFocusItem:U,MenuListProps:te,onEntering:Ze,PaperProps:Qe,transitionDuration:$e,TransitionProps:Be,variant:Ke}),cn=yn(qt),vn=vt&&!U&&Me,Mn=t.useRef(null),Fn=(Gt,gn)=>{Mn.current&&Mn.current.adjustStyleForScrollbar(Gt,{direction:Ct?"rtl":"ltr"}),Ze&&Ze(Gt,gn)},Dn=Gt=>{Gt.key==="Tab"&&(Gt.preventDefault(),ve&&ve(Gt,"tabKeyDown"))};let Rn=-1;t.Children.map(yt,(Gt,gn)=>{t.isValidElement(Gt)&&(Gt.props.disabled||(Ke==="selectedMenu"&&Gt.props.selected||Rn===-1)&&(Rn=gn))});const Tn=(Ie=gt.paper)!=null?Ie:le,Un=(Ge=it.paper)!=null?Ge:Qe,Vt=(0,Xn.Q)({elementType:gt.root,externalSlotProps:it.root,ownerState:qt,className:[cn.root,I]}),En=(0,Xn.Q)({elementType:Tn,externalSlotProps:Un,ownerState:qt,className:cn.paper});return(0,W.jsx)(dn,(0,n.A)({onClose:ve,anchorOrigin:{vertical:"bottom",horizontal:Ct?"right":"left"},transformOrigin:Ct?Qt:ct,slots:{paper:Tn,root:gt.root},slotProps:{root:Vt,paper:En},open:Me,ref:ue,transitionDuration:$e,TransitionProps:(0,n.A)({onEntering:Fn},Be),ownerState:qt},Rt,{classes:He,children:(0,W.jsx)(mn,(0,n.A)({onKeyDown:Dn,actions:Mn,autoFocus:vt&&(Rn===-1||U),autoFocusItem:vn,variant:Ke},te,{className:(0,T.A)(cn.list,te.className),children:yt}))}))});function Sn(l){return(0,Et.Ay)("MuiNativeSelect",l)}const Hn=(0,bt.A)("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),Yn=["className","disabled","error","IconComponent","inputRef","variant"],nr=l=>{const{classes:E,variant:ue,disabled:Ie,multiple:Ge,open:ht,error:vt}=l,yt={select:["select",ue,Ie&&"disabled",Ge&&"multiple",vt&&"error"],icon:["icon",`icon${(0,c.A)(ue)}`,ht&&"iconOpen",Ie&&"disabled"]};return(0,w.A)(yt,Sn,E)},Cn=({ownerState:l,theme:E})=>(0,n.A)({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":(0,n.A)({},E.vars?{backgroundColor:`rgba(${E.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:E.palette.mode==="light"?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${Hn.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(E.vars||E).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},l.variant==="filled"&&{"&&&":{paddingRight:32}},l.variant==="outlined"&&{borderRadius:(E.vars||E).shape.borderRadius,"&:focus":{borderRadius:(E.vars||E).shape.borderRadius},"&&&":{paddingRight:32}}),br=(0,d.Ay)("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:Oe.A,overridesResolver:(l,E)=>{const{ownerState:ue}=l;return[E.select,E[ue.variant],ue.error&&E.error,{[`&.${Hn.multiple}`]:E.multiple}]}})(Cn),r=({ownerState:l,theme:E})=>(0,n.A)({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(E.vars||E).palette.action.active,[`&.${Hn.disabled}`]:{color:(E.vars||E).palette.action.disabled}},l.open&&{transform:"rotate(180deg)"},l.variant==="filled"&&{right:7},l.variant==="outlined"&&{right:7}),a=(0,d.Ay)("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(l,E)=>{const{ownerState:ue}=l;return[E.icon,ue.variant&&E[`icon${(0,c.A)(ue.variant)}`],ue.open&&E.iconOpen]}})(r),x=t.forwardRef(function(E,ue){const{className:Ie,disabled:Ge,error:ht,IconComponent:vt,inputRef:yt,variant:I="standard"}=E,U=(0,s.A)(E,Yn),te=(0,n.A)({},E,{disabled:Ge,variant:I,error:ht}),ve=nr(te);return(0,W.jsxs)(t.Fragment,{children:[(0,W.jsx)(br,(0,n.A)({ownerState:te,className:(0,T.A)(ve.select,Ie),disabled:Ge,ref:yt||ue},U)),E.multiple?null:(0,W.jsx)(a,{as:vt,ownerState:te,className:ve.icon})]})});var Y=e(3887),oe=e(1677);function ae(l){return(0,Et.Ay)("MuiSelect",l)}const At=(0,bt.A)("MuiSelect",["root","select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);var wt;const St=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],qe=(0,d.Ay)("div",{name:"MuiSelect",slot:"Select",overridesResolver:(l,E)=>{const{ownerState:ue}=l;return[{[`&.${At.select}`]:E.select},{[`&.${At.select}`]:E[ue.variant]},{[`&.${At.error}`]:E.error},{[`&.${At.multiple}`]:E.multiple}]}})(Cn,{[`&.${At.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),Bn=(0,d.Ay)("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(l,E)=>{const{ownerState:ue}=l;return[E.icon,ue.variant&&E[`icon${(0,c.A)(ue.variant)}`],ue.open&&E.iconOpen]}})(r),Jn=(0,d.Ay)("input",{shouldForwardProp:l=>(0,Y.A)(l)&&l!=="classes",name:"MuiSelect",slot:"NativeInput",overridesResolver:(l,E)=>E.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function xt(l,E){return typeof E=="object"&&E!==null?l===E:String(l)===String(E)}function Mt(l){return l==null||typeof l=="string"&&!l.trim()}const Nn=l=>{const{classes:E,variant:ue,disabled:Ie,multiple:Ge,open:ht,error:vt}=l,yt={select:["select",ue,Ie&&"disabled",Ge&&"multiple",vt&&"error"],icon:["icon",`icon${(0,c.A)(ue)}`,ht&&"iconOpen",Ie&&"disabled"],nativeInput:["nativeInput"]};return(0,w.A)(yt,ae,E)},Kn=t.forwardRef(function(E,ue){var Ie;const{"aria-describedby":Ge,"aria-label":ht,autoFocus:vt,autoWidth:yt,children:I,className:U,defaultOpen:te,defaultValue:ve,disabled:Me,displayEmpty:Qe,error:He=!1,IconComponent:$e,inputRef:Ze,labelId:Ke,MenuProps:gt={},multiple:it,name:Be,onBlur:Rt,onChange:Ct,onClose:qt,onFocus:cn,onOpen:vn,open:Mn,readOnly:Fn,renderValue:Dn,SelectDisplayProps:Rn={},tabIndex:Tn,value:Un,variant:Vt="standard"}=E,En=(0,s.A)(E,St),[Gt,gn]=(0,oe.A)({controlled:Un,default:ve,name:"Select"}),[Qn,fr]=(0,oe.A)({controlled:Mn,default:te,name:"Select"}),Er=t.useRef(null),tr=t.useRef(null),[Wn,vr]=t.useState(null),{current:sr}=t.useRef(Mn!=null),[_r,Sr]=t.useState(),Fr=(0,h.A)(ue,Ze),Br=t.useCallback(Xt=>{tr.current=Xt,Xt&&vr(Xt)},[]),_n=Wn==null?void 0:Wn.parentNode;t.useImperativeHandle(Fr,()=>({focus:()=>{tr.current.focus()},node:Er.current,value:Gt}),[Gt]),t.useEffect(()=>{te&&Qn&&Wn&&!sr&&(Sr(yt?null:_n.clientWidth),tr.current.focus())},[Wn,yt]),t.useEffect(()=>{vt&&tr.current.focus()},[vt]),t.useEffect(()=>{if(!Ke)return;const Xt=(0,hr.A)(tr.current).getElementById(Ke);if(Xt){const Ln=()=>{getSelection().isCollapsed&&tr.current.focus()};return Xt.addEventListener("click",Ln),()=>{Xt.removeEventListener("click",Ln)}}},[Ke]);const Vn=(Xt,Ln)=>{Xt?vn&&vn(Ln):qt&&qt(Ln),sr||(Sr(yt?null:_n.clientWidth),fr(Xt))},Nr=Xt=>{Xt.button===0&&(Xt.preventDefault(),tr.current.focus(),Vn(!0,Xt))},Ur=Xt=>{Vn(!1,Xt)},Ar=t.Children.toArray(I),eo=Xt=>{const Ln=Ar.find(Gn=>Gn.props.value===Xt.target.value);Ln!==void 0&&(gn(Ln.props.value),Ct&&Ct(Xt,Ln))},to=Xt=>Ln=>{let Gn;if(Ln.currentTarget.hasAttribute("tabindex")){if(it){Gn=Array.isArray(Gt)?Gt.slice():[];const Mr=Gt.indexOf(Xt.props.value);Mr===-1?Gn.push(Xt.props.value):Gn.splice(Mr,1)}else Gn=Xt.props.value;if(Xt.props.onClick&&Xt.props.onClick(Ln),Gt!==Gn&&(gn(Gn),Ct)){const Mr=Ln.nativeEvent||Ln,lo=new Mr.constructor(Mr.type,Mr);Object.defineProperty(lo,"target",{writable:!0,value:{value:Gn,name:Be}}),Ct(lo,Xt)}it||Vn(!1,Ln)}},no=Xt=>{Fn||[" ","ArrowUp","ArrowDown","Enter"].indexOf(Xt.key)!==-1&&(Xt.preventDefault(),Vn(!0,Xt))},wr=Wn!==null&&Qn,jr=Xt=>{!wr&&Rt&&(Object.defineProperty(Xt,"target",{writable:!0,value:{value:Gt,name:Be}}),Rt(Xt))};delete En["aria-invalid"];let Zn,Yr;const yr=[];let Cr=!1,Jr=!1;(ut({value:Gt})||Qe)&&(Dn?Zn=Dn(Gt):Cr=!0);const Wr=Ar.map(Xt=>{if(!t.isValidElement(Xt))return null;let Ln;if(it){if(!Array.isArray(Gt))throw new Error((0,j.A)(2));Ln=Gt.some(Gn=>xt(Gn,Xt.props.value)),Ln&&Cr&&yr.push(Xt.props.children)}else Ln=xt(Gt,Xt.props.value),Ln&&Cr&&(Yr=Xt.props.children);return Ln&&(Jr=!0),t.cloneElement(Xt,{"aria-selected":Ln?"true":"false",onClick:to(Xt),onKeyUp:Gn=>{Gn.key===" "&&Gn.preventDefault(),Xt.props.onKeyUp&&Xt.props.onKeyUp(Gn)},role:"option",selected:Ln,value:void 0,"data-value":Xt.props.value})});Cr&&(it?yr.length===0?Zn=null:Zn=yr.reduce((Xt,Ln,Gn)=>(Xt.push(Ln),Gn<yr.length-1&&Xt.push(", "),Xt),[]):Zn=Yr);let $r=_r;!yt&&sr&&Wn&&($r=_n.clientWidth);let In;typeof Tn!="undefined"?In=Tn:In=Me?null:0;const kr=Rn.id||(Be?`mui-component-select-${Be}`:void 0),Tr=(0,n.A)({},E,{variant:Vt,value:Gt,open:wr,error:He}),ro=Nn(Tr),oo=(0,n.A)({},gt.PaperProps,(Ie=gt.slotProps)==null?void 0:Ie.paper),io=(0,g.A)();return(0,W.jsxs)(t.Fragment,{children:[(0,W.jsx)(qe,(0,n.A)({ref:Br,tabIndex:In,role:"combobox","aria-controls":io,"aria-disabled":Me?"true":void 0,"aria-expanded":wr?"true":"false","aria-haspopup":"listbox","aria-label":ht,"aria-labelledby":[Ke,kr].filter(Boolean).join(" ")||void 0,"aria-describedby":Ge,onKeyDown:no,onMouseDown:Me||Fn?null:Nr,onBlur:jr,onFocus:cn},Rn,{ownerState:Tr,className:(0,T.A)(Rn.className,ro.select,U),id:kr,children:Mt(Zn)?wt||(wt=(0,W.jsx)("span",{className:"notranslate",children:"\u200B"})):Zn})),(0,W.jsx)(Jn,(0,n.A)({"aria-invalid":He,value:Array.isArray(Gt)?Gt.join(","):Gt,name:Be,ref:Er,"aria-hidden":!0,onChange:eo,tabIndex:-1,disabled:Me,className:ro.nativeInput,autoFocus:vt,ownerState:Tr},En)),(0,W.jsx)(Bn,{as:$e,className:ro.icon,ownerState:Tr}),(0,W.jsx)(fn,(0,n.A)({id:`menu-${Be||""}`,anchorEl:_n,open:wr,onClose:Ur,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},gt,{MenuListProps:(0,n.A)({"aria-labelledby":Ke,role:"listbox","aria-multiselectable":it?"true":void 0,disableListWrap:!0,id:io},gt.MenuListProps),slotProps:(0,n.A)({},gt.slotProps,{paper:(0,n.A)({},oo,{style:(0,n.A)({minWidth:$r},oo!=null?oo.style:null)})}),children:Wr}))]})});var ar=e(4076);const Lr=(0,ar.A)((0,W.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown"),Qr=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],Zr=["root"],qr=l=>{const{classes:E}=l;return E},mr={name:"MuiSelect",overridesResolver:(l,E)=>E.root,shouldForwardProp:l=>(0,Oe.A)(l)&&l!=="variant",slot:"Root"},Rr=(0,d.Ay)(Ce,mr)(""),zr=(0,d.Ay)(Xe,mr)(""),Ir=(0,d.Ay)($t,mr)(""),cr=t.forwardRef(function(E,ue){const Ie=(0,v.A)({name:"MuiSelect",props:E}),{autoWidth:Ge=!1,children:ht,classes:vt={},className:yt,defaultOpen:I=!1,displayEmpty:U=!1,IconComponent:te=Lr,id:ve,input:Me,inputProps:Qe,label:He,labelId:$e,MenuProps:Ze,multiple:Ke=!1,native:gt=!1,onClose:it,onOpen:Be,open:Rt,renderValue:Ct,SelectDisplayProps:qt,variant:cn="outlined"}=Ie,vn=(0,s.A)(Ie,Qr),Mn=gt?x:Kn,Fn=P(),Dn=M({props:Ie,muiFormControl:Fn,states:["variant","error"]}),Rn=Dn.variant||cn,Tn=(0,n.A)({},Ie,{variant:Rn,classes:vt}),Un=qr(Tn),Vt=(0,s.A)(Un,Zr),En=Me||{standard:(0,W.jsx)(Rr,{ownerState:Tn}),outlined:(0,W.jsx)(zr,{label:He,ownerState:Tn}),filled:(0,W.jsx)(Ir,{ownerState:Tn})}[Rn],Gt=(0,h.A)(ue,En.ref);return(0,W.jsx)(t.Fragment,{children:t.cloneElement(En,(0,n.A)({inputComponent:Mn,inputProps:(0,n.A)({children:ht,error:Dn.error,IconComponent:te,variant:Rn,type:void 0,multiple:Ke},gt?{id:ve}:{autoWidth:Ge,defaultOpen:I,displayEmpty:U,labelId:$e,MenuProps:Ze,onClose:it,onOpen:Be,open:Rt,renderValue:Ct,SelectDisplayProps:(0,n.A)({id:ve},qt)},Qe,{classes:Qe?(0,L.A)(Vt,Qe.classes):Vt},Me?Me.props.inputProps:{})},(Ke&&gt||U)&&Rn==="outlined"?{notched:!0}:{},{ref:Gt,className:(0,T.A)(En.props.className,yt,Un.root)},!Me&&{variant:Rn},vn))})});cr.muiName="Select";const Pr=cr;function Kr(l){return(0,Et.Ay)("MuiTextField",l)}const Dr=(0,bt.A)("MuiTextField",["root"]),so=null,dr=["autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","maxRows","minRows","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","select","SelectProps","type","value","variant"],Hr={standard:Ce,filled:$t,outlined:Xe},Vr=l=>{const{classes:E}=l,ue={root:["root"]};return(0,w.A)(ue,Kr,E)},Gr=(0,d.Ay)(on,{name:"MuiTextField",slot:"Root",overridesResolver:(l,E)=>E.root})({}),Xr=t.forwardRef(function(E,ue){const Ie=(0,v.A)({props:E,name:"MuiTextField"}),{autoComplete:Ge,autoFocus:ht=!1,children:vt,className:yt,color:I="primary",defaultValue:U,disabled:te=!1,error:ve=!1,FormHelperTextProps:Me,fullWidth:Qe=!1,helperText:He,id:$e,InputLabelProps:Ze,inputProps:Ke,InputProps:gt,inputRef:it,label:Be,maxRows:Rt,minRows:Ct,multiline:qt=!1,name:cn,onBlur:vn,onChange:Mn,onFocus:Fn,placeholder:Dn,required:Rn=!1,rows:Tn,select:Un=!1,SelectProps:Vt,type:En,value:Gt,variant:gn="outlined"}=Ie,Qn=(0,s.A)(Ie,dr),fr=(0,n.A)({},Ie,{autoFocus:ht,color:I,disabled:te,error:ve,fullWidth:Qe,multiline:qt,required:Rn,select:Un,variant:gn}),Er=Vr(fr),tr={};gn==="outlined"&&(Ze&&typeof Ze.shrink!="undefined"&&(tr.notched=Ze.shrink),tr.label=Be),Un&&((!Vt||!Vt.native)&&(tr.id=void 0),tr["aria-describedby"]=void 0);const Wn=(0,g.A)($e),vr=He&&Wn?`${Wn}-helper-text`:void 0,sr=Be&&Wn?`${Wn}-label`:void 0,_r=Hr[gn],Sr=(0,W.jsx)(_r,(0,n.A)({"aria-describedby":vr,autoComplete:Ge,autoFocus:ht,defaultValue:U,fullWidth:Qe,multiline:qt,name:cn,rows:Tn,maxRows:Rt,minRows:Ct,type:En,value:Gt,id:Wn,inputRef:it,onBlur:vn,onChange:Mn,onFocus:Fn,placeholder:Dn,inputProps:Ke},tr,gt));return(0,W.jsxs)(Gr,(0,n.A)({className:(0,T.A)(Er.root,yt),disabled:te,error:ve,fullWidth:Qe,ref:ue,required:Rn,color:I,variant:gn,ownerState:fr},Qn,{children:[Be!=null&&Be!==""&&(0,W.jsx)(An,(0,n.A)({htmlFor:Wn,id:sr},Ze,{children:Be})),Un?(0,W.jsx)(Pr,(0,n.A)({"aria-describedby":vr,id:Wn,labelId:sr,value:Gt,input:Sr},Vt,{children:vt})):Sr,He&&(0,W.jsx)(Jt,(0,n.A)({id:vr},Me,{children:He}))]}))})},1362:(he,R,e)=>{"use strict";e.d(R,{A:()=>_});var n=e(1772),s=e(8733),t=e(4999),T=e(4164),w=e(6598),g=e(2458),d=e(4747),v=e(7437),L=e(6039),j=e(3932),k=e(8748);function re($){return(0,k.Ay)("MuiTypography",$)}const K=(0,j.A)("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]),H=null;var W=e(7343);const B=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],O=$=>{const{align:P,gutterBottom:c,noWrap:h,paragraph:b,variant:N,classes:q}=$,Z={root:["root",N,$.align!=="inherit"&&`align${(0,L.A)(P)}`,c&&"gutterBottom",h&&"noWrap",b&&"paragraph"]};return(0,g.A)(Z,re,q)},ie=(0,d.Ay)("span",{name:"MuiTypography",slot:"Root",overridesResolver:($,P)=>{const{ownerState:c}=$;return[P.root,c.variant&&P[c.variant],c.align!=="inherit"&&P[`align${(0,L.A)(c.align)}`],c.noWrap&&P.noWrap,c.gutterBottom&&P.gutterBottom,c.paragraph&&P.paragraph]}})(({theme:$,ownerState:P})=>(0,s.A)({margin:0},P.variant==="inherit"&&{font:"inherit"},P.variant!=="inherit"&&$.typography[P.variant],P.align!=="inherit"&&{textAlign:P.align},P.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},P.gutterBottom&&{marginBottom:"0.35em"},P.paragraph&&{marginBottom:16})),J={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},se={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},A=$=>se[$]||$,_=t.forwardRef(function(P,c){const h=(0,v.A)({props:P,name:"MuiTypography"}),b=A(h.color),N=(0,w.A)((0,s.A)({},h,{color:b})),{align:q="inherit",className:Z,component:me,gutterBottom:_e=!1,noWrap:Te=!1,paragraph:Le=!1,variant:Fe="body1",variantMapping:Ye=J}=N,ut=(0,n.A)(N,B),It=(0,s.A)({},N,{align:q,color:b,className:Z,component:me,gutterBottom:_e,noWrap:Te,paragraph:Le,variant:Fe,variantMapping:Ye}),bt=me||(Le?"p":Ye[Fe]||J[Fe])||"span",Et=O(It);return(0,W.jsx)(ie,(0,s.A)({as:bt,ref:c,ownerState:It,className:(0,T.A)(Et.root,Z)},ut))})},557:(he,R)=>{"use strict";var e;/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=Symbol.for("react.element"),s=Symbol.for("react.portal"),t=Symbol.for("react.fragment"),T=Symbol.for("react.strict_mode"),w=Symbol.for("react.profiler"),g=Symbol.for("react.provider"),d=Symbol.for("react.context"),v=Symbol.for("react.server_context"),L=Symbol.for("react.forward_ref"),j=Symbol.for("react.suspense"),k=Symbol.for("react.suspense_list"),re=Symbol.for("react.memo"),K=Symbol.for("react.lazy"),H=Symbol.for("react.offscreen"),W;W=Symbol.for("react.module.reference");function B(O){if(typeof O=="object"&&O!==null){var ie=O.$$typeof;switch(ie){case n:switch(O=O.type,O){case t:case w:case T:case j:case k:return O;default:switch(O=O&&O.$$typeof,O){case v:case d:case L:case K:case re:case g:return O;default:return ie}}case s:return ie}}}e=d,e=g,e=n,e=L,e=t,e=K,e=re,e=s,e=w,e=T,e=j,e=k,e=function(){return!1},e=function(){return!1},e=function(O){return B(O)===d},e=function(O){return B(O)===g},e=function(O){return typeof O=="object"&&O!==null&&O.$$typeof===n},e=function(O){return B(O)===L},e=function(O){return B(O)===t},e=function(O){return B(O)===K},e=function(O){return B(O)===re},e=function(O){return B(O)===s},e=function(O){return B(O)===w},e=function(O){return B(O)===T},e=function(O){return B(O)===j},e=function(O){return B(O)===k},e=function(O){return typeof O=="string"||typeof O=="function"||O===t||O===w||O===T||O===j||O===k||O===H||typeof O=="object"&&O!==null&&(O.$$typeof===K||O.$$typeof===re||O.$$typeof===g||O.$$typeof===d||O.$$typeof===L||O.$$typeof===W||O.getModuleId!==void 0)},e=B},6225:(he,R,e)=>{"use strict";e(557)},4478:(he,R,e)=>{"use strict";e.d(R,{A:()=>we});var n=e(8733),s=e(1772),t=e(3524),T=e(3500),w=e(530),g=e(9416),d=e(8986);function v(z,Ce){return(0,n.A)({toolbar:{minHeight:56,[z.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[z.up("sm")]:{minHeight:64}}},Ce)}var L=e(1742);const k={black:"#000",white:"#fff"},K={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},W={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},O={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},J={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},A={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},_={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},P={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},c=["mode","contrastThreshold","tonalOffset"],h={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:k.white,default:k.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},b={text:{primary:k.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:k.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function N(z,Ce,lt,at){const et=at.light||at,Ot=at.dark||at*1.5;z[Ce]||(z.hasOwnProperty(lt)?z[Ce]=z[lt]:Ce==="light"?z.light=(0,L.a)(z.main,et):Ce==="dark"&&(z.dark=(0,L.e$)(z.main,Ot)))}function q(z="light"){return z==="dark"?{main:A[200],light:A[50],dark:A[400]}:{main:A[700],light:A[400],dark:A[800]}}function Z(z="light"){return z==="dark"?{main:W[200],light:W[50],dark:W[400]}:{main:W[500],light:W[300],dark:W[700]}}function me(z="light"){return z==="dark"?{main:O[500],light:O[300],dark:O[700]}:{main:O[700],light:O[400],dark:O[800]}}function _e(z="light"){return z==="dark"?{main:_[400],light:_[300],dark:_[700]}:{main:_[700],light:_[500],dark:_[900]}}function Te(z="light"){return z==="dark"?{main:P[400],light:P[300],dark:P[700]}:{main:P[800],light:P[500],dark:P[900]}}function Le(z="light"){return z==="dark"?{main:J[400],light:J[300],dark:J[700]}:{main:"#ed6c02",light:J[500],dark:J[900]}}function Fe(z){const{mode:Ce="light",contrastThreshold:lt=3,tonalOffset:at=.2}=z,et=(0,s.A)(z,c),Ot=z.primary||q(Ce),ft=z.secondary||Z(Ce),_t=z.error||me(Ce),Lt=z.info||_e(Ce),Ut=z.success||Te(Ce),$t=z.warning||Le(Ce);function mt(m){return(0,L.eM)(m,b.text.primary)>=lt?b.text.primary:h.text.primary}const G=({color:m,name:F,mainShade:ee=500,lightShade:V=300,darkShade:Ae=700})=>{if(m=(0,n.A)({},m),!m.main&&m[ee]&&(m.main=m[ee]),!m.hasOwnProperty("main"))throw new Error((0,t.A)(11,F?` (${F})`:"",ee));if(typeof m.main!="string")throw new Error((0,t.A)(12,F?` (${F})`:"",JSON.stringify(m.main)));return N(m,"light",V,at),N(m,"dark",Ae,at),m.contrastText||(m.contrastText=mt(m.main)),m},Q={dark:b,light:h};return(0,T.A)((0,n.A)({common:(0,n.A)({},k),mode:Ce,primary:G({color:Ot,name:"primary"}),secondary:G({color:ft,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:G({color:_t,name:"error"}),warning:G({color:$t,name:"warning"}),info:G({color:Lt,name:"info"}),success:G({color:Ut,name:"success"}),grey:K,contrastThreshold:lt,getContrastText:mt,augmentColor:G,tonalOffset:at},Q[Ce]),et)}const Ye=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"];function ut(z){return Math.round(z*1e5)/1e5}const It={textTransform:"uppercase"},bt='"Roboto", "Helvetica", "Arial", sans-serif';function Et(z,Ce){const lt=typeof Ce=="function"?Ce(z):Ce,{fontFamily:at=bt,fontSize:et=14,fontWeightLight:Ot=300,fontWeightRegular:ft=400,fontWeightMedium:_t=500,fontWeightBold:Lt=700,htmlFontSize:Ut=16,allVariants:$t,pxToRem:mt}=lt,G=(0,s.A)(lt,Ye),Q=et/14,y=mt||(ee=>`${ee/Ut*Q}rem`),m=(ee,V,Ae,Pe,Re)=>(0,n.A)({fontFamily:at,fontWeight:ee,fontSize:y(V),lineHeight:Ae},at===bt?{letterSpacing:`${ut(Pe/V)}em`}:{},Re,$t),F={h1:m(Ot,96,1.167,-1.5),h2:m(Ot,60,1.2,-.5),h3:m(ft,48,1.167,0),h4:m(ft,34,1.235,.25),h5:m(ft,24,1.334,0),h6:m(_t,20,1.6,.15),subtitle1:m(ft,16,1.75,.15),subtitle2:m(_t,14,1.57,.1),body1:m(ft,16,1.5,.15),body2:m(ft,14,1.43,.15),button:m(_t,14,1.75,.4,It),caption:m(ft,12,1.66,.4),overline:m(ft,12,2.66,1,It),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return(0,T.A)((0,n.A)({htmlFontSize:Ut,pxToRem:y,fontFamily:at,fontSize:et,fontWeightLight:Ot,fontWeightRegular:ft,fontWeightMedium:_t,fontWeightBold:Lt},F),G,{clone:!1})}const Ft=.2,Pt=.14,dt=.12;function Ue(...z){return[`${z[0]}px ${z[1]}px ${z[2]}px ${z[3]}px rgba(0,0,0,${Ft})`,`${z[4]}px ${z[5]}px ${z[6]}px ${z[7]}px rgba(0,0,0,${Pt})`,`${z[8]}px ${z[9]}px ${z[10]}px ${z[11]}px rgba(0,0,0,${dt})`].join(",")}const en=["none",Ue(0,2,1,-1,0,1,1,0,0,1,3,0),Ue(0,3,1,-2,0,2,2,0,0,1,5,0),Ue(0,3,3,-2,0,3,4,0,0,1,8,0),Ue(0,2,4,-1,0,4,5,0,0,1,10,0),Ue(0,3,5,-1,0,5,8,0,0,1,14,0),Ue(0,3,5,-1,0,6,10,0,0,1,18,0),Ue(0,4,5,-2,0,7,10,1,0,2,16,1),Ue(0,5,5,-3,0,8,10,1,0,3,14,2),Ue(0,5,6,-3,0,9,12,1,0,3,16,2),Ue(0,6,6,-3,0,10,14,1,0,4,18,3),Ue(0,6,7,-4,0,11,15,1,0,4,20,3),Ue(0,7,8,-4,0,12,17,2,0,5,22,4),Ue(0,7,8,-4,0,13,19,2,0,5,24,4),Ue(0,7,9,-4,0,14,21,2,0,5,26,4),Ue(0,8,9,-5,0,15,22,2,0,6,28,5),Ue(0,8,10,-5,0,16,24,2,0,6,30,5),Ue(0,8,11,-5,0,17,26,2,0,6,32,5),Ue(0,9,11,-5,0,18,28,2,0,7,34,6),Ue(0,9,12,-6,0,19,29,2,0,7,36,6),Ue(0,10,13,-6,0,20,31,3,0,8,38,7),Ue(0,10,13,-6,0,21,33,3,0,8,40,7),Ue(0,10,14,-6,0,22,35,3,0,8,42,7),Ue(0,11,14,-7,0,23,36,3,0,9,44,8),Ue(0,11,15,-7,0,24,38,3,0,9,46,8)];var Bt=Math.pow;const sn=["duration","easing","delay"],an={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},ln={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Nt(z){return`${Math.round(z)}ms`}function Zt(z){if(!z)return 0;const Ce=z/36;return Math.round((4+15*Bt(Ce,.25)+Ce/5)*10)}function Oe(z){const Ce=(0,n.A)({},an,z.easing),lt=(0,n.A)({},ln,z.duration),at=(et=["all"],Ot={})=>{const{duration:ft=lt.standard,easing:_t=Ce.easeInOut,delay:Lt=0}=Ot,Ut=(0,s.A)(Ot,sn);return(Array.isArray(et)?et:[et]).map($t=>`${$t} ${typeof ft=="string"?ft:Nt(ft)} ${_t} ${typeof Lt=="string"?Lt:Nt(Lt)}`).join(",")};return(0,n.A)({getAutoHeightDuration:Zt,create:at},z,{easing:Ce,duration:lt})}const nt={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},de=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];function C(z={},...Ce){const{mixins:lt={},palette:at={},transitions:et={},typography:Ot={}}=z,ft=(0,s.A)(z,de);if(z.vars)throw new Error((0,t.A)(18));const _t=Fe(at),Lt=(0,d.A)(z);let Ut=(0,T.A)(Lt,{mixins:v(Lt.breakpoints,lt),palette:_t,shadows:en.slice(),typography:Et(_t,Ot),transitions:Oe(et),zIndex:(0,n.A)({},nt)});return Ut=(0,T.A)(Ut,ft),Ut=Ce.reduce(($t,mt)=>(0,T.A)($t,mt),Ut),Ut.unstable_sxConfig=(0,n.A)({},w.A,ft==null?void 0:ft.unstable_sxConfig),Ut.unstable_sx=function(mt){return(0,g.A)({sx:mt,theme:this})},Ut}let Ee=!1;function De(...z){return C(...z)}const we=C},6838:(he,R,e)=>{"use strict";e.d(R,{A:()=>t});var n=e(4478);const t=(0,n.A)()},7891:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});const n="$$material"},3487:(he,R,e)=>{"use strict";e.d(R,{A:()=>t});var n=e(3887);const t=T=>(0,n.A)(T)&&T!=="classes"},3887:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});function n(t){return t!=="ownerState"&&t!=="theme"&&t!=="sx"&&t!=="as"}const s=n},4747:(he,R,e)=>{"use strict";e.d(R,{Ay:()=>g});var n=e(5920),s=e(6838),t=e(7891),T=e(3487);const g=(0,n.Ay)({themeId:t.A,defaultTheme:s.A,rootShouldForwardProp:T.A})},2756:(he,R,e)=>{"use strict";e.d(R,{A:()=>w});var n=e(4999),s=e(3529),t=e(6838),T=e(7891);function w(){const g=(0,s.A)(t.A);return g[T.A]||g}},7437:(he,R,e)=>{"use strict";e.d(R,{A:()=>d});var n=e(2926);function s(v){const{theme:L,name:j,props:k}=v;return!L||!L.components||!L.components[j]||!L.components[j].defaultProps?k:(0,n.A)(L.components[j].defaultProps,k)}var t=e(3529);function T({props:v,name:L,defaultTheme:j,themeId:k}){let re=(0,t.A)(j);return k&&(re=re[k]||re),s({theme:re,name:L,props:v})}var w=e(6838),g=e(7891);function d({props:v,name:L}){return T({props:v,name:L,defaultTheme:w.A,themeId:g.A})}},9785:(he,R,e)=>{"use strict";e.d(R,{c:()=>s,q:()=>n});const n=t=>t.scrollTop;function s(t,T){var w,g;const{timeout:d,easing:v,style:L={}}=t;return{duration:(w=L.transitionDuration)!=null?w:typeof d=="number"?d:d[T.mode]||0,easing:(g=L.transitionTimingFunction)!=null?g:typeof v=="object"?v[T.mode]:v,delay:L.transitionDelay}}},6039:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(486);const s=n.A},4076:(he,R,e)=>{"use strict";e.d(R,{A:()=>se});var n=e(8733),s=e(4999),t=e(1772),T=e(4164),w=e(2458),g=e(6039),d=e(7437),v=e(4747),L=e(3932),j=e(8748);function k(A){return(0,j.Ay)("MuiSvgIcon",A)}const re=(0,L.A)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]),K=null;var H=e(7343);const W=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],B=A=>{const{color:M,fontSize:_,classes:$}=A,P={root:["root",M!=="inherit"&&`color${(0,g.A)(M)}`,`fontSize${(0,g.A)(_)}`]};return(0,w.A)(P,k,$)},O=(0,v.Ay)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(A,M)=>{const{ownerState:_}=A;return[M.root,_.color!=="inherit"&&M[`color${(0,g.A)(_.color)}`],M[`fontSize${(0,g.A)(_.fontSize)}`]]}})(({theme:A,ownerState:M})=>{var _,$,P,c,h,b,N,q,Z,me,_e,Te,Le;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:M.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:(_=A.transitions)==null||($=_.create)==null?void 0:$.call(_,"fill",{duration:(P=A.transitions)==null||(P=P.duration)==null?void 0:P.shorter}),fontSize:{inherit:"inherit",small:((c=A.typography)==null||(h=c.pxToRem)==null?void 0:h.call(c,20))||"1.25rem",medium:((b=A.typography)==null||(N=b.pxToRem)==null?void 0:N.call(b,24))||"1.5rem",large:((q=A.typography)==null||(Z=q.pxToRem)==null?void 0:Z.call(q,35))||"2.1875rem"}[M.fontSize],color:(me=(_e=(A.vars||A).palette)==null||(_e=_e[M.color])==null?void 0:_e.main)!=null?me:{action:(Te=(A.vars||A).palette)==null||(Te=Te.action)==null?void 0:Te.active,disabled:(Le=(A.vars||A).palette)==null||(Le=Le.action)==null?void 0:Le.disabled,inherit:void 0}[M.color]}}),ie=s.forwardRef(function(M,_){const $=(0,d.A)({props:M,name:"MuiSvgIcon"}),{children:P,className:c,color:h="inherit",component:b="svg",fontSize:N="medium",htmlColor:q,inheritViewBox:Z=!1,titleAccess:me,viewBox:_e="0 0 24 24"}=$,Te=(0,t.A)($,W),Le=s.isValidElement(P)&&P.type==="svg",Fe=(0,n.A)({},$,{color:h,component:b,fontSize:N,instanceFontSize:M.fontSize,inheritViewBox:Z,viewBox:_e,hasSvgAsChild:Le}),Ye={};Z||(Ye.viewBox=_e);const ut=B(Fe);return(0,H.jsxs)(O,(0,n.A)({as:b,className:(0,T.A)(ut.root,c),focusable:"false",color:q,"aria-hidden":me?void 0:!0,role:me?"img":void 0,ref:_},Ye,Te,Le&&P.props,{ownerState:Fe,children:[Le?P.props.children:P,me?(0,H.jsx)("title",{children:me}):null]}))});ie.muiName="SvgIcon";const J=ie;function se(A,M){function _($,P){return(0,H.jsx)(J,(0,n.A)({"data-testid":`${M}Icon`,ref:P},$,{children:A}))}return _.muiName=J.muiName,s.memo(s.forwardRef(_))}},9266:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(5220);const s=n.A},6567:(he,R,e)=>{"use strict";e.r(R),e.d(R,{capitalize:()=>s.A,createChainedFunction:()=>T,createSvgIcon:()=>w.A,debounce:()=>g.A,deprecatedPropType:()=>v,isMuiElement:()=>L.A,ownerDocument:()=>j.A,ownerWindow:()=>k.A,requirePropFactory:()=>H,setRef:()=>B,unstable_ClassNameGenerator:()=>c,unstable_useEnhancedEffect:()=>O.A,unstable_useId:()=>J,unsupportedProp:()=>A,useControlled:()=>M.A,useEventCallback:()=>_.A,useForkRef:()=>$.A,useIsFocusVisible:()=>P.A});var n=e(4962),s=e(6039),t=e(4864);const T=t.A;var w=e(4076),g=e(9266);function d(h,b){return()=>null}const v=d;var L=e(5525),j=e(7943),k=e(5802),re=e(8733);function K(h,b){return()=>null}const H=K;var W=e(4988);const B=W.A;var O=e(7289),ie=e(4844);const J=ie.A;function se(h,b,N,q,Z){return null}const A=se;var M=e(1677),_=e(7403),$=e(6597),P=e(1158);const c={configure:h=>{n.A.configure(h)}}},5525:(he,R,e)=>{"use strict";e.d(R,{A:()=>t});var n=e(4999);function s(T,w){var g,d;return n.isValidElement(T)&&w.indexOf((g=T.type.muiName)!=null?g:(d=T.type)==null||(d=d._payload)==null||(d=d.value)==null?void 0:d.muiName)!==-1}const t=s},7943:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(6684);const s=n.A},5802:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(1676);const s=n.A},1677:(he,R,e)=>{"use strict";e.d(R,{A:()=>t});var n=e(4999);function s({controlled:T,default:w,name:g,state:d="value"}){const{current:v}=n.useRef(T!==void 0),[L,j]=n.useState(w),k=v?T:L,re=n.useCallback(K=>{v||j(K)},[]);return[k,re]}const t=s},7289:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(4288);const s=n.A},7403:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(1806);const s=n.A},6597:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(5006);const s=n.A},1158:(he,R,e)=>{"use strict";e.d(R,{A:()=>W});var n=e(4999),s=e(5515);let t=!0,T=!1;const w=new s.E,g={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function d(B){const{type:O,tagName:ie}=B;return!!(ie==="INPUT"&&g[O]&&!B.readOnly||ie==="TEXTAREA"&&!B.readOnly||B.isContentEditable)}function v(B){B.metaKey||B.altKey||B.ctrlKey||(t=!0)}function L(){t=!1}function j(){this.visibilityState==="hidden"&&T&&(t=!0)}function k(B){B.addEventListener("keydown",v,!0),B.addEventListener("mousedown",L,!0),B.addEventListener("pointerdown",L,!0),B.addEventListener("touchstart",L,!0),B.addEventListener("visibilitychange",j,!0)}function re(B){B.removeEventListener("keydown",v,!0),B.removeEventListener("mousedown",L,!0),B.removeEventListener("pointerdown",L,!0),B.removeEventListener("touchstart",L,!0),B.removeEventListener("visibilitychange",j,!0)}function K(B){const{target:O}=B;try{return O.matches(":focus-visible")}catch(ie){}return t||d(O)}function H(){const B=n.useCallback(se=>{se!=null&&k(se.ownerDocument)},[]),O=n.useRef(!1);function ie(){return O.current?(T=!0,w.start(100,()=>{T=!1}),O.current=!1,!0):!1}function J(se){return K(se)?(O.current=!0,!0):!1}return{isFocusVisibleRef:O,onFocus:J,onBlur:ie,ref:B}}const W=H},8905:(he,R,e)=>{"use strict";e.d(R,{A:()=>w});var n=e(4999),s=e(4742),t=e(7343);function T(g){return g==null||Object.keys(g).length===0}function w(g){const{styles:d,defaultTheme:v={}}=g,L=typeof d=="function"?j=>d(T(j)?v:j):d;return(0,t.jsx)(s.mL,{styles:L})}},7397:(he,R,e)=>{"use strict";e.r(R),e.d(R,{GlobalStyles:()=>$.A,StyledEngineProvider:()=>_,ThemeContext:()=>g.T,css:()=>J.AH,default:()=>P,internal_processStyles:()=>c,keyframes:()=>J.i7});var n=e(8733),s=e(4999),t=e(5330),T=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,w=(0,t.A)(function(h){return T.test(h)||h.charCodeAt(0)===111&&h.charCodeAt(1)===110&&h.charCodeAt(2)<91}),g=e(1664),d=e(5366),v=e(4332),L=e(4440),j=w,k=function(b){return b!=="theme"},re=function(b){return typeof b=="string"&&b.charCodeAt(0)>96?j:k},K=function(b,N,q){var Z;if(N){var me=N.shouldForwardProp;Z=b.__emotion_forwardProp&&me?function(_e){return b.__emotion_forwardProp(_e)&&me(_e)}:me}return typeof Z!="function"&&q&&(Z=b.__emotion_forwardProp),Z},H=null,W=function(b){var N=b.cache,q=b.serialized,Z=b.isStringTag;return(0,d.SF)(N,q,Z),(0,L.s)(function(){return(0,d.sk)(N,q,Z)}),null},B=function h(b,N){var q=b.__emotion_real===b,Z=q&&b.__emotion_base||b,me,_e;N!==void 0&&(me=N.label,_e=N.target);var Te=K(b,N,q),Le=Te||re(Z),Fe=!Le("as");return function(){var Ye=arguments,ut=q&&b.__emotion_styles!==void 0?b.__emotion_styles.slice(0):[];if(me!==void 0&&ut.push("label:"+me+";"),Ye[0]==null||Ye[0].raw===void 0)ut.push.apply(ut,Ye);else{ut.push(Ye[0][0]);for(var It=Ye.length,bt=1;bt<It;bt++)ut.push(Ye[bt],Ye[0][bt])}var Et=(0,g.w)(function(Ft,Pt,dt){var Ue=Fe&&Ft.as||Z,Dt="",en=[],Bt=Ft;if(Ft.theme==null){Bt={};for(var sn in Ft)Bt[sn]=Ft[sn];Bt.theme=s.useContext(g.T)}typeof Ft.className=="string"?Dt=(0,d.Rk)(Pt.registered,en,Ft.className):Ft.className!=null&&(Dt=Ft.className+" ");var an=(0,v.J)(ut.concat(en),Pt.registered,Bt);Dt+=Pt.key+"-"+an.name,_e!==void 0&&(Dt+=" "+_e);var ln=Fe&&Te===void 0?re(Ue):Le,Nt={};for(var Zt in Ft)Fe&&Zt==="as"||ln(Zt)&&(Nt[Zt]=Ft[Zt]);return Nt.className=Dt,Nt.ref=dt,s.createElement(s.Fragment,null,s.createElement(W,{cache:Pt,serialized:an,isStringTag:typeof Ue=="string"}),s.createElement(Ue,Nt))});return Et.displayName=me!==void 0?me:"Styled("+(typeof Z=="string"?Z:Z.displayName||Z.name||"Component")+")",Et.defaultProps=b.defaultProps,Et.__emotion_real=Et,Et.__emotion_base=Z,Et.__emotion_styles=ut,Et.__emotion_forwardProp=Te,Object.defineProperty(Et,"toString",{value:function(){return"."+_e}}),Et.withComponent=function(Ft,Pt){return h(Ft,(0,n.A)({},N,Pt,{shouldForwardProp:K(Et,Pt,!0)})).apply(void 0,ut)},Et}},O=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"],ie=B.bind();O.forEach(function(h){ie[h]=ie(h)});var J=e(4742),se=e(5789),A=e(7343);let M;typeof document=="object"&&(M=(0,se.A)({key:"css",prepend:!0}));function _(h){const{injectFirst:b,children:N}=h;return b&&M?(0,A.jsx)(g.C,{value:M,children:N}):N}var $=e(8905);/**
 * @mui/styled-engine v5.15.14
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function P(h,b){return ie(h,b)}const c=(h,b)=>{Array.isArray(h.__emotion_styles)&&(h.__emotion_styles=b(h.__emotion_styles))}},1742:(he,R,e)=>{"use strict";var n,s=Math.pow,t=e(5303);n={value:!0},R.X4=O,n=P,n=void 0,R.e$=J,n=L,R.tL=_,R.eM=B,n=W,n=d,n=H,R.a=A,n=ie,n=void 0,n=se,n=$,n=M,n=re,n=K;var T=t(e(6049)),w=t(e(6699));function g(c,h=0,b=1){return(0,w.default)(c,h,b)}function d(c){c=c.slice(1);const h=new RegExp(`.{1,${c.length>=6?2:1}}`,"g");let b=c.match(h);return b&&b[0].length===1&&(b=b.map(N=>N+N)),b?`rgb${b.length===4?"a":""}(${b.map((N,q)=>q<3?parseInt(N,16):Math.round(parseInt(N,16)/255*1e3)/1e3).join(", ")})`:""}function v(c){const h=c.toString(16);return h.length===1?`0${h}`:h}function L(c){if(c.type)return c;if(c.charAt(0)==="#")return L(d(c));const h=c.indexOf("("),b=c.substring(0,h);if(["rgb","rgba","hsl","hsla","color"].indexOf(b)===-1)throw new Error((0,T.default)(9,c));let N=c.substring(h+1,c.length-1),q;if(b==="color"){if(N=N.split(" "),q=N.shift(),N.length===4&&N[3].charAt(0)==="/"&&(N[3]=N[3].slice(1)),["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(q)===-1)throw new Error((0,T.default)(10,q))}else N=N.split(",");return N=N.map(Z=>parseFloat(Z)),{type:b,values:N,colorSpace:q}}const j=c=>{const h=L(c);return h.values.slice(0,3).map((b,N)=>h.type.indexOf("hsl")!==-1&&N!==0?`${b}%`:b).join(" ")};n=j,n=(c,h)=>{try{return j(c)}catch(b){return c}};function re(c){const{type:h,colorSpace:b}=c;let{values:N}=c;return h.indexOf("rgb")!==-1?N=N.map((q,Z)=>Z<3?parseInt(q,10):q):h.indexOf("hsl")!==-1&&(N[1]=`${N[1]}%`,N[2]=`${N[2]}%`),h.indexOf("color")!==-1?N=`${b} ${N.join(" ")}`:N=`${N.join(", ")}`,`${h}(${N})`}function K(c){if(c.indexOf("#")===0)return c;const{values:h}=L(c);return`#${h.map((b,N)=>v(N===3?Math.round(255*b):b)).join("")}`}function H(c){c=L(c);const{values:h}=c,b=h[0],N=h[1]/100,q=h[2]/100,Z=N*Math.min(q,1-q),me=(Le,Fe=(Le+b/30)%12)=>q-Z*Math.max(Math.min(Fe-3,9-Fe,1),-1);let _e="rgb";const Te=[Math.round(me(0)*255),Math.round(me(8)*255),Math.round(me(4)*255)];return c.type==="hsla"&&(_e+="a",Te.push(h[3])),re({type:_e,values:Te})}function W(c){c=L(c);let h=c.type==="hsl"||c.type==="hsla"?L(H(c)).values:c.values;return h=h.map(b=>(c.type!=="color"&&(b/=255),b<=.03928?b/12.92:s((b+.055)/1.055,2.4))),Number((.2126*h[0]+.7152*h[1]+.0722*h[2]).toFixed(3))}function B(c,h){const b=W(c),N=W(h);return(Math.max(b,N)+.05)/(Math.min(b,N)+.05)}function O(c,h){return c=L(c),h=g(h),(c.type==="rgb"||c.type==="hsl")&&(c.type+="a"),c.type==="color"?c.values[3]=`/${h}`:c.values[3]=h,re(c)}function ie(c,h,b){try{return O(c,h)}catch(N){return c}}function J(c,h){if(c=L(c),h=g(h),c.type.indexOf("hsl")!==-1)c.values[2]*=1-h;else if(c.type.indexOf("rgb")!==-1||c.type.indexOf("color")!==-1)for(let b=0;b<3;b+=1)c.values[b]*=1-h;return re(c)}function se(c,h,b){try{return J(c,h)}catch(N){return c}}function A(c,h){if(c=L(c),h=g(h),c.type.indexOf("hsl")!==-1)c.values[2]+=(100-c.values[2])*h;else if(c.type.indexOf("rgb")!==-1)for(let b=0;b<3;b+=1)c.values[b]+=(255-c.values[b])*h;else if(c.type.indexOf("color")!==-1)for(let b=0;b<3;b+=1)c.values[b]+=(1-c.values[b])*h;return re(c)}function M(c,h,b){try{return A(c,h)}catch(N){return c}}function _(c,h=.15){return W(c)>.5?J(c,h):A(c,h)}function $(c,h,b){try{return _(c,h)}catch(N){return c}}function P(c,h,b,N=1){const q=(Te,Le)=>Math.round(s(s(Te,1/N)*(1-b)+s(Le,1/N)*b,N)),Z=L(c),me=L(h),_e=[q(Z.values[0],me.values[0]),q(Z.values[1],me.values[1]),q(Z.values[2],me.values[2])];return re({type:"rgb",values:_e})}},5920:(he,R,e)=>{"use strict";var n,s=e(5303);n={value:!0},R.Ay=$,n=ie,n=void 0;var t=s(e(4491)),T=s(e(1778)),w=W(e(7397)),g=e(8098),d=s(e(5974)),v=s(e(791)),L=s(e(5193)),j=s(e(9966));const k=["ownerState"],re=["variants"],K=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function H(P){if(typeof WeakMap!="function")return null;var c=new WeakMap,h=new WeakMap;return(H=function(b){return b?h:c})(P)}function W(P,c){if(!c&&P&&P.__esModule)return P;if(P===null||typeof P!="object"&&typeof P!="function")return{default:P};var h=H(c);if(h&&h.has(P))return h.get(P);var b={__proto__:null},N=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var q in P)if(q!=="default"&&Object.prototype.hasOwnProperty.call(P,q)){var Z=N?Object.getOwnPropertyDescriptor(P,q):null;Z&&(Z.get||Z.set)?Object.defineProperty(b,q,Z):b[q]=P[q]}return b.default=P,h&&h.set(P,b),b}function B(P){return Object.keys(P).length===0}function O(P){return typeof P=="string"&&P.charCodeAt(0)>96}function ie(P){return P!=="ownerState"&&P!=="theme"&&P!=="sx"&&P!=="as"}const J=n=(0,L.default)(),se=P=>P&&P.charAt(0).toLowerCase()+P.slice(1);function A({defaultTheme:P,theme:c,themeId:h}){return B(c)?P:c[h]||c}function M(P){return P?(c,h)=>h[P]:null}function _(P,c){let{ownerState:h}=c,b=(0,T.default)(c,k);const N=typeof P=="function"?P((0,t.default)({ownerState:h},b)):P;if(Array.isArray(N))return N.flatMap(q=>_(q,(0,t.default)({ownerState:h},b)));if(N&&typeof N=="object"&&Array.isArray(N.variants)){const{variants:q=[]}=N;let me=(0,T.default)(N,re);return q.forEach(_e=>{let Te=!0;typeof _e.props=="function"?Te=_e.props((0,t.default)({ownerState:h},b,h)):Object.keys(_e.props).forEach(Le=>{(h==null?void 0:h[Le])!==_e.props[Le]&&b[Le]!==_e.props[Le]&&(Te=!1)}),Te&&(Array.isArray(me)||(me=[me]),me.push(typeof _e.style=="function"?_e.style((0,t.default)({ownerState:h},b,h)):_e.style))}),me}return N}function $(P={}){const{themeId:c,defaultTheme:h=J,rootShouldForwardProp:b=ie,slotShouldForwardProp:N=ie}=P,q=Z=>(0,j.default)((0,t.default)({},Z,{theme:A((0,t.default)({},Z,{defaultTheme:h,themeId:c}))}));return q.__mui_systemSx=!0,(Z,me={})=>{(0,w.internal_processStyles)(Z,Dt=>Dt.filter(en=>!(en!=null&&en.__mui_systemSx)));const{name:_e,slot:Te,skipVariantsResolver:Le,skipSx:Fe,overridesResolver:Ye=M(se(Te))}=me,ut=(0,T.default)(me,K),It=Le!==void 0?Le:Te&&Te!=="Root"&&Te!=="root"||!1,bt=Fe||!1;let Et,Ft=ie;Te==="Root"||Te==="root"?Ft=b:Te?Ft=N:O(Z)&&(Ft=void 0);const Pt=(0,w.default)(Z,(0,t.default)({shouldForwardProp:Ft,label:Et},ut)),dt=Dt=>typeof Dt=="function"&&Dt.__emotion_real!==Dt||(0,g.isPlainObject)(Dt)?en=>_(Dt,(0,t.default)({},en,{theme:A({theme:en.theme,defaultTheme:h,themeId:c})})):Dt,Ue=(Dt,...en)=>{let Bt=dt(Dt);const sn=en?en.map(dt):[];_e&&Ye&&sn.push(Nt=>{const Zt=A((0,t.default)({},Nt,{defaultTheme:h,themeId:c}));if(!Zt.components||!Zt.components[_e]||!Zt.components[_e].styleOverrides)return null;const Oe=Zt.components[_e].styleOverrides,ke={};return Object.entries(Oe).forEach(([nt,de])=>{ke[nt]=_(de,(0,t.default)({},Nt,{theme:Zt}))}),Ye(Nt,ke)}),_e&&!It&&sn.push(Nt=>{var Zt;const Oe=A((0,t.default)({},Nt,{defaultTheme:h,themeId:c})),ke=Oe==null||(Zt=Oe.components)==null||(Zt=Zt[_e])==null?void 0:Zt.variants;return _({variants:ke},(0,t.default)({},Nt,{theme:Oe}))}),bt||sn.push(q);const an=sn.length-en.length;if(Array.isArray(Dt)&&an>0){const Nt=new Array(an).fill("");Bt=[...Dt,...Nt],Bt.raw=[...Dt.raw,...Nt]}const ln=Pt(Bt,...sn);return Z.muiName&&(ln.muiName=Z.muiName),ln};return Pt.withConfig&&(Ue.withConfig=Pt.withConfig),Ue}}},7723:(he,R,e)=>{"use strict";e.d(R,{EU:()=>w,NI:()=>t,vf:()=>g,zu:()=>n});const n={xs:0,sm:600,md:900,lg:1200,xl:1536},s={keys:["xs","sm","md","lg","xl"],up:k=>`@media (min-width:${n[k]}px)`};function t(k,re,K){const H=k.theme||{};if(Array.isArray(re)){const B=H.breakpoints||s;return re.reduce((O,ie,J)=>(O[B.up(B.keys[J])]=K(re[J]),O),{})}if(typeof re=="object"){const B=H.breakpoints||s;return Object.keys(re).reduce((O,ie)=>{if(Object.keys(B.values||n).indexOf(ie)!==-1){const J=B.up(ie);O[J]=K(re[ie],ie)}else{const J=ie;O[J]=re[J]}return O},{})}return K(re)}function T(k){const re=K=>{const H=K.theme||{},W=k(K),B=H.breakpoints||s,O=B.keys.reduce((ie,J)=>(K[J]&&(ie=ie||{},ie[B.up(J)]=k(_extends({theme:H},K[J]))),ie),null);return merge(W,O)};return re.propTypes={},re.filterProps=["xs","sm","md","lg","xl",...k.filterProps],re}function w(k={}){var re;return((re=k.keys)==null?void 0:re.reduce((H,W)=>{const B=k.up(W);return H[B]={},H},{}))||{}}function g(k,re){return k.reduce((K,H)=>{const W=K[H];return(!W||Object.keys(W).length===0)&&delete K[H],K},re)}function d(k,...re){const K=w(k),H=[K,...re].reduce((W,B)=>deepmerge(W,B),{});return g(Object.keys(K),H)}function v(k,re){if(typeof k!="object")return{};const K={},H=Object.keys(re);return Array.isArray(k)?H.forEach((W,B)=>{B<k.length&&(K[W]=!0)}):H.forEach(W=>{k[W]!=null&&(K[W]=!0)}),K}function L({values:k,breakpoints:re,base:K}){const H=K||v(k,re),W=Object.keys(H);if(W.length===0)return k;let B;return W.reduce((O,ie,J)=>(Array.isArray(k)?(O[ie]=k[J]!=null?k[J]:k[B],B=J):typeof k=="object"?(O[ie]=k[ie]!=null?k[ie]:k[B],B=ie):O[ie]=k,O),{})}var j=null},5659:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(s,t){const T=this;return T.vars&&typeof T.getColorSchemeSelector=="function"?{[T.getColorSchemeSelector(s).replace(/(\[[^\]]+\])/,"*:where($1)")]:t}:T.palette.mode===s?t:{}}},6497:(he,R,e)=>{"use strict";e.d(R,{A:()=>g});var n=e(1772),s=e(8733);const t=["values","unit","step"],T=null,w=d=>{const v=Object.keys(d).map(L=>({key:L,val:d[L]}))||[];return v.sort((L,j)=>L.val-j.val),v.reduce((L,j)=>(0,s.A)({},L,{[j.key]:j.val}),{})};function g(d){const{values:v={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:L="px",step:j=5}=d,k=(0,n.A)(d,t),re=w(v),K=Object.keys(re);function H(J){return`@media (min-width:${typeof v[J]=="number"?v[J]:J}${L})`}function W(J){return`@media (max-width:${(typeof v[J]=="number"?v[J]:J)-j/100}${L})`}function B(J,se){const A=K.indexOf(se);return`@media (min-width:${typeof v[J]=="number"?v[J]:J}${L}) and (max-width:${(A!==-1&&typeof v[K[A]]=="number"?v[K[A]]:se)-j/100}${L})`}function O(J){return K.indexOf(J)+1<K.length?B(J,K[K.indexOf(J)+1]):H(J)}function ie(J){const se=K.indexOf(J);return se===0?H(K[1]):se===K.length-1?W(K[se]):B(J,K[K.indexOf(J)+1]).replace("@media","@media not all and")}return(0,s.A)({keys:K,values:re,up:H,down:W,between:B,only:O,not:ie,unit:L},k)}},8986:(he,R,e)=>{"use strict";e.d(R,{A:()=>H});var n=e(8733),s=e(1772),t=e(3500),T=e(6497);const g={borderRadius:4};var d=e(5439);function v(W=8){if(W.mui)return W;const B=(0,d.LX)({spacing:W}),O=(...ie)=>(ie.length===0?[1]:ie).map(se=>{const A=B(se);return typeof A=="number"?`${A}px`:A}).join(" ");return O.mui=!0,O}var L=e(9416),j=e(530),k=e(5659);const re=["breakpoints","palette","spacing","shape"];function K(W={},...B){const{breakpoints:O={},palette:ie={},spacing:J,shape:se={}}=W,A=(0,s.A)(W,re),M=(0,T.A)(O),_=v(J);let $=(0,t.A)({breakpoints:M,direction:"ltr",components:{},palette:(0,n.A)({mode:"light"},ie),spacing:_,shape:(0,n.A)({},g,se)},A);return $.applyStyles=k.A,$=B.reduce((P,c)=>(0,t.A)(P,c),$),$.unstable_sxConfig=(0,n.A)({},j.A,A==null?void 0:A.unstable_sxConfig),$.unstable_sx=function(c){return(0,L.A)({sx:c,theme:this})},$}const H=K},5193:(he,R,e)=>{"use strict";e.r(R),e.d(R,{default:()=>n.A,private_createBreakpoints:()=>s.A,unstable_applyStyles:()=>t.A});var n=e(8986),s=e(6497),t=e(5659)},7291:(he,R,e)=>{"use strict";e.d(R,{A:()=>t});var n=e(3500);function s(T,w){return w?(0,n.A)(T,w,{clone:!1}):T}const t=s},5439:(he,R,e)=>{"use strict";e.d(R,{LX:()=>K,MA:()=>re,_W:()=>H,Lc:()=>ie,Ms:()=>J});var n=e(7723),s=e(5910),t=e(7291);function T(M){const _={};return $=>(_[$]===void 0&&(_[$]=M($)),_[$])}const w={m:"margin",p:"padding"},g={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},d={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},v=T(M=>{if(M.length>2)if(d[M])M=d[M];else return[M];const[_,$]=M.split(""),P=w[_],c=g[$]||"";return Array.isArray(c)?c.map(h=>P+h):[P+c]}),L=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],j=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],k=[...L,...j];function re(M,_,$,P){var c;const h=(c=(0,s.Yn)(M,_,!1))!=null?c:$;return typeof h=="number"?b=>typeof b=="string"?b:h*b:Array.isArray(h)?b=>typeof b=="string"?b:h[b]:typeof h=="function"?h:()=>{}}function K(M){return re(M,"spacing",8,"spacing")}function H(M,_){if(typeof _=="string"||_==null)return _;const $=Math.abs(_),P=M($);return _>=0?P:typeof P=="number"?-P:`-${P}`}function W(M,_){return $=>M.reduce((P,c)=>(P[c]=H(_,$),P),{})}function B(M,_,$,P){if(_.indexOf($)===-1)return null;const c=v($),h=W(c,P),b=M[$];return(0,n.NI)(M,b,h)}function O(M,_){const $=K(M.theme);return Object.keys(M).map(P=>B(M,_,P,$)).reduce(t.A,{})}function ie(M){return O(M,L)}ie.propTypes={},ie.filterProps=L;function J(M){return O(M,j)}J.propTypes={},J.filterProps=j;function se(M){return O(M,k)}se.propTypes={},se.filterProps=k;const A=null},5910:(he,R,e)=>{"use strict";e.d(R,{Ay:()=>g,BO:()=>T,Yn:()=>t});var n=e(486),s=e(7723);function t(d,v,L=!0){if(!v||typeof v!="string")return null;if(d&&d.vars&&L){const j=`vars.${v}`.split(".").reduce((k,re)=>k&&k[re]?k[re]:null,d);if(j!=null)return j}return v.split(".").reduce((j,k)=>j&&j[k]!=null?j[k]:null,d)}function T(d,v,L,j=L){let k;return typeof d=="function"?k=d(L):Array.isArray(d)?k=d[L]||j:k=t(d,L)||j,v&&(k=v(k,j,d)),k}function w(d){const{prop:v,cssProperty:L=d.prop,themeKey:j,transform:k}=d,re=K=>{if(K[v]==null)return null;const H=K[v],W=K.theme,B=t(W,j)||{},O=ie=>{let J=T(B,k,ie);return ie===J&&typeof ie=="string"&&(J=T(B,k,`${v}${ie==="default"?"":(0,n.A)(ie)}`,ie)),L===!1?J:{[L]:J}};return(0,s.NI)(K,H,O)};return re.propTypes={},re.filterProps=[v],re}const g=w},530:(he,R,e)=>{"use strict";e.d(R,{A:()=>de});var n=e(5439),s=e(5910),t=e(7291);function T(...C){const Ee=C.reduce((we,z)=>(z.filterProps.forEach(Ce=>{we[Ce]=z}),we),{}),De=we=>Object.keys(we).reduce((z,Ce)=>Ee[Ce]?(0,t.A)(z,Ee[Ce](we)):z,{});return De.propTypes={},De.filterProps=C.reduce((we,z)=>we.concat(z.filterProps),[]),De}const w=T;var g=e(7723);function d(C){return typeof C!="number"?C:`${C}px solid`}function v(C,Ee){return(0,s.Ay)({prop:C,themeKey:"borders",transform:Ee})}const L=v("border",d),j=v("borderTop",d),k=v("borderRight",d),re=v("borderBottom",d),K=v("borderLeft",d),H=v("borderColor"),W=v("borderTopColor"),B=v("borderRightColor"),O=v("borderBottomColor"),ie=v("borderLeftColor"),J=v("outline",d),se=v("outlineColor"),A=C=>{if(C.borderRadius!==void 0&&C.borderRadius!==null){const Ee=(0,n.MA)(C.theme,"shape.borderRadius",4,"borderRadius"),De=we=>({borderRadius:(0,n._W)(Ee,we)});return(0,g.NI)(C,C.borderRadius,De)}return null};A.propTypes={},A.filterProps=["borderRadius"];const M=w(L,j,k,re,K,H,W,B,O,ie,A,J,se),_=null,$=C=>{if(C.gap!==void 0&&C.gap!==null){const Ee=(0,n.MA)(C.theme,"spacing",8,"gap"),De=we=>({gap:(0,n._W)(Ee,we)});return(0,g.NI)(C,C.gap,De)}return null};$.propTypes={},$.filterProps=["gap"];const P=C=>{if(C.columnGap!==void 0&&C.columnGap!==null){const Ee=(0,n.MA)(C.theme,"spacing",8,"columnGap"),De=we=>({columnGap:(0,n._W)(Ee,we)});return(0,g.NI)(C,C.columnGap,De)}return null};P.propTypes={},P.filterProps=["columnGap"];const c=C=>{if(C.rowGap!==void 0&&C.rowGap!==null){const Ee=(0,n.MA)(C.theme,"spacing",8,"rowGap"),De=we=>({rowGap:(0,n._W)(Ee,we)});return(0,g.NI)(C,C.rowGap,De)}return null};c.propTypes={},c.filterProps=["rowGap"];const h=(0,s.Ay)({prop:"gridColumn"}),b=(0,s.Ay)({prop:"gridRow"}),N=(0,s.Ay)({prop:"gridAutoFlow"}),q=(0,s.Ay)({prop:"gridAutoColumns"}),Z=(0,s.Ay)({prop:"gridAutoRows"}),me=(0,s.Ay)({prop:"gridTemplateColumns"}),_e=(0,s.Ay)({prop:"gridTemplateRows"}),Te=(0,s.Ay)({prop:"gridTemplateAreas"}),Le=(0,s.Ay)({prop:"gridArea"}),Fe=w($,P,c,h,b,N,q,Z,me,_e,Te,Le),Ye=null;function ut(C,Ee){return Ee==="grey"?Ee:C}const It=(0,s.Ay)({prop:"color",themeKey:"palette",transform:ut}),bt=(0,s.Ay)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:ut}),Et=(0,s.Ay)({prop:"backgroundColor",themeKey:"palette",transform:ut}),Ft=w(It,bt,Et),Pt=null;function dt(C){return C<=1&&C!==0?`${C*100}%`:C}const Ue=(0,s.Ay)({prop:"width",transform:dt}),Dt=C=>{if(C.maxWidth!==void 0&&C.maxWidth!==null){const Ee=De=>{var we,z;const Ce=((we=C.theme)==null||(we=we.breakpoints)==null||(we=we.values)==null?void 0:we[De])||g.zu[De];return Ce?((z=C.theme)==null||(z=z.breakpoints)==null?void 0:z.unit)!=="px"?{maxWidth:`${Ce}${C.theme.breakpoints.unit}`}:{maxWidth:Ce}:{maxWidth:dt(De)}};return(0,g.NI)(C,C.maxWidth,Ee)}return null};Dt.filterProps=["maxWidth"];const en=(0,s.Ay)({prop:"minWidth",transform:dt}),Bt=(0,s.Ay)({prop:"height",transform:dt}),sn=(0,s.Ay)({prop:"maxHeight",transform:dt}),an=(0,s.Ay)({prop:"minHeight",transform:dt}),ln=(0,s.Ay)({prop:"size",cssProperty:"width",transform:dt}),Nt=(0,s.Ay)({prop:"size",cssProperty:"height",transform:dt}),Zt=(0,s.Ay)({prop:"boxSizing"}),Oe=w(Ue,Dt,en,Bt,sn,an,Zt),ke=null,de={border:{themeKey:"borders",transform:d},borderTop:{themeKey:"borders",transform:d},borderRight:{themeKey:"borders",transform:d},borderBottom:{themeKey:"borders",transform:d},borderLeft:{themeKey:"borders",transform:d},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:d},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:A},color:{themeKey:"palette",transform:ut},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:ut},backgroundColor:{themeKey:"palette",transform:ut},p:{style:n.Ms},pt:{style:n.Ms},pr:{style:n.Ms},pb:{style:n.Ms},pl:{style:n.Ms},px:{style:n.Ms},py:{style:n.Ms},padding:{style:n.Ms},paddingTop:{style:n.Ms},paddingRight:{style:n.Ms},paddingBottom:{style:n.Ms},paddingLeft:{style:n.Ms},paddingX:{style:n.Ms},paddingY:{style:n.Ms},paddingInline:{style:n.Ms},paddingInlineStart:{style:n.Ms},paddingInlineEnd:{style:n.Ms},paddingBlock:{style:n.Ms},paddingBlockStart:{style:n.Ms},paddingBlockEnd:{style:n.Ms},m:{style:n.Lc},mt:{style:n.Lc},mr:{style:n.Lc},mb:{style:n.Lc},ml:{style:n.Lc},mx:{style:n.Lc},my:{style:n.Lc},margin:{style:n.Lc},marginTop:{style:n.Lc},marginRight:{style:n.Lc},marginBottom:{style:n.Lc},marginLeft:{style:n.Lc},marginX:{style:n.Lc},marginY:{style:n.Lc},marginInline:{style:n.Lc},marginInlineStart:{style:n.Lc},marginInlineEnd:{style:n.Lc},marginBlock:{style:n.Lc},marginBlockStart:{style:n.Lc},marginBlockEnd:{style:n.Lc},displayPrint:{cssProperty:!1,transform:C=>({"@media print":{display:C}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:$},rowGap:{style:c},columnGap:{style:P},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:dt},maxWidth:{style:Dt},minWidth:{transform:dt},height:{transform:dt},maxHeight:{transform:dt},minHeight:{transform:dt},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}},6598:(he,R,e)=>{"use strict";e.d(R,{A:()=>d});var n=e(8733),s=e(1772),t=e(3500),T=e(530);const w=["sx"],g=v=>{var L,j;const k={systemProps:{},otherProps:{}},re=(L=v==null||(j=v.theme)==null?void 0:j.unstable_sxConfig)!=null?L:T.A;return Object.keys(v).forEach(K=>{re[K]?k.systemProps[K]=v[K]:k.otherProps[K]=v[K]}),k};function d(v){const{sx:L}=v,j=(0,s.A)(v,w),{systemProps:k,otherProps:re}=g(j);let K;return Array.isArray(L)?K=[k,...L]:typeof L=="function"?K=(...H)=>{const W=L(...H);return(0,t.Q)(W)?(0,n.A)({},k,W):k}:K=(0,n.A)({},k,L),(0,n.A)({},re,{sx:K})}},9966:(he,R,e)=>{"use strict";e.r(R),e.d(R,{default:()=>n.A,extendSxProp:()=>s.A,unstable_createStyleFunctionSx:()=>n.k,unstable_defaultSxConfig:()=>t.A});var n=e(9416),s=e(6598),t=e(530)},9416:(he,R,e)=>{"use strict";e.d(R,{A:()=>j,k:()=>v});var n=e(486),s=e(7291),t=e(5910),T=e(7723),w=e(530);function g(...k){const re=k.reduce((H,W)=>H.concat(Object.keys(W)),[]),K=new Set(re);return k.every(H=>K.size===Object.keys(H).length)}function d(k,re){return typeof k=="function"?k(re):k}function v(){function k(K,H,W,B){const O={[K]:H,theme:W},ie=B[K];if(!ie)return{[K]:H};const{cssProperty:J=K,themeKey:se,transform:A,style:M}=ie;if(H==null)return null;if(se==="typography"&&H==="inherit")return{[K]:H};const _=(0,t.Yn)(W,se)||{};if(M)return M(O);const $=P=>{let c=(0,t.BO)(_,A,P);return P===c&&typeof P=="string"&&(c=(0,t.BO)(_,A,`${K}${P==="default"?"":(0,n.A)(P)}`,P)),J===!1?c:{[J]:c}};return(0,T.NI)(O,H,$)}function re(K){var H;const{sx:W,theme:B={}}=K||{};if(!W)return null;const O=(H=B.unstable_sxConfig)!=null?H:w.A;function ie(J){let se=J;if(typeof J=="function")se=J(B);else if(typeof J!="object")return J;if(!se)return null;const A=(0,T.EU)(B.breakpoints),M=Object.keys(A);let _=A;return Object.keys(se).forEach($=>{const P=d(se[$],B);if(P!=null)if(typeof P=="object")if(O[$])_=(0,s.A)(_,k($,P,B,O));else{const c=(0,T.NI)({theme:B},P,h=>({[$]:h}));g(c,P)?_[$]=re({sx:P,theme:B}):_=(0,s.A)(_,c)}else _=(0,s.A)(_,k($,P,B,O))}),(0,T.vf)(M,_)}return Array.isArray(W)?W.map(ie):ie(W)}return re}const L=v();L.filterProps=["sx"];const j=L},3529:(he,R,e)=>{"use strict";e.d(R,{A:()=>L});var n=e(8986),s=e(4999),t=e(1664);function T(j){return Object.keys(j).length===0}function w(j=null){const k=s.useContext(t.T);return!k||T(k)?j:k}const g=w,d=(0,n.A)();function v(j=d){return g(j)}const L=v},4962:(he,R,e)=>{"use strict";e.d(R,{A:()=>T});const n=w=>w,T=(()=>{let w=n;return{configure(g){w=g},generate(g){return w(g)},reset(){w=n}}})()},486:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(3524);function s(t){if(typeof t!="string")throw new Error((0,n.A)(7));return t.charAt(0).toUpperCase()+t.slice(1)}},5974:(he,R,e)=>{"use strict";e.r(R),e.d(R,{default:()=>n.A});var n=e(486)},700:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});function n(t,T=Number.MIN_SAFE_INTEGER,w=Number.MAX_SAFE_INTEGER){return Math.max(T,Math.min(t,w))}const s=n},6699:(he,R,e)=>{"use strict";e.r(R),e.d(R,{default:()=>n.A});var n=e(700)},2458:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(s,t,T=void 0){const w={};return Object.keys(s).forEach(g=>{w[g]=s[g].reduce((d,v)=>{if(v){const L=t(v);L!==""&&d.push(L),T&&T[v]&&d.push(T[v])}return d},[]).join(" ")}),w}},4864:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(...s){return s.reduce((t,T)=>T==null?t:function(...g){t.apply(this,g),T.apply(this,g)},()=>{})}},5220:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(s,t=166){let T;function w(...g){const d=()=>{s.apply(this,g)};clearTimeout(T),T=setTimeout(d,t)}return w.clear=()=>{clearTimeout(T)},w}},3500:(he,R,e)=>{"use strict";e.d(R,{A:()=>T,Q:()=>s});var n=e(8733);function s(w){if(typeof w!="object"||w===null)return!1;const g=Object.getPrototypeOf(w);return(g===null||g===Object.prototype||Object.getPrototypeOf(g)===null)&&!(Symbol.toStringTag in w)&&!(Symbol.iterator in w)}function t(w){if(!s(w))return w;const g={};return Object.keys(w).forEach(d=>{g[d]=t(w[d])}),g}function T(w,g,d={clone:!0}){const v=d.clone?(0,n.A)({},w):w;return s(w)&&s(g)&&Object.keys(g).forEach(L=>{L!=="__proto__"&&(s(g[L])&&L in w&&s(w[L])?v[L]=T(w[L],g[L],d):d.clone?v[L]=s(g[L])?t(g[L]):g[L]:v[L]=g[L])}),v}},8098:(he,R,e)=>{"use strict";e.r(R),e.d(R,{default:()=>n.A,isPlainObject:()=>n.Q});var n=e(3500)},3524:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(s){let t="https://mui.com/production-error/?code="+s;for(let T=1;T<arguments.length;T+=1)t+="&args[]="+encodeURIComponent(arguments[T]);return"Minified MUI error #"+s+"; visit "+t+" for the full message."}},6049:(he,R,e)=>{"use strict";e.r(R),e.d(R,{default:()=>n.A});var n=e(3524)},8748:(he,R,e)=>{"use strict";e.d(R,{Ay:()=>t});var n=e(4962);const s={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function t(w,g,d="Mui"){const v=s[g];return v?`${d}-${v}`:`${n.A.generate(w)}-${g}`}function T(w){return s[w]!==void 0}},3932:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(8748);function s(t,T,w="Mui"){const g={};return T.forEach(d=>{g[d]=(0,n.Ay)(t,d,w)}),g}},791:(he,R,e)=>{"use strict";e.r(R),e.d(R,{default:()=>g,getFunctionName:()=>t});var n=e(2713);const s=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function t(d){const v=`${d}`.match(s);return v&&v[1]||""}function T(d,v=""){return d.displayName||d.name||t(d)||v}function w(d,v,L){const j=T(v);return d.displayName||(j!==""?`${L}(${j})`:L)}function g(d){if(d!=null){if(typeof d=="string")return d;if(typeof d=="function")return T(d,"Component");if(typeof d=="object")switch(d.$$typeof){case n.ForwardRef:return w(d,d.render,"ForwardRef");case n.Memo:return w(d,d.type,"memo");default:return}}}},7532:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(s){const t=s.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}},5653:(he,R)=>{"use strict";var e;/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=Symbol.for("react.element"),s=Symbol.for("react.portal"),t=Symbol.for("react.fragment"),T=Symbol.for("react.strict_mode"),w=Symbol.for("react.profiler"),g=Symbol.for("react.provider"),d=Symbol.for("react.context"),v=Symbol.for("react.server_context"),L=Symbol.for("react.forward_ref"),j=Symbol.for("react.suspense"),k=Symbol.for("react.suspense_list"),re=Symbol.for("react.memo"),K=Symbol.for("react.lazy"),H=Symbol.for("react.offscreen"),W;W=Symbol.for("react.module.reference");function B(O){if(typeof O=="object"&&O!==null){var ie=O.$$typeof;switch(ie){case n:switch(O=O.type,O){case t:case w:case T:case j:case k:return O;default:switch(O=O&&O.$$typeof,O){case v:case d:case L:case K:case re:case g:return O;default:return ie}}case s:return ie}}}e=d,e=g,e=n,R.ForwardRef=L,e=t,e=K,R.Memo=re,e=s,e=w,e=T,e=j,e=k,e=function(){return!1},e=function(){return!1},e=function(O){return B(O)===d},e=function(O){return B(O)===g},e=function(O){return typeof O=="object"&&O!==null&&O.$$typeof===n},e=function(O){return B(O)===L},e=function(O){return B(O)===t},e=function(O){return B(O)===K},e=function(O){return B(O)===re},e=function(O){return B(O)===s},e=function(O){return B(O)===w},e=function(O){return B(O)===T},e=function(O){return B(O)===j},e=function(O){return B(O)===k},e=function(O){return typeof O=="string"||typeof O=="function"||O===t||O===w||O===T||O===j||O===k||O===H||typeof O=="object"&&O!==null&&(O.$$typeof===K||O.$$typeof===re||O.$$typeof===g||O.$$typeof===d||O.$$typeof===L||O.$$typeof===W||O.getModuleId!==void 0)},e=B},2713:(he,R,e)=>{"use strict";he.exports=e(5653)},6684:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(s){return s&&s.ownerDocument||document}},1676:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(6684);function s(t){return(0,n.A)(t).defaultView||window}},2926:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(8733);function s(t,T){const w=(0,n.A)({},T);return Object.keys(t).forEach(g=>{if(g.toString().match(/^(components|slots)$/))w[g]=(0,n.A)({},t[g],w[g]);else if(g.toString().match(/^(componentsProps|slotProps)$/)){const d=t[g]||{},v=T[g];w[g]={},!v||!Object.keys(v)?w[g]=d:!d||!Object.keys(d)?w[g]=v:(w[g]=(0,n.A)({},v),Object.keys(d).forEach(L=>{w[g][L]=s(d[L],v[L])}))}else w[g]===void 0&&(w[g]=t[g])}),w}},4988:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(s,t){typeof s=="function"?s(t):s&&(s.current=t)}},4288:(he,R,e)=>{"use strict";e.d(R,{A:()=>t});var n=e(4999);const t=typeof window!="undefined"?n.useLayoutEffect:n.useEffect},1806:(he,R,e)=>{"use strict";e.d(R,{A:()=>T});var n=e(4999),s=e(4288);function t(w){const g=n.useRef(w);return(0,s.A)(()=>{g.current=w}),n.useRef((...d)=>(0,g.current)(...d)).current}const T=t},5006:(he,R,e)=>{"use strict";e.d(R,{A:()=>t});var n=e(4999),s=e(4988);function t(...T){return n.useMemo(()=>T.every(w=>w==null)?null:w=>{T.forEach(g=>{(0,s.A)(g,w)})},T)}},4844:(he,R,e)=>{"use strict";var n;e.d(R,{A:()=>g});var s=e(4999);let t=0;function T(d){const[v,L]=s.useState(d),j=d||v;return s.useEffect(()=>{v==null&&(t+=1,L(`mui-${t}`))},[v]),j}const w=(n||(n=e.t(s,2))).useId;function g(d){if(w!==void 0){const v=w();return d!=null?d:v}return T(d)}},5515:(he,R,e)=>{"use strict";e.d(R,{E:()=>g,A:()=>d});var n=e(4999);const s={};function t(v,L){const j=n.useRef(s);return j.current===s&&(j.current=v(L)),j}const T=[];function w(v){n.useEffect(v,T)}class g{constructor(){this.currentId=null,this.clear=()=>{this.currentId!==null&&(clearTimeout(this.currentId),this.currentId=null)},this.disposeEffect=()=>this.clear}static create(){return new g}start(L,j){this.clear(),this.currentId=setTimeout(()=>{this.currentId=null,j()},L)}}function d(){const v=t(g.create).current;return w(v.disposeEffect),v}},8431:(he,R,e)=>{"use strict";e.d(R,{Gh:()=>Ue,HS:()=>en,Oi:()=>v,Rr:()=>H,VV:()=>Ee,aE:()=>mt,pX:()=>De,pb:()=>It,rc:()=>t,tH:()=>Nt,ue:()=>se,yD:()=>dt,zR:()=>g});var n=(o,i,p)=>new Promise((S,D)=>{var ce=be=>{try{fe(p.next(be))}catch(tt){D(tt)}},ne=be=>{try{fe(p.throw(be))}catch(tt){D(tt)}},fe=be=>be.done?S(be.value):Promise.resolve(be.value).then(ce,ne);fe((p=p.apply(o,i)).next())});/**
 * @remix-run/router v1.16.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function s(){return s=Object.assign?Object.assign.bind():function(o){for(var i=1;i<arguments.length;i++){var p=arguments[i];for(var S in p)Object.prototype.hasOwnProperty.call(p,S)&&(o[S]=p[S])}return o},s.apply(this,arguments)}var t;(function(o){o.Pop="POP",o.Push="PUSH",o.Replace="REPLACE"})(t||(t={}));const T="popstate";function w(o){o===void 0&&(o={});let{initialEntries:i=["/"],initialIndex:p,v5Compat:S=!1}=o,D;D=i.map((je,Je)=>Ne(je,typeof je=="string"?null:je.state,Je===0?"default":void 0));let ce=be(p==null?D.length-1:p),ne=t.Pop,fe=null;function be(je){return Math.min(Math.max(je,0),D.length-1)}function tt(){return D[ce]}function Ne(je,Je,ze){Je===void 0&&(Je=null);let Tt=re(D?tt().pathname:"/",je,Je,ze);return L(Tt.pathname.charAt(0)==="/","relative pathnames are not supported in memory history: "+JSON.stringify(je)),Tt}function ot(je){return typeof je=="string"?je:K(je)}return{get index(){return ce},get action(){return ne},get location(){return tt()},createHref:ot,createURL(je){return new URL(ot(je),"http://localhost")},encodeLocation(je){let Je=typeof je=="string"?H(je):je;return{pathname:Je.pathname||"",search:Je.search||"",hash:Je.hash||""}},push(je,Je){ne=t.Push;let ze=Ne(je,Je);ce+=1,D.splice(ce,D.length,ze),S&&fe&&fe({action:ne,location:ze,delta:1})},replace(je,Je){ne=t.Replace;let ze=Ne(je,Je);D[ce]=ze,S&&fe&&fe({action:ne,location:ze,delta:0})},go(je){ne=t.Pop;let Je=be(ce+je),ze=D[Je];ce=Je,fe&&fe({action:ne,location:ze,delta:je})},listen(je){return fe=je,()=>{fe=null}}}}function g(o){o===void 0&&(o={});function i(S,D){let{pathname:ce,search:ne,hash:fe}=S.location;return re("",{pathname:ce,search:ne,hash:fe},D.state&&D.state.usr||null,D.state&&D.state.key||"default")}function p(S,D){return typeof D=="string"?D:K(D)}return W(i,p,null,o)}function d(o){o===void 0&&(o={});function i(D,ce){let{pathname:ne="/",search:fe="",hash:be=""}=H(D.location.hash.substr(1));return!ne.startsWith("/")&&!ne.startsWith(".")&&(ne="/"+ne),re("",{pathname:ne,search:fe,hash:be},ce.state&&ce.state.usr||null,ce.state&&ce.state.key||"default")}function p(D,ce){let ne=D.document.querySelector("base"),fe="";if(ne&&ne.getAttribute("href")){let be=D.location.href,tt=be.indexOf("#");fe=tt===-1?be:be.slice(0,tt)}return fe+"#"+(typeof ce=="string"?ce:K(ce))}function S(D,ce){L(D.pathname.charAt(0)==="/","relative pathnames are not supported in hash history.push("+JSON.stringify(ce)+")")}return W(i,p,S,o)}function v(o,i){if(o===!1||o===null||typeof o=="undefined")throw new Error(i)}function L(o,i){if(!o){typeof console!="undefined"&&console.warn(i);try{throw new Error(i)}catch(p){}}}function j(){return Math.random().toString(36).substr(2,8)}function k(o,i){return{usr:o.state,key:o.key,idx:i}}function re(o,i,p,S){return p===void 0&&(p=null),s({pathname:typeof o=="string"?o:o.pathname,search:"",hash:""},typeof i=="string"?H(i):i,{state:p,key:i&&i.key||S||j()})}function K(o){let{pathname:i="/",search:p="",hash:S=""}=o;return p&&p!=="?"&&(i+=p.charAt(0)==="?"?p:"?"+p),S&&S!=="#"&&(i+=S.charAt(0)==="#"?S:"#"+S),i}function H(o){let i={};if(o){let p=o.indexOf("#");p>=0&&(i.hash=o.substr(p),o=o.substr(0,p));let S=o.indexOf("?");S>=0&&(i.search=o.substr(S),o=o.substr(0,S)),o&&(i.pathname=o)}return i}function W(o,i,p,S){S===void 0&&(S={});let{window:D=document.defaultView,v5Compat:ce=!1}=S,ne=D.history,fe=t.Pop,be=null,tt=Ne();tt==null&&(tt=0,ne.replaceState(s({},ne.state,{idx:tt}),""));function Ne(){return(ne.state||{idx:null}).idx}function ot(){fe=t.Pop;let Tt=Ne(),Ht=Tt==null?null:Tt-tt;tt=Tt,be&&be({action:fe,location:ze.location,delta:Ht})}function st(Tt,Ht){fe=t.Push;let Wt=re(ze.location,Tt,Ht);p&&p(Wt,Tt),tt=Ne()+1;let Qt=k(Wt,tt),ct=ze.createHref(Wt);try{ne.pushState(Qt,"",ct)}catch(yn){if(yn instanceof DOMException&&yn.name==="DataCloneError")throw yn;D.location.assign(ct)}ce&&be&&be({action:fe,location:ze.location,delta:1})}function je(Tt,Ht){fe=t.Replace;let Wt=re(ze.location,Tt,Ht);p&&p(Wt,Tt),tt=Ne();let Qt=k(Wt,tt),ct=ze.createHref(Wt);ne.replaceState(Qt,"",ct),ce&&be&&be({action:fe,location:ze.location,delta:0})}function Je(Tt){let Ht=D.location.origin!=="null"?D.location.origin:D.location.href,Wt=typeof Tt=="string"?Tt:K(Tt);return Wt=Wt.replace(/ $/,"%20"),v(Ht,"No window.location.(origin|href) available to create URL for href: "+Wt),new URL(Wt,Ht)}let ze={get action(){return fe},get location(){return o(D,ne)},listen(Tt){if(be)throw new Error("A history only accepts one active listener");return D.addEventListener(T,ot),be=Tt,()=>{D.removeEventListener(T,ot),be=null}},createHref(Tt){return i(D,Tt)},createURL:Je,encodeLocation(Tt){let Ht=Je(Tt);return{pathname:Ht.pathname,search:Ht.search,hash:Ht.hash}},push:st,replace:je,go(Tt){return ne.go(Tt)}};return ze}var B;(function(o){o.data="data",o.deferred="deferred",o.redirect="redirect",o.error="error"})(B||(B={}));const O=new Set(["lazy","caseSensitive","path","id","index","children"]);function ie(o){return o.index===!0}function J(o,i,p,S){return p===void 0&&(p=[]),S===void 0&&(S={}),o.map((D,ce)=>{let ne=[...p,ce],fe=typeof D.id=="string"?D.id:ne.join("-");if(v(D.index!==!0||!D.children,"Cannot specify children on an index route"),v(!S[fe],'Found a route id collision on id "'+fe+`".  Route id's must be globally unique within Data Router usages`),ie(D)){let be=s({},D,i(D),{id:fe});return S[fe]=be,be}else{let be=s({},D,i(D),{id:fe,children:void 0});return S[fe]=be,D.children&&(be.children=J(D.children,i,ne,S)),be}})}function se(o,i,p){p===void 0&&(p="/");let S=typeof i=="string"?H(i):i,D=It(S.pathname||"/",p);if(D==null)return null;let ce=M(o);$(ce);let ne=null;for(let fe=0;ne==null&&fe<ce.length;++fe){let be=ut(D);ne=Te(ce[fe],be)}return ne}function A(o,i){let{route:p,pathname:S,params:D}=o;return{id:p.id,pathname:S,params:D,data:i[p.id],handle:p.handle}}function M(o,i,p,S){i===void 0&&(i=[]),p===void 0&&(p=[]),S===void 0&&(S="");let D=(ce,ne,fe)=>{let be={relativePath:fe===void 0?ce.path||"":fe,caseSensitive:ce.caseSensitive===!0,childrenIndex:ne,route:ce};be.relativePath.startsWith("/")&&(v(be.relativePath.startsWith(S),'Absolute route path "'+be.relativePath+'" nested under path '+('"'+S+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),be.relativePath=be.relativePath.slice(S.length));let tt=en([S,be.relativePath]),Ne=p.concat(be);ce.children&&ce.children.length>0&&(v(ce.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+tt+'".')),M(ce.children,i,Ne,tt)),!(ce.path==null&&!ce.index)&&i.push({path:tt,score:me(tt,ce.index),routesMeta:Ne})};return o.forEach((ce,ne)=>{var fe;if(ce.path===""||!((fe=ce.path)!=null&&fe.includes("?")))D(ce,ne);else for(let be of _(ce.path))D(ce,ne,be)}),i}function _(o){let i=o.split("/");if(i.length===0)return[];let[p,...S]=i,D=p.endsWith("?"),ce=p.replace(/\?$/,"");if(S.length===0)return D?[ce,""]:[ce];let ne=_(S.join("/")),fe=[];return fe.push(...ne.map(be=>be===""?ce:[ce,be].join("/"))),D&&fe.push(...ne),fe.map(be=>o.startsWith("/")&&be===""?"/":be)}function $(o){o.sort((i,p)=>i.score!==p.score?p.score-i.score:_e(i.routesMeta.map(S=>S.childrenIndex),p.routesMeta.map(S=>S.childrenIndex)))}const P=/^:[\w-]+$/,c=3,h=2,b=1,N=10,q=-2,Z=o=>o==="*";function me(o,i){let p=o.split("/"),S=p.length;return p.some(Z)&&(S+=q),i&&(S+=h),p.filter(D=>!Z(D)).reduce((D,ce)=>D+(P.test(ce)?c:ce===""?b:N),S)}function _e(o,i){return o.length===i.length&&o.slice(0,-1).every((S,D)=>S===i[D])?o[o.length-1]-i[i.length-1]:0}function Te(o,i){let{routesMeta:p}=o,S={},D="/",ce=[];for(let ne=0;ne<p.length;++ne){let fe=p[ne],be=ne===p.length-1,tt=D==="/"?i:i.slice(D.length)||"/",Ne=Fe({path:fe.relativePath,caseSensitive:fe.caseSensitive,end:be},tt);if(!Ne)return null;Object.assign(S,Ne.params);let ot=fe.route;ce.push({params:S,pathname:en([D,Ne.pathname]),pathnameBase:Bt(en([D,Ne.pathnameBase])),route:ot}),Ne.pathnameBase!=="/"&&(D=en([D,Ne.pathnameBase]))}return ce}function Le(o,i){i===void 0&&(i={});let p=o;p.endsWith("*")&&p!=="*"&&!p.endsWith("/*")&&(L(!1,'Route path "'+p+'" will be treated as if it were '+('"'+p.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+p.replace(/\*$/,"/*")+'".')),p=p.replace(/\*$/,"/*"));const S=p.startsWith("/")?"/":"",D=ne=>ne==null?"":typeof ne=="string"?ne:String(ne),ce=p.split(/\/+/).map((ne,fe,be)=>{if(fe===be.length-1&&ne==="*")return D(i["*"]);const Ne=ne.match(/^:([\w-]+)(\??)$/);if(Ne){const[,ot,st]=Ne;let je=i[ot];return v(st==="?"||je!=null,'Missing ":'+ot+'" param'),D(je)}return ne.replace(/\?$/g,"")}).filter(ne=>!!ne);return S+ce.join("/")}function Fe(o,i){typeof o=="string"&&(o={path:o,caseSensitive:!1,end:!0});let[p,S]=Ye(o.path,o.caseSensitive,o.end),D=i.match(p);if(!D)return null;let ce=D[0],ne=ce.replace(/(.)\/+$/,"$1"),fe=D.slice(1);return{params:S.reduce((tt,Ne,ot)=>{let{paramName:st,isOptional:je}=Ne;if(st==="*"){let ze=fe[ot]||"";ne=ce.slice(0,ce.length-ze.length).replace(/(.)\/+$/,"$1")}const Je=fe[ot];return je&&!Je?tt[st]=void 0:tt[st]=(Je||"").replace(/%2F/g,"/"),tt},{}),pathname:ce,pathnameBase:ne,pattern:o}}function Ye(o,i,p){i===void 0&&(i=!1),p===void 0&&(p=!0),L(o==="*"||!o.endsWith("*")||o.endsWith("/*"),'Route path "'+o+'" will be treated as if it were '+('"'+o.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+o.replace(/\*$/,"/*")+'".'));let S=[],D="^"+o.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(ne,fe,be)=>(S.push({paramName:fe,isOptional:be!=null}),be?"/?([^\\/]+)?":"/([^\\/]+)"));return o.endsWith("*")?(S.push({paramName:"*"}),D+=o==="*"||o==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):p?D+="\\/*$":o!==""&&o!=="/"&&(D+="(?:(?=\\/|$))"),[new RegExp(D,i?void 0:"i"),S]}function ut(o){try{return o.split("/").map(i=>decodeURIComponent(i).replace(/\//g,"%2F")).join("/")}catch(i){return L(!1,'The URL path "'+o+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+i+").")),o}}function It(o,i){if(i==="/")return o;if(!o.toLowerCase().startsWith(i.toLowerCase()))return null;let p=i.endsWith("/")?i.length-1:i.length,S=o.charAt(p);return S&&S!=="/"?null:o.slice(p)||"/"}function bt(o,i){i===void 0&&(i="/");let{pathname:p,search:S="",hash:D=""}=typeof o=="string"?H(o):o;return{pathname:p?p.startsWith("/")?p:Et(p,i):i,search:sn(S),hash:an(D)}}function Et(o,i){let p=i.replace(/\/+$/,"").split("/");return o.split("/").forEach(D=>{D===".."?p.length>1&&p.pop():D!=="."&&p.push(D)}),p.length>1?p.join("/"):"/"}function Ft(o,i,p,S){return"Cannot include a '"+o+"' character in a manually specified "+("`to."+i+"` field ["+JSON.stringify(S)+"].  Please separate it out to the ")+("`to."+p+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function Pt(o){return o.filter((i,p)=>p===0||i.route.path&&i.route.path.length>0)}function dt(o,i){let p=Pt(o);return i?p.map((S,D)=>D===o.length-1?S.pathname:S.pathnameBase):p.map(S=>S.pathnameBase)}function Ue(o,i,p,S){S===void 0&&(S=!1);let D;typeof o=="string"?D=H(o):(D=s({},o),v(!D.pathname||!D.pathname.includes("?"),Ft("?","pathname","search",D)),v(!D.pathname||!D.pathname.includes("#"),Ft("#","pathname","hash",D)),v(!D.search||!D.search.includes("#"),Ft("#","search","hash",D)));let ce=o===""||D.pathname==="",ne=ce?"/":D.pathname,fe;if(ne==null)fe=p;else{let ot=i.length-1;if(!S&&ne.startsWith("..")){let st=ne.split("/");for(;st[0]==="..";)st.shift(),ot-=1;D.pathname=st.join("/")}fe=ot>=0?i[ot]:"/"}let be=bt(D,fe),tt=ne&&ne!=="/"&&ne.endsWith("/"),Ne=(ce||ne===".")&&p.endsWith("/");return!be.pathname.endsWith("/")&&(tt||Ne)&&(be.pathname+="/"),be}function Dt(o){return o===""||o.pathname===""?"/":typeof o=="string"?H(o).pathname:o.pathname}const en=o=>o.join("/").replace(/\/\/+/g,"/"),Bt=o=>o.replace(/\/+$/,"").replace(/^\/*/,"/"),sn=o=>!o||o==="?"?"":o.startsWith("?")?o:"?"+o,an=o=>!o||o==="#"?"":o.startsWith("#")?o:"#"+o,ln=function(i,p){p===void 0&&(p={});let S=typeof p=="number"?{status:p}:p,D=new Headers(S.headers);return D.has("Content-Type")||D.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(i),s({},S,{headers:D}))};class Nt extends Error{}class Zt{constructor(i,p){this.pendingKeysSet=new Set,this.subscribers=new Set,this.deferredKeys=[],v(i&&typeof i=="object"&&!Array.isArray(i),"defer() only accepts plain objects");let S;this.abortPromise=new Promise((ce,ne)=>S=ne),this.controller=new AbortController;let D=()=>S(new Nt("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",D),this.controller.signal.addEventListener("abort",D),this.data=Object.entries(i).reduce((ce,ne)=>{let[fe,be]=ne;return Object.assign(ce,{[fe]:this.trackPromise(fe,be)})},{}),this.done&&this.unlistenAbortSignal(),this.init=p}trackPromise(i,p){if(!(p instanceof Promise))return p;this.deferredKeys.push(i),this.pendingKeysSet.add(i);let S=Promise.race([p,this.abortPromise]).then(D=>this.onSettle(S,i,void 0,D),D=>this.onSettle(S,i,D));return S.catch(()=>{}),Object.defineProperty(S,"_tracked",{get:()=>!0}),S}onSettle(i,p,S,D){if(this.controller.signal.aborted&&S instanceof Nt)return this.unlistenAbortSignal(),Object.defineProperty(i,"_error",{get:()=>S}),Promise.reject(S);if(this.pendingKeysSet.delete(p),this.done&&this.unlistenAbortSignal(),S===void 0&&D===void 0){let ce=new Error('Deferred data for key "'+p+'" resolved/rejected with `undefined`, you must resolve/reject with a value or `null`.');return Object.defineProperty(i,"_error",{get:()=>ce}),this.emit(!1,p),Promise.reject(ce)}return D===void 0?(Object.defineProperty(i,"_error",{get:()=>S}),this.emit(!1,p),Promise.reject(S)):(Object.defineProperty(i,"_data",{get:()=>D}),this.emit(!1,p),D)}emit(i,p){this.subscribers.forEach(S=>S(i,p))}subscribe(i){return this.subscribers.add(i),()=>this.subscribers.delete(i)}cancel(){this.controller.abort(),this.pendingKeysSet.forEach((i,p)=>this.pendingKeysSet.delete(p)),this.emit(!0)}resolveData(i){return n(this,null,function*(){let p=!1;if(!this.done){let S=()=>this.cancel();i.addEventListener("abort",S),p=yield new Promise(D=>{this.subscribe(ce=>{i.removeEventListener("abort",S),(ce||this.done)&&D(ce)})})}return p})}get done(){return this.pendingKeysSet.size===0}get unwrappedData(){return v(this.data!==null&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce((i,p)=>{let[S,D]=p;return Object.assign(i,{[S]:ke(D)})},{})}get pendingKeys(){return Array.from(this.pendingKeysSet)}}function Oe(o){return o instanceof Promise&&o._tracked===!0}function ke(o){if(!Oe(o))return o;if(o._error)throw o._error;return o._data}const nt=function(i,p){p===void 0&&(p={});let S=typeof p=="number"?{status:p}:p;return new Zt(i,S)},de=function(i,p){p===void 0&&(p=302);let S=p;typeof S=="number"?S={status:S}:typeof S.status=="undefined"&&(S.status=302);let D=new Headers(S.headers);return D.set("Location",i),new Response(null,s({},S,{headers:D}))},C=(o,i)=>{let p=de(o,i);return p.headers.set("X-Remix-Reload-Document","true"),p};class Ee{constructor(i,p,S,D){D===void 0&&(D=!1),this.status=i,this.statusText=p||"",this.internal=D,S instanceof Error?(this.data=S.toString(),this.error=S):this.data=S}}function De(o){return o!=null&&typeof o.status=="number"&&typeof o.statusText=="string"&&typeof o.internal=="boolean"&&"data"in o}const we=["post","put","patch","delete"],z=new Set(we),Ce=["get",...we],lt=new Set(Ce),at=new Set([301,302,303,307,308]),et=new Set([307,308]),Ot={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},ft={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},_t={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},Lt=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Ut=o=>({hasErrorBoundary:!!o.hasErrorBoundary}),$t="remix-router-transitions";function mt(o){const i=o.window?o.window:typeof window!="undefined"?window:void 0,p=typeof i!="undefined"&&typeof i.document!="undefined"&&typeof i.document.createElement!="undefined",S=!p;v(o.routes.length>0,"You must provide a non-empty routes array to createRouter");let D;if(o.mapRouteProperties)D=o.mapRouteProperties;else if(o.detectErrorBoundary){let I=o.detectErrorBoundary;D=U=>({hasErrorBoundary:I(U)})}else D=Ut;let ce={},ne=J(o.routes,D,void 0,ce),fe,be=o.basename||"/",tt=o.unstable_dataStrategy||Xe,Ne=s({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,unstable_skipActionErrorRevalidation:!1},o.future),ot=null,st=new Set,je=null,Je=null,ze=null,Tt=o.hydrationData!=null,Ht=se(ne,o.history.location,be),Wt=null;if(Ht==null){let I=jt(404,{pathname:o.history.location.pathname}),{matches:U,route:te}=rn(ne);Ht=U,Wt={[te.id]:I}}let Qt,ct=Ht.some(I=>I.route.lazy),yn=Ht.some(I=>I.route.loader);if(ct)Qt=!1;else if(!yn)Qt=!0;else if(Ne.v7_partialHydration){let I=o.hydrationData?o.hydrationData.loaderData:null,U=o.hydrationData?o.hydrationData.errors:null,te=ve=>ve.route.loader?typeof ve.route.loader=="function"&&ve.route.loader.hydrate===!0?!1:I&&I[ve.route.id]!==void 0||U&&U[ve.route.id]!==void 0:!0;if(U){let ve=Ht.findIndex(Me=>U[Me.route.id]!==void 0);Qt=Ht.slice(0,ve+1).every(te)}else Qt=Ht.every(te)}else Qt=o.hydrationData!=null;let dn,le={historyAction:o.history.action,location:o.history.location,matches:Ht,initialized:Qt,navigation:Ot,restoreScrollPosition:o.hydrationData!=null?!1:null,preventScrollReset:!1,revalidation:"idle",loaderData:o.hydrationData&&o.hydrationData.loaderData||{},actionData:o.hydrationData&&o.hydrationData.actionData||null,errors:o.hydrationData&&o.hydrationData.errors||Wt,fetchers:new Map,blockers:new Map},mn=t.Pop,hn=!1,fn,Sn=!1,kn=new Map,Hn=null,Yn=!1,nr=!1,Cn=[],br=[],r=new Map,a=0,u=-1,x=new Map,Y=new Set,oe=new Map,ae=new Map,We=new Set,At=new Map,wt=new Map,St=!1;function qe(){if(ot=o.history.listen(I=>{let{action:U,location:te,delta:ve}=I;if(St){St=!1;return}L(wt.size===0||ve!=null,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let Me=E({currentLocation:le.location,nextLocation:te,historyAction:U});if(Me&&ve!=null){St=!0,o.history.go(ve*-1),l(Me,{state:"blocked",location:te,proceed(){l(Me,{state:"proceeding",proceed:void 0,reset:void 0,location:te}),o.history.go(ve)},reset(){let Qe=new Map(le.blockers);Qe.set(Me,_t),xt({blockers:Qe})}});return}return Kn(U,te)}),p){Or(i,kn);let I=()=>xr(i,kn);i.addEventListener("pagehide",I),Hn=()=>i.removeEventListener("pagehide",I)}return le.initialized||Kn(t.Pop,le.location,{initialHydration:!0}),dn}function Bn(){ot&&ot(),Hn&&Hn(),st.clear(),fn&&fn.abort(),le.fetchers.forEach((I,U)=>Dr(U)),le.blockers.forEach((I,U)=>Xr(U))}function Jn(I){return st.add(I),()=>st.delete(I)}function xt(I,U){U===void 0&&(U={}),le=s({},le,I);let te=[],ve=[];Ne.v7_fetcherPersist&&le.fetchers.forEach((Me,Qe)=>{Me.state==="idle"&&(We.has(Qe)?ve.push(Qe):te.push(Qe))}),[...st].forEach(Me=>Me(le,{deletedFetchers:ve,unstable_viewTransitionOpts:U.viewTransitionOpts,unstable_flushSync:U.flushSync===!0})),Ne.v7_fetcherPersist&&(te.forEach(Me=>le.fetchers.delete(Me)),ve.forEach(Me=>Dr(Me)))}function Mt(I,U,te){var ve,Me;let{flushSync:Qe}=te===void 0?{}:te,He=le.actionData!=null&&le.navigation.formMethod!=null&&$n(le.navigation.formMethod)&&le.navigation.state==="loading"&&((ve=I.state)==null?void 0:ve._isRedirect)!==!0,$e;U.actionData?Object.keys(U.actionData).length>0?$e=U.actionData:$e=null:He?$e=le.actionData:$e=null;let Ze=U.loaderData?un(le.loaderData,U.loaderData,U.matches||[],U.errors):le.loaderData,Ke=le.blockers;Ke.size>0&&(Ke=new Map(Ke),Ke.forEach((Be,Rt)=>Ke.set(Rt,_t)));let gt=hn===!0||le.navigation.formMethod!=null&&$n(le.navigation.formMethod)&&((Me=I.state)==null?void 0:Me._isRedirect)!==!0;fe&&(ne=fe,fe=void 0),Yn||mn===t.Pop||(mn===t.Push?o.history.push(I,I.state):mn===t.Replace&&o.history.replace(I,I.state));let it;if(mn===t.Pop){let Be=kn.get(le.location.pathname);Be&&Be.has(I.pathname)?it={currentLocation:le.location,nextLocation:I}:kn.has(I.pathname)&&(it={currentLocation:I,nextLocation:le.location})}else if(Sn){let Be=kn.get(le.location.pathname);Be?Be.add(I.pathname):(Be=new Set([I.pathname]),kn.set(le.location.pathname,Be)),it={currentLocation:le.location,nextLocation:I}}xt(s({},U,{actionData:$e,loaderData:Ze,historyAction:mn,location:I,initialized:!0,navigation:Ot,revalidation:"idle",restoreScrollPosition:vt(I,U.matches||le.matches),preventScrollReset:gt,blockers:Ke}),{viewTransitionOpts:it,flushSync:Qe===!0}),mn=t.Pop,hn=!1,Sn=!1,Yn=!1,nr=!1,Cn=[],br=[]}function Nn(I,U){return n(this,null,function*(){if(typeof I=="number"){o.history.go(I);return}let te=ee(le.location,le.matches,be,Ne.v7_prependBasename,I,Ne.v7_relativeSplatPath,U==null?void 0:U.fromRouteId,U==null?void 0:U.relative),{path:ve,submission:Me,error:Qe}=V(Ne.v7_normalizeFormMethod,!1,te,U),He=le.location,$e=re(le.location,ve,U&&U.state);$e=s({},$e,o.history.encodeLocation($e));let Ze=U&&U.replace!=null?U.replace:void 0,Ke=t.Push;Ze===!0?Ke=t.Replace:Ze===!1||Me!=null&&$n(Me.formMethod)&&Me.formAction===le.location.pathname+le.location.search&&(Ke=t.Replace);let gt=U&&"preventScrollReset"in U?U.preventScrollReset===!0:void 0,it=(U&&U.unstable_flushSync)===!0,Be=E({currentLocation:He,nextLocation:$e,historyAction:Ke});if(Be){l(Be,{state:"blocked",location:$e,proceed(){l(Be,{state:"proceeding",proceed:void 0,reset:void 0,location:$e}),Nn(I,U)},reset(){let Rt=new Map(le.blockers);Rt.set(Be,_t),xt({blockers:Rt})}});return}return yield Kn(Ke,$e,{submission:Me,pendingError:Qe,preventScrollReset:gt,replace:U&&U.replace,enableViewTransition:U&&U.unstable_viewTransition,flushSync:it})})}function zn(){if(Ir(),xt({revalidation:"loading"}),le.navigation.state!=="submitting"){if(le.navigation.state==="idle"){Kn(le.historyAction,le.location,{startUninterruptedRevalidation:!0});return}Kn(mn||le.historyAction,le.navigation.location,{overrideNavigation:le.navigation})}}function Kn(I,U,te){return n(this,null,function*(){fn&&fn.abort(),fn=null,mn=I,Yn=(te&&te.startUninterruptedRevalidation)===!0,ht(le.location,le.matches),hn=(te&&te.preventScrollReset)===!0,Sn=(te&&te.enableViewTransition)===!0;let ve=fe||ne,Me=te&&te.overrideNavigation,Qe=se(ve,U,be),He=(te&&te.flushSync)===!0;if(!Qe){let Be=jt(404,{pathname:U.pathname}),{matches:Rt,route:Ct}=rn(ve);ue(),Mt(U,{matches:Rt,loaderData:{},errors:{[Ct.id]:Be}},{flushSync:He});return}if(le.initialized&&!nr&&nn(le.location,U)&&!(te&&te.submission&&$n(te.submission.formMethod))){Mt(U,{matches:Qe},{flushSync:He});return}fn=new AbortController;let $e=ge(o.history,U,fn.signal,te&&te.submission),Ze;if(te&&te.pendingError)Ze=[Yt(Qe).route.id,{type:B.error,error:te.pendingError}];else if(te&&te.submission&&$n(te.submission.formMethod)){let Be=yield ar($e,U,te.submission,Qe,{replace:te.replace,flushSync:He});if(Be.shortCircuited)return;Ze=Be.pendingActionResult,Me=gr(U,te.submission),He=!1,$e=ge(o.history,$e.url,$e.signal)}let{shortCircuited:Ke,loaderData:gt,errors:it}=yield Lr($e,U,Qe,Me,te&&te.submission,te&&te.fetcherSubmission,te&&te.replace,te&&te.initialHydration===!0,He,Ze);Ke||(fn=null,Mt(U,s({matches:Qe},Kt(Ze),{loaderData:gt,errors:it})))})}function ar(I,U,te,ve,Me){return n(this,null,function*(){Me===void 0&&(Me={}),Ir();let Qe=Jt(U,te);xt({navigation:Qe},{flushSync:Me.flushSync===!0});let He,$e=ir(ve,U);if(!$e.route.action&&!$e.route.lazy)He={type:B.error,error:jt(405,{method:I.method,pathname:U.pathname,routeId:$e.route.id})};else if(He=(yield Rr("action",I,[$e],ve))[0],I.signal.aborted)return{shortCircuited:!0};if(jn(He)){let Ze;return Me&&Me.replace!=null?Ze=Me.replace:Ze=xe(He.response.headers.get("Location"),new URL(I.url),be)===le.location.pathname+le.location.search,yield mr(I,He,{submission:te,replace:Ze}),{shortCircuited:!0}}if(xn(He))throw jt(400,{type:"defer-action"});if(pn(He)){let Ze=Yt(ve,$e.route.id);return(Me&&Me.replace)!==!0&&(mn=t.Push),{pendingActionResult:[Ze.route.id,He]}}return{pendingActionResult:[$e.route.id,He]}})}function Lr(I,U,te,ve,Me,Qe,He,$e,Ze,Ke){return n(this,null,function*(){let gt=ve||gr(U,Me),it=Me||Qe||pr(gt),Be=fe||ne,[Rt,Ct]=Pe(o.history,le,te,it,U,Ne.v7_partialHydration&&$e===!0,Ne.unstable_skipActionErrorRevalidation,nr,Cn,br,We,oe,Y,Be,be,Ke);if(ue(Vt=>!(te&&te.some(En=>En.route.id===Vt))||Rt&&Rt.some(En=>En.route.id===Vt)),u=++a,Rt.length===0&&Ct.length===0){let Vt=Vr();return Mt(U,s({matches:te,loaderData:{},errors:Ke&&pn(Ke[1])?{[Ke[0]]:Ke[1].error}:null},Kt(Ke),Vt?{fetchers:new Map(le.fetchers)}:{}),{flushSync:Ze}),{shortCircuited:!0}}if(!Yn&&(!Ne.v7_partialHydration||!$e)){Ct.forEach(En=>{let Gt=le.fetchers.get(En.key),gn=lr(void 0,Gt?Gt.data:void 0);le.fetchers.set(En.key,gn)});let Vt;Ke&&!pn(Ke[1])?Vt={[Ke[0]]:Ke[1].data}:le.actionData&&(Object.keys(le.actionData).length===0?Vt=null:Vt=le.actionData),xt(s({navigation:gt},Vt!==void 0?{actionData:Vt}:{},Ct.length>0?{fetchers:new Map(le.fetchers)}:{}),{flushSync:Ze})}Ct.forEach(Vt=>{r.has(Vt.key)&&dr(Vt.key),Vt.controller&&r.set(Vt.key,Vt.controller)});let qt=()=>Ct.forEach(Vt=>dr(Vt.key));fn&&fn.signal.addEventListener("abort",qt);let{loaderResults:cn,fetcherResults:vn}=yield zr(le.matches,te,Rt,Ct,I);if(I.signal.aborted)return{shortCircuited:!0};fn&&fn.signal.removeEventListener("abort",qt),Ct.forEach(Vt=>r.delete(Vt.key));let Mn=bn([...cn,...vn]);if(Mn){if(Mn.idx>=Rt.length){let Vt=Ct[Mn.idx-Rt.length].key;Y.add(Vt)}return yield mr(I,Mn.result,{replace:He}),{shortCircuited:!0}}let{loaderData:Fn,errors:Dn}=zt(le,te,Rt,cn,Ke,Ct,vn,At);At.forEach((Vt,En)=>{Vt.subscribe(Gt=>{(Gt||Vt.done)&&At.delete(En)})}),Ne.v7_partialHydration&&$e&&le.errors&&Object.entries(le.errors).filter(Vt=>{let[En]=Vt;return!Rt.some(Gt=>Gt.route.id===En)}).forEach(Vt=>{let[En,Gt]=Vt;Dn=Object.assign(Dn||{},{[En]:Gt})});let Rn=Vr(),Tn=Gr(u),Un=Rn||Tn||Ct.length>0;return s({loaderData:Fn,errors:Dn},Un?{fetchers:new Map(le.fetchers)}:{})})}function Qr(I,U,te,ve){if(S)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");r.has(I)&&dr(I);let Me=(ve&&ve.unstable_flushSync)===!0,Qe=fe||ne,He=ee(le.location,le.matches,be,Ne.v7_prependBasename,te,Ne.v7_relativeSplatPath,U,ve==null?void 0:ve.relative),$e=se(Qe,He,be);if(!$e){Pr(I,U,jt(404,{pathname:He}),{flushSync:Me});return}let{path:Ze,submission:Ke,error:gt}=V(Ne.v7_normalizeFormMethod,!0,He,ve);if(gt){Pr(I,U,gt,{flushSync:Me});return}let it=ir($e,Ze);if(hn=(ve&&ve.preventScrollReset)===!0,Ke&&$n(Ke.formMethod)){Zr(I,U,Ze,it,$e,Me,Ke);return}oe.set(I,{routeId:U,path:Ze}),qr(I,U,Ze,it,$e,Me,Ke)}function Zr(I,U,te,ve,Me,Qe,He){return n(this,null,function*(){if(Ir(),oe.delete(I),!ve.route.action&&!ve.route.lazy){let gn=jt(405,{method:He.formMethod,pathname:te,routeId:U});Pr(I,U,gn,{flushSync:Qe});return}let $e=le.fetchers.get(I);cr(I,hr(He,$e),{flushSync:Qe});let Ze=new AbortController,Ke=ge(o.history,te,Ze.signal,He);r.set(I,Ze);let gt=a,Be=(yield Rr("action",Ke,[ve],Me))[0];if(Ke.signal.aborted){r.get(I)===Ze&&r.delete(I);return}if(Ne.v7_fetcherPersist&&We.has(I)){if(jn(Be)||pn(Be)){cr(I,Xn(void 0));return}}else{if(jn(Be))if(r.delete(I),u>gt){cr(I,Xn(void 0));return}else return Y.add(I),cr(I,lr(He)),mr(Ke,Be,{fetcherSubmission:He});if(pn(Be)){Pr(I,U,Be.error);return}}if(xn(Be))throw jt(400,{type:"defer-action"});let Rt=le.navigation.location||le.location,Ct=ge(o.history,Rt,Ze.signal),qt=fe||ne,cn=le.navigation.state!=="idle"?se(qt,le.navigation.location,be):le.matches;v(cn,"Didn't find any matches after fetcher action");let vn=++a;x.set(I,vn);let Mn=lr(He,Be.data);le.fetchers.set(I,Mn);let[Fn,Dn]=Pe(o.history,le,cn,He,Rt,!1,Ne.unstable_skipActionErrorRevalidation,nr,Cn,br,We,oe,Y,qt,be,[ve.route.id,Be]);Dn.filter(gn=>gn.key!==I).forEach(gn=>{let Qn=gn.key,fr=le.fetchers.get(Qn),Er=lr(void 0,fr?fr.data:void 0);le.fetchers.set(Qn,Er),r.has(Qn)&&dr(Qn),gn.controller&&r.set(Qn,gn.controller)}),xt({fetchers:new Map(le.fetchers)});let Rn=()=>Dn.forEach(gn=>dr(gn.key));Ze.signal.addEventListener("abort",Rn);let{loaderResults:Tn,fetcherResults:Un}=yield zr(le.matches,cn,Fn,Dn,Ct);if(Ze.signal.aborted)return;Ze.signal.removeEventListener("abort",Rn),x.delete(I),r.delete(I),Dn.forEach(gn=>r.delete(gn.key));let Vt=bn([...Tn,...Un]);if(Vt){if(Vt.idx>=Fn.length){let gn=Dn[Vt.idx-Fn.length].key;Y.add(gn)}return mr(Ct,Vt.result)}let{loaderData:En,errors:Gt}=zt(le,le.matches,Fn,Tn,void 0,Dn,Un,At);if(le.fetchers.has(I)){let gn=Xn(Be.data);le.fetchers.set(I,gn)}Gr(vn),le.navigation.state==="loading"&&vn>u?(v(mn,"Expected pending action"),fn&&fn.abort(),Mt(le.navigation.location,{matches:cn,loaderData:En,errors:Gt,fetchers:new Map(le.fetchers)})):(xt({errors:Gt,loaderData:un(le.loaderData,En,cn,Gt),fetchers:new Map(le.fetchers)}),nr=!1)})}function qr(I,U,te,ve,Me,Qe,He){return n(this,null,function*(){let $e=le.fetchers.get(I);cr(I,lr(He,$e?$e.data:void 0),{flushSync:Qe});let Ze=new AbortController,Ke=ge(o.history,te,Ze.signal);r.set(I,Ze);let gt=a,Be=(yield Rr("loader",Ke,[ve],Me))[0];if(xn(Be)&&(Be=(yield er(Be,Ke.signal,!0))||Be),r.get(I)===Ze&&r.delete(I),!Ke.signal.aborted){if(We.has(I)){cr(I,Xn(void 0));return}if(jn(Be))if(u>gt){cr(I,Xn(void 0));return}else{Y.add(I),yield mr(Ke,Be);return}if(pn(Be)){Pr(I,U,Be.error);return}v(!xn(Be),"Unhandled fetcher deferred data"),cr(I,Xn(Be.data))}})}function mr(I,U,te){return n(this,null,function*(){let{submission:ve,fetcherSubmission:Me,replace:Qe}=te===void 0?{}:te;U.response.headers.has("X-Remix-Revalidate")&&(nr=!0);let He=U.response.headers.get("Location");v(He,"Expected a Location header on the redirect Response"),He=xe(He,new URL(I.url),be);let $e=re(le.location,He,{_isRedirect:!0});if(p){let Rt=!1;if(U.response.headers.has("X-Remix-Reload-Document"))Rt=!0;else if(Lt.test(He)){const Ct=o.history.createURL(He);Rt=Ct.origin!==i.location.origin||It(Ct.pathname,be)==null}if(Rt){Qe?i.location.replace(He):i.location.assign(He);return}}fn=null;let Ze=Qe===!0?t.Replace:t.Push,{formMethod:Ke,formAction:gt,formEncType:it}=le.navigation;!ve&&!Me&&Ke&&gt&&it&&(ve=pr(le.navigation));let Be=ve||Me;if(et.has(U.response.status)&&Be&&$n(Be.formMethod))yield Kn(Ze,$e,{submission:s({},Be,{formAction:He}),preventScrollReset:hn});else{let Rt=gr($e,ve);yield Kn(Ze,$e,{overrideNavigation:Rt,fetcherSubmission:Me,preventScrollReset:hn})}})}function Rr(I,U,te,ve){return n(this,null,function*(){try{let Me=yield pt(tt,I,U,te,ve,ce,D);return yield Promise.all(Me.map((Qe,He)=>{if(Pn(Qe)){let $e=Qe.result;return{type:B.redirect,response:X($e,U,te[He].route.id,ve,be,Ne.v7_relativeSplatPath)}}return f(Qe)}))}catch(Me){return te.map(()=>({type:B.error,error:Me}))}})}function zr(I,U,te,ve,Me){return n(this,null,function*(){let[Qe,...He]=yield Promise.all([te.length?Rr("loader",Me,te,U):[],...ve.map($e=>{if($e.matches&&$e.match&&$e.controller){let Ze=ge(o.history,$e.path,$e.controller.signal);return Rr("loader",Ze,[$e.match],$e.matches).then(Ke=>Ke[0])}else return Promise.resolve({type:B.error,error:jt(404,{pathname:$e.path})})})]);return yield Promise.all([ur(I,te,Qe,Qe.map(()=>Me.signal),!1,le.loaderData),ur(I,ve.map($e=>$e.match),He,ve.map($e=>$e.controller?$e.controller.signal:null),!0)]),{loaderResults:Qe,fetcherResults:He}})}function Ir(){nr=!0,Cn.push(...ue()),oe.forEach((I,U)=>{r.has(U)&&(br.push(U),dr(U))})}function cr(I,U,te){te===void 0&&(te={}),le.fetchers.set(I,U),xt({fetchers:new Map(le.fetchers)},{flushSync:(te&&te.flushSync)===!0})}function Pr(I,U,te,ve){ve===void 0&&(ve={});let Me=Yt(le.matches,U);Dr(I),xt({errors:{[Me.route.id]:te},fetchers:new Map(le.fetchers)},{flushSync:(ve&&ve.flushSync)===!0})}function Kr(I){return Ne.v7_fetcherPersist&&(ae.set(I,(ae.get(I)||0)+1),We.has(I)&&We.delete(I)),le.fetchers.get(I)||ft}function Dr(I){let U=le.fetchers.get(I);r.has(I)&&!(U&&U.state==="loading"&&x.has(I))&&dr(I),oe.delete(I),x.delete(I),Y.delete(I),We.delete(I),le.fetchers.delete(I)}function so(I){if(Ne.v7_fetcherPersist){let U=(ae.get(I)||0)-1;U<=0?(ae.delete(I),We.add(I)):ae.set(I,U)}else Dr(I);xt({fetchers:new Map(le.fetchers)})}function dr(I){let U=r.get(I);v(U,"Expected fetch controller: "+I),U.abort(),r.delete(I)}function Hr(I){for(let U of I){let te=Kr(U),ve=Xn(te.data);le.fetchers.set(U,ve)}}function Vr(){let I=[],U=!1;for(let te of Y){let ve=le.fetchers.get(te);v(ve,"Expected fetcher: "+te),ve.state==="loading"&&(Y.delete(te),I.push(te),U=!0)}return Hr(I),U}function Gr(I){let U=[];for(let[te,ve]of x)if(ve<I){let Me=le.fetchers.get(te);v(Me,"Expected fetcher: "+te),Me.state==="loading"&&(dr(te),x.delete(te),U.push(te))}return Hr(U),U.length>0}function ao(I,U){let te=le.blockers.get(I)||_t;return wt.get(I)!==U&&wt.set(I,U),te}function Xr(I){le.blockers.delete(I),wt.delete(I)}function l(I,U){let te=le.blockers.get(I)||_t;v(te.state==="unblocked"&&U.state==="blocked"||te.state==="blocked"&&U.state==="blocked"||te.state==="blocked"&&U.state==="proceeding"||te.state==="blocked"&&U.state==="unblocked"||te.state==="proceeding"&&U.state==="unblocked","Invalid blocker state transition: "+te.state+" -> "+U.state);let ve=new Map(le.blockers);ve.set(I,U),xt({blockers:ve})}function E(I){let{currentLocation:U,nextLocation:te,historyAction:ve}=I;if(wt.size===0)return;wt.size>1&&L(!1,"A router only supports one blocker at a time");let Me=Array.from(wt.entries()),[Qe,He]=Me[Me.length-1],$e=le.blockers.get(Qe);if(!($e&&$e.state==="proceeding")&&He({currentLocation:U,nextLocation:te,historyAction:ve}))return Qe}function ue(I){let U=[];return At.forEach((te,ve)=>{(!I||I(ve))&&(te.cancel(),U.push(ve),At.delete(ve))}),U}function Ie(I,U,te){if(je=I,ze=U,Je=te||null,!Tt&&le.navigation===Ot){Tt=!0;let ve=vt(le.location,le.matches);ve!=null&&xt({restoreScrollPosition:ve})}return()=>{je=null,ze=null,Je=null}}function Ge(I,U){return Je&&Je(I,U.map(ve=>A(ve,le.loaderData)))||I.key}function ht(I,U){if(je&&ze){let te=Ge(I,U);je[te]=ze()}}function vt(I,U){if(je){let te=Ge(I,U),ve=je[te];if(typeof ve=="number")return ve}return null}function yt(I){ce={},fe=J(I,D,void 0,ce)}return dn={get basename(){return be},get future(){return Ne},get state(){return le},get routes(){return ne},get window(){return i},initialize:qe,subscribe:Jn,enableScrollRestoration:Ie,navigate:Nn,fetch:Qr,revalidate:zn,createHref:I=>o.history.createHref(I),encodeLocation:I=>o.history.encodeLocation(I),getFetcher:Kr,deleteFetcher:so,dispose:Bn,getBlocker:ao,deleteBlocker:Xr,_internalFetchControllers:r,_internalActiveDeferreds:At,_internalSetRoutes:yt},dn}const G=Symbol("deferred");function Q(o,i){v(o.length>0,"You must provide a non-empty routes array to createStaticHandler");let p={},S=(i?i.basename:null)||"/",D;if(i!=null&&i.mapRouteProperties)D=i.mapRouteProperties;else if(i!=null&&i.detectErrorBoundary){let je=i.detectErrorBoundary;D=Je=>({hasErrorBoundary:je(Je)})}else D=Ut;let ce=s({v7_relativeSplatPath:!1,v7_throwAbortReason:!1},i?i.future:null),ne=J(o,D,void 0,p);function fe(je,Je){return n(this,null,function*(){let{requestContext:ze,skipLoaderErrorBubbling:Tt,unstable_dataStrategy:Ht}=Je===void 0?{}:Je,Wt=new URL(je.url),Qt=je.method,ct=re("",K(Wt),null,"default"),yn=se(ne,ct,S);if(!rr(Qt)&&Qt!=="HEAD"){let le=jt(405,{method:Qt}),{matches:mn,route:hn}=rn(ne);return{basename:S,location:ct,matches:mn,loaderData:{},actionData:null,errors:{[hn.id]:le},statusCode:le.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null}}else if(!yn){let le=jt(404,{pathname:ct.pathname}),{matches:mn,route:hn}=rn(ne);return{basename:S,location:ct,matches:mn,loaderData:{},actionData:null,errors:{[hn.id]:le},statusCode:le.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null}}let dn=yield tt(je,ct,yn,ze,Ht||null,Tt===!0,null);return wn(dn)?dn:s({location:ct,basename:S},dn)})}function be(je,Je){return n(this,null,function*(){let{routeId:ze,requestContext:Tt,unstable_dataStrategy:Ht}=Je===void 0?{}:Je,Wt=new URL(je.url),Qt=je.method,ct=re("",K(Wt),null,"default"),yn=se(ne,ct,S);if(!rr(Qt)&&Qt!=="HEAD"&&Qt!=="OPTIONS")throw jt(405,{method:Qt});if(!yn)throw jt(404,{pathname:ct.pathname});let dn=ze?yn.find(fn=>fn.route.id===ze):ir(yn,ct);if(ze&&!dn)throw jt(403,{pathname:ct.pathname,routeId:ze});if(!dn)throw jt(404,{pathname:ct.pathname});let le=yield tt(je,ct,yn,Tt,Ht||null,!1,dn);if(wn(le))return le;let mn=le.errors?Object.values(le.errors)[0]:void 0;if(mn!==void 0)throw mn;if(le.actionData)return Object.values(le.actionData)[0];if(le.loaderData){var hn;let fn=Object.values(le.loaderData)[0];return(hn=le.activeDeferreds)!=null&&hn[dn.route.id]&&(fn[G]=le.activeDeferreds[dn.route.id]),fn}})}function tt(je,Je,ze,Tt,Ht,Wt,Qt){return n(this,null,function*(){v(je.signal,"query()/queryRoute() requests must contain an AbortController signal");try{if($n(je.method.toLowerCase()))return yield Ne(je,ze,Qt||ir(ze,Je),Tt,Ht,Wt,Qt!=null);let ct=yield ot(je,ze,Tt,Ht,Wt,Qt);return wn(ct)?ct:s({},ct,{actionData:null,actionHeaders:{}})}catch(ct){if(On(ct)&&wn(ct.result)){if(ct.type===B.error)throw ct.result;return ct.result}if(on(ct))return ct;throw ct}})}function Ne(je,Je,ze,Tt,Ht,Wt,Qt){return n(this,null,function*(){let ct;if(!ze.route.action&&!ze.route.lazy){let le=jt(405,{method:je.method,pathname:new URL(je.url).pathname,routeId:ze.route.id});if(Qt)throw le;ct={type:B.error,error:le}}else ct=(yield st("action",je,[ze],Je,Qt,Tt,Ht))[0],je.signal.aborted&&m(je,Qt,ce);if(jn(ct))throw new Response(null,{status:ct.response.status,headers:{Location:ct.response.headers.get("Location")}});if(xn(ct)){let le=jt(400,{type:"defer-action"});if(Qt)throw le;ct={type:B.error,error:le}}if(Qt){if(pn(ct))throw ct.error;return{matches:[ze],loaderData:{},actionData:{[ze.route.id]:ct.data},errors:null,statusCode:200,loaderHeaders:{},actionHeaders:{},activeDeferreds:null}}let yn=new Request(je.url,{headers:je.headers,redirect:je.redirect,signal:je.signal});if(pn(ct)){let le=Wt?ze:Yt(Je,ze.route.id),mn=yield ot(yn,Je,Tt,Ht,Wt,null,[le.route.id,ct]);return s({},mn,{statusCode:De(ct.error)?ct.error.status:ct.statusCode!=null?ct.statusCode:500,actionData:null,actionHeaders:s({},ct.headers?{[ze.route.id]:ct.headers}:{})})}let dn=yield ot(yn,Je,Tt,Ht,Wt,null);return s({},dn,{actionData:{[ze.route.id]:ct.data}},ct.statusCode?{statusCode:ct.statusCode}:{},{actionHeaders:ct.headers?{[ze.route.id]:ct.headers}:{}})})}function ot(je,Je,ze,Tt,Ht,Wt,Qt){return n(this,null,function*(){let ct=Wt!=null;if(ct&&!(Wt!=null&&Wt.route.loader)&&!(Wt!=null&&Wt.route.lazy))throw jt(400,{method:je.method,pathname:new URL(je.url).pathname,routeId:Wt==null?void 0:Wt.route.id});let dn=(Wt?[Wt]:Qt&&pn(Qt[1])?Ae(Je,Qt[0]):Je).filter(Sn=>Sn.route.loader||Sn.route.lazy);if(dn.length===0)return{matches:Je,loaderData:Je.reduce((Sn,kn)=>Object.assign(Sn,{[kn.route.id]:null}),{}),errors:Qt&&pn(Qt[1])?{[Qt[0]]:Qt[1].error}:null,statusCode:200,loaderHeaders:{},activeDeferreds:null};let le=yield st("loader",je,dn,Je,ct,ze,Tt);je.signal.aborted&&m(je,ct,ce);let mn=new Map,hn=tn(Je,dn,le,Qt,mn,Ht),fn=new Set(dn.map(Sn=>Sn.route.id));return Je.forEach(Sn=>{fn.has(Sn.route.id)||(hn.loaderData[Sn.route.id]=null)}),s({},hn,{matches:Je,activeDeferreds:mn.size>0?Object.fromEntries(mn.entries()):null})})}function st(je,Je,ze,Tt,Ht,Wt,Qt){return n(this,null,function*(){let ct=yield pt(Qt||Xe,je,Je,ze,Tt,p,D,Wt);return yield Promise.all(ct.map((yn,dn)=>{if(Pn(yn)){let le=yn.result;throw X(le,Je,ze[dn].route.id,Tt,S,ce.v7_relativeSplatPath)}if(wn(yn.result)&&Ht)throw yn;return f(yn)}))})}return{dataRoutes:ne,query:fe,queryRoute:be}}function y(o,i,p){return s({},i,{statusCode:De(p)?p.status:500,errors:{[i._deepestRenderedBoundaryId||o[0].id]:p}})}function m(o,i,p){if(p.v7_throwAbortReason&&o.signal.reason!==void 0)throw o.signal.reason;let S=i?"queryRoute":"query";throw new Error(S+"() call aborted: "+o.method+" "+o.url)}function F(o){return o!=null&&("formData"in o&&o.formData!=null||"body"in o&&o.body!==void 0)}function ee(o,i,p,S,D,ce,ne,fe){let be,tt;if(ne){be=[];for(let ot of i)if(be.push(ot),ot.route.id===ne){tt=ot;break}}else be=i,tt=i[i.length-1];let Ne=Ue(D||".",dt(be,ce),It(o.pathname,p)||o.pathname,fe==="path");return D==null&&(Ne.search=o.search,Ne.hash=o.hash),(D==null||D===""||D===".")&&tt&&tt.route.index&&!or(Ne.search)&&(Ne.search=Ne.search?Ne.search.replace(/^\?/,"?index&"):"?index"),S&&p!=="/"&&(Ne.pathname=Ne.pathname==="/"?p:en([p,Ne.pathname])),K(Ne)}function V(o,i,p,S){if(!S||!F(S))return{path:p};if(S.formMethod&&!rr(S.formMethod))return{path:p,error:jt(405,{method:S.formMethod})};let D=()=>({path:p,error:jt(400,{type:"invalid-body"})}),ce=S.formMethod||"get",ne=o?ce.toUpperCase():ce.toLowerCase(),fe=An(p);if(S.body!==void 0){if(S.formEncType==="text/plain"){if(!$n(ne))return D();let st=typeof S.body=="string"?S.body:S.body instanceof FormData||S.body instanceof URLSearchParams?Array.from(S.body.entries()).reduce((je,Je)=>{let[ze,Tt]=Je;return""+je+ze+"="+Tt+`
`},""):String(S.body);return{path:p,submission:{formMethod:ne,formAction:fe,formEncType:S.formEncType,formData:void 0,json:void 0,text:st}}}else if(S.formEncType==="application/json"){if(!$n(ne))return D();try{let st=typeof S.body=="string"?JSON.parse(S.body):S.body;return{path:p,submission:{formMethod:ne,formAction:fe,formEncType:S.formEncType,formData:void 0,json:st,text:void 0}}}catch(st){return D()}}}v(typeof FormData=="function","FormData is not available in this environment");let be,tt;if(S.formData)be=Ve(S.formData),tt=S.formData;else if(S.body instanceof FormData)be=Ve(S.body),tt=S.body;else if(S.body instanceof URLSearchParams)be=S.body,tt=rt(be);else if(S.body==null)be=new URLSearchParams,tt=new FormData;else try{be=new URLSearchParams(S.body),tt=rt(be)}catch(st){return D()}let Ne={formMethod:ne,formAction:fe,formEncType:S&&S.formEncType||"application/x-www-form-urlencoded",formData:tt,json:void 0,text:void 0};if($n(Ne.formMethod))return{path:p,submission:Ne};let ot=H(p);return i&&ot.search&&or(ot.search)&&be.append("index",""),ot.search="?"+be,{path:K(ot),submission:Ne}}function Ae(o,i){let p=o;if(i){let S=o.findIndex(D=>D.route.id===i);S>=0&&(p=o.slice(0,S))}return p}function Pe(o,i,p,S,D,ce,ne,fe,be,tt,Ne,ot,st,je,Je,ze){let Tt=ze?pn(ze[1])?ze[1].error:ze[1].data:void 0,Ht=o.createURL(i.location),Wt=o.createURL(D),Qt=ze&&pn(ze[1])?ze[0]:void 0,ct=Qt?Ae(p,Qt):p,yn=ze?ze[1].statusCode:void 0,dn=ne&&yn&&yn>=400,le=ct.filter((hn,fn)=>{let{route:Sn}=hn;if(Sn.lazy)return!0;if(Sn.loader==null)return!1;if(ce)return typeof Sn.loader!="function"||Sn.loader.hydrate?!0:i.loaderData[Sn.id]===void 0&&(!i.errors||i.errors[Sn.id]===void 0);if(Re(i.loaderData,i.matches[fn],hn)||be.some(Yn=>Yn===hn.route.id))return!0;let kn=i.matches[fn],Hn=hn;return pe(hn,s({currentUrl:Ht,currentParams:kn.params,nextUrl:Wt,nextParams:Hn.params},S,{actionResult:Tt,unstable_actionStatus:yn,defaultShouldRevalidate:dn?!1:fe||Ht.pathname+Ht.search===Wt.pathname+Wt.search||Ht.search!==Wt.search||ye(kn,Hn)}))}),mn=[];return ot.forEach((hn,fn)=>{if(ce||!p.some(nr=>nr.route.id===hn.routeId)||Ne.has(fn))return;let Sn=se(je,hn.path,Je);if(!Sn){mn.push({key:fn,routeId:hn.routeId,path:hn.path,matches:null,match:null,controller:null});return}let kn=i.fetchers.get(fn),Hn=ir(Sn,hn.path),Yn=!1;st.has(fn)?Yn=!1:tt.includes(fn)?Yn=!0:kn&&kn.state!=="idle"&&kn.data===void 0?Yn=fe:Yn=pe(Hn,s({currentUrl:Ht,currentParams:i.matches[i.matches.length-1].params,nextUrl:Wt,nextParams:p[p.length-1].params},S,{actionResult:Tt,unstable_actionStatus:yn,defaultShouldRevalidate:dn?!1:fe})),Yn&&mn.push({key:fn,routeId:hn.routeId,path:hn.path,matches:Sn,match:Hn,controller:new AbortController})}),[le,mn]}function Re(o,i,p){let S=!i||p.route.id!==i.route.id,D=o[p.route.id]===void 0;return S||D}function ye(o,i){let p=o.route.path;return o.pathname!==i.pathname||p!=null&&p.endsWith("*")&&o.params["*"]!==i.params["*"]}function pe(o,i){if(o.route.shouldRevalidate){let p=o.route.shouldRevalidate(i);if(typeof p=="boolean")return p}return i.defaultShouldRevalidate}function Se(o,i,p){return n(this,null,function*(){if(!o.lazy)return;let S=yield o.lazy();if(!o.lazy)return;let D=p[o.id];v(D,"No route found in manifest");let ce={};for(let ne in S){let be=D[ne]!==void 0&&ne!=="hasErrorBoundary";L(!be,'Route "'+D.id+'" has a static property "'+ne+'" defined but its lazy function is also returning a value for this property. '+('The lazy route property "'+ne+'" will be ignored.')),!be&&!O.has(ne)&&(ce[ne]=S[ne])}Object.assign(D,ce),Object.assign(D,s({},i(D),{lazy:void 0}))})}function Xe(o){return Promise.all(o.matches.map(i=>i.resolve()))}function pt(o,i,p,S,D,ce,ne,fe){return n(this,null,function*(){let be=S.reduce((ot,st)=>ot.add(st.route.id),new Set),tt=new Set,Ne=yield o({matches:D.map(ot=>{let st=be.has(ot.route.id);return s({},ot,{shouldLoad:st,resolve:Je=>(tt.add(ot.route.id),st?kt(i,p,ot,ce,ne,Je,fe):Promise.resolve({type:B.data,result:void 0}))})}),request:p,params:D[0].params,context:fe});return D.forEach(ot=>v(tt.has(ot.route.id),'`match.resolve()` was not called for route id "'+ot.route.id+'". You must call `match.resolve()` on every match passed to `dataStrategy` to ensure all routes are properly loaded.')),Ne.filter((ot,st)=>be.has(D[st].route.id))})}function kt(o,i,p,S,D,ce,ne){return n(this,null,function*(){let fe,be,tt=Ne=>{let ot,st=new Promise((ze,Tt)=>ot=Tt);be=()=>ot(),i.signal.addEventListener("abort",be);let je=ze=>typeof Ne!="function"?Promise.reject(new Error("You cannot call the handler for a route which defines a boolean "+('"'+o+'" [routeId: '+p.route.id+"]"))):Ne({request:i,params:p.params,context:ne},...ze!==void 0?[ze]:[]),Je;return ce?Je=ce(ze=>je(ze)):Je=n(this,null,function*(){try{return{type:"data",result:yield je()}}catch(ze){return{type:"error",result:ze}}}),Promise.race([Je,st])};try{let Ne=p.route[o];if(p.route.lazy)if(Ne){let ot,[st]=yield Promise.all([tt(Ne).catch(je=>{ot=je}),Se(p.route,D,S)]);if(ot!==void 0)throw ot;fe=st}else if(yield Se(p.route,D,S),Ne=p.route[o],Ne)fe=yield tt(Ne);else if(o==="action"){let ot=new URL(i.url),st=ot.pathname+ot.search;throw jt(405,{method:i.method,pathname:st,routeId:p.route.id})}else return{type:B.data,result:void 0};else if(Ne)fe=yield tt(Ne);else{let ot=new URL(i.url),st=ot.pathname+ot.search;throw jt(404,{pathname:st})}v(fe.result!==void 0,"You defined "+(o==="action"?"an action":"a loader")+" for route "+('"'+p.route.id+"\" but didn't return anything from your `"+o+"` ")+"function. Please return a value or `null`.")}catch(Ne){return{type:B.error,result:Ne}}finally{be&&i.signal.removeEventListener("abort",be)}return fe})}function f(o){return n(this,null,function*(){let{result:i,type:p,status:S}=o;if(wn(i)){let ne;try{let fe=i.headers.get("Content-Type");fe&&/\bapplication\/json\b/.test(fe)?i.body==null?ne=null:ne=yield i.json():ne=yield i.text()}catch(fe){return{type:B.error,error:fe}}return p===B.error?{type:B.error,error:new Ee(i.status,i.statusText,ne),statusCode:i.status,headers:i.headers}:{type:B.data,data:ne,statusCode:i.status,headers:i.headers}}if(p===B.error)return{type:B.error,error:i,statusCode:De(i)?i.status:S};if(qn(i)){var D,ce;return{type:B.deferred,deferredData:i,statusCode:(D=i.init)==null?void 0:D.status,headers:((ce=i.init)==null?void 0:ce.headers)&&new Headers(i.init.headers)}}return{type:B.data,data:i,statusCode:S}})}function X(o,i,p,S,D,ce){let ne=o.headers.get("Location");if(v(ne,"Redirects returned/thrown from loaders/actions must have a Location header"),!Lt.test(ne)){let fe=S.slice(0,S.findIndex(be=>be.route.id===p)+1);ne=ee(new URL(i.url),fe,D,!0,ne,ce),o.headers.set("Location",ne)}return o}function xe(o,i,p){if(Lt.test(o)){let S=o,D=S.startsWith("//")?new URL(i.protocol+S):new URL(S),ce=It(D.pathname,p)!=null;if(D.origin===i.origin&&ce)return D.pathname+D.search+D.hash}return o}function ge(o,i,p,S){let D=o.createURL(An(i)).toString(),ce={signal:p};if(S&&$n(S.formMethod)){let{formMethod:ne,formEncType:fe}=S;ce.method=ne.toUpperCase(),fe==="application/json"?(ce.headers=new Headers({"Content-Type":fe}),ce.body=JSON.stringify(S.json)):fe==="text/plain"?ce.body=S.text:fe==="application/x-www-form-urlencoded"&&S.formData?ce.body=Ve(S.formData):ce.body=S.formData}return new Request(D,ce)}function Ve(o){let i=new URLSearchParams;for(let[p,S]of o.entries())i.append(p,typeof S=="string"?S:S.name);return i}function rt(o){let i=new FormData;for(let[p,S]of o.entries())i.append(p,S);return i}function tn(o,i,p,S,D,ce){let ne={},fe=null,be,tt=!1,Ne={},ot=S&&pn(S[1])?S[1].error:void 0;return p.forEach((st,je)=>{let Je=i[je].route.id;if(v(!jn(st),"Cannot handle redirect results in processLoaderData"),pn(st)){let ze=st.error;if(ot!==void 0&&(ze=ot,ot=void 0),fe=fe||{},ce)fe[Je]=ze;else{let Tt=Yt(o,Je);fe[Tt.route.id]==null&&(fe[Tt.route.id]=ze)}ne[Je]=void 0,tt||(tt=!0,be=De(st.error)?st.error.status:500),st.headers&&(Ne[Je]=st.headers)}else xn(st)?(D.set(Je,st.deferredData),ne[Je]=st.deferredData.data,st.statusCode!=null&&st.statusCode!==200&&!tt&&(be=st.statusCode),st.headers&&(Ne[Je]=st.headers)):(ne[Je]=st.data,st.statusCode&&st.statusCode!==200&&!tt&&(be=st.statusCode),st.headers&&(Ne[Je]=st.headers))}),ot!==void 0&&S&&(fe={[S[0]]:ot},ne[S[0]]=void 0),{loaderData:ne,errors:fe,statusCode:be||200,loaderHeaders:Ne}}function zt(o,i,p,S,D,ce,ne,fe){let{loaderData:be,errors:tt}=tn(i,p,S,D,fe,!1);for(let Ne=0;Ne<ce.length;Ne++){let{key:ot,match:st,controller:je}=ce[Ne];v(ne!==void 0&&ne[Ne]!==void 0,"Did not find corresponding fetcher result");let Je=ne[Ne];if(!(je&&je.signal.aborted))if(pn(Je)){let ze=Yt(o.matches,st==null?void 0:st.route.id);tt&&tt[ze.route.id]||(tt=s({},tt,{[ze.route.id]:Je.error})),o.fetchers.delete(ot)}else if(jn(Je))v(!1,"Unhandled fetcher revalidation redirect");else if(xn(Je))v(!1,"Unhandled fetcher deferred data");else{let ze=Xn(Je.data);o.fetchers.set(ot,ze)}}return{loaderData:be,errors:tt}}function un(o,i,p,S){let D=s({},i);for(let ce of p){let ne=ce.route.id;if(i.hasOwnProperty(ne)?i[ne]!==void 0&&(D[ne]=i[ne]):o[ne]!==void 0&&ce.route.loader&&(D[ne]=o[ne]),S&&S.hasOwnProperty(ne))break}return D}function Kt(o){return o?pn(o[1])?{actionData:{}}:{actionData:{[o[0]]:o[1].data}}:{}}function Yt(o,i){return(i?o.slice(0,o.findIndex(S=>S.route.id===i)+1):[...o]).reverse().find(S=>S.route.hasErrorBoundary===!0)||o[0]}function rn(o){let i=o.length===1?o[0]:o.find(p=>p.index||!p.path||p.path==="/")||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:i}],route:i}}function jt(o,i){let{pathname:p,routeId:S,method:D,type:ce}=i===void 0?{}:i,ne="Unknown Server Error",fe="Unknown @remix-run/router error";return o===400?(ne="Bad Request",D&&p&&S?fe="You made a "+D+' request to "'+p+'" but '+('did not provide a `loader` for route "'+S+'", ')+"so there is no way to handle the request.":ce==="defer-action"?fe="defer() is not supported in actions":ce==="invalid-body"&&(fe="Unable to encode submission body")):o===403?(ne="Forbidden",fe='Route "'+S+'" does not match URL "'+p+'"'):o===404?(ne="Not Found",fe='No route matches URL "'+p+'"'):o===405&&(ne="Method Not Allowed",D&&p&&S?fe="You made a "+D.toUpperCase()+' request to "'+p+'" but '+('did not provide an `action` for route "'+S+'", ')+"so there is no way to handle the request.":D&&(fe='Invalid request method "'+D.toUpperCase()+'"')),new Ee(o||500,ne,new Error(fe),!0)}function bn(o){for(let i=o.length-1;i>=0;i--){let p=o[i];if(jn(p))return{result:p,idx:i}}}function An(o){let i=typeof o=="string"?H(o):o;return K(s({},i,{hash:""}))}function nn(o,i){return o.pathname!==i.pathname||o.search!==i.search?!1:o.hash===""?i.hash!=="":o.hash===i.hash?!0:i.hash!==""}function On(o){return o!=null&&typeof o=="object"&&"type"in o&&"result"in o&&(o.type===B.data||o.type===B.error)}function Pn(o){return wn(o.result)&&at.has(o.result.status)}function xn(o){return o.type===B.deferred}function pn(o){return o.type===B.error}function jn(o){return(o&&o.type)===B.redirect}function qn(o){let i=o;return i&&typeof i=="object"&&typeof i.data=="object"&&typeof i.subscribe=="function"&&typeof i.cancel=="function"&&typeof i.resolveData=="function"}function wn(o){return o!=null&&typeof o.status=="number"&&typeof o.statusText=="string"&&typeof o.headers=="object"&&typeof o.body!="undefined"}function on(o){if(!wn(o))return!1;let i=o.status,p=o.headers.get("Location");return i>=300&&i<=399&&p!=null}function rr(o){return lt.has(o.toLowerCase())}function $n(o){return z.has(o.toLowerCase())}function ur(o,i,p,S,D,ce){return n(this,null,function*(){for(let ne=0;ne<p.length;ne++){let fe=p[ne],be=i[ne];if(!be)continue;let tt=o.find(ot=>ot.route.id===be.route.id),Ne=tt!=null&&!ye(tt,be)&&(ce&&ce[be.route.id])!==void 0;if(xn(fe)&&(D||Ne)){let ot=S[ne];v(ot,"Expected an AbortSignal for revalidating fetcher deferred result"),yield er(fe,ot,D).then(st=>{st&&(p[ne]=st||p[ne])})}}})}function er(o,i,p){return n(this,null,function*(){if(p===void 0&&(p=!1),!(yield o.deferredData.resolveData(i))){if(p)try{return{type:B.data,data:o.deferredData.unwrappedData}}catch(D){return{type:B.error,error:D}}return{type:B.data,data:o.deferredData.data}}})}function or(o){return new URLSearchParams(o).getAll("index").some(i=>i==="")}function ir(o,i){let p=typeof i=="string"?H(i).search:i.search;if(o[o.length-1].route.index&&or(p||""))return o[o.length-1];let S=Pt(o);return S[S.length-1]}function pr(o){let{formMethod:i,formAction:p,formEncType:S,text:D,formData:ce,json:ne}=o;if(!(!i||!p||!S)){if(D!=null)return{formMethod:i,formAction:p,formEncType:S,formData:void 0,json:void 0,text:D};if(ce!=null)return{formMethod:i,formAction:p,formEncType:S,formData:ce,json:void 0,text:void 0};if(ne!==void 0)return{formMethod:i,formAction:p,formEncType:S,formData:void 0,json:ne,text:void 0}}}function gr(o,i){return i?{state:"loading",location:o,formMethod:i.formMethod,formAction:i.formAction,formEncType:i.formEncType,formData:i.formData,json:i.json,text:i.text}:{state:"loading",location:o,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function Jt(o,i){return{state:"submitting",location:o,formMethod:i.formMethod,formAction:i.formAction,formEncType:i.formEncType,formData:i.formData,json:i.json,text:i.text}}function lr(o,i){return o?{state:"loading",formMethod:o.formMethod,formAction:o.formAction,formEncType:o.formEncType,formData:o.formData,json:o.json,text:o.text,data:i}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:i}}function hr(o,i){return{state:"submitting",formMethod:o.formMethod,formAction:o.formAction,formEncType:o.formEncType,formData:o.formData,json:o.json,text:o.text,data:i?i.data:void 0}}function Xn(o){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:o}}function Or(o,i){try{let p=o.sessionStorage.getItem($t);if(p){let S=JSON.parse(p);for(let[D,ce]of Object.entries(S||{}))ce&&Array.isArray(ce)&&i.set(D,new Set(ce||[]))}}catch(p){}}function xr(o,i){if(i.size>0){let p={};for(let[S,D]of i)p[S]=[...D];try{o.sessionStorage.setItem($t,JSON.stringify(p))}catch(S){L(!1,"Failed to save applied view transitions in sessionStorage ("+S+").")}}}},6639:(he,R,e)=>{"use strict";var n=e(3226),s={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},T={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},w={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},g={};g[n.ForwardRef]=T,g[n.Memo]=w;function d(W){return n.isMemo(W)?w:g[W.$$typeof]||s}var v=Object.defineProperty,L=Object.getOwnPropertyNames,j=Object.getOwnPropertySymbols,k=Object.getOwnPropertyDescriptor,re=Object.getPrototypeOf,K=Object.prototype;function H(W,B,O){if(typeof B!="string"){if(K){var ie=re(B);ie&&ie!==K&&H(W,ie,O)}var J=L(B);j&&(J=J.concat(j(B)));for(var se=d(W),A=d(B),M=0;M<J.length;++M){var _=J[M];if(!t[_]&&!(O&&O[_])&&!(A&&A[_])&&!(se&&se[_])){var $=k(B,_);try{v(W,_,$)}catch(P){}}}}return W}he.exports=H},9078:(he,R)=>{"use strict";/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var e=typeof Symbol=="function"&&Symbol.for,n=e?Symbol.for("react.element"):60103,s=e?Symbol.for("react.portal"):60106,t=e?Symbol.for("react.fragment"):60107,T=e?Symbol.for("react.strict_mode"):60108,w=e?Symbol.for("react.profiler"):60114,g=e?Symbol.for("react.provider"):60109,d=e?Symbol.for("react.context"):60110,v=e?Symbol.for("react.async_mode"):60111,L=e?Symbol.for("react.concurrent_mode"):60111,j=e?Symbol.for("react.forward_ref"):60112,k=e?Symbol.for("react.suspense"):60113,re=e?Symbol.for("react.suspense_list"):60120,K=e?Symbol.for("react.memo"):60115,H=e?Symbol.for("react.lazy"):60116,W=e?Symbol.for("react.block"):60121,B=e?Symbol.for("react.fundamental"):60117,O=e?Symbol.for("react.responder"):60118,ie=e?Symbol.for("react.scope"):60119;function J(A){if(typeof A=="object"&&A!==null){var M=A.$$typeof;switch(M){case n:switch(A=A.type,A){case v:case L:case t:case w:case T:case k:return A;default:switch(A=A&&A.$$typeof,A){case d:case j:case H:case K:case g:return A;default:return M}}case s:return M}}}function se(A){return J(A)===L}R.AsyncMode=v,R.ConcurrentMode=L,R.ContextConsumer=d,R.ContextProvider=g,R.Element=n,R.ForwardRef=j,R.Fragment=t,R.Lazy=H,R.Memo=K,R.Portal=s,R.Profiler=w,R.StrictMode=T,R.Suspense=k,R.isAsyncMode=function(A){return se(A)||J(A)===v},R.isConcurrentMode=se,R.isContextConsumer=function(A){return J(A)===d},R.isContextProvider=function(A){return J(A)===g},R.isElement=function(A){return typeof A=="object"&&A!==null&&A.$$typeof===n},R.isForwardRef=function(A){return J(A)===j},R.isFragment=function(A){return J(A)===t},R.isLazy=function(A){return J(A)===H},R.isMemo=function(A){return J(A)===K},R.isPortal=function(A){return J(A)===s},R.isProfiler=function(A){return J(A)===w},R.isStrictMode=function(A){return J(A)===T},R.isSuspense=function(A){return J(A)===k},R.isValidElementType=function(A){return typeof A=="string"||typeof A=="function"||A===t||A===L||A===w||A===T||A===k||A===re||typeof A=="object"&&A!==null&&(A.$$typeof===H||A.$$typeof===K||A.$$typeof===g||A.$$typeof===d||A.$$typeof===j||A.$$typeof===B||A.$$typeof===O||A.$$typeof===ie||A.$$typeof===W)},R.typeOf=J},3226:(he,R,e)=>{"use strict";he.exports=e(9078)},2215:(he,R,e)=>{"use strict";var n,s;e.d(R,{Ys:()=>N,pg:()=>dt});var t=e(4999),T=e(7874),w=e(8484),g=e(8431),d=(y,m,F)=>new Promise((ee,V)=>{var Ae=ye=>{try{Re(F.next(ye))}catch(pe){V(pe)}},Pe=ye=>{try{Re(F.throw(ye))}catch(pe){V(pe)}},Re=ye=>ye.done?ee(ye.value):Promise.resolve(ye.value).then(Ae,Pe);Re((F=F.apply(y,m)).next())});/**
 * React Router DOM v6.23.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function v(){return v=Object.assign?Object.assign.bind():function(y){for(var m=1;m<arguments.length;m++){var F=arguments[m];for(var ee in F)Object.prototype.hasOwnProperty.call(F,ee)&&(y[ee]=F[ee])}return y},v.apply(this,arguments)}function L(y,m){if(y==null)return{};var F={},ee=Object.keys(y),V,Ae;for(Ae=0;Ae<ee.length;Ae++)V=ee[Ae],!(m.indexOf(V)>=0)&&(F[V]=y[V]);return F}const j="get",k="application/x-www-form-urlencoded";function re(y){return y!=null&&typeof y.tagName=="string"}function K(y){return re(y)&&y.tagName.toLowerCase()==="button"}function H(y){return re(y)&&y.tagName.toLowerCase()==="form"}function W(y){return re(y)&&y.tagName.toLowerCase()==="input"}function B(y){return!!(y.metaKey||y.altKey||y.ctrlKey||y.shiftKey)}function O(y,m){return y.button===0&&(!m||m==="_self")&&!B(y)}function ie(y){return y===void 0&&(y=""),new URLSearchParams(typeof y=="string"||Array.isArray(y)||y instanceof URLSearchParams?y:Object.keys(y).reduce((m,F)=>{let ee=y[F];return m.concat(Array.isArray(ee)?ee.map(V=>[F,V]):[[F,ee]])},[]))}function J(y,m){let F=ie(y);return m&&m.forEach((ee,V)=>{F.has(V)||m.getAll(V).forEach(Ae=>{F.append(V,Ae)})}),F}let se=null;function A(){if(se===null)try{new FormData(document.createElement("form"),0),se=!1}catch(y){se=!0}return se}const M=new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);function _(y){return y!=null&&!M.has(y)?null:y}function $(y,m){let F,ee,V,Ae,Pe;if(H(y)){let Re=y.getAttribute("action");ee=Re?stripBasename(Re,m):null,F=y.getAttribute("method")||j,V=_(y.getAttribute("enctype"))||k,Ae=new FormData(y)}else if(K(y)||W(y)&&(y.type==="submit"||y.type==="image")){let Re=y.form;if(Re==null)throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');let ye=y.getAttribute("formaction")||Re.getAttribute("action");if(ee=ye?stripBasename(ye,m):null,F=y.getAttribute("formmethod")||Re.getAttribute("method")||j,V=_(y.getAttribute("formenctype"))||_(Re.getAttribute("enctype"))||k,Ae=new FormData(Re,y),!A()){let{name:pe,type:Se,value:Xe}=y;if(Se==="image"){let pt=pe?pe+".":"";Ae.append(pt+"x","0"),Ae.append(pt+"y","0")}else pe&&Ae.append(pe,Xe)}}else{if(re(y))throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');F=j,ee=null,V=k,Pe=y}return Ae&&V==="text/plain"&&(Pe=Ae,Ae=void 0),{action:ee,method:F.toLowerCase(),encType:V,formData:Ae,body:Pe}}const P=null,c=null,h=null,b="6";try{window.__reactRouterVersion=b}catch(y){}function N(y,m){return(0,g.aE)({basename:m==null?void 0:m.basename,future:v({},m==null?void 0:m.future,{v7_prependBasename:!0}),history:(0,g.zR)({window:m==null?void 0:m.window}),hydrationData:(m==null?void 0:m.hydrationData)||Z(),routes:y,mapRouteProperties:w.wE,unstable_dataStrategy:m==null?void 0:m.unstable_dataStrategy,window:m==null?void 0:m.window}).initialize()}function q(y,m){return createRouter({basename:m==null?void 0:m.basename,future:v({},m==null?void 0:m.future,{v7_prependBasename:!0}),history:createHashHistory({window:m==null?void 0:m.window}),hydrationData:(m==null?void 0:m.hydrationData)||Z(),routes:y,mapRouteProperties:UNSAFE_mapRouteProperties,unstable_dataStrategy:m==null?void 0:m.unstable_dataStrategy,window:m==null?void 0:m.window}).initialize()}function Z(){var y;let m=(y=window)==null?void 0:y.__staticRouterHydrationData;return m&&m.errors&&(m=v({},m,{errors:me(m.errors)})),m}function me(y){if(!y)return null;let m=Object.entries(y),F={};for(let[ee,V]of m)if(V&&V.__type==="RouteErrorResponse")F[ee]=new g.VV(V.status,V.statusText,V.data,V.internal===!0);else if(V&&V.__type==="Error"){if(V.__subType){let Ae=window[V.__subType];if(typeof Ae=="function")try{let Pe=new Ae(V.message);Pe.stack="",F[ee]=Pe}catch(Pe){}}if(F[ee]==null){let Ae=new Error(V.message);Ae.stack="",F[ee]=Ae}}else F[ee]=V;return F}const _e=t.createContext({isTransitioning:!1}),Te=t.createContext(new Map),Fe=(n||(n=e.t(t,2)))["startTransition"],ut=(s||(s=e.t(T,2)))["flushSync"],bt=(n||(n=e.t(t,2)))["useId"];function Et(y){Fe?Fe(y):y()}function Ft(y){ut?ut(y):y()}class Pt{constructor(){this.status="pending",this.promise=new Promise((m,F)=>{this.resolve=ee=>{this.status==="pending"&&(this.status="resolved",m(ee))},this.reject=ee=>{this.status==="pending"&&(this.status="rejected",F(ee))}})}}function dt(y){let{fallbackElement:m,router:F,future:ee}=y,[V,Ae]=t.useState(F.state),[Pe,Re]=t.useState(),[ye,pe]=t.useState({isTransitioning:!1}),[Se,Xe]=t.useState(),[pt,kt]=t.useState(),[f,X]=t.useState(),xe=t.useRef(new Map),{v7_startTransition:ge}=ee||{},Ve=t.useCallback(Kt=>{ge?Et(Kt):Kt()},[ge]),rt=t.useCallback((Kt,Yt)=>{let{deletedFetchers:rn,unstable_flushSync:jt,unstable_viewTransitionOpts:bn}=Yt;rn.forEach(nn=>xe.current.delete(nn)),Kt.fetchers.forEach((nn,On)=>{nn.data!==void 0&&xe.current.set(On,nn.data)});let An=F.window==null||F.window.document==null||typeof F.window.document.startViewTransition!="function";if(!bn||An){jt?Ft(()=>Ae(Kt)):Ve(()=>Ae(Kt));return}if(jt){Ft(()=>{pt&&(Se&&Se.resolve(),pt.skipTransition()),pe({isTransitioning:!0,flushSync:!0,currentLocation:bn.currentLocation,nextLocation:bn.nextLocation})});let nn=F.window.document.startViewTransition(()=>{Ft(()=>Ae(Kt))});nn.finished.finally(()=>{Ft(()=>{Xe(void 0),kt(void 0),Re(void 0),pe({isTransitioning:!1})})}),Ft(()=>kt(nn));return}pt?(Se&&Se.resolve(),pt.skipTransition(),X({state:Kt,currentLocation:bn.currentLocation,nextLocation:bn.nextLocation})):(Re(Kt),pe({isTransitioning:!0,flushSync:!1,currentLocation:bn.currentLocation,nextLocation:bn.nextLocation}))},[F.window,pt,Se,xe,Ve]);t.useLayoutEffect(()=>F.subscribe(rt),[F,rt]),t.useEffect(()=>{ye.isTransitioning&&!ye.flushSync&&Xe(new Pt)},[ye]),t.useEffect(()=>{if(Se&&Pe&&F.window){let Kt=Pe,Yt=Se.promise,rn=F.window.document.startViewTransition(()=>d(this,null,function*(){Ve(()=>Ae(Kt)),yield Yt}));rn.finished.finally(()=>{Xe(void 0),kt(void 0),Re(void 0),pe({isTransitioning:!1})}),kt(rn)}},[Ve,Pe,Se,F.window]),t.useEffect(()=>{Se&&Pe&&V.location.key===Pe.location.key&&Se.resolve()},[Se,pt,V.location,Pe]),t.useEffect(()=>{!ye.isTransitioning&&f&&(Re(f.state),pe({isTransitioning:!0,flushSync:!1,currentLocation:f.currentLocation,nextLocation:f.nextLocation}),X(void 0))},[ye.isTransitioning,f]),t.useEffect(()=>{},[]);let tn=t.useMemo(()=>({createHref:F.createHref,encodeLocation:F.encodeLocation,go:Kt=>F.navigate(Kt),push:(Kt,Yt,rn)=>F.navigate(Kt,{state:Yt,preventScrollReset:rn==null?void 0:rn.preventScrollReset}),replace:(Kt,Yt,rn)=>F.navigate(Kt,{replace:!0,state:Yt,preventScrollReset:rn==null?void 0:rn.preventScrollReset})}),[F]),zt=F.basename||"/",un=t.useMemo(()=>({router:F,navigator:tn,static:!1,basename:zt}),[F,tn,zt]);return t.createElement(t.Fragment,null,t.createElement(w.sp.Provider,{value:un},t.createElement(w.Rq.Provider,{value:V},t.createElement(Te.Provider,{value:xe.current},t.createElement(_e.Provider,{value:ye},t.createElement(w.Ix,{basename:zt,location:V.location,navigationType:V.historyAction,navigator:tn,future:{v7_relativeSplatPath:F.future.v7_relativeSplatPath}},V.initialized||F.future.v7_partialHydration?t.createElement(Ue,{routes:F.routes,future:F.future,state:V}):m))))),null)}function Ue(y){let{routes:m,future:F,state:ee}=y;return(0,w.ph)(m,void 0,ee,F)}function Dt(y){let{basename:m,children:F,future:ee,window:V}=y,Ae=React.useRef();Ae.current==null&&(Ae.current=createBrowserHistory({window:V,v5Compat:!0}));let Pe=Ae.current,[Re,ye]=React.useState({action:Pe.action,location:Pe.location}),{v7_startTransition:pe}=ee||{},Se=React.useCallback(Xe=>{pe&&Fe?Fe(()=>ye(Xe)):ye(Xe)},[ye,pe]);return React.useLayoutEffect(()=>Pe.listen(Se),[Pe,Se]),React.createElement(Router,{basename:m,children:F,location:Re.location,navigationType:Re.action,navigator:Pe,future:ee})}function en(y){let{basename:m,children:F,future:ee,window:V}=y,Ae=React.useRef();Ae.current==null&&(Ae.current=createHashHistory({window:V,v5Compat:!0}));let Pe=Ae.current,[Re,ye]=React.useState({action:Pe.action,location:Pe.location}),{v7_startTransition:pe}=ee||{},Se=React.useCallback(Xe=>{pe&&Fe?Fe(()=>ye(Xe)):ye(Xe)},[ye,pe]);return React.useLayoutEffect(()=>Pe.listen(Se),[Pe,Se]),React.createElement(Router,{basename:m,children:F,location:Re.location,navigationType:Re.action,navigator:Pe,future:ee})}function Bt(y){let{basename:m,children:F,future:ee,history:V}=y,[Ae,Pe]=React.useState({action:V.action,location:V.location}),{v7_startTransition:Re}=ee||{},ye=React.useCallback(pe=>{Re&&Fe?Fe(()=>Pe(pe)):Pe(pe)},[Pe,Re]);return React.useLayoutEffect(()=>V.listen(ye),[V,ye]),React.createElement(Router,{basename:m,children:F,location:Ae.location,navigationType:Ae.action,navigator:V,future:ee})}const sn=typeof window!="undefined"&&typeof window.document!="undefined"&&typeof window.document.createElement!="undefined",an=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,ln=null,Nt=null,Zt=null;function Oe(y){let{getKey:m,storageKey:F}=y;return Ut({getKey:m,storageKey:F}),null}var ke;(function(y){y.UseScrollRestoration="useScrollRestoration",y.UseSubmit="useSubmit",y.UseSubmitFetcher="useSubmitFetcher",y.UseFetcher="useFetcher",y.useViewTransitionState="useViewTransitionState"})(ke||(ke={}));var nt;(function(y){y.UseFetcher="useFetcher",y.UseFetchers="useFetchers",y.UseScrollRestoration="useScrollRestoration"})(nt||(nt={}));function de(y){return y+" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router."}function C(y){let m=React.useContext(UNSAFE_DataRouterContext);return m||UNSAFE_invariant(!1),m}function Ee(y){let m=React.useContext(UNSAFE_DataRouterStateContext);return m||UNSAFE_invariant(!1),m}function De(y,m){let{target:F,replace:ee,state:V,preventScrollReset:Ae,relative:Pe,unstable_viewTransition:Re}=m===void 0?{}:m,ye=useNavigate(),pe=useLocation(),Se=useResolvedPath(y,{relative:Pe});return React.useCallback(Xe=>{if(O(Xe,F)){Xe.preventDefault();let pt=ee!==void 0?ee:createPath(pe)===createPath(Se);ye(y,{replace:pt,state:V,preventScrollReset:Ae,relative:Pe,unstable_viewTransition:Re})}},[pe,ye,Se,ee,V,F,y,Ae,Pe,Re])}function we(y){let m=React.useRef(ie(y)),F=React.useRef(!1),ee=useLocation(),V=React.useMemo(()=>J(ee.search,F.current?null:m.current),[ee.search]),Ae=useNavigate(),Pe=React.useCallback((Re,ye)=>{const pe=ie(typeof Re=="function"?Re(V):Re);F.current=!0,Ae("?"+pe,ye)},[Ae,V]);return[V,Pe]}function z(){if(typeof document=="undefined")throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.")}let Ce=0,lt=()=>"__"+String(++Ce)+"__";function at(){let{router:y}=C(ke.UseSubmit),{basename:m}=React.useContext(UNSAFE_NavigationContext),F=UNSAFE_useRouteId();return React.useCallback(function(ee,V){V===void 0&&(V={}),z();let{action:Ae,method:Pe,encType:Re,formData:ye,body:pe}=$(ee,m);if(V.navigate===!1){let Se=V.fetcherKey||lt();y.fetch(Se,F,V.action||Ae,{preventScrollReset:V.preventScrollReset,formData:ye,body:pe,formMethod:V.method||Pe,formEncType:V.encType||Re,unstable_flushSync:V.unstable_flushSync})}else y.navigate(V.action||Ae,{preventScrollReset:V.preventScrollReset,formData:ye,body:pe,formMethod:V.method||Pe,formEncType:V.encType||Re,replace:V.replace,state:V.state,fromRouteId:F,unstable_flushSync:V.unstable_flushSync,unstable_viewTransition:V.unstable_viewTransition})},[y,m,F])}function et(y,m){let{relative:F}=m===void 0?{}:m,{basename:ee}=React.useContext(UNSAFE_NavigationContext),V=React.useContext(UNSAFE_RouteContext);V||UNSAFE_invariant(!1);let[Ae]=V.matches.slice(-1),Pe=v({},useResolvedPath(y||".",{relative:F})),Re=useLocation();if(y==null){Pe.search=Re.search;let ye=new URLSearchParams(Pe.search);ye.has("index")&&ye.get("index")===""&&(ye.delete("index"),Pe.search=ye.toString()?"?"+ye.toString():"")}return(!y||y===".")&&Ae.route.index&&(Pe.search=Pe.search?Pe.search.replace(/^\?/,"?index&"):"?index"),ee!=="/"&&(Pe.pathname=Pe.pathname==="/"?ee:joinPaths([ee,Pe.pathname])),createPath(Pe)}function Ot(y){var m;let{key:F}=y===void 0?{}:y,{router:ee}=C(ke.UseFetcher),V=Ee(nt.UseFetcher),Ae=React.useContext(Te),Pe=React.useContext(UNSAFE_RouteContext),Re=(m=Pe.matches[Pe.matches.length-1])==null?void 0:m.route.id;Ae||UNSAFE_invariant(!1),Pe||UNSAFE_invariant(!1),Re==null&&UNSAFE_invariant(!1);let ye=bt?bt():"",[pe,Se]=React.useState(F||ye);F&&F!==pe?Se(F):pe||Se(lt()),React.useEffect(()=>(ee.getFetcher(pe),()=>{ee.deleteFetcher(pe)}),[ee,pe]);let Xe=React.useCallback((Ve,rt)=>{Re||UNSAFE_invariant(!1),ee.fetch(pe,Re,Ve,rt)},[pe,Re,ee]),pt=at(),kt=React.useCallback((Ve,rt)=>{pt(Ve,v({},rt,{navigate:!1,fetcherKey:pe}))},[pe,pt]),f=React.useMemo(()=>React.forwardRef((rt,tn)=>React.createElement(Zt,v({},rt,{navigate:!1,fetcherKey:pe,ref:tn}))),[pe]),X=V.fetchers.get(pe)||IDLE_FETCHER,xe=Ae.get(pe);return React.useMemo(()=>v({Form:f,submit:kt,load:Xe},X,{data:xe}),[f,kt,Xe,X,xe])}function ft(){let y=Ee(nt.UseFetchers);return Array.from(y.fetchers.entries()).map(m=>{let[F,ee]=m;return v({},ee,{key:F})})}const _t="react-router-scroll-positions";let Lt={};function Ut(y){let{getKey:m,storageKey:F}=y===void 0?{}:y,{router:ee}=C(ke.UseScrollRestoration),{restoreScrollPosition:V,preventScrollReset:Ae}=Ee(nt.UseScrollRestoration),{basename:Pe}=React.useContext(UNSAFE_NavigationContext),Re=useLocation(),ye=useMatches(),pe=useNavigation();React.useEffect(()=>(window.history.scrollRestoration="manual",()=>{window.history.scrollRestoration="auto"}),[]),mt(React.useCallback(()=>{if(pe.state==="idle"){let Se=(m?m(Re,ye):null)||Re.key;Lt[Se]=window.scrollY}try{sessionStorage.setItem(F||_t,JSON.stringify(Lt))}catch(Se){}window.history.scrollRestoration="auto"},[F,m,pe.state,Re,ye])),typeof document!="undefined"&&(React.useLayoutEffect(()=>{try{let Se=sessionStorage.getItem(F||_t);Se&&(Lt=JSON.parse(Se))}catch(Se){}},[F]),React.useLayoutEffect(()=>{let Se=m&&Pe!=="/"?(pt,kt)=>m(v({},pt,{pathname:stripBasename(pt.pathname,Pe)||pt.pathname}),kt):m,Xe=ee==null?void 0:ee.enableScrollRestoration(Lt,()=>window.scrollY,Se);return()=>Xe&&Xe()},[ee,Pe,m]),React.useLayoutEffect(()=>{if(V!==!1){if(typeof V=="number"){window.scrollTo(0,V);return}if(Re.hash){let Se=document.getElementById(decodeURIComponent(Re.hash.slice(1)));if(Se){Se.scrollIntoView();return}}Ae!==!0&&window.scrollTo(0,0)}},[Re,V,Ae]))}function $t(y,m){let{capture:F}=m||{};React.useEffect(()=>{let ee=F!=null?{capture:F}:void 0;return window.addEventListener("beforeunload",y,ee),()=>{window.removeEventListener("beforeunload",y,ee)}},[y,F])}function mt(y,m){let{capture:F}=m||{};React.useEffect(()=>{let ee=F!=null?{capture:F}:void 0;return window.addEventListener("pagehide",y,ee),()=>{window.removeEventListener("pagehide",y,ee)}},[y,F])}function G(y){let{when:m,message:F}=y,ee=useBlocker(m);React.useEffect(()=>{ee.state==="blocked"&&(window.confirm(F)?setTimeout(ee.proceed,0):ee.reset())},[ee,F]),React.useEffect(()=>{ee.state==="blocked"&&!m&&ee.reset()},[ee,m])}function Q(y,m){m===void 0&&(m={});let F=React.useContext(_e);F==null&&UNSAFE_invariant(!1);let{basename:ee}=C(ke.useViewTransitionState),V=useResolvedPath(y,{relative:m.relative});if(!F.isTransitioning)return!1;let Ae=stripBasename(F.currentLocation.pathname,ee)||F.currentLocation.pathname,Pe=stripBasename(F.nextLocation.pathname,ee)||F.nextLocation.pathname;return matchPath2(V.pathname,Pe)!=null||matchPath2(V.pathname,Ae)!=null}},8484:(he,R,e)=>{"use strict";var n;e.d(R,{Ix:()=>Ce,Rq:()=>g,Zp:()=>J,ph:()=>h,r5:()=>en,sp:()=>w,sv:()=>we,wE:()=>$t,zy:()=>H});var s=e(4999),t=e(8431);/**
 * React Router v6.23.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function T(){return T=Object.assign?Object.assign.bind():function(G){for(var Q=1;Q<arguments.length;Q++){var y=arguments[Q];for(var m in y)Object.prototype.hasOwnProperty.call(y,m)&&(G[m]=y[m])}return G},T.apply(this,arguments)}const w=s.createContext(null),g=s.createContext(null),d=s.createContext(null),v=s.createContext(null),L=s.createContext(null),j=s.createContext({outlet:null,matches:[],isDataRoute:!1}),k=s.createContext(null);function re(G,Q){let{relative:y}=Q===void 0?{}:Q;K()||UNSAFE_invariant(!1);let{basename:m,navigator:F}=React.useContext(v),{hash:ee,pathname:V,search:Ae}=P(G,{relative:y}),Pe=V;return m!=="/"&&(Pe=V==="/"?m:joinPaths([m,V])),F.createHref({pathname:Pe,search:Ae,hash:ee})}function K(){return s.useContext(L)!=null}function H(){return K()||(0,t.Oi)(!1),s.useContext(L).location}function W(){return React.useContext(L).navigationType}function B(G){K()||UNSAFE_invariant(!1);let{pathname:Q}=H();return React.useMemo(()=>matchPath(G,Q),[Q,G])}const O="You should call navigate() in a React.useEffect(), not when your component is first rendered.";function ie(G){s.useContext(v).static||s.useLayoutEffect(G)}function J(){let{isDataRoute:G}=s.useContext(j);return G?Nt():se()}function se(){K()||(0,t.Oi)(!1);let G=s.useContext(w),{basename:Q,future:y,navigator:m}=s.useContext(v),{matches:F}=s.useContext(j),{pathname:ee}=H(),V=JSON.stringify((0,t.yD)(F,y.v7_relativeSplatPath)),Ae=s.useRef(!1);return ie(()=>{Ae.current=!0}),s.useCallback(function(Re,ye){if(ye===void 0&&(ye={}),!Ae.current)return;if(typeof Re=="number"){m.go(Re);return}let pe=(0,t.Gh)(Re,JSON.parse(V),ee,ye.relative==="path");G==null&&Q!=="/"&&(pe.pathname=pe.pathname==="/"?Q:(0,t.HS)([Q,pe.pathname])),(ye.replace?m.replace:m.push)(pe,ye.state,ye)},[Q,m,V,ee,G])}const A=s.createContext(null);function M(){return React.useContext(A)}function _(G){let Q=s.useContext(j).outlet;return Q&&s.createElement(A.Provider,{value:G},Q)}function $(){let{matches:G}=React.useContext(j),Q=G[G.length-1];return Q?Q.params:{}}function P(G,Q){let{relative:y}=Q===void 0?{}:Q,{future:m}=React.useContext(v),{matches:F}=React.useContext(j),{pathname:ee}=H(),V=JSON.stringify(UNSAFE_getResolveToMatches(F,m.v7_relativeSplatPath));return React.useMemo(()=>resolveTo(G,JSON.parse(V),ee,y==="path"),[G,V,ee,y])}function c(G,Q){return h(G,Q)}function h(G,Q,y,m){K()||(0,t.Oi)(!1);let{navigator:F}=s.useContext(v),{matches:ee}=s.useContext(j),V=ee[ee.length-1],Ae=V?V.params:{},Pe=V?V.pathname:"/",Re=V?V.pathnameBase:"/",ye=V&&V.route,pe=H(),Se;if(Q){var Xe;let xe=typeof Q=="string"?(0,t.Rr)(Q):Q;Re==="/"||(Xe=xe.pathname)!=null&&Xe.startsWith(Re)||(0,t.Oi)(!1),Se=xe}else Se=pe;let pt=Se.pathname||"/",kt=pt;if(Re!=="/"){let xe=Re.replace(/^\//,"").split("/");kt="/"+pt.replace(/^\//,"").split("/").slice(xe.length).join("/")}let f=(0,t.ue)(G,{pathname:kt}),X=me(f&&f.map(xe=>Object.assign({},xe,{params:Object.assign({},Ae,xe.params),pathname:(0,t.HS)([Re,F.encodeLocation?F.encodeLocation(xe.pathname).pathname:xe.pathname]),pathnameBase:xe.pathnameBase==="/"?Re:(0,t.HS)([Re,F.encodeLocation?F.encodeLocation(xe.pathnameBase).pathname:xe.pathnameBase])})),ee,y,m);return Q&&X?s.createElement(L.Provider,{value:{location:T({pathname:"/",search:"",hash:"",state:null,key:"default"},Se),navigationType:t.rc.Pop}},X):X}function b(){let G=en(),Q=(0,t.pX)(G)?G.status+" "+G.statusText:G instanceof Error?G.message:JSON.stringify(G),y=G instanceof Error?G.stack:null,m="rgba(200,200,200, 0.5)",F={padding:"0.5rem",backgroundColor:m},ee={padding:"2px 4px",backgroundColor:m};return s.createElement(s.Fragment,null,s.createElement("h2",null,"Unexpected Application Error!"),s.createElement("h3",{style:{fontStyle:"italic"}},Q),y?s.createElement("pre",{style:F},y):null,null)}const N=s.createElement(b,null);class q extends s.Component{constructor(Q){super(Q),this.state={location:Q.location,revalidation:Q.revalidation,error:Q.error}}static getDerivedStateFromError(Q){return{error:Q}}static getDerivedStateFromProps(Q,y){return y.location!==Q.location||y.revalidation!=="idle"&&Q.revalidation==="idle"?{error:Q.error,location:Q.location,revalidation:Q.revalidation}:{error:Q.error!==void 0?Q.error:y.error,location:y.location,revalidation:Q.revalidation||y.revalidation}}componentDidCatch(Q,y){console.error("React Router caught the following error during render",Q,y)}render(){return this.state.error!==void 0?s.createElement(j.Provider,{value:this.props.routeContext},s.createElement(k.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Z(G){let{routeContext:Q,match:y,children:m}=G,F=s.useContext(w);return F&&F.static&&F.staticContext&&(y.route.errorElement||y.route.ErrorBoundary)&&(F.staticContext._deepestRenderedBoundaryId=y.route.id),s.createElement(j.Provider,{value:Q},m)}function me(G,Q,y,m){var F;if(Q===void 0&&(Q=[]),y===void 0&&(y=null),m===void 0&&(m=null),G==null){var ee;if((ee=y)!=null&&ee.errors)G=y.matches;else return null}let V=G,Ae=(F=y)==null?void 0:F.errors;if(Ae!=null){let ye=V.findIndex(pe=>pe.route.id&&(Ae==null?void 0:Ae[pe.route.id])!==void 0);ye>=0||(0,t.Oi)(!1),V=V.slice(0,Math.min(V.length,ye+1))}let Pe=!1,Re=-1;if(y&&m&&m.v7_partialHydration)for(let ye=0;ye<V.length;ye++){let pe=V[ye];if((pe.route.HydrateFallback||pe.route.hydrateFallbackElement)&&(Re=ye),pe.route.id){let{loaderData:Se,errors:Xe}=y,pt=pe.route.loader&&Se[pe.route.id]===void 0&&(!Xe||Xe[pe.route.id]===void 0);if(pe.route.lazy||pt){Pe=!0,Re>=0?V=V.slice(0,Re+1):V=[V[0]];break}}}return V.reduceRight((ye,pe,Se)=>{let Xe,pt=!1,kt=null,f=null;y&&(Xe=Ae&&pe.route.id?Ae[pe.route.id]:void 0,kt=pe.route.errorElement||N,Pe&&(Re<0&&Se===0?(Oe("route-fallback",!1,"No `HydrateFallback` element provided to render during initial hydration"),pt=!0,f=null):Re===Se&&(pt=!0,f=pe.route.hydrateFallbackElement||null)));let X=Q.concat(V.slice(0,Se+1)),xe=()=>{let ge;return Xe?ge=kt:pt?ge=f:pe.route.Component?ge=s.createElement(pe.route.Component,null):pe.route.element?ge=pe.route.element:ge=ye,s.createElement(Z,{match:pe,routeContext:{outlet:ye,matches:X,isDataRoute:y!=null},children:ge})};return y&&(pe.route.ErrorBoundary||pe.route.errorElement||Se===0)?s.createElement(q,{location:y.location,revalidation:y.revalidation,component:kt,error:Xe,children:xe(),routeContext:{outlet:null,matches:X,isDataRoute:!0}}):xe()},null)}var _e=function(G){return G.UseBlocker="useBlocker",G.UseRevalidator="useRevalidator",G.UseNavigateStable="useNavigate",G}(_e||{}),Te=function(G){return G.UseBlocker="useBlocker",G.UseLoaderData="useLoaderData",G.UseActionData="useActionData",G.UseRouteError="useRouteError",G.UseNavigation="useNavigation",G.UseRouteLoaderData="useRouteLoaderData",G.UseMatches="useMatches",G.UseRevalidator="useRevalidator",G.UseNavigateStable="useNavigate",G.UseRouteId="useRouteId",G}(Te||{});function Le(G){return G+" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router."}function Fe(G){let Q=s.useContext(w);return Q||(0,t.Oi)(!1),Q}function Ye(G){let Q=s.useContext(g);return Q||(0,t.Oi)(!1),Q}function ut(G){let Q=s.useContext(j);return Q||(0,t.Oi)(!1),Q}function It(G){let Q=ut(G),y=Q.matches[Q.matches.length-1];return y.route.id||(0,t.Oi)(!1),y.route.id}function bt(){return It(Te.UseRouteId)}function Et(){return Ye(Te.UseNavigation).navigation}function Ft(){let G=Fe(_e.UseRevalidator),Q=Ye(Te.UseRevalidator);return React.useMemo(()=>({revalidate:G.router.revalidate,state:Q.revalidation}),[G.router.revalidate,Q.revalidation])}function Pt(){let{matches:G,loaderData:Q}=Ye(Te.UseMatches);return React.useMemo(()=>G.map(y=>UNSAFE_convertRouteMatchToUiMatch(y,Q)),[G,Q])}function dt(){let G=Ye(Te.UseLoaderData),Q=It(Te.UseLoaderData);if(G.errors&&G.errors[Q]!=null){console.error("You cannot `useLoaderData` in an errorElement (routeId: "+Q+")");return}return G.loaderData[Q]}function Ue(G){return Ye(Te.UseRouteLoaderData).loaderData[G]}function Dt(){let G=Ye(Te.UseActionData),Q=It(Te.UseLoaderData);return G.actionData?G.actionData[Q]:void 0}function en(){var G;let Q=s.useContext(k),y=Ye(Te.UseRouteError),m=It(Te.UseRouteError);return Q!==void 0?Q:(G=y.errors)==null?void 0:G[m]}function Bt(){let G=React.useContext(d);return G==null?void 0:G._data}function sn(){let G=React.useContext(d);return G==null?void 0:G._error}let an=0;function ln(G){let{router:Q,basename:y}=Fe(_e.UseBlocker),m=Ye(Te.UseBlocker),[F,ee]=React.useState(""),V=React.useCallback(Ae=>{if(typeof G!="function")return!!G;if(y==="/")return G(Ae);let{currentLocation:Pe,nextLocation:Re,historyAction:ye}=Ae;return G({currentLocation:T({},Pe,{pathname:stripBasename(Pe.pathname,y)||Pe.pathname}),nextLocation:T({},Re,{pathname:stripBasename(Re.pathname,y)||Re.pathname}),historyAction:ye})},[y,G]);return React.useEffect(()=>{let Ae=String(++an);return ee(Ae),()=>Q.deleteBlocker(Ae)},[Q]),React.useEffect(()=>{F!==""&&Q.getBlocker(F,V)},[Q,F,V]),F&&m.blockers.has(F)?m.blockers.get(F):IDLE_BLOCKER}function Nt(){let{router:G}=Fe(_e.UseNavigateStable),Q=It(Te.UseNavigateStable),y=s.useRef(!1);return ie(()=>{y.current=!0}),s.useCallback(function(F,ee){ee===void 0&&(ee={}),y.current&&(typeof F=="number"?G.navigate(F):G.navigate(F,T({fromRouteId:Q},ee)))},[G,Q])}const Zt={};function Oe(G,Q,y){!Q&&!Zt[G]&&(Zt[G]=!0)}const nt=(n||(n=e.t(s,2)))["startTransition"];function de(G){let{fallbackElement:Q,router:y,future:m}=G,[F,ee]=React.useState(y.state),{v7_startTransition:V}=m||{},Ae=React.useCallback(pe=>{V&&nt?nt(()=>ee(pe)):ee(pe)},[ee,V]);React.useLayoutEffect(()=>y.subscribe(Ae),[y,Ae]),React.useEffect(()=>{},[]);let Pe=React.useMemo(()=>({createHref:y.createHref,encodeLocation:y.encodeLocation,go:pe=>y.navigate(pe),push:(pe,Se,Xe)=>y.navigate(pe,{state:Se,preventScrollReset:Xe==null?void 0:Xe.preventScrollReset}),replace:(pe,Se,Xe)=>y.navigate(pe,{replace:!0,state:Se,preventScrollReset:Xe==null?void 0:Xe.preventScrollReset})}),[y]),Re=y.basename||"/",ye=React.useMemo(()=>({router:y,navigator:Pe,static:!1,basename:Re}),[y,Pe,Re]);return React.createElement(React.Fragment,null,React.createElement(w.Provider,{value:ye},React.createElement(g.Provider,{value:F},React.createElement(Ce,{basename:Re,location:F.location,navigationType:F.historyAction,navigator:Pe,future:{v7_relativeSplatPath:y.future.v7_relativeSplatPath}},F.initialized||y.future.v7_partialHydration?React.createElement(C,{routes:y.routes,future:y.future,state:F}):Q))),null)}function C(G){let{routes:Q,future:y,state:m}=G;return h(Q,void 0,m,y)}function Ee(G){let{basename:Q,children:y,initialEntries:m,initialIndex:F,future:ee}=G,V=React.useRef();V.current==null&&(V.current=createMemoryHistory({initialEntries:m,initialIndex:F,v5Compat:!0}));let Ae=V.current,[Pe,Re]=React.useState({action:Ae.action,location:Ae.location}),{v7_startTransition:ye}=ee||{},pe=React.useCallback(Se=>{ye&&nt?nt(()=>Re(Se)):Re(Se)},[Re,ye]);return React.useLayoutEffect(()=>Ae.listen(pe),[Ae,pe]),React.createElement(Ce,{basename:Q,children:y,location:Pe.location,navigationType:Pe.action,navigator:Ae,future:ee})}function De(G){let{to:Q,replace:y,state:m,relative:F}=G;K()||UNSAFE_invariant(!1);let{future:ee,static:V}=React.useContext(v),{matches:Ae}=React.useContext(j),{pathname:Pe}=H(),Re=J(),ye=resolveTo(Q,UNSAFE_getResolveToMatches(Ae,ee.v7_relativeSplatPath),Pe,F==="path"),pe=JSON.stringify(ye);return React.useEffect(()=>Re(JSON.parse(pe),{replace:y,state:m,relative:F}),[Re,pe,F,y,m]),null}function we(G){return _(G.context)}function z(G){UNSAFE_invariant(!1)}function Ce(G){let{basename:Q="/",children:y=null,location:m,navigationType:F=t.rc.Pop,navigator:ee,static:V=!1,future:Ae}=G;K()&&(0,t.Oi)(!1);let Pe=Q.replace(/^\/*/,"/"),Re=s.useMemo(()=>({basename:Pe,navigator:ee,static:V,future:T({v7_relativeSplatPath:!1},Ae)}),[Pe,Ae,ee,V]);typeof m=="string"&&(m=(0,t.Rr)(m));let{pathname:ye="/",search:pe="",hash:Se="",state:Xe=null,key:pt="default"}=m,kt=s.useMemo(()=>{let f=(0,t.pb)(ye,Pe);return f==null?null:{location:{pathname:f,search:pe,hash:Se,state:Xe,key:pt},navigationType:F}},[Pe,ye,pe,Se,Xe,pt,F]);return kt==null?null:s.createElement(v.Provider,{value:Re},s.createElement(L.Provider,{children:y,value:kt}))}function lt(G){let{children:Q,location:y}=G;return c(Lt(Q),y)}function at(G){let{children:Q,errorElement:y,resolve:m}=G;return React.createElement(ft,{resolve:m,errorElement:y},React.createElement(_t,null,Q))}var et=function(G){return G[G.pending=0]="pending",G[G.success=1]="success",G[G.error=2]="error",G}(et||{});const Ot=new Promise(()=>{});class ft extends s.Component{constructor(Q){super(Q),this.state={error:null}}static getDerivedStateFromError(Q){return{error:Q}}componentDidCatch(Q,y){console.error("<Await> caught the following error during render",Q,y)}render(){let{children:Q,errorElement:y,resolve:m}=this.props,F=null,ee=et.pending;if(!(m instanceof Promise))ee=et.success,F=Promise.resolve(),Object.defineProperty(F,"_tracked",{get:()=>!0}),Object.defineProperty(F,"_data",{get:()=>m});else if(this.state.error){ee=et.error;let V=this.state.error;F=Promise.reject().catch(()=>{}),Object.defineProperty(F,"_tracked",{get:()=>!0}),Object.defineProperty(F,"_error",{get:()=>V})}else m._tracked?(F=m,ee="_error"in F?et.error:"_data"in F?et.success:et.pending):(ee=et.pending,Object.defineProperty(m,"_tracked",{get:()=>!0}),F=m.then(V=>Object.defineProperty(m,"_data",{get:()=>V}),V=>Object.defineProperty(m,"_error",{get:()=>V})));if(ee===et.error&&F._error instanceof t.tH)throw Ot;if(ee===et.error&&!y)throw F._error;if(ee===et.error)return s.createElement(d.Provider,{value:F,children:y});if(ee===et.success)return s.createElement(d.Provider,{value:F,children:Q});throw F}}function _t(G){let{children:Q}=G,y=Bt(),m=typeof Q=="function"?Q(y):Q;return React.createElement(React.Fragment,null,m)}function Lt(G,Q){Q===void 0&&(Q=[]);let y=[];return React.Children.forEach(G,(m,F)=>{if(!React.isValidElement(m))return;let ee=[...Q,F];if(m.type===React.Fragment){y.push.apply(y,Lt(m.props.children,ee));return}m.type!==z&&UNSAFE_invariant(!1),!m.props.index||!m.props.children||UNSAFE_invariant(!1);let V={id:m.props.id||ee.join("-"),caseSensitive:m.props.caseSensitive,element:m.props.element,Component:m.props.Component,index:m.props.index,path:m.props.path,loader:m.props.loader,action:m.props.action,errorElement:m.props.errorElement,ErrorBoundary:m.props.ErrorBoundary,hasErrorBoundary:m.props.ErrorBoundary!=null||m.props.errorElement!=null,shouldRevalidate:m.props.shouldRevalidate,handle:m.props.handle,lazy:m.props.lazy};m.props.children&&(V.children=Lt(m.props.children,ee)),y.push(V)}),y}function Ut(G){return me(G)}function $t(G){let Q={hasErrorBoundary:G.ErrorBoundary!=null||G.errorElement!=null};return G.Component&&Object.assign(Q,{element:s.createElement(G.Component),Component:void 0}),G.HydrateFallback&&Object.assign(Q,{hydrateFallbackElement:s.createElement(G.HydrateFallback),HydrateFallback:void 0}),G.ErrorBoundary&&Object.assign(Q,{errorElement:s.createElement(G.ErrorBoundary),ErrorBoundary:void 0}),Q}function mt(G,Q){return createRouter({basename:Q==null?void 0:Q.basename,future:T({},Q==null?void 0:Q.future,{v7_prependBasename:!0}),history:createMemoryHistory({initialEntries:Q==null?void 0:Q.initialEntries,initialIndex:Q==null?void 0:Q.initialIndex}),hydrationData:Q==null?void 0:Q.hydrationData,routes:G,mapRouteProperties:$t,unstable_dataStrategy:Q==null?void 0:Q.unstable_dataStrategy}).initialize()}},5954:(he,R,e)=>{"use strict";e.d(R,{Ay:()=>W});var n=e(1772),s=e(9691),t=e(4999),T=e(7874);const w={disabled:!1};var g=e(4578),d=function(O){return O.scrollTop},v="unmounted",L="exited",j="entering",k="entered",re="exiting",K=function(B){(0,s.A)(O,B);function O(J,se){var A;A=B.call(this,J,se)||this;var M=se,_=M&&!M.isMounting?J.enter:J.appear,$;return A.appearStatus=null,J.in?_?($=L,A.appearStatus=j):$=k:J.unmountOnExit||J.mountOnEnter?$=v:$=L,A.state={status:$},A.nextCallback=null,A}O.getDerivedStateFromProps=function(se,A){var M=se.in;return M&&A.status===v?{status:L}:null};var ie=O.prototype;return ie.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},ie.componentDidUpdate=function(se){var A=null;if(se!==this.props){var M=this.state.status;this.props.in?M!==j&&M!==k&&(A=j):(M===j||M===k)&&(A=re)}this.updateStatus(!1,A)},ie.componentWillUnmount=function(){this.cancelNextCallback()},ie.getTimeouts=function(){var se=this.props.timeout,A,M,_;return A=M=_=se,se!=null&&typeof se!="number"&&(A=se.exit,M=se.enter,_=se.appear!==void 0?se.appear:M),{exit:A,enter:M,appear:_}},ie.updateStatus=function(se,A){if(se===void 0&&(se=!1),A!==null)if(this.cancelNextCallback(),A===j){if(this.props.unmountOnExit||this.props.mountOnEnter){var M=this.props.nodeRef?this.props.nodeRef.current:T.findDOMNode(this);M&&d(M)}this.performEnter(se)}else this.performExit();else this.props.unmountOnExit&&this.state.status===L&&this.setState({status:v})},ie.performEnter=function(se){var A=this,M=this.props.enter,_=this.context?this.context.isMounting:se,$=this.props.nodeRef?[_]:[T.findDOMNode(this),_],P=$[0],c=$[1],h=this.getTimeouts(),b=_?h.appear:h.enter;if(!se&&!M||w.disabled){this.safeSetState({status:k},function(){A.props.onEntered(P)});return}this.props.onEnter(P,c),this.safeSetState({status:j},function(){A.props.onEntering(P,c),A.onTransitionEnd(b,function(){A.safeSetState({status:k},function(){A.props.onEntered(P,c)})})})},ie.performExit=function(){var se=this,A=this.props.exit,M=this.getTimeouts(),_=this.props.nodeRef?void 0:T.findDOMNode(this);if(!A||w.disabled){this.safeSetState({status:L},function(){se.props.onExited(_)});return}this.props.onExit(_),this.safeSetState({status:re},function(){se.props.onExiting(_),se.onTransitionEnd(M.exit,function(){se.safeSetState({status:L},function(){se.props.onExited(_)})})})},ie.cancelNextCallback=function(){this.nextCallback!==null&&(this.nextCallback.cancel(),this.nextCallback=null)},ie.safeSetState=function(se,A){A=this.setNextCallback(A),this.setState(se,A)},ie.setNextCallback=function(se){var A=this,M=!0;return this.nextCallback=function(_){M&&(M=!1,A.nextCallback=null,se(_))},this.nextCallback.cancel=function(){M=!1},this.nextCallback},ie.onTransitionEnd=function(se,A){this.setNextCallback(A);var M=this.props.nodeRef?this.props.nodeRef.current:T.findDOMNode(this),_=se==null&&!this.props.addEndListener;if(!M||_){setTimeout(this.nextCallback,0);return}if(this.props.addEndListener){var $=this.props.nodeRef?[this.nextCallback]:[M,this.nextCallback],P=$[0],c=$[1];this.props.addEndListener(P,c)}se!=null&&setTimeout(this.nextCallback,se)},ie.render=function(){var se=this.state.status;if(se===v)return null;var A=this.props,M=A.children,_=A.in,$=A.mountOnEnter,P=A.unmountOnExit,c=A.appear,h=A.enter,b=A.exit,N=A.timeout,q=A.addEndListener,Z=A.onEnter,me=A.onEntering,_e=A.onEntered,Te=A.onExit,Le=A.onExiting,Fe=A.onExited,Ye=A.nodeRef,ut=(0,n.A)(A,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]);return t.createElement(g.A.Provider,{value:null},typeof M=="function"?M(se,ut):t.cloneElement(t.Children.only(M),ut))},O}(t.Component);K.contextType=g.A,K.propTypes={};function H(){}K.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:H,onEntering:H,onEntered:H,onExit:H,onExiting:H,onExited:H},K.UNMOUNTED=v,K.EXITED=L,K.ENTERING=j,K.ENTERED=k,K.EXITING=re;const W=K},4578:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});var n=e(4999);const s=n.createContext(null)},2933:(he,R,e)=>{"use strict";/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=e(4999),s=Symbol.for("react.element"),t=Symbol.for("react.fragment"),T=Object.prototype.hasOwnProperty,w=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,g={key:!0,ref:!0,__self:!0,__source:!0};function d(v,L,j){var k,re={},K=null,H=null;j!==void 0&&(K=""+j),L.key!==void 0&&(K=""+L.key),L.ref!==void 0&&(H=L.ref);for(k in L)T.call(L,k)&&!g.hasOwnProperty(k)&&(re[k]=L[k]);if(v&&v.defaultProps)for(k in L=v.defaultProps,L)re[k]===void 0&&(re[k]=L[k]);return{$$typeof:s,type:v,key:K,ref:H,props:re,_owner:w.current}}R.Fragment=t,R.jsx=d,R.jsxs=d},7343:(he,R,e)=>{"use strict";he.exports=e(2933)},4491:he=>{function R(){return he.exports=R=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var s=arguments[n];for(var t in s)Object.prototype.hasOwnProperty.call(s,t)&&(e[t]=s[t])}return e},he.exports.__esModule=!0,he.exports.default=he.exports,R.apply(this,arguments)}he.exports=R,he.exports.__esModule=!0,he.exports.default=he.exports},5303:he=>{function R(e){return e&&e.__esModule?e:{default:e}}he.exports=R,he.exports.__esModule=!0,he.exports.default=he.exports},1778:he=>{function R(e,n){if(e==null)return{};var s={};for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)){if(n.indexOf(t)>=0)continue;s[t]=e[t]}return s}he.exports=R,he.exports.__esModule=!0,he.exports.default=he.exports},4367:(he,R)=>{var e,n;/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/(function(){"use strict";var s={}.hasOwnProperty;function t(){for(var g="",d=0;d<arguments.length;d++){var v=arguments[d];v&&(g=w(g,T(v)))}return g}function T(g){if(typeof g=="string"||typeof g=="number")return g;if(typeof g!="object")return"";if(Array.isArray(g))return t.apply(null,g);if(g.toString!==Object.prototype.toString&&!g.toString.toString().includes("[native code]"))return g.toString();var d="";for(var v in g)s.call(g,v)&&g[v]&&(d=w(d,v));return d}function w(g,d){return d?g?g+" "+d:g+d:g}he.exports?(t.default=t,he.exports=t):(e=[],n=function(){return t}.apply(R,e),n!==void 0&&(he.exports=n))})()},4164:(he,R,e)=>{"use strict";e.d(R,{A:()=>t});function n(T){var w,g,d="";if(typeof T=="string"||typeof T=="number")d+=T;else if(typeof T=="object")if(Array.isArray(T)){var v=T.length;for(w=0;w<v;w++)T[w]&&(g=n(T[w]))&&(d&&(d+=" "),d+=g)}else for(g in T)T[g]&&(d&&(d+=" "),d+=g);return d}function s(){for(var T,w,g=0,d="",v=arguments.length;g<v;g++)(T=arguments[g])&&(w=n(T))&&(d&&(d+=" "),d+=w);return d}const t=s},8733:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(){return n=Object.assign?Object.assign.bind():function(s){for(var t=1;t<arguments.length;t++){var T=arguments[t];for(var w in T)Object.prototype.hasOwnProperty.call(T,w)&&(s[w]=T[w])}return s},n.apply(this,arguments)}},9691:(he,R,e)=>{"use strict";e.d(R,{A:()=>s});function n(t,T){return n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(g,d){return g.__proto__=d,g},n(t,T)}function s(t,T){t.prototype=Object.create(T.prototype),t.prototype.constructor=t,n(t,T)}},1772:(he,R,e)=>{"use strict";e.d(R,{A:()=>n});function n(s,t){if(s==null)return{};var T={};for(var w in s)if(Object.prototype.hasOwnProperty.call(s,w)){if(t.indexOf(w)>=0)continue;T[w]=s[w]}return T}},9393:(he,R,e)=>{"use strict";e.d(R,{A:()=>br});var n={};e.r(n),e.d(n,{hasBrowserEnv:()=>ye,hasStandardBrowserEnv:()=>pe,hasStandardBrowserWebWorkerEnv:()=>Se});function s(r,a){return function(){return r.apply(a,arguments)}}const{toString:t}=Object.prototype,{getPrototypeOf:T}=Object,w=(r=>a=>{const u=t.call(a);return r[u]||(r[u]=u.slice(8,-1).toLowerCase())})(Object.create(null)),g=r=>(r=r.toLowerCase(),a=>w(a)===r),d=r=>a=>typeof a===r,{isArray:v}=Array,L=d("undefined");function j(r){return r!==null&&!L(r)&&r.constructor!==null&&!L(r.constructor)&&H(r.constructor.isBuffer)&&r.constructor.isBuffer(r)}const k=g("ArrayBuffer");function re(r){let a;return typeof ArrayBuffer!="undefined"&&ArrayBuffer.isView?a=ArrayBuffer.isView(r):a=r&&r.buffer&&k(r.buffer),a}const K=d("string"),H=d("function"),W=d("number"),B=r=>r!==null&&typeof r=="object",O=r=>r===!0||r===!1,ie=r=>{if(w(r)!=="object")return!1;const a=T(r);return(a===null||a===Object.prototype||Object.getPrototypeOf(a)===null)&&!(Symbol.toStringTag in r)&&!(Symbol.iterator in r)},J=g("Date"),se=g("File"),A=g("Blob"),M=g("FileList"),_=r=>B(r)&&H(r.pipe),$=r=>{let a;return r&&(typeof FormData=="function"&&r instanceof FormData||H(r.append)&&((a=w(r))==="formdata"||a==="object"&&H(r.toString)&&r.toString()==="[object FormData]"))},P=g("URLSearchParams"),c=r=>r.trim?r.trim():r.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function h(r,a,{allOwnKeys:u=!1}={}){if(r===null||typeof r=="undefined")return;let x,Y;if(typeof r!="object"&&(r=[r]),v(r))for(x=0,Y=r.length;x<Y;x++)a.call(null,r[x],x,r);else{const oe=u?Object.getOwnPropertyNames(r):Object.keys(r),ae=oe.length;let We;for(x=0;x<ae;x++)We=oe[x],a.call(null,r[We],We,r)}}function b(r,a){a=a.toLowerCase();const u=Object.keys(r);let x=u.length,Y;for(;x-- >0;)if(Y=u[x],a===Y.toLowerCase())return Y;return null}const N=typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:global,q=r=>!L(r)&&r!==N;function Z(){const{caseless:r}=q(this)&&this||{},a={},u=(x,Y)=>{const oe=r&&b(a,Y)||Y;ie(a[oe])&&ie(x)?a[oe]=Z(a[oe],x):ie(x)?a[oe]=Z({},x):v(x)?a[oe]=x.slice():a[oe]=x};for(let x=0,Y=arguments.length;x<Y;x++)arguments[x]&&h(arguments[x],u);return a}const me=(r,a,u,{allOwnKeys:x}={})=>(h(a,(Y,oe)=>{u&&H(Y)?r[oe]=s(Y,u):r[oe]=Y},{allOwnKeys:x}),r),_e=r=>(r.charCodeAt(0)===65279&&(r=r.slice(1)),r),Te=(r,a,u,x)=>{r.prototype=Object.create(a.prototype,x),r.prototype.constructor=r,Object.defineProperty(r,"super",{value:a.prototype}),u&&Object.assign(r.prototype,u)},Le=(r,a,u,x)=>{let Y,oe,ae;const We={};if(a=a||{},r==null)return a;do{for(Y=Object.getOwnPropertyNames(r),oe=Y.length;oe-- >0;)ae=Y[oe],(!x||x(ae,r,a))&&!We[ae]&&(a[ae]=r[ae],We[ae]=!0);r=u!==!1&&T(r)}while(r&&(!u||u(r,a))&&r!==Object.prototype);return a},Fe=(r,a,u)=>{r=String(r),(u===void 0||u>r.length)&&(u=r.length),u-=a.length;const x=r.indexOf(a,u);return x!==-1&&x===u},Ye=r=>{if(!r)return null;if(v(r))return r;let a=r.length;if(!W(a))return null;const u=new Array(a);for(;a-- >0;)u[a]=r[a];return u},ut=(r=>a=>r&&a instanceof r)(typeof Uint8Array!="undefined"&&T(Uint8Array)),It=(r,a)=>{const x=(r&&r[Symbol.iterator]).call(r);let Y;for(;(Y=x.next())&&!Y.done;){const oe=Y.value;a.call(r,oe[0],oe[1])}},bt=(r,a)=>{let u;const x=[];for(;(u=r.exec(a))!==null;)x.push(u);return x},Et=g("HTMLFormElement"),Ft=r=>r.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(u,x,Y){return x.toUpperCase()+Y}),Pt=(({hasOwnProperty:r})=>(a,u)=>r.call(a,u))(Object.prototype),dt=g("RegExp"),Ue=(r,a)=>{const u=Object.getOwnPropertyDescriptors(r),x={};h(u,(Y,oe)=>{let ae;(ae=a(Y,oe,r))!==!1&&(x[oe]=ae||Y)}),Object.defineProperties(r,x)},Dt=r=>{Ue(r,(a,u)=>{if(H(r)&&["arguments","caller","callee"].indexOf(u)!==-1)return!1;const x=r[u];if(H(x)){if(a.enumerable=!1,"writable"in a){a.writable=!1;return}a.set||(a.set=()=>{throw Error("Can not rewrite read-only method '"+u+"'")})}})},en=(r,a)=>{const u={},x=Y=>{Y.forEach(oe=>{u[oe]=!0})};return v(r)?x(r):x(String(r).split(a)),u},Bt=()=>{},sn=(r,a)=>(r=+r,Number.isFinite(r)?r:a),an="abcdefghijklmnopqrstuvwxyz",ln="0123456789",Nt={DIGIT:ln,ALPHA:an,ALPHA_DIGIT:an+an.toUpperCase()+ln},Zt=(r=16,a=Nt.ALPHA_DIGIT)=>{let u="";const{length:x}=a;for(;r--;)u+=a[Math.random()*x|0];return u};function Oe(r){return!!(r&&H(r.append)&&r[Symbol.toStringTag]==="FormData"&&r[Symbol.iterator])}const ke=r=>{const a=new Array(10),u=(x,Y)=>{if(B(x)){if(a.indexOf(x)>=0)return;if(!("toJSON"in x)){a[Y]=x;const oe=v(x)?[]:{};return h(x,(ae,We)=>{const At=u(ae,Y+1);!L(At)&&(oe[We]=At)}),a[Y]=void 0,oe}}return x};return u(r,0)},nt=g("AsyncFunction"),C={isArray:v,isArrayBuffer:k,isBuffer:j,isFormData:$,isArrayBufferView:re,isString:K,isNumber:W,isBoolean:O,isObject:B,isPlainObject:ie,isUndefined:L,isDate:J,isFile:se,isBlob:A,isRegExp:dt,isFunction:H,isStream:_,isURLSearchParams:P,isTypedArray:ut,isFileList:M,forEach:h,merge:Z,extend:me,trim:c,stripBOM:_e,inherits:Te,toFlatObject:Le,kindOf:w,kindOfTest:g,endsWith:Fe,toArray:Ye,forEachEntry:It,matchAll:bt,isHTMLForm:Et,hasOwnProperty:Pt,hasOwnProp:Pt,reduceDescriptors:Ue,freezeMethods:Dt,toObjectSet:en,toCamelCase:Ft,noop:Bt,toFiniteNumber:sn,findKey:b,global:N,isContextDefined:q,ALPHABET:Nt,generateString:Zt,isSpecCompliantForm:Oe,toJSONObject:ke,isAsyncFn:nt,isThenable:r=>r&&(B(r)||H(r))&&H(r.then)&&H(r.catch)};function Ee(r,a,u,x,Y){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=r,this.name="AxiosError",a&&(this.code=a),u&&(this.config=u),x&&(this.request=x),Y&&(this.response=Y)}C.inherits(Ee,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:C.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const De=Ee.prototype,we={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(r=>{we[r]={value:r}}),Object.defineProperties(Ee,we),Object.defineProperty(De,"isAxiosError",{value:!0}),Ee.from=(r,a,u,x,Y,oe)=>{const ae=Object.create(De);return C.toFlatObject(r,ae,function(At){return At!==Error.prototype},We=>We!=="isAxiosError"),Ee.call(ae,r.message,a,u,x,Y),ae.cause=r,ae.name=r.name,oe&&Object.assign(ae,oe),ae};const z=Ee,Ce=null;function lt(r){return C.isPlainObject(r)||C.isArray(r)}function at(r){return C.endsWith(r,"[]")?r.slice(0,-2):r}function et(r,a,u){return r?r.concat(a).map(function(Y,oe){return Y=at(Y),!u&&oe?"["+Y+"]":Y}).join(u?".":""):a}function Ot(r){return C.isArray(r)&&!r.some(lt)}const ft=C.toFlatObject(C,{},null,function(a){return/^is[A-Z]/.test(a)});function _t(r,a,u){if(!C.isObject(r))throw new TypeError("target must be an object");a=a||new(Ce||FormData),u=C.toFlatObject(u,{metaTokens:!0,dots:!1,indexes:!1},!1,function(Mt,Nn){return!C.isUndefined(Nn[Mt])});const x=u.metaTokens,Y=u.visitor||St,oe=u.dots,ae=u.indexes,At=(u.Blob||typeof Blob!="undefined"&&Blob)&&C.isSpecCompliantForm(a);if(!C.isFunction(Y))throw new TypeError("visitor must be a function");function wt(xt){if(xt===null)return"";if(C.isDate(xt))return xt.toISOString();if(!At&&C.isBlob(xt))throw new z("Blob is not supported. Use a Buffer instead.");return C.isArrayBuffer(xt)||C.isTypedArray(xt)?At&&typeof Blob=="function"?new Blob([xt]):Buffer.from(xt):xt}function St(xt,Mt,Nn){let zn=xt;if(xt&&!Nn&&typeof xt=="object"){if(C.endsWith(Mt,"{}"))Mt=x?Mt:Mt.slice(0,-2),xt=JSON.stringify(xt);else if(C.isArray(xt)&&Ot(xt)||(C.isFileList(xt)||C.endsWith(Mt,"[]"))&&(zn=C.toArray(xt)))return Mt=at(Mt),zn.forEach(function(ar,Lr){!(C.isUndefined(ar)||ar===null)&&a.append(ae===!0?et([Mt],Lr,oe):ae===null?Mt:Mt+"[]",wt(ar))}),!1}return lt(xt)?!0:(a.append(et(Nn,Mt,oe),wt(xt)),!1)}const qe=[],Bn=Object.assign(ft,{defaultVisitor:St,convertValue:wt,isVisitable:lt});function Jn(xt,Mt){if(!C.isUndefined(xt)){if(qe.indexOf(xt)!==-1)throw Error("Circular reference detected in "+Mt.join("."));qe.push(xt),C.forEach(xt,function(zn,Kn){(!(C.isUndefined(zn)||zn===null)&&Y.call(a,zn,C.isString(Kn)?Kn.trim():Kn,Mt,Bn))===!0&&Jn(zn,Mt?Mt.concat(Kn):[Kn])}),qe.pop()}}if(!C.isObject(r))throw new TypeError("data must be an object");return Jn(r),a}const Lt=_t;function Ut(r){const a={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(r).replace(/[!'()~]|%20|%00/g,function(x){return a[x]})}function $t(r,a){this._pairs=[],r&&Lt(r,this,a)}const mt=$t.prototype;mt.append=function(a,u){this._pairs.push([a,u])},mt.toString=function(a){const u=a?function(x){return a.call(this,x,Ut)}:Ut;return this._pairs.map(function(Y){return u(Y[0])+"="+u(Y[1])},"").join("&")};const G=$t;function Q(r){return encodeURIComponent(r).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function y(r,a,u){if(!a)return r;const x=u&&u.encode||Q,Y=u&&u.serialize;let oe;if(Y?oe=Y(a,u):oe=C.isURLSearchParams(a)?a.toString():new G(a,u).toString(x),oe){const ae=r.indexOf("#");ae!==-1&&(r=r.slice(0,ae)),r+=(r.indexOf("?")===-1?"?":"&")+oe}return r}class m{constructor(){this.handlers=[]}use(a,u,x){return this.handlers.push({fulfilled:a,rejected:u,synchronous:x?x.synchronous:!1,runWhen:x?x.runWhen:null}),this.handlers.length-1}eject(a){this.handlers[a]&&(this.handlers[a]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(a){C.forEach(this.handlers,function(x){x!==null&&a(x)})}}const F=m,ee={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Re={isBrowser:!0,classes:{URLSearchParams:typeof URLSearchParams!="undefined"?URLSearchParams:G,FormData:typeof FormData!="undefined"?FormData:null,Blob:typeof Blob!="undefined"?Blob:null},protocols:["http","https","file","blob","url","data"]},ye=typeof window!="undefined"&&typeof document!="undefined",pe=(r=>ye&&["ReactNative","NativeScript","NS"].indexOf(r)<0)(typeof navigator!="undefined"&&navigator.product),Se=typeof WorkerGlobalScope!="undefined"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function";var Xe=Object.defineProperty,pt=Object.getOwnPropertySymbols,kt=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable,X=(r,a,u)=>a in r?Xe(r,a,{enumerable:!0,configurable:!0,writable:!0,value:u}):r[a]=u,xe=(r,a)=>{for(var u in a||(a={}))kt.call(a,u)&&X(r,u,a[u]);if(pt)for(var u of pt(a))f.call(a,u)&&X(r,u,a[u]);return r};const ge=xe(xe({},n),Re);function Ve(r,a){return Lt(r,new ge.classes.URLSearchParams,Object.assign({visitor:function(u,x,Y,oe){return ge.isNode&&C.isBuffer(u)?(this.append(x,u.toString("base64")),!1):oe.defaultVisitor.apply(this,arguments)}},a))}function rt(r){return C.matchAll(/\w+|\[(\w*)]/g,r).map(a=>a[0]==="[]"?"":a[1]||a[0])}function tn(r){const a={},u=Object.keys(r);let x;const Y=u.length;let oe;for(x=0;x<Y;x++)oe=u[x],a[oe]=r[oe];return a}function zt(r){function a(u,x,Y,oe){let ae=u[oe++];if(ae==="__proto__")return!0;const We=Number.isFinite(+ae),At=oe>=u.length;return ae=!ae&&C.isArray(Y)?Y.length:ae,At?(C.hasOwnProp(Y,ae)?Y[ae]=[Y[ae],x]:Y[ae]=x,!We):((!Y[ae]||!C.isObject(Y[ae]))&&(Y[ae]=[]),a(u,x,Y[ae],oe)&&C.isArray(Y[ae])&&(Y[ae]=tn(Y[ae])),!We)}if(C.isFormData(r)&&C.isFunction(r.entries)){const u={};return C.forEachEntry(r,(x,Y)=>{a(rt(x),Y,u,0)}),u}return null}const un=zt;function Kt(r,a,u){if(C.isString(r))try{return(a||JSON.parse)(r),C.trim(r)}catch(x){if(x.name!=="SyntaxError")throw x}return(u||JSON.stringify)(r)}const Yt={transitional:ee,adapter:["xhr","http"],transformRequest:[function(a,u){const x=u.getContentType()||"",Y=x.indexOf("application/json")>-1,oe=C.isObject(a);if(oe&&C.isHTMLForm(a)&&(a=new FormData(a)),C.isFormData(a))return Y?JSON.stringify(un(a)):a;if(C.isArrayBuffer(a)||C.isBuffer(a)||C.isStream(a)||C.isFile(a)||C.isBlob(a))return a;if(C.isArrayBufferView(a))return a.buffer;if(C.isURLSearchParams(a))return u.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),a.toString();let We;if(oe){if(x.indexOf("application/x-www-form-urlencoded")>-1)return Ve(a,this.formSerializer).toString();if((We=C.isFileList(a))||x.indexOf("multipart/form-data")>-1){const At=this.env&&this.env.FormData;return Lt(We?{"files[]":a}:a,At&&new At,this.formSerializer)}}return oe||Y?(u.setContentType("application/json",!1),Kt(a)):a}],transformResponse:[function(a){const u=this.transitional||Yt.transitional,x=u&&u.forcedJSONParsing,Y=this.responseType==="json";if(a&&C.isString(a)&&(x&&!this.responseType||Y)){const ae=!(u&&u.silentJSONParsing)&&Y;try{return JSON.parse(a)}catch(We){if(ae)throw We.name==="SyntaxError"?z.from(We,z.ERR_BAD_RESPONSE,this,null,this.response):We}}return a}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ge.classes.FormData,Blob:ge.classes.Blob},validateStatus:function(a){return a>=200&&a<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};C.forEach(["delete","get","head","post","put","patch"],r=>{Yt.headers[r]={}});const rn=Yt,jt=C.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),bn=r=>{const a={};let u,x,Y;return r&&r.split(`
`).forEach(function(ae){Y=ae.indexOf(":"),u=ae.substring(0,Y).trim().toLowerCase(),x=ae.substring(Y+1).trim(),!(!u||a[u]&&jt[u])&&(u==="set-cookie"?a[u]?a[u].push(x):a[u]=[x]:a[u]=a[u]?a[u]+", "+x:x)}),a},An=Symbol("internals");function nn(r){return r&&String(r).trim().toLowerCase()}function On(r){return r===!1||r==null?r:C.isArray(r)?r.map(On):String(r)}function Pn(r){const a=Object.create(null),u=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let x;for(;x=u.exec(r);)a[x[1]]=x[2];return a}const xn=r=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(r.trim());function pn(r,a,u,x,Y){if(C.isFunction(x))return x.call(this,a,u);if(Y&&(a=u),!!C.isString(a)){if(C.isString(x))return a.indexOf(x)!==-1;if(C.isRegExp(x))return x.test(a)}}function jn(r){return r.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(a,u,x)=>u.toUpperCase()+x)}function qn(r,a){const u=C.toCamelCase(" "+a);["get","set","has"].forEach(x=>{Object.defineProperty(r,x+u,{value:function(Y,oe,ae){return this[x].call(this,a,Y,oe,ae)},configurable:!0})})}class wn{constructor(a){a&&this.set(a)}set(a,u,x){const Y=this;function oe(We,At,wt){const St=nn(At);if(!St)throw new Error("header name must be a non-empty string");const qe=C.findKey(Y,St);(!qe||Y[qe]===void 0||wt===!0||wt===void 0&&Y[qe]!==!1)&&(Y[qe||At]=On(We))}const ae=(We,At)=>C.forEach(We,(wt,St)=>oe(wt,St,At));return C.isPlainObject(a)||a instanceof this.constructor?ae(a,u):C.isString(a)&&(a=a.trim())&&!xn(a)?ae(bn(a),u):a!=null&&oe(u,a,x),this}get(a,u){if(a=nn(a),a){const x=C.findKey(this,a);if(x){const Y=this[x];if(!u)return Y;if(u===!0)return Pn(Y);if(C.isFunction(u))return u.call(this,Y,x);if(C.isRegExp(u))return u.exec(Y);throw new TypeError("parser must be boolean|regexp|function")}}}has(a,u){if(a=nn(a),a){const x=C.findKey(this,a);return!!(x&&this[x]!==void 0&&(!u||pn(this,this[x],x,u)))}return!1}delete(a,u){const x=this;let Y=!1;function oe(ae){if(ae=nn(ae),ae){const We=C.findKey(x,ae);We&&(!u||pn(x,x[We],We,u))&&(delete x[We],Y=!0)}}return C.isArray(a)?a.forEach(oe):oe(a),Y}clear(a){const u=Object.keys(this);let x=u.length,Y=!1;for(;x--;){const oe=u[x];(!a||pn(this,this[oe],oe,a,!0))&&(delete this[oe],Y=!0)}return Y}normalize(a){const u=this,x={};return C.forEach(this,(Y,oe)=>{const ae=C.findKey(x,oe);if(ae){u[ae]=On(Y),delete u[oe];return}const We=a?jn(oe):String(oe).trim();We!==oe&&delete u[oe],u[We]=On(Y),x[We]=!0}),this}concat(...a){return this.constructor.concat(this,...a)}toJSON(a){const u=Object.create(null);return C.forEach(this,(x,Y)=>{x!=null&&x!==!1&&(u[Y]=a&&C.isArray(x)?x.join(", "):x)}),u}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([a,u])=>a+": "+u).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(a){return a instanceof this?a:new this(a)}static concat(a,...u){const x=new this(a);return u.forEach(Y=>x.set(Y)),x}static accessor(a){const x=(this[An]=this[An]={accessors:{}}).accessors,Y=this.prototype;function oe(ae){const We=nn(ae);x[We]||(qn(Y,ae),x[We]=!0)}return C.isArray(a)?a.forEach(oe):oe(a),this}}wn.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),C.reduceDescriptors(wn.prototype,({value:r},a)=>{let u=a[0].toUpperCase()+a.slice(1);return{get:()=>r,set(x){this[u]=x}}}),C.freezeMethods(wn);const on=wn;function rr(r,a){const u=this||rn,x=a||u,Y=on.from(x.headers);let oe=x.data;return C.forEach(r,function(We){oe=We.call(u,oe,Y.normalize(),a?a.status:void 0)}),Y.normalize(),oe}function $n(r){return!!(r&&r.__CANCEL__)}function ur(r,a,u){z.call(this,r==null?"canceled":r,z.ERR_CANCELED,a,u),this.name="CanceledError"}C.inherits(ur,z,{__CANCEL__:!0});const er=ur;function or(r,a,u){const x=u.config.validateStatus;!u.status||!x||x(u.status)?r(u):a(new z("Request failed with status code "+u.status,[z.ERR_BAD_REQUEST,z.ERR_BAD_RESPONSE][Math.floor(u.status/100)-4],u.config,u.request,u))}const ir=ge.hasStandardBrowserEnv?{write(r,a,u,x,Y,oe){const ae=[r+"="+encodeURIComponent(a)];C.isNumber(u)&&ae.push("expires="+new Date(u).toGMTString()),C.isString(x)&&ae.push("path="+x),C.isString(Y)&&ae.push("domain="+Y),oe===!0&&ae.push("secure"),document.cookie=ae.join("; ")},read(r){const a=document.cookie.match(new RegExp("(^|;\\s*)("+r+")=([^;]*)"));return a?decodeURIComponent(a[3]):null},remove(r){this.write(r,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function pr(r){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(r)}function gr(r,a){return a?r.replace(/\/?\/$/,"")+"/"+a.replace(/^\/+/,""):r}function Jt(r,a){return r&&!pr(a)?gr(r,a):a}const lr=ge.hasStandardBrowserEnv?function(){const a=/(msie|trident)/i.test(navigator.userAgent),u=document.createElement("a");let x;function Y(oe){let ae=oe;return a&&(u.setAttribute("href",ae),ae=u.href),u.setAttribute("href",ae),{href:u.href,protocol:u.protocol?u.protocol.replace(/:$/,""):"",host:u.host,search:u.search?u.search.replace(/^\?/,""):"",hash:u.hash?u.hash.replace(/^#/,""):"",hostname:u.hostname,port:u.port,pathname:u.pathname.charAt(0)==="/"?u.pathname:"/"+u.pathname}}return x=Y(window.location.href),function(ae){const We=C.isString(ae)?Y(ae):ae;return We.protocol===x.protocol&&We.host===x.host}}():function(){return function(){return!0}}();function hr(r){const a=/^([-+\w]{1,25})(:?\/\/|:)/.exec(r);return a&&a[1]||""}function Xn(r,a){r=r||10;const u=new Array(r),x=new Array(r);let Y=0,oe=0,ae;return a=a!==void 0?a:1e3,function(At){const wt=Date.now(),St=x[oe];ae||(ae=wt),u[Y]=At,x[Y]=wt;let qe=oe,Bn=0;for(;qe!==Y;)Bn+=u[qe++],qe=qe%r;if(Y=(Y+1)%r,Y===oe&&(oe=(oe+1)%r),wt-ae<a)return;const Jn=St&&wt-St;return Jn?Math.round(Bn*1e3/Jn):void 0}}const Or=Xn;function xr(r,a){let u=0;const x=Or(50,250);return Y=>{const oe=Y.loaded,ae=Y.lengthComputable?Y.total:void 0,We=oe-u,At=x(We),wt=oe<=ae;u=oe;const St={loaded:oe,total:ae,progress:ae?oe/ae:void 0,bytes:We,rate:At||void 0,estimated:At&&ae&&wt?(ae-oe)/At:void 0,event:Y};St[a?"download":"upload"]=!0,r(St)}}const p={http:Ce,xhr:typeof XMLHttpRequest!="undefined"&&function(r){return new Promise(function(u,x){let Y=r.data;const oe=on.from(r.headers).normalize();let{responseType:ae,withXSRFToken:We}=r,At;function wt(){r.cancelToken&&r.cancelToken.unsubscribe(At),r.signal&&r.signal.removeEventListener("abort",At)}let St;if(C.isFormData(Y)){if(ge.hasStandardBrowserEnv||ge.hasStandardBrowserWebWorkerEnv)oe.setContentType(!1);else if((St=oe.getContentType())!==!1){const[Mt,...Nn]=St?St.split(";").map(zn=>zn.trim()).filter(Boolean):[];oe.setContentType([Mt||"multipart/form-data",...Nn].join("; "))}}let qe=new XMLHttpRequest;if(r.auth){const Mt=r.auth.username||"",Nn=r.auth.password?unescape(encodeURIComponent(r.auth.password)):"";oe.set("Authorization","Basic "+btoa(Mt+":"+Nn))}const Bn=Jt(r.baseURL,r.url);qe.open(r.method.toUpperCase(),y(Bn,r.params,r.paramsSerializer),!0),qe.timeout=r.timeout;function Jn(){if(!qe)return;const Mt=on.from("getAllResponseHeaders"in qe&&qe.getAllResponseHeaders()),zn={data:!ae||ae==="text"||ae==="json"?qe.responseText:qe.response,status:qe.status,statusText:qe.statusText,headers:Mt,config:r,request:qe};or(function(ar){u(ar),wt()},function(ar){x(ar),wt()},zn),qe=null}if("onloadend"in qe?qe.onloadend=Jn:qe.onreadystatechange=function(){!qe||qe.readyState!==4||qe.status===0&&!(qe.responseURL&&qe.responseURL.indexOf("file:")===0)||setTimeout(Jn)},qe.onabort=function(){qe&&(x(new z("Request aborted",z.ECONNABORTED,r,qe)),qe=null)},qe.onerror=function(){x(new z("Network Error",z.ERR_NETWORK,r,qe)),qe=null},qe.ontimeout=function(){let Nn=r.timeout?"timeout of "+r.timeout+"ms exceeded":"timeout exceeded";const zn=r.transitional||ee;r.timeoutErrorMessage&&(Nn=r.timeoutErrorMessage),x(new z(Nn,zn.clarifyTimeoutError?z.ETIMEDOUT:z.ECONNABORTED,r,qe)),qe=null},ge.hasStandardBrowserEnv&&(We&&C.isFunction(We)&&(We=We(r)),We||We!==!1&&lr(Bn))){const Mt=r.xsrfHeaderName&&r.xsrfCookieName&&ir.read(r.xsrfCookieName);Mt&&oe.set(r.xsrfHeaderName,Mt)}Y===void 0&&oe.setContentType(null),"setRequestHeader"in qe&&C.forEach(oe.toJSON(),function(Nn,zn){qe.setRequestHeader(zn,Nn)}),C.isUndefined(r.withCredentials)||(qe.withCredentials=!!r.withCredentials),ae&&ae!=="json"&&(qe.responseType=r.responseType),typeof r.onDownloadProgress=="function"&&qe.addEventListener("progress",xr(r.onDownloadProgress,!0)),typeof r.onUploadProgress=="function"&&qe.upload&&qe.upload.addEventListener("progress",xr(r.onUploadProgress)),(r.cancelToken||r.signal)&&(At=Mt=>{qe&&(x(!Mt||Mt.type?new er(null,r,qe):Mt),qe.abort(),qe=null)},r.cancelToken&&r.cancelToken.subscribe(At),r.signal&&(r.signal.aborted?At():r.signal.addEventListener("abort",At)));const xt=hr(Bn);if(xt&&ge.protocols.indexOf(xt)===-1){x(new z("Unsupported protocol "+xt+":",z.ERR_BAD_REQUEST,r));return}qe.send(Y||null)})}};C.forEach(p,(r,a)=>{if(r){try{Object.defineProperty(r,"name",{value:a})}catch(u){}Object.defineProperty(r,"adapterName",{value:a})}});const S=r=>`- ${r}`,D=r=>C.isFunction(r)||r===null||r===!1,ce={getAdapter:r=>{r=C.isArray(r)?r:[r];const{length:a}=r;let u,x;const Y={};for(let oe=0;oe<a;oe++){u=r[oe];let ae;if(x=u,!D(u)&&(x=p[(ae=String(u)).toLowerCase()],x===void 0))throw new z(`Unknown adapter '${ae}'`);if(x)break;Y[ae||"#"+oe]=x}if(!x){const oe=Object.entries(Y).map(([We,At])=>`adapter ${We} `+(At===!1?"is not supported by the environment":"is not available in the build"));let ae=a?oe.length>1?`since :
`+oe.map(S).join(`
`):" "+S(oe[0]):"as no adapter specified";throw new z("There is no suitable adapter to dispatch the request "+ae,"ERR_NOT_SUPPORT")}return x},adapters:p};function ne(r){if(r.cancelToken&&r.cancelToken.throwIfRequested(),r.signal&&r.signal.aborted)throw new er(null,r)}function fe(r){return ne(r),r.headers=on.from(r.headers),r.data=rr.call(r,r.transformRequest),["post","put","patch"].indexOf(r.method)!==-1&&r.headers.setContentType("application/x-www-form-urlencoded",!1),ce.getAdapter(r.adapter||rn.adapter)(r).then(function(x){return ne(r),x.data=rr.call(r,r.transformResponse,x),x.headers=on.from(x.headers),x},function(x){return $n(x)||(ne(r),x&&x.response&&(x.response.data=rr.call(r,r.transformResponse,x.response),x.response.headers=on.from(x.response.headers))),Promise.reject(x)})}var be=Object.defineProperty,tt=Object.getOwnPropertySymbols,Ne=Object.prototype.hasOwnProperty,ot=Object.prototype.propertyIsEnumerable,st=(r,a,u)=>a in r?be(r,a,{enumerable:!0,configurable:!0,writable:!0,value:u}):r[a]=u,je=(r,a)=>{for(var u in a||(a={}))Ne.call(a,u)&&st(r,u,a[u]);if(tt)for(var u of tt(a))ot.call(a,u)&&st(r,u,a[u]);return r};const Je=r=>r instanceof on?je({},r):r;function ze(r,a){a=a||{};const u={};function x(wt,St,qe){return C.isPlainObject(wt)&&C.isPlainObject(St)?C.merge.call({caseless:qe},wt,St):C.isPlainObject(St)?C.merge({},St):C.isArray(St)?St.slice():St}function Y(wt,St,qe){if(C.isUndefined(St)){if(!C.isUndefined(wt))return x(void 0,wt,qe)}else return x(wt,St,qe)}function oe(wt,St){if(!C.isUndefined(St))return x(void 0,St)}function ae(wt,St){if(C.isUndefined(St)){if(!C.isUndefined(wt))return x(void 0,wt)}else return x(void 0,St)}function We(wt,St,qe){if(qe in a)return x(wt,St);if(qe in r)return x(void 0,wt)}const At={url:oe,method:oe,data:oe,baseURL:ae,transformRequest:ae,transformResponse:ae,paramsSerializer:ae,timeout:ae,timeoutMessage:ae,withCredentials:ae,withXSRFToken:ae,adapter:ae,responseType:ae,xsrfCookieName:ae,xsrfHeaderName:ae,onUploadProgress:ae,onDownloadProgress:ae,decompress:ae,maxContentLength:ae,maxBodyLength:ae,beforeRedirect:ae,transport:ae,httpAgent:ae,httpsAgent:ae,cancelToken:ae,socketPath:ae,responseEncoding:ae,validateStatus:We,headers:(wt,St)=>Y(Je(wt),Je(St),!0)};return C.forEach(Object.keys(Object.assign({},r,a)),function(St){const qe=At[St]||Y,Bn=qe(r[St],a[St],St);C.isUndefined(Bn)&&qe!==We||(u[St]=Bn)}),u}const Tt="1.6.8",Ht={};["object","boolean","number","function","string","symbol"].forEach((r,a)=>{Ht[r]=function(x){return typeof x===r||"a"+(a<1?"n ":" ")+r}});const Wt={};Ht.transitional=function(a,u,x){function Y(oe,ae){return"[Axios v"+Tt+"] Transitional option '"+oe+"'"+ae+(x?". "+x:"")}return(oe,ae,We)=>{if(a===!1)throw new z(Y(ae," has been removed"+(u?" in "+u:"")),z.ERR_DEPRECATED);return u&&!Wt[ae]&&(Wt[ae]=!0,console.warn(Y(ae," has been deprecated since v"+u+" and will be removed in the near future"))),a?a(oe,ae,We):!0}};function Qt(r,a,u){if(typeof r!="object")throw new z("options must be an object",z.ERR_BAD_OPTION_VALUE);const x=Object.keys(r);let Y=x.length;for(;Y-- >0;){const oe=x[Y],ae=a[oe];if(ae){const We=r[oe],At=We===void 0||ae(We,oe,r);if(At!==!0)throw new z("option "+oe+" must be "+At,z.ERR_BAD_OPTION_VALUE);continue}if(u!==!0)throw new z("Unknown option "+oe,z.ERR_BAD_OPTION)}}const ct={assertOptions:Qt,validators:Ht};var yn=(r,a,u)=>new Promise((x,Y)=>{var oe=At=>{try{We(u.next(At))}catch(wt){Y(wt)}},ae=At=>{try{We(u.throw(At))}catch(wt){Y(wt)}},We=At=>At.done?x(At.value):Promise.resolve(At.value).then(oe,ae);We((u=u.apply(r,a)).next())});const dn=ct.validators;class le{constructor(a){this.defaults=a,this.interceptors={request:new F,response:new F}}request(a,u){return yn(this,null,function*(){try{return yield this._request(a,u)}catch(x){if(x instanceof Error){let Y;Error.captureStackTrace?Error.captureStackTrace(Y={}):Y=new Error;const oe=Y.stack?Y.stack.replace(/^.+\n/,""):"";x.stack?oe&&!String(x.stack).endsWith(oe.replace(/^.+\n.+\n/,""))&&(x.stack+=`
`+oe):x.stack=oe}throw x}})}_request(a,u){typeof a=="string"?(u=u||{},u.url=a):u=a||{},u=ze(this.defaults,u);const{transitional:x,paramsSerializer:Y,headers:oe}=u;x!==void 0&&ct.assertOptions(x,{silentJSONParsing:dn.transitional(dn.boolean),forcedJSONParsing:dn.transitional(dn.boolean),clarifyTimeoutError:dn.transitional(dn.boolean)},!1),Y!=null&&(C.isFunction(Y)?u.paramsSerializer={serialize:Y}:ct.assertOptions(Y,{encode:dn.function,serialize:dn.function},!0)),u.method=(u.method||this.defaults.method||"get").toLowerCase();let ae=oe&&C.merge(oe.common,oe[u.method]);oe&&C.forEach(["delete","get","head","post","put","patch","common"],xt=>{delete oe[xt]}),u.headers=on.concat(ae,oe);const We=[];let At=!0;this.interceptors.request.forEach(function(Mt){typeof Mt.runWhen=="function"&&Mt.runWhen(u)===!1||(At=At&&Mt.synchronous,We.unshift(Mt.fulfilled,Mt.rejected))});const wt=[];this.interceptors.response.forEach(function(Mt){wt.push(Mt.fulfilled,Mt.rejected)});let St,qe=0,Bn;if(!At){const xt=[fe.bind(this),void 0];for(xt.unshift.apply(xt,We),xt.push.apply(xt,wt),Bn=xt.length,St=Promise.resolve(u);qe<Bn;)St=St.then(xt[qe++],xt[qe++]);return St}Bn=We.length;let Jn=u;for(qe=0;qe<Bn;){const xt=We[qe++],Mt=We[qe++];try{Jn=xt(Jn)}catch(Nn){Mt.call(this,Nn);break}}try{St=fe.call(this,Jn)}catch(xt){return Promise.reject(xt)}for(qe=0,Bn=wt.length;qe<Bn;)St=St.then(wt[qe++],wt[qe++]);return St}getUri(a){a=ze(this.defaults,a);const u=Jt(a.baseURL,a.url);return y(u,a.params,a.paramsSerializer)}}C.forEach(["delete","get","head","options"],function(a){le.prototype[a]=function(u,x){return this.request(ze(x||{},{method:a,url:u,data:(x||{}).data}))}}),C.forEach(["post","put","patch"],function(a){function u(x){return function(oe,ae,We){return this.request(ze(We||{},{method:a,headers:x?{"Content-Type":"multipart/form-data"}:{},url:oe,data:ae}))}}le.prototype[a]=u(),le.prototype[a+"Form"]=u(!0)});const mn=le;class hn{constructor(a){if(typeof a!="function")throw new TypeError("executor must be a function.");let u;this.promise=new Promise(function(oe){u=oe});const x=this;this.promise.then(Y=>{if(!x._listeners)return;let oe=x._listeners.length;for(;oe-- >0;)x._listeners[oe](Y);x._listeners=null}),this.promise.then=Y=>{let oe;const ae=new Promise(We=>{x.subscribe(We),oe=We}).then(Y);return ae.cancel=function(){x.unsubscribe(oe)},ae},a(function(oe,ae,We){x.reason||(x.reason=new er(oe,ae,We),u(x.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(a){if(this.reason){a(this.reason);return}this._listeners?this._listeners.push(a):this._listeners=[a]}unsubscribe(a){if(!this._listeners)return;const u=this._listeners.indexOf(a);u!==-1&&this._listeners.splice(u,1)}static source(){let a;return{token:new hn(function(Y){a=Y}),cancel:a}}}const fn=hn;function Sn(r){return function(u){return r.apply(null,u)}}function kn(r){return C.isObject(r)&&r.isAxiosError===!0}const Hn={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Hn).forEach(([r,a])=>{Hn[a]=r});const Yn=Hn;function nr(r){const a=new mn(r),u=s(mn.prototype.request,a);return C.extend(u,mn.prototype,a,{allOwnKeys:!0}),C.extend(u,a,null,{allOwnKeys:!0}),u.create=function(Y){return nr(ze(r,Y))},u}const Cn=nr(rn);Cn.Axios=mn,Cn.CanceledError=er,Cn.CancelToken=fn,Cn.isCancel=$n,Cn.VERSION=Tt,Cn.toFormData=Lt,Cn.AxiosError=z,Cn.Cancel=Cn.CanceledError,Cn.all=function(a){return Promise.all(a)},Cn.spread=Sn,Cn.isAxiosError=kn,Cn.mergeConfig=ze,Cn.AxiosHeaders=on,Cn.formToJSON=r=>un(C.isHTMLForm(r)?new FormData(r):r),Cn.getAdapter=ce.getAdapter,Cn.HttpStatusCode=Yn,Cn.default=Cn;const br=Cn}}]);})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLENBQUMsRUFBR0EsR0FBYSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksQ0FBQyxFQUFHQSxHQUFhLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxDQUFDLEVBQUdBLEdBQWEsRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLENB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T0FBQW05RCxFQUFNLE9BQU96Z0QsRUFBVSxHQUFNLFVBQVcxYyxFQUFTLENBQUMsV0FBWSxFQUFJLENBQUMsRUFHbkVtOUQsRUFBTSxPQUFPemdELEVBQVUxYyxFQUFTLEtBQU0sQ0FBQyxXQUFZLEVBQUksQ0FBQyxFQUd4RDBjLEVBQVMsT0FBUyxTQUFnQnFzRCxFQUFnQixDQUNoRCxPQUFPd0IsR0FBZTdDLEdBQVk4QyxFQUFlekIsQ0FBYyxDQUFDLENBQ2xFLEVBRU9yc0QsQ0FDVCxDQUdBLE1BQU0rdEQsR0FBUUYsR0FBZSxFQUFRLEVBR3JDRSxHQUFNLE1BQVEsR0FHZEEsR0FBTSxjQUFnQixHQUN0QkEsR0FBTSxZQUFjLEdBQ3BCQSxHQUFNLFNBQVdySCxHQUNqQnFILEdBQU0sUUFBVXJDLEdBQ2hCcUMsR0FBTSxXQUFhLEdBR25CQSxHQUFNLFdBQWEsRUFHbkJBLEdBQU0sT0FBU0EsR0FBTSxjQUdyQkEsR0FBTSxJQUFNLFNBQWFDLEVBQVUsQ0FDakMsT0FBTyxRQUFRLElBQUlBLENBQVEsQ0FDN0IsRUFFQUQsR0FBTSxPQUFTTixHQUdmTSxHQUFNLGFBQWVMLEdBR3JCSyxHQUFNLFlBQWMvQyxHQUVwQitDLEdBQU0sYUFBZSxHQUVyQkEsR0FBTSxXQUFhcFMsR0FBUyxHQUFlOEUsRUFBTSxXQUFXOUUsQ0FBSyxFQUFJLElBQUksU0FBU0EsQ0FBSyxFQUFJQSxDQUFLLEVBRWhHb1MsR0FBTSxXQUFhdEQsR0FBUyxXQUU1QnNELEdBQU0sZUFBaUIsR0FFdkJBLEdBQU0sUUFBVUEsR0FHaEIsU0FBZUEsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2hlZXQvZGlzdC9lbW90aW9uLXNoZWV0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9VdGlsaXR5LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9Ub2tlbml6ZXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL0VudW0uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1BhcnNlci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NhY2hlL2Rpc3QvZW1vdGlvbi1jYWNoZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9lbW90aW9uLW1lbW9pemUuZXNtLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLWVsZW1lbnQtNDNjNmZlYTAuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvZW1vdGlvbi1oYXNoLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvZW1vdGlvbi11bml0bGVzcy5lc20uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9lbW90aW9uLXNlcmlhbGl6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzL2Rpc3QvZW1vdGlvbi11c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3V0aWxzL2Rpc3QvZW1vdGlvbi11dGlscy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9leHRyYWN0RXZlbnRIYW5kbGVycy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9pc0hvc3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvYXBwZW5kT3duZXJTdGF0ZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9vbWl0RXZlbnRIYW5kbGVycy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9tZXJnZVNsb3RQcm9wcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91dGlscy9yZXNvbHZlQ29tcG9uZW50UHJvcHMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdXRpbHMvdXNlU2xvdFByb3BzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9pY29ucy1tYXRlcmlhbC91dGlscy9jcmVhdGVTdmdJY29uLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CYWNrZHJvcC9iYWNrZHJvcENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JhY2tkcm9wL0JhY2tkcm9wLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZUJveC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQm94L2JveENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JveC9Cb3guanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0J1dHRvbkJhc2UvUmlwcGxlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9CdXR0b25CYXNlL3RvdWNoUmlwcGxlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9idXR0b25CYXNlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9GYWRlL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dyb3cvR3Jvdy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1CdXR0b24vTGlzdEl0ZW1CdXR0b24uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtQnV0dG9uL2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdEl0ZW1UZXh0L2xpc3RJdGVtVGV4dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3RJdGVtVGV4dC9MaXN0SXRlbVRleHQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3QvbGlzdENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpc3QvTGlzdC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGlzdC9MaXN0Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS91bnN0YWJsZV91c2VNb2RhbC9Nb2RhbE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvdW5zdGFibGVfdXNlTW9kYWwvdXNlTW9kYWwuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvRm9jdXNUcmFwL0ZvY3VzVHJhcC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvYmFzZS9Qb3J0YWwvUG9ydGFsLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Nb2RhbC9tb2RhbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01vZGFsL01vZGFsLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvZ2V0T3ZlcmxheUFscGhhLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9QYXBlci9wYXBlckNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1BhcGVyL1BhcGVyLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Qb3BvdmVyL3BvcG92ZXJDbGFzc2VzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Qb3BvdmVyL1BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL2Jhc2UvVGV4dGFyZWFBdXRvc2l6ZS9UZXh0YXJlYUF1dG9zaXplLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0QmFzZS91dGlscy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXRCYXNlL2lucHV0QmFzZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0QmFzZS9JbnB1dEJhc2UuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0L2lucHV0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvSW5wdXQvSW5wdXQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0ZpbGxlZElucHV0L2ZpbGxlZElucHV0Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRmlsbGVkSW5wdXQvRmlsbGVkSW5wdXQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXQvTm90Y2hlZE91dGxpbmUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXQvb3V0bGluZWRJbnB1dENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL091dGxpbmVkSW5wdXQvT3V0bGluZWRJbnB1dC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUxhYmVsL2Zvcm1MYWJlbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0Zvcm1MYWJlbC9Gb3JtTGFiZWwuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0TGFiZWwvaW5wdXRMYWJlbENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0lucHV0TGFiZWwvSW5wdXRMYWJlbC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xDbGFzc2VzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvRm9ybUhlbHBlclRleHQvZm9ybUhlbHBlclRleHRDbGFzc2VzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Gb3JtSGVscGVyVGV4dC9Gb3JtSGVscGVyVGV4dC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9SdGxQcm92aWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTWVudUxpc3QvTWVudUxpc3QuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01lbnUvbWVudUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL01lbnUvTWVudS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTmF0aXZlU2VsZWN0L25hdGl2ZVNlbGVjdENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU2VsZWN0L3NlbGVjdENsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NlbGVjdC9TZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1NlbGVjdC9TZWxlY3QuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1RleHRGaWVsZC90ZXh0RmllbGRDbGFzc2VzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UZXh0RmllbGQvVGV4dEZpZWxkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L3R5cG9ncmFwaHlDbGFzc2VzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZU1peGlucy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9wdXJwbGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9vcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvbGlnaHRCbHVlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZ3JlZW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUcmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvZGVmYXVsdFRoZW1lLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvaWRlbnRpZmllci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3Jvb3RTaG91bGRGb3J3YXJkUHJvcC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3Nsb3RTaG91bGRGb3J3YXJkUHJvcC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3N0eWxlZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3VzZVRoZW1lLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL3VzZVRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC90cmFuc2l0aW9ucy91dGlscy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3ZnSWNvbi9zdmdJY29uQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvU3ZnSWNvbi9TdmdJY29uLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9jcmVhdGVTdmdJY29uLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUvZGVwcmVjYXRlZFByb3BUeXBlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS9yZXF1aXJlUHJvcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvc2V0UmVmLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VJZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdW5zdXBwb3J0ZWRQcm9wL3Vuc3VwcG9ydGVkUHJvcC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdW5zdXBwb3J0ZWRQcm9wLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvaXNNdWlFbGVtZW50L2lzTXVpRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvaXNNdWlFbGVtZW50LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9vd25lcldpbmRvdy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdXNlQ29udHJvbGxlZC91c2VDb250cm9sbGVkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VDb250cm9sbGVkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy91c2VFbmhhbmNlZEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvdXNlRm9ya1JlZi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUvdXNlSXNGb2N1c1Zpc2libGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9kaXN0L2Vtb3Rpb24tc3R5bGVkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL1N0eWxlZEVuZ2luZVByb3ZpZGVyL1N0eWxlZEVuZ2luZVByb3ZpZGVyLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2NyZWF0ZVN0eWxlZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9icmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9hcHBseVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9zaGFwZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lcmdlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb21wb3NlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JvcmRlcnMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzR3JpZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvZGVmYXVsdFN4Q29uZmlnLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9leHRlbmRTeFByb3AuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVdpdGhvdXREZWZhdWx0LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9DbGFzc05hbWVHZW5lcmF0b3IvQ2xhc3NOYW1lR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9jYXBpdGFsaXplL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2NsYW1wL2NsYW1wLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcy9jb21wb3NlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZGVib3VuY2UvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2RlZXBtZXJnZS9kZWVwbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzL2dlbmVyYXRlVXRpbGl0eUNsYXNzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2dldERpc3BsYXlOYW1lL2dldERpc3BsYXlOYW1lLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9nZXRTY3JvbGxiYXJTaXplL2dldFNjcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvb3duZXJEb2N1bWVudC9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9vd25lcldpbmRvdy9vd25lcldpbmRvdy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvcmVzb2x2ZVByb3BzL3Jlc29sdmVQcm9wcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvc2V0UmVmL3NldFJlZi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QvdXNlRW5oYW5jZWRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2svdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdXNlRm9ya1JlZi91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy91c2VJZC91c2VJZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvdXNlTGF6eVJlZi91c2VMYXp5UmVmLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy91c2VPbk1vdW50L3VzZU9uTW91bnQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL3VzZVRpbWVvdXQvdXNlVGltZW91dC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0ByZW1peC1ydW4vcm91dGVyL2Rpc3Qvcm91dGVyLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vY29uZmlnLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvcmVmbG93LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm1qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Jsb2IuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vY29tbW9uL3V0aWxzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcGVlZG9tZXRlci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvYWRhcHRlcnMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQtdXRpbC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC11dGlsLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLXV0aWwvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cbkJhc2VkIG9mZiBnbGFtb3IncyBTdHlsZVNoZWV0LCB0aGFua3MgU3VuaWwg4p2k77iPXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnXG5cbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoeyBrZXk6ICcnLCBjb250YWluZXI6IGRvY3VtZW50LmhlYWQgfSlcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxudmFyIFN0eWxlU2hlZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvLyBVc2luZyBOb2RlIGluc3RlYWQgb2YgSFRNTEVsZW1lbnQgc2luY2UgY29udGFpbmVyIG1heSBiZSBhIFNoYWRvd1Jvb3RcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuX2luc2VydFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHZhciBiZWZvcmU7XG5cbiAgICAgIGlmIChfdGhpcy50YWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoX3RoaXMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5pbnNlcnRpb25Qb2ludC5uZXh0U2libGluZztcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcmVwZW5kKSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuYmVmb3JlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWZvcmUgPSBfdGhpcy50YWdzW190aGlzLnRhZ3MubGVuZ3RoIC0gMV0ubmV4dFNpYmxpbmc7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUodGFnLCBiZWZvcmUpO1xuXG4gICAgICBfdGhpcy50YWdzLnB1c2godGFnKTtcbiAgICB9O1xuXG4gICAgdGhpcy5pc1NwZWVkeSA9IG9wdGlvbnMuc3BlZWR5ID09PSB1bmRlZmluZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIDogb3B0aW9ucy5zcGVlZHk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICAgIHRoaXMubm9uY2UgPSBvcHRpb25zLm5vbmNlOyAvLyBrZXkgaXMgdGhlIHZhbHVlIG9mIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlLCBpdCdzIHVzZWQgdG8gaWRlbnRpZnkgZGlmZmVyZW50IHNoZWV0c1xuXG4gICAgdGhpcy5rZXkgPSBvcHRpb25zLmtleTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xuICAgIHRoaXMucHJlcGVuZCA9IG9wdGlvbnMucHJlcGVuZDtcbiAgICB0aGlzLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcbiAgICB0aGlzLmJlZm9yZSA9IG51bGw7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3R5bGVTaGVldC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmh5ZHJhdGUgPSBmdW5jdGlvbiBoeWRyYXRlKG5vZGVzKSB7XG4gICAgbm9kZXMuZm9yRWFjaCh0aGlzLl9pbnNlcnRUYWcpO1xuICB9O1xuXG4gIF9wcm90by5pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgIC8vIHRoZSBtYXggbGVuZ3RoIGlzIGhvdyBtYW55IHJ1bGVzIHdlIGhhdmUgcGVyIHN0eWxlIHRhZywgaXQncyA2NTAwMCBpbiBzcGVlZHkgbW9kZVxuICAgIC8vIGl0J3MgMSBpbiBkZXYgYmVjYXVzZSB3ZSBpbnNlcnQgc291cmNlIG1hcHMgdGhhdCBtYXAgYSBzaW5nbGUgcnVsZSB0byBhIGxvY2F0aW9uXG4gICAgLy8gYW5kIHlvdSBjYW4gb25seSBoYXZlIG9uZSBzb3VyY2UgbWFwIHBlciBzdHlsZSB0YWdcbiAgICBpZiAodGhpcy5jdHIgJSAodGhpcy5pc1NwZWVkeSA/IDY1MDAwIDogMSkgPT09IDApIHtcbiAgICAgIHRoaXMuX2luc2VydFRhZyhjcmVhdGVTdHlsZUVsZW1lbnQodGhpcykpO1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBpc0ltcG9ydFJ1bGUgPSBydWxlLmNoYXJDb2RlQXQoMCkgPT09IDY0ICYmIHJ1bGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1O1xuXG4gICAgICBpZiAoaXNJbXBvcnRSdWxlICYmIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlKSB7XG4gICAgICAgIC8vIHRoaXMgd291bGQgb25seSBjYXVzZSBwcm9ibGVtIGluIHNwZWVkeSBtb2RlXG4gICAgICAgIC8vIGJ1dCB3ZSBkb24ndCB3YW50IGVuYWJsaW5nIHNwZWVkeSB0byBhZmZlY3QgdGhlIG9ic2VydmFibGUgYmVoYXZpb3JcbiAgICAgICAgLy8gc28gd2UgcmVwb3J0IHRoaXMgZXJyb3IgYXQgYWxsIHRpbWVzXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UncmUgYXR0ZW1wdGluZyB0byBpbnNlcnQgdGhlIGZvbGxvd2luZyBydWxlOlxcblwiICsgcnVsZSArICdcXG5cXG5gQGltcG9ydGAgcnVsZXMgbXVzdCBiZSBiZWZvcmUgYWxsIG90aGVyIHR5cGVzIG9mIHJ1bGVzIGluIGEgc3R5bGVzaGVldCBidXQgb3RoZXIgcnVsZXMgaGF2ZSBhbHJlYWR5IGJlZW4gaW5zZXJ0ZWQuIFBsZWFzZSBlbnN1cmUgdGhhdCBgQGltcG9ydGAgcnVsZXMgYXJlIGJlZm9yZSBhbGwgb3RoZXIgcnVsZXMuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSA9IHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlIHx8ICFpc0ltcG9ydFJ1bGU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIHRoaXMgaXMgdGhlIHVsdHJhZmFzdCB2ZXJzaW9uLCB3b3JrcyBhY3Jvc3MgYnJvd3NlcnNcbiAgICAgICAgLy8gdGhlIGJpZyBkcmF3YmFjayBpcyB0aGF0IHRoZSBjc3Mgd29uJ3QgYmUgZWRpdGFibGUgaW4gZGV2dG9vbHNcbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShydWxlLCBzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhLzooLW1vei1wbGFjZWhvbGRlcnwtbW96LWZvY3VzLWlubmVyfC1tb3otZm9jdXNyaW5nfC1tcy1pbnB1dC1wbGFjZWhvbGRlcnwtbW96LXJlYWQtd3JpdGV8LW1vei1yZWFkLW9ubHl8LW1zLWNsZWFyfC1tcy1leHBhbmR8LW1zLXJldmVhbCl7Ly50ZXN0KHJ1bGUpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZXJlIHdhcyBhIHByb2JsZW0gaW5zZXJ0aW5nIHRoZSBmb2xsb3dpbmcgcnVsZTogXFxcIlwiICsgcnVsZSArIFwiXFxcIlwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZSAmJiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgIH0pO1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZXhwb3J0IHsgU3R5bGVTaGVldCB9O1xuIiwiLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFic1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgdmFyIGZyb20gPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCB2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaCAodmFsdWUsIGxlbmd0aCkge1xuXHRyZXR1cm4gY2hhcmF0KHZhbHVlLCAwKSBeIDQ1ID8gKCgoKCgoKGxlbmd0aCA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMCkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAxKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDIpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMykgOiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmltICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUudHJpbSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcGF0dGVyblxuICogQHJldHVybiB7c3RyaW5nP31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoICh2YWx1ZSwgcGF0dGVybikge1xuXHRyZXR1cm4gKHZhbHVlID0gcGF0dGVybi5leGVjKHZhbHVlKSkgPyB2YWx1ZVswXSA6IHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKX0gcGF0dGVyblxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlICh2YWx1ZSwgcGF0dGVybiwgcmVwbGFjZW1lbnQpIHtcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZW1lbnQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRleG9mICh2YWx1ZSwgc2VhcmNoKSB7XG5cdHJldHVybiB2YWx1ZS5pbmRleE9mKHNlYXJjaClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhcmF0ICh2YWx1ZSwgaW5kZXgpIHtcblx0cmV0dXJuIHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpIHwgMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdHIgKHZhbHVlLCBiZWdpbiwgZW5kKSB7XG5cdHJldHVybiB2YWx1ZS5zbGljZShiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RybGVuICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnlbXX0gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpemVvZiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJyYXlcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZCAodmFsdWUsIGFycmF5KSB7XG5cdHJldHVybiBhcnJheS5wdXNoKHZhbHVlKSwgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcnJheVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmUgKGFycmF5LCBjYWxsYmFjaykge1xuXHRyZXR1cm4gYXJyYXkubWFwKGNhbGxiYWNrKS5qb2luKCcnKVxufVxuIiwiaW1wb3J0IHtmcm9tLCB0cmltLCBjaGFyYXQsIHN0cmxlbiwgc3Vic3RyLCBhcHBlbmQsIGFzc2lnbn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG5leHBvcnQgdmFyIGxpbmUgPSAxXG5leHBvcnQgdmFyIGNvbHVtbiA9IDFcbmV4cG9ydCB2YXIgbGVuZ3RoID0gMFxuZXhwb3J0IHZhciBwb3NpdGlvbiA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVyID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXJzID0gJydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ1tdIHwgc3RyaW5nfSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3RbXSB8IHN0cmluZ30gY2hpbGRyZW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vZGUgKHZhbHVlLCByb290LCBwYXJlbnQsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKSB7XG5cdHJldHVybiB7dmFsdWU6IHZhbHVlLCByb290OiByb290LCBwYXJlbnQ6IHBhcmVudCwgdHlwZTogdHlwZSwgcHJvcHM6IHByb3BzLCBjaGlsZHJlbjogY2hpbGRyZW4sIGxpbmU6IGxpbmUsIGNvbHVtbjogY29sdW1uLCBsZW5ndGg6IGxlbmd0aCwgcmV0dXJuOiAnJ31cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5IChyb290LCBwcm9wcykge1xuXHRyZXR1cm4gYXNzaWduKG5vZGUoJycsIG51bGwsIG51bGwsICcnLCBudWxsLCBudWxsLCAwKSwgcm9vdCwge2xlbmd0aDogLXJvb3QubGVuZ3RofSwgcHJvcHMpXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhciAoKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPiAwID8gY2hhcmF0KGNoYXJhY3RlcnMsIC0tcG9zaXRpb24pIDogMFxuXG5cdGlmIChjb2x1bW4tLSwgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lLS1cblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV4dCAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uIDwgbGVuZ3RoID8gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKyspIDogMFxuXG5cdGlmIChjb2x1bW4rKywgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lKytcblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVlayAoKSB7XG5cdHJldHVybiBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24pXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FyZXQgKCkge1xuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG5cdHJldHVybiBzdWJzdHIoY2hhcmFjdGVycywgYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW4gKHR5cGUpIHtcblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Ly8gXFwwIFxcdCBcXG4gXFxyIFxccyB3aGl0ZXNwYWNlIHRva2VuXG5cdFx0Y2FzZSAwOiBjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRyZXR1cm4gNVxuXHRcdC8vICEgKyAsIC8gPiBAIH4gaXNvbGF0ZSB0b2tlblxuXHRcdGNhc2UgMzM6IGNhc2UgNDM6IGNhc2UgNDQ6IGNhc2UgNDc6IGNhc2UgNjI6IGNhc2UgNjQ6IGNhc2UgMTI2OlxuXHRcdC8vIDsgeyB9IGJyZWFrcG9pbnQgdG9rZW5cblx0XHRjYXNlIDU5OiBjYXNlIDEyMzogY2FzZSAxMjU6XG5cdFx0XHRyZXR1cm4gNFxuXHRcdC8vIDogYWNjb21wYW5pZWQgdG9rZW5cblx0XHRjYXNlIDU4OlxuXHRcdFx0cmV0dXJuIDNcblx0XHQvLyBcIiAnICggWyBvcGVuaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDQwOiBjYXNlIDkxOlxuXHRcdFx0cmV0dXJuIDJcblx0XHQvLyApIF0gY2xvc2luZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSA0MTogY2FzZSA5Mzpcblx0XHRcdHJldHVybiAxXG5cdH1cblxuXHRyZXR1cm4gMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7YW55W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGxpbmUgPSBjb2x1bW4gPSAxLCBsZW5ndGggPSBzdHJsZW4oY2hhcmFjdGVycyA9IHZhbHVlKSwgcG9zaXRpb24gPSAwLCBbXVxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGNoYXJhY3RlcnMgPSAnJywgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdCAodHlwZSkge1xuXHRyZXR1cm4gdHJpbShzbGljZShwb3NpdGlvbiAtIDEsIGRlbGltaXRlcih0eXBlID09PSA5MSA/IHR5cGUgKyAyIDogdHlwZSA9PT0gNDAgPyB0eXBlICsgMSA6IHR5cGUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHRva2VuaXplcihhbGxvYyh2YWx1ZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGl0ZXNwYWNlICh0eXBlKSB7XG5cdHdoaWxlIChjaGFyYWN0ZXIgPSBwZWVrKCkpXG5cdFx0aWYgKGNoYXJhY3RlciA8IDMzKVxuXHRcdFx0bmV4dCgpXG5cdFx0ZWxzZVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gdG9rZW4odHlwZSkgPiAyIHx8IHRva2VuKGNoYXJhY3RlcikgPiAzID8gJycgOiAnICdcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZXIgKGNoaWxkcmVuKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG5cdFx0XHRjYXNlIDA6IGFwcGVuZChpZGVudGlmaWVyKHBvc2l0aW9uIC0gMSksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAyOiBhcHBlbmQoZGVsaW1pdChjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGRlZmF1bHQ6IGFwcGVuZChmcm9tKGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdH1cblxuXHRyZXR1cm4gY2hpbGRyZW5cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBpbmcgKGluZGV4LCBjb3VudCkge1xuXHR3aGlsZSAoLS1jb3VudCAmJiBuZXh0KCkpXG5cdFx0Ly8gbm90IDAtOSBBLUYgYS1mXG5cdFx0aWYgKGNoYXJhY3RlciA8IDQ4IHx8IGNoYXJhY3RlciA+IDEwMiB8fCAoY2hhcmFjdGVyID4gNTcgJiYgY2hhcmFjdGVyIDwgNjUpIHx8IChjaGFyYWN0ZXIgPiA3MCAmJiBjaGFyYWN0ZXIgPCA5NykpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiBzbGljZShpbmRleCwgY2FyZXQoKSArIChjb3VudCA8IDYgJiYgcGVlaygpID09IDMyICYmIG5leHQoKSA9PSAzMikpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXRlciAodHlwZSkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHQvLyBdICkgXCIgJ1xuXHRcdFx0Y2FzZSB0eXBlOlxuXHRcdFx0XHRyZXR1cm4gcG9zaXRpb25cblx0XHRcdC8vIFwiICdcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6XG5cdFx0XHRcdGlmICh0eXBlICE9PSAzNCAmJiB0eXBlICE9PSAzOSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gKFxuXHRcdFx0Y2FzZSA0MDpcblx0XHRcdFx0aWYgKHR5cGUgPT09IDQxKVxuXHRcdFx0XHRcdGRlbGltaXRlcih0eXBlKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdG5leHQoKVxuXHRcdFx0XHRicmVha1xuXHRcdH1cblxuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50ZXIgKHR5cGUsIGluZGV4KSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0Ly8gLy9cblx0XHRpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDcgKyAxMClcblx0XHRcdGJyZWFrXG5cdFx0Ly8gLypcblx0XHRlbHNlIGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0MiArIDQyICYmIHBlZWsoKSA9PT0gNDcpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiAnLyonICsgc2xpY2UoaW5kZXgsIHBvc2l0aW9uIC0gMSkgKyAnKicgKyBmcm9tKHR5cGUgPT09IDQ3ID8gdHlwZSA6IG5leHQoKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aWZpZXIgKGluZGV4KSB7XG5cdHdoaWxlICghdG9rZW4ocGVlaygpKSlcblx0XHRuZXh0KClcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIHBvc2l0aW9uKVxufVxuIiwiZXhwb3J0IHZhciBNUyA9ICctbXMtJ1xuZXhwb3J0IHZhciBNT1ogPSAnLW1vei0nXG5leHBvcnQgdmFyIFdFQktJVCA9ICctd2Via2l0LSdcblxuZXhwb3J0IHZhciBDT01NRU5UID0gJ2NvbW0nXG5leHBvcnQgdmFyIFJVTEVTRVQgPSAncnVsZSdcbmV4cG9ydCB2YXIgREVDTEFSQVRJT04gPSAnZGVjbCdcblxuZXhwb3J0IHZhciBQQUdFID0gJ0BwYWdlJ1xuZXhwb3J0IHZhciBNRURJQSA9ICdAbWVkaWEnXG5leHBvcnQgdmFyIElNUE9SVCA9ICdAaW1wb3J0J1xuZXhwb3J0IHZhciBDSEFSU0VUID0gJ0BjaGFyc2V0J1xuZXhwb3J0IHZhciBWSUVXUE9SVCA9ICdAdmlld3BvcnQnXG5leHBvcnQgdmFyIFNVUFBPUlRTID0gJ0BzdXBwb3J0cydcbmV4cG9ydCB2YXIgRE9DVU1FTlQgPSAnQGRvY3VtZW50J1xuZXhwb3J0IHZhciBOQU1FU1BBQ0UgPSAnQG5hbWVzcGFjZSdcbmV4cG9ydCB2YXIgS0VZRlJBTUVTID0gJ0BrZXlmcmFtZXMnXG5leHBvcnQgdmFyIEZPTlRfRkFDRSA9ICdAZm9udC1mYWNlJ1xuZXhwb3J0IHZhciBDT1VOVEVSX1NUWUxFID0gJ0Bjb3VudGVyLXN0eWxlJ1xuZXhwb3J0IHZhciBGT05UX0ZFQVRVUkVfVkFMVUVTID0gJ0Bmb250LWZlYXR1cmUtdmFsdWVzJ1xuZXhwb3J0IHZhciBMQVlFUiA9ICdAbGF5ZXInXG4iLCJpbXBvcnQge0lNUE9SVCwgTEFZRVIsIENPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OLCBLRVlGUkFNRVN9IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7c3RybGVuLCBzaXplb2Z9IGZyb20gJy4vVXRpbGl0eS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZSAoY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHZhciBvdXRwdXQgPSAnJ1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNoaWxkcmVuKVxuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0b3V0cHV0ICs9IGNhbGxiYWNrKGNoaWxkcmVuW2ldLCBpLCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0cmV0dXJuIG91dHB1dFxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5IChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0Y2FzZSBMQVlFUjogaWYgKGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoKSBicmVha1xuXHRcdGNhc2UgSU1QT1JUOiBjYXNlIERFQ0xBUkFUSU9OOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnJldHVybiB8fCBlbGVtZW50LnZhbHVlXG5cdFx0Y2FzZSBDT01NRU5UOiByZXR1cm4gJydcblx0XHRjYXNlIEtFWUZSQU1FUzogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykgKyAnfSdcblx0XHRjYXNlIFJVTEVTRVQ6IGVsZW1lbnQudmFsdWUgPSBlbGVtZW50LnByb3BzLmpvaW4oJywnKVxuXHR9XG5cblx0cmV0dXJuIHN0cmxlbihjaGlsZHJlbiA9IHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykpID8gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgY2hpbGRyZW4gKyAnfScgOiAnJ1xufVxuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVQsIFJVTEVTRVQsIEtFWUZSQU1FUywgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7bWF0Y2gsIGNoYXJhdCwgc3Vic3RyLCBzdHJsZW4sIHNpemVvZiwgcmVwbGFjZSwgY29tYmluZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtjb3B5LCB0b2tlbml6ZX0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9TZXJpYWxpemVyLmpzJ1xuaW1wb3J0IHtwcmVmaXh9IGZyb20gJy4vUHJlZml4ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbltdfSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUgKGNvbGxlY3Rpb24pIHtcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjb2xsZWN0aW9uKVxuXG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRcdHZhciBvdXRwdXQgPSAnJ1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdG91dHB1dCArPSBjb2xsZWN0aW9uW2ldKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2hlZXQgKGNhbGxiYWNrKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5yb290KVxuXHRcdFx0aWYgKGVsZW1lbnQgPSBlbGVtZW50LnJldHVybilcblx0XHRcdFx0Y2FsbGJhY2soZWxlbWVudClcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ZXIgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0aWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpXG5cdFx0aWYgKCFlbGVtZW50LnJldHVybilcblx0XHRcdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoLCBjaGlsZHJlbilcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7dmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpfSldLCBjYWxsYmFjaylcblx0XHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRcdGlmIChlbGVtZW50Lmxlbmd0aClcblx0XHRcdFx0XHRcdHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV19KVxuXHRcdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJydcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVzcGFjZSAoZWxlbWVudCkge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdGVsZW1lbnQucHJvcHMgPSBlbGVtZW50LnByb3BzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbWJpbmUodG9rZW5pemUodmFsdWUpLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjaGlsZHJlbikge1xuXHRcdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCAwKSkge1xuXHRcdFx0XHRcdFx0Ly8gXFxmXG5cdFx0XHRcdFx0XHRjYXNlIDEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3Vic3RyKHZhbHVlLCAxLCBzdHJsZW4odmFsdWUpKVxuXHRcdFx0XHRcdFx0Ly8gXFwwICggKyA+IH5cblx0XHRcdFx0XHRcdGNhc2UgMDogY2FzZSA0MDogY2FzZSA0MzogY2FzZSA2MjogY2FzZSAxMjY6XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gOlxuXHRcdFx0XHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuWysraW5kZXhdID09PSAnZ2xvYmFsJylcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltpbmRleF0gPSAnJywgY2hpbGRyZW5bKytpbmRleF0gPSAnXFxmJyArIHN1YnN0cihjaGlsZHJlbltpbmRleF0sIGluZGV4ID0gMSwgLTEpXG5cdFx0XHRcdFx0XHQvLyBcXHNcblx0XHRcdFx0XHRcdGNhc2UgMzI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IGVsZW1lbnQgPSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNpemVvZihjaGlsZHJlbikgPiAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgaW5kZXggPSBzaXplb2YoY2hpbGRyZW4pIC0gMTogY2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAyID8gdmFsdWUgKyBlbGVtZW50ICsgZWxlbWVudCA6IHZhbHVlICsgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdH1cbn1cbiIsImltcG9ydCB7Q09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7YWJzLCBjaGFyYXQsIHRyaW0sIGZyb20sIHNpemVvZiwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgcmVwbGFjZSwgaW5kZXhvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtub2RlLCBjaGFyLCBwcmV2LCBuZXh0LCBwZWVrLCBjYXJldCwgYWxsb2MsIGRlYWxsb2MsIGRlbGltaXQsIHdoaXRlc3BhY2UsIGVzY2FwaW5nLCBpZGVudGlmaWVyLCBjb21tZW50ZXJ9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7b2JqZWN0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyhwYXJzZSgnJywgbnVsbCwgbnVsbCwgbnVsbCwgWycnXSwgdmFsdWUgPSBhbGxvYyh2YWx1ZSksIDAsIFswXSwgdmFsdWUpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNldHNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBzZXVkb1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBkZWNsYXJhdGlvbnNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBydWxlLCBydWxlcywgcnVsZXNldHMsIHBzZXVkbywgcG9pbnRzLCBkZWNsYXJhdGlvbnMpIHtcblx0dmFyIGluZGV4ID0gMFxuXHR2YXIgb2Zmc2V0ID0gMFxuXHR2YXIgbGVuZ3RoID0gcHNldWRvXG5cdHZhciBhdHJ1bGUgPSAwXG5cdHZhciBwcm9wZXJ0eSA9IDBcblx0dmFyIHByZXZpb3VzID0gMFxuXHR2YXIgdmFyaWFibGUgPSAxXG5cdHZhciBzY2FubmluZyA9IDFcblx0dmFyIGFtcGVyc2FuZCA9IDFcblx0dmFyIGNoYXJhY3RlciA9IDBcblx0dmFyIHR5cGUgPSAnJ1xuXHR2YXIgcHJvcHMgPSBydWxlc1xuXHR2YXIgY2hpbGRyZW4gPSBydWxlc2V0c1xuXHR2YXIgcmVmZXJlbmNlID0gcnVsZVxuXHR2YXIgY2hhcmFjdGVycyA9IHR5cGVcblxuXHR3aGlsZSAoc2Nhbm5pbmcpXG5cdFx0c3dpdGNoIChwcmV2aW91cyA9IGNoYXJhY3RlciwgY2hhcmFjdGVyID0gbmV4dCgpKSB7XG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAocHJldmlvdXMgIT0gMTA4ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCBsZW5ndGggLSAxKSA9PSA1OCkge1xuXHRcdFx0XHRcdGlmIChpbmRleG9mKGNoYXJhY3RlcnMgKz0gcmVwbGFjZShkZWxpbWl0KGNoYXJhY3RlciksICcmJywgJyZcXGYnKSwgJyZcXGYnKSAhPSAtMSlcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IC0xXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0Ly8gXCIgJyBbXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDkxOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFx0IFxcbiBcXHIgXFxzXG5cdFx0XHRjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gd2hpdGVzcGFjZShwcmV2aW91cylcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGVzY2FwaW5nKGNhcmV0KCkgLSAxLCA3KVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0Ly8gL1xuXHRcdFx0Y2FzZSA0Nzpcblx0XHRcdFx0c3dpdGNoIChwZWVrKCkpIHtcblx0XHRcdFx0XHRjYXNlIDQyOiBjYXNlIDQ3OlxuXHRcdFx0XHRcdFx0YXBwZW5kKGNvbW1lbnQoY29tbWVudGVyKG5leHQoKSwgY2FyZXQoKSksIHJvb3QsIHBhcmVudCksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gJy8nXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIHtcblx0XHRcdGNhc2UgMTIzICogdmFyaWFibGU6XG5cdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IHN0cmxlbihjaGFyYWN0ZXJzKSAqIGFtcGVyc2FuZFxuXHRcdFx0Ly8gfSA7IFxcMFxuXHRcdFx0Y2FzZSAxMjUgKiB2YXJpYWJsZTogY2FzZSA1OTogY2FzZSAwOlxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0XHRcdC8vIFxcMCB9XG5cdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDEyNTogc2Nhbm5pbmcgPSAwXG5cdFx0XHRcdFx0Ly8gO1xuXHRcdFx0XHRcdGNhc2UgNTkgKyBvZmZzZXQ6IGlmIChhbXBlcnNhbmQgPT0gLTEpIGNoYXJhY3RlcnMgPSByZXBsYWNlKGNoYXJhY3RlcnMsIC9cXGYvZywgJycpXG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgPiAwICYmIChzdHJsZW4oY2hhcmFjdGVycykgLSBsZW5ndGgpKVxuXHRcdFx0XHRcdFx0XHRhcHBlbmQocHJvcGVydHkgPiAzMiA/IGRlY2xhcmF0aW9uKGNoYXJhY3RlcnMgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMSkgOiBkZWNsYXJhdGlvbihyZXBsYWNlKGNoYXJhY3RlcnMsICcgJywgJycpICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDIpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEAgO1xuXHRcdFx0XHRcdGNhc2UgNTk6IGNoYXJhY3RlcnMgKz0gJzsnXG5cdFx0XHRcdFx0Ly8geyBydWxlL2F0LXJ1bGVcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0YXBwZW5kKHJlZmVyZW5jZSA9IHJ1bGVzZXQoY2hhcmFjdGVycywgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcyA9IFtdLCBjaGlsZHJlbiA9IFtdLCBsZW5ndGgpLCBydWxlc2V0cylcblxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PT0gMTIzKVxuXHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJvb3QsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBwcm9wcywgcnVsZXNldHMsIGxlbmd0aCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoYXRydWxlID09PSA5OSAmJiBjaGFyYXQoY2hhcmFjdGVycywgMykgPT09IDExMCA/IDEwMCA6IGF0cnVsZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZCBsIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA4OiBjYXNlIDEwOTogY2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcnVsZSAmJiBhcHBlbmQocnVsZXNldCh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIDAsIDAsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHJ1bGVzLCBwcm9wcyA9IFtdLCBsZW5ndGgpLCBjaGlsZHJlbiksIHJ1bGVzLCBjaGlsZHJlbiwgbGVuZ3RoLCBwb2ludHMsIHJ1bGUgPyBwcm9wcyA6IGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgWycnXSwgY2hpbGRyZW4sIDAsIHBvaW50cywgY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5kZXggPSBvZmZzZXQgPSBwcm9wZXJ0eSA9IDAsIHZhcmlhYmxlID0gYW1wZXJzYW5kID0gMSwgdHlwZSA9IGNoYXJhY3RlcnMgPSAnJywgbGVuZ3RoID0gcHNldWRvXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyA6XG5cdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRsZW5ndGggPSAxICsgc3RybGVuKGNoYXJhY3RlcnMpLCBwcm9wZXJ0eSA9IHByZXZpb3VzXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZiAodmFyaWFibGUgPCAxKVxuXHRcdFx0XHRcdGlmIChjaGFyYWN0ZXIgPT0gMTIzKVxuXHRcdFx0XHRcdFx0LS12YXJpYWJsZVxuXHRcdFx0XHRcdGVsc2UgaWYgKGNoYXJhY3RlciA9PSAxMjUgJiYgdmFyaWFibGUrKyA9PSAwICYmIHByZXYoKSA9PSAxMjUpXG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVycyArPSBmcm9tKGNoYXJhY3RlciksIGNoYXJhY3RlciAqIHZhcmlhYmxlKSB7XG5cdFx0XHRcdFx0Ly8gJlxuXHRcdFx0XHRcdGNhc2UgMzg6XG5cdFx0XHRcdFx0XHRhbXBlcnNhbmQgPSBvZmZzZXQgPiAwID8gMSA6IChjaGFyYWN0ZXJzICs9ICdcXGYnLCAtMSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLFxuXHRcdFx0XHRcdGNhc2UgNDQ6XG5cdFx0XHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSAoc3RybGVuKGNoYXJhY3RlcnMpIC0gMSkgKiBhbXBlcnNhbmQsIGFtcGVyc2FuZCA9IDFcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQFxuXHRcdFx0XHRcdGNhc2UgNjQ6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAocGVlaygpID09PSA0NSlcblx0XHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSBkZWxpbWl0KG5leHQoKSlcblxuXHRcdFx0XHRcdFx0YXRydWxlID0gcGVlaygpLCBvZmZzZXQgPSBsZW5ndGggPSBzdHJsZW4odHlwZSA9IGNoYXJhY3RlcnMgKz0gaWRlbnRpZmllcihjYXJldCgpKSksIGNoYXJhY3RlcisrXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdFx0aWYgKHByZXZpb3VzID09PSA0NSAmJiBzdHJsZW4oY2hhcmFjdGVycykgPT0gMilcblx0XHRcdFx0XHRcdFx0dmFyaWFibGUgPSAwXG5cdFx0XHRcdH1cblx0XHR9XG5cblx0cmV0dXJuIHJ1bGVzZXRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNldCAodmFsdWUsIHJvb3QsIHBhcmVudCwgaW5kZXgsIG9mZnNldCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0dmFyIHBvc3QgPSBvZmZzZXQgLSAxXG5cdHZhciBydWxlID0gb2Zmc2V0ID09PSAwID8gcnVsZXMgOiBbJyddXG5cdHZhciBzaXplID0gc2l6ZW9mKHJ1bGUpXG5cblx0Zm9yICh2YXIgaSA9IDAsIGogPSAwLCBrID0gMDsgaSA8IGluZGV4OyArK2kpXG5cdFx0Zm9yICh2YXIgeCA9IDAsIHkgPSBzdWJzdHIodmFsdWUsIHBvc3QgKyAxLCBwb3N0ID0gYWJzKGogPSBwb2ludHNbaV0pKSwgeiA9IHZhbHVlOyB4IDwgc2l6ZTsgKyt4KVxuXHRcdFx0aWYgKHogPSB0cmltKGogPiAwID8gcnVsZVt4XSArICcgJyArIHkgOiByZXBsYWNlKHksIC8mXFxmL2csIHJ1bGVbeF0pKSlcblx0XHRcdFx0cHJvcHNbaysrXSA9IHpcblxuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBvZmZzZXQgPT09IDAgPyBSVUxFU0VUIDogdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQgKHZhbHVlLCByb290LCBwYXJlbnQpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgQ09NTUVOVCwgZnJvbShjaGFyKCkpLCBzdWJzdHIodmFsdWUsIDIsIC0yKSwgMClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb24gKHZhbHVlLCByb290LCBwYXJlbnQsIGxlbmd0aCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBERUNMQVJBVElPTiwgc3Vic3RyKHZhbHVlLCAwLCBsZW5ndGgpLCBzdWJzdHIodmFsdWUsIGxlbmd0aCArIDEsIC0xKSwgbGVuZ3RoKVxufVxuIiwiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCB7IGRlYWxsb2MsIGFsbG9jLCBuZXh0LCB0b2tlbiwgZnJvbSwgcGVlaywgZGVsaW1pdCwgc2xpY2UsIHBvc2l0aW9uLCBSVUxFU0VULCBjb21iaW5lLCBtYXRjaCwgc2VyaWFsaXplLCBjb3B5LCByZXBsYWNlLCBXRUJLSVQsIE1PWiwgTVMsIEtFWUZSQU1FUywgREVDTEFSQVRJT04sIGhhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCBzdHJpbmdpZnksIENPTU1FTlQsIHJ1bGVzaGVldCwgbWlkZGxld2FyZSwgY29tcGlsZSB9IGZyb20gJ3N0eWxpcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nID0gZnVuY3Rpb24gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKGJlZ2luLCBwb2ludHMsIGluZGV4KSB7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSAwO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgcHJldmlvdXMgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gcGVlaygpOyAvLyAmXFxmXG5cbiAgICBpZiAocHJldmlvdXMgPT09IDM4ICYmIGNoYXJhY3RlciA9PT0gMTIpIHtcbiAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgIH1cblxuICAgIGlmICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBuZXh0KCk7XG4gIH1cblxuICByZXR1cm4gc2xpY2UoYmVnaW4sIHBvc2l0aW9uKTtcbn07XG5cbnZhciB0b1J1bGVzID0gZnVuY3Rpb24gdG9SdWxlcyhwYXJzZWQsIHBvaW50cykge1xuICAvLyBwcmV0ZW5kIHdlJ3ZlIHN0YXJ0ZWQgd2l0aCBhIGNvbW1hXG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgY2hhcmFjdGVyID0gNDQ7XG5cbiAgZG8ge1xuICAgIHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAvLyAmXFxmXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDM4ICYmIHBlZWsoKSA9PT0gMTIpIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIG5vdCAxMDAlIGNvcnJlY3QsIHdlIGRvbid0IGFjY291bnQgZm9yIGxpdGVyYWwgc2VxdWVuY2VzIGhlcmUgLSBsaWtlIGZvciBleGFtcGxlIHF1b3RlZCBzdHJpbmdzXG4gICAgICAgICAgLy8gc3R5bGlzIGluc2VydHMgXFxmIGFmdGVyICYgdG8ga25vdyB3aGVuICYgd2hlcmUgaXQgc2hvdWxkIHJlcGxhY2UgdGhpcyBzZXF1ZW5jZSB3aXRoIHRoZSBjb250ZXh0IHNlbGVjdG9yXG4gICAgICAgICAgLy8gYW5kIHdoZW4gaXQgc2hvdWxkIGp1c3QgY29uY2F0ZW5hdGUgdGhlIG91dGVyIGFuZCBpbm5lciBzZWxlY3RvcnNcbiAgICAgICAgICAvLyBpdCdzIHZlcnkgdW5saWtlbHkgZm9yIHRoaXMgc2VxdWVuY2UgdG8gYWN0dWFsbHkgYXBwZWFyIGluIGEgZGlmZmVyZW50IGNvbnRleHQsIHNvIHdlIGp1c3QgbGV2ZXJhZ2UgdGhpcyBmYWN0IGhlcmVcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKHBvc2l0aW9uIC0gMSwgcG9pbnRzLCBpbmRleCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZGVsaW1pdChjaGFyYWN0ZXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICAvLyBjb21tYVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSA0NCkge1xuICAgICAgICAgIC8vIGNvbG9uXG4gICAgICAgICAgcGFyc2VkWysraW5kZXhdID0gcGVlaygpID09PSA1OCA/ICcmXFxmJyA6ICcnO1xuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSBwYXJzZWRbaW5kZXhdLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxsdGhyb3VnaFxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGZyb20oY2hhcmFjdGVyKTtcbiAgICB9XG4gIH0gd2hpbGUgKGNoYXJhY3RlciA9IG5leHQoKSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbnZhciBnZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpIHtcbiAgcmV0dXJuIGRlYWxsb2ModG9SdWxlcyhhbGxvYyh2YWx1ZSksIHBvaW50cykpO1xufTsgLy8gV2Vha1NldCB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLCBidXQgb25seSBXZWFrTWFwIGlzIHN1cHBvcnRlZCBpbiBJRTExXG5cblxudmFyIGZpeGVkRWxlbWVudHMgPSAvKiAjX19QVVJFX18gKi9uZXcgV2Vha01hcCgpO1xudmFyIGNvbXBhdCA9IGZ1bmN0aW9uIGNvbXBhdChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCAhZWxlbWVudC5wYXJlbnQgfHwgLy8gcG9zaXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgY29udGFpbnMgcHNldWRvXG4gIC8vIG5lZ2F0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGhhcyBiZWVuIGFscmVhZHkgcHJlZml4ZWRcbiAgZWxlbWVudC5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZSxcbiAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50O1xuICB2YXIgaXNJbXBsaWNpdFJ1bGUgPSBlbGVtZW50LmNvbHVtbiA9PT0gcGFyZW50LmNvbHVtbiAmJiBlbGVtZW50LmxpbmUgPT09IHBhcmVudC5saW5lO1xuXG4gIHdoaWxlIChwYXJlbnQudHlwZSAhPT0gJ3J1bGUnKSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICB9IC8vIHNob3J0LWNpcmN1aXQgZm9yIHRoZSBzaW1wbGVzdCBjYXNlXG5cblxuICBpZiAoZWxlbWVudC5wcm9wcy5sZW5ndGggPT09IDEgJiYgdmFsdWUuY2hhckNvZGVBdCgwKSAhPT0gNThcbiAgLyogY29sb24gKi9cbiAgJiYgIWZpeGVkRWxlbWVudHMuZ2V0KHBhcmVudCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gaWYgdGhpcyBpcyBhbiBpbXBsaWNpdGx5IGluc2VydGVkIHJ1bGUgKHRoZSBvbmUgZWFnZXJseSBpbnNlcnRlZCBhdCB0aGUgZWFjaCBuZXcgbmVzdGVkIGxldmVsKVxuICAvLyB0aGVuIHRoZSBwcm9wcyBoYXMgYWxyZWFkeSBiZWVuIG1hbmlwdWxhdGVkIGJlZm9yZWhhbmQgYXMgdGhleSB0aGF0IGFycmF5IGlzIHNoYXJlZCBiZXR3ZWVuIGl0IGFuZCBpdHMgXCJydWxlIHBhcmVudFwiXG5cblxuICBpZiAoaXNJbXBsaWNpdFJ1bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaXhlZEVsZW1lbnRzLnNldChlbGVtZW50LCB0cnVlKTtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgcnVsZXMgPSBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKTtcbiAgdmFyIHBhcmVudFJ1bGVzID0gcGFyZW50LnByb3BzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJlbnRSdWxlcy5sZW5ndGg7IGorKywgaysrKSB7XG4gICAgICBlbGVtZW50LnByb3BzW2tdID0gcG9pbnRzW2ldID8gcnVsZXNbaV0ucmVwbGFjZSgvJlxcZi9nLCBwYXJlbnRSdWxlc1tqXSkgOiBwYXJlbnRSdWxlc1tqXSArIFwiIFwiICsgcnVsZXNbaV07XG4gICAgfVxuICB9XG59O1xudmFyIHJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlID09PSAnZGVjbCcpIHtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuXG4gICAgaWYgKCAvLyBjaGFyY29kZSBmb3IgbFxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDEwOCAmJiAvLyBjaGFyY29kZSBmb3IgYlxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMikgPT09IDk4KSB7XG4gICAgICAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgICAgIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgICB9XG4gIH1cbn07XG52YXIgaWdub3JlRmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuXG52YXIgaXNJZ25vcmluZ0NvbW1lbnQgPSBmdW5jdGlvbiBpc0lnbm9yaW5nQ29tbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUgPT09ICdjb21tJyAmJiBlbGVtZW50LmNoaWxkcmVuLmluZGV4T2YoaWdub3JlRmxhZykgPiAtMTtcbn07XG5cbnZhciBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSA9IGZ1bmN0aW9uIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKGNhY2hlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8IGNhY2hlLmNvbXBhdCkgcmV0dXJuO1xuICAgIHZhciB1bnNhZmVQc2V1ZG9DbGFzc2VzID0gZWxlbWVudC52YWx1ZS5tYXRjaCgvKDpmaXJzdHw6bnRofDpudGgtbGFzdCktY2hpbGQvZyk7XG5cbiAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3Nlcykge1xuICAgICAgdmFyIGlzTmVzdGVkID0gISFlbGVtZW50LnBhcmVudDsgLy8gaW4gbmVzdGVkIHJ1bGVzIGNvbW1lbnRzIGJlY29tZSBjaGlsZHJlbiBvZiB0aGUgXCJhdXRvLWluc2VydGVkXCIgcnVsZSBhbmQgdGhhdCdzIGFsd2F5cyB0aGUgYGVsZW1lbnQucGFyZW50YFxuICAgICAgLy9cbiAgICAgIC8vIGNvbnNpZGVyaW5nIHRoaXMgaW5wdXQ6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgIC5iIC8qIGNvbW0gKi8ge31cbiAgICAgIC8vICAgY29sb3I6IGhvdHBpbms7XG4gICAgICAvLyB9XG4gICAgICAvLyB3ZSBnZXQgb3V0cHV0IGNvcnJlc3BvbmRpbmcgdG8gdGhpczpcbiAgICAgIC8vIC5hIHtcbiAgICAgIC8vICAgJiB7XG4gICAgICAvLyAgICAgLyogY29tbSAqL1xuICAgICAgLy8gICAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gICB9XG4gICAgICAvLyAgIC5iIHt9XG4gICAgICAvLyB9XG5cbiAgICAgIHZhciBjb21tZW50Q29udGFpbmVyID0gaXNOZXN0ZWQgPyBlbGVtZW50LnBhcmVudC5jaGlsZHJlbiA6IC8vIGdsb2JhbCBydWxlIGF0IHRoZSByb290IGxldmVsXG4gICAgICBjaGlsZHJlbjtcblxuICAgICAgZm9yICh2YXIgaSA9IGNvbW1lbnRDb250YWluZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjb21tZW50Q29udGFpbmVyW2ldO1xuXG4gICAgICAgIGlmIChub2RlLmxpbmUgPCBlbGVtZW50LmxpbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBpdCBpcyBxdWl0ZSB3ZWlyZCBidXQgY29tbWVudHMgYXJlICp1c3VhbGx5KiBwdXQgYXQgYGNvbHVtbjogZWxlbWVudC5jb2x1bW4gLSAxYFxuICAgICAgICAvLyBzbyB3ZSBzZWVrICpmcm9tIHRoZSBlbmQqIGZvciB0aGUgbm9kZSB0aGF0IGlzIGVhcmxpZXIgdGhhbiB0aGUgcnVsZSdzIGBlbGVtZW50YCBhbmQgY2hlY2sgdGhhdFxuICAgICAgICAvLyB0aGlzIHdpbGwgYWxzbyBtYXRjaCBpbnB1dHMgbGlrZSB0aGlzOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLyogY29tbSAqL1xuICAgICAgICAvLyAgIC5iIHt9XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gYnV0IHRoYXQgaXMgZmluZVxuICAgICAgICAvL1xuICAgICAgICAvLyBpdCB3b3VsZCBiZSB0aGUgZWFzaWVzdCB0byBjaGFuZ2UgdGhlIHBsYWNlbWVudCBvZiB0aGUgY29tbWVudCB0byBiZSB0aGUgZmlyc3QgY2hpbGQgb2YgdGhlIHJ1bGU6XG4gICAgICAgIC8vIC5hIHtcbiAgICAgICAgLy8gICAuYiB7IC8qIGNvbW0gKi8gfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHdpdGggc3VjaCBpbnB1dHMgd2Ugd291bGRuJ3QgaGF2ZSB0byBzZWFyY2ggZm9yIHRoZSBjb21tZW50IGF0IGFsbFxuICAgICAgICAvLyBUT0RPOiBjb25zaWRlciBjaGFuZ2luZyB0aGlzIGNvbW1lbnQgcGxhY2VtZW50IGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cblxuXG4gICAgICAgIGlmIChub2RlLmNvbHVtbiA8IGVsZW1lbnQuY29sdW1uKSB7XG4gICAgICAgICAgaWYgKGlzSWdub3JpbmdDb21tZW50KG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdW5zYWZlUHNldWRvQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh1bnNhZmVQc2V1ZG9DbGFzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHBzZXVkbyBjbGFzcyBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcyArIFwiXFxcIiBpcyBwb3RlbnRpYWxseSB1bnNhZmUgd2hlbiBkb2luZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFRyeSBjaGFuZ2luZyBpdCB0byBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcy5zcGxpdCgnLWNoaWxkJylbMF0gKyBcIi1vZi10eXBlXFxcIi5cIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgaXNJbXBvcnRSdWxlID0gZnVuY3Rpb24gaXNJbXBvcnRSdWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDEpID09PSAxMDUgJiYgZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMCkgPT09IDY0O1xufTtcblxudmFyIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyA9IGZ1bmN0aW9uIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoIWlzSW1wb3J0UnVsZShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIHVzZSB0aGlzIHRvIHJlbW92ZSBpbmNvcnJlY3QgZWxlbWVudHMgZnJvbSBmdXJ0aGVyIHByb2Nlc3Npbmdcbi8vIHNvIHRoZXkgZG9uJ3QgZ2V0IGhhbmRlZCB0byB0aGUgYHNoZWV0YCAob3IgYW55dGhpbmcgZWxzZSlcbi8vIGFzIHRoYXQgY291bGQgcG90ZW50aWFsbHkgbGVhZCB0byBhZGRpdGlvbmFsIGxvZ3Mgd2hpY2ggaW4gdHVybiBjb3VsZCBiZSBvdmVyaGVsbWluZyB0byB0aGUgdXNlclxuXG5cbnZhciBudWxsaWZ5RWxlbWVudCA9IGZ1bmN0aW9uIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpIHtcbiAgZWxlbWVudC50eXBlID0gJyc7XG4gIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICBlbGVtZW50LmNoaWxkcmVuID0gJyc7XG4gIGVsZW1lbnQucHJvcHMgPSAnJztcbn07XG5cbnZhciBpbmNvcnJlY3RJbXBvcnRBbGFybSA9IGZ1bmN0aW9uIGluY29ycmVjdEltcG9ydEFsYXJtKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICBpZiAoIWlzSW1wb3J0UnVsZShlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbGVtZW50LnBhcmVudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgbmVzdGVkIGluc2lkZSBvdGhlciBydWxlcy4gUGxlYXNlIG1vdmUgaXQgdG8gdGhlIHRvcCBsZXZlbCBhbmQgcHV0IGl0IGJlZm9yZSByZWd1bGFyIHJ1bGVzLiBLZWVwIGluIG1pbmQgdGhhdCB0aGV5IGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIGdsb2JhbCBzdHlsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9IGVsc2UgaWYgKGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pKSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBhZnRlciBvdGhlciBydWxlcy4gUGxlYXNlIHB1dCB5b3VyIGBAaW1wb3J0YCBydWxlcyBiZWZvcmUgeW91ciBvdGhlciBydWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbmZ1bmN0aW9uIHByZWZpeCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHN3aXRjaCAoaGFzaCh2YWx1ZSwgbGVuZ3RoKSkge1xuICAgIC8vIGNvbG9yLWFkanVzdFxuICAgIGNhc2UgNTEwMzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAncHJpbnQtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYW5pbWF0aW9uLCBhbmltYXRpb24tKGRlbGF5fGRpcmVjdGlvbnxkdXJhdGlvbnxmaWxsLW1vZGV8aXRlcmF0aW9uLWNvdW50fG5hbWV8cGxheS1zdGF0ZXx0aW1pbmctZnVuY3Rpb24pXG5cbiAgICBjYXNlIDU3Mzc6XG4gICAgY2FzZSA0MjAxOlxuICAgIGNhc2UgMzE3NzpcbiAgICBjYXNlIDM0MzM6XG4gICAgY2FzZSAxNjQxOlxuICAgIGNhc2UgNDQ1NzpcbiAgICBjYXNlIDI5MjE6IC8vIHRleHQtZGVjb3JhdGlvbiwgZmlsdGVyLCBjbGlwLXBhdGgsIGJhY2tmYWNlLXZpc2liaWxpdHksIGNvbHVtbiwgYm94LWRlY29yYXRpb24tYnJlYWtcblxuICAgIGNhc2UgNTU3MjpcbiAgICBjYXNlIDYzNTY6XG4gICAgY2FzZSA1ODQ0OlxuICAgIGNhc2UgMzE5MTpcbiAgICBjYXNlIDY2NDU6XG4gICAgY2FzZSAzMDA1OiAvLyBtYXNrLCBtYXNrLWltYWdlLCBtYXNrLShtb2RlfGNsaXB8c2l6ZSksIG1hc2stKHJlcGVhdHxvcmlnaW4pLCBtYXNrLXBvc2l0aW9uLCBtYXNrLWNvbXBvc2l0ZSxcblxuICAgIGNhc2UgNjM5MTpcbiAgICBjYXNlIDU4Nzk6XG4gICAgY2FzZSA1NjIzOlxuICAgIGNhc2UgNjEzNTpcbiAgICBjYXNlIDQ1OTk6XG4gICAgY2FzZSA0ODU1OiAvLyBiYWNrZ3JvdW5kLWNsaXAsIGNvbHVtbnMsIGNvbHVtbi0oY291bnR8ZmlsbHxnYXB8cnVsZXxydWxlLWNvbG9yfHJ1bGUtc3R5bGV8cnVsZS13aWR0aHxzcGFufHdpZHRoKVxuXG4gICAgY2FzZSA0MjE1OlxuICAgIGNhc2UgNjM4OTpcbiAgICBjYXNlIDUxMDk6XG4gICAgY2FzZSA1MzY1OlxuICAgIGNhc2UgNTYyMTpcbiAgICBjYXNlIDM4Mjk6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBhcHBlYXJhbmNlLCB1c2VyLXNlbGVjdCwgdHJhbnNmb3JtLCBoeXBoZW5zLCB0ZXh0LXNpemUtYWRqdXN0XG5cbiAgICBjYXNlIDUzNDk6XG4gICAgY2FzZSA0MjQ2OlxuICAgIGNhc2UgNDgxMDpcbiAgICBjYXNlIDY5Njg6XG4gICAgY2FzZSAyNzU2OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gZmxleCwgZmxleC1kaXJlY3Rpb25cblxuICAgIGNhc2UgNjgyODpcbiAgICBjYXNlIDQyNjg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gb3JkZXJcblxuICAgIGNhc2UgNjE2NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYWxpZ24taXRlbXNcblxuICAgIGNhc2UgNTE4NzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHJlcGxhY2UodmFsdWUsIC8oXFx3KykuKyg6W15dKykvLCBXRUJLSVQgKyAnYm94LSQxJDInICsgTVMgKyAnZmxleC0kMSQyJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1zZWxmXG5cbiAgICBjYXNlIDU0NDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWl0ZW0tJyArIHJlcGxhY2UodmFsdWUsIC9mbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWNvbnRlbnRcblxuICAgIGNhc2UgNDY3NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtbGluZS1wYWNrJyArIHJlcGxhY2UodmFsdWUsIC9hbGlnbi1jb250ZW50fGZsZXgtfC1zZWxmLywgJycpICsgdmFsdWU7XG4gICAgLy8gZmxleC1zaHJpbmtcblxuICAgIGNhc2UgNTU0ODpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ3NocmluaycsICduZWdhdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gZmxleC1iYXNpc1xuXG4gICAgY2FzZSA1MjkyOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtZ3Jvd1xuXG4gICAgY2FzZSA2MDYwOlxuICAgICAgcmV0dXJuIFdFQktJVCArICdib3gtJyArIHJlcGxhY2UodmFsdWUsICctZ3JvdycsICcnKSArIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnZ3JvdycsICdwb3NpdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gdHJhbnNpdGlvblxuXG4gICAgY2FzZSA0NTU0OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHJlcGxhY2UodmFsdWUsIC8oW14tXSkodHJhbnNmb3JtKS9nLCAnJDEnICsgV0VCS0lUICsgJyQyJykgKyB2YWx1ZTtcbiAgICAvLyBjdXJzb3JcblxuICAgIGNhc2UgNjE4NzpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyh6b29tLXxncmFiKS8sIFdFQktJVCArICckMScpLCAvKGltYWdlLXNldCkvLCBXRUJLSVQgKyAnJDEnKSwgdmFsdWUsICcnKSArIHZhbHVlO1xuICAgIC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2VcblxuICAgIGNhc2UgNTQ5NTpcbiAgICBjYXNlIDM5NTk6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyhpbWFnZS1zZXRcXChbXl0qKS8sIFdFQktJVCArICckMScgKyAnJGAkMScpO1xuICAgIC8vIGp1c3RpZnktY29udGVudFxuXG4gICAgY2FzZSA0OTY4OlxuICAgICAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyguKzopKGZsZXgtKT8oLiopLywgV0VCS0lUICsgJ2JveC1wYWNrOiQzJyArIE1TICsgJ2ZsZXgtcGFjazokMycpLCAvcy4rLWJbXjtdKy8sICdqdXN0aWZ5JykgKyBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIChtYXJnaW58cGFkZGluZyktaW5saW5lLShzdGFydHxlbmQpXG5cbiAgICBjYXNlIDQwOTU6XG4gICAgY2FzZSAzNTgzOlxuICAgIGNhc2UgNDA2ODpcbiAgICBjYXNlIDI1MzI6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZTtcbiAgICAvLyAobWlufG1heCk/KHdpZHRofGhlaWdodHxpbmxpbmUtc2l6ZXxibG9jay1zaXplKVxuXG4gICAgY2FzZSA4MTE2OlxuICAgIGNhc2UgNzA1OTpcbiAgICBjYXNlIDU3NTM6XG4gICAgY2FzZSA1NTM1OlxuICAgIGNhc2UgNTQ0NTpcbiAgICBjYXNlIDU3MDE6XG4gICAgY2FzZSA0OTMzOlxuICAgIGNhc2UgNDY3NzpcbiAgICBjYXNlIDU1MzM6XG4gICAgY2FzZSA1Nzg5OlxuICAgIGNhc2UgNTAyMTpcbiAgICBjYXNlIDQ3NjU6XG4gICAgICAvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG4gICAgICBpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KSBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcbiAgICAgICAgLy8gKG0pYXgtY29udGVudCwgKG0paW4tY29udGVudFxuICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAvLyAtXG4gICAgICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgNCkgIT09IDQ1KSBicmVhaztcbiAgICAgICAgLy8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoLispLShbXl0rKS8sICckMScgKyBXRUJLSVQgKyAnJDItJDMnICsgJyQxJyArIE1PWiArIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDMpID09IDEwOCA/ICckMycgOiAnJDItJDMnKSkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKHMpdHJldGNoXG5cbiAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgcmV0dXJuIH5pbmRleG9mKHZhbHVlLCAnc3RyZXRjaCcpID8gcHJlZml4KHJlcGxhY2UodmFsdWUsICdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGxlbmd0aCkgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgLy8gcG9zaXRpb246IHN0aWNreVxuXG4gICAgY2FzZSA0OTQ5OlxuICAgICAgLy8gKHMpdGlja3k/XG4gICAgICBpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSAhPT0gMTE1KSBicmVhaztcbiAgICAvLyBkaXNwbGF5OiAoZmxleHxpbmxpbmUtZmxleClcblxuICAgIGNhc2UgNjQ0NDpcbiAgICAgIHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBzdHJsZW4odmFsdWUpIC0gMyAtICh+aW5kZXhvZih2YWx1ZSwgJyFpbXBvcnRhbnQnKSAmJiAxMCkpKSB7XG4gICAgICAgIC8vIHN0aWMoayl5XG4gICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIFdFQktJVCkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKGlubGluZS0pP2ZsKGUpeFxuXG4gICAgICAgIGNhc2UgMTAxOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoW147IV0rKSg7fCEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgLy8gd3JpdGluZy1tb2RlXG5cbiAgICBjYXNlIDU5MzY6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG4gICAgICAgIC8vIHZlcnRpY2FsLWwocilcbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWU7XG4gICAgICAgIC8vIHZlcnRpY2FsLXIobClcblxuICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZTtcbiAgICAgICAgLy8gaG9yaXpvbnRhbCgtKXRiXG5cbiAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgcHJlZml4ZXIgPSBmdW5jdGlvbiBwcmVmaXhlcihlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKSBpZiAoIWVsZW1lbnRbXCJyZXR1cm5cIl0pIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG4gICAgY2FzZSBERUNMQVJBVElPTjpcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIEtFWUZSQU1FUzpcbiAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICB2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVClcbiAgICAgIH0pXSwgY2FsbGJhY2spO1xuXG4gICAgY2FzZSBSVUxFU0VUOlxuICAgICAgaWYgKGVsZW1lbnQubGVuZ3RoKSByZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcbiAgICAgICAgICAvLyA6cmVhZC0ob25seXx3cml0ZSlcbiAgICAgICAgICBjYXNlICc6cmVhZC1vbmx5JzpcbiAgICAgICAgICBjYXNlICc6cmVhZC13cml0ZSc6XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAvLyA6cGxhY2Vob2xkZXJcblxuICAgICAgICAgIGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV1cbiAgICAgICAgICAgIH0pXSwgY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0U3R5bGlzUGx1Z2lucyA9IFtwcmVmaXhlcl07XG5cbnZhciBjcmVhdGVDYWNoZSA9IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKG9wdGlvbnMpIHtcbiAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgaGF2ZSB0byBjb25maWd1cmUgYGtleWAgZm9yIHlvdXIgY2FjaGUuIFBsZWFzZSBtYWtlIHN1cmUgaXQncyB1bmlxdWUgKGFuZCBub3QgZXF1YWwgdG8gJ2NzcycpIGFzIGl0J3MgdXNlZCBmb3IgbGlua2luZyBzdHlsZXMgdG8geW91ciBjYWNoZS5cXG5cIiArIFwiSWYgbXVsdGlwbGUgY2FjaGVzIHNoYXJlIHRoZSBzYW1lIGtleSB0aGV5IG1pZ2h0IFxcXCJmaWdodFxcXCIgZm9yIGVhY2ggb3RoZXIncyBzdHlsZSBlbGVtZW50cy5cIik7XG4gIH1cblxuICBpZiAoa2V5ID09PSAnY3NzJykge1xuICAgIHZhciBzc3JTdHlsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXTpub3QoW2RhdGEtc10pXCIpOyAvLyBnZXQgU1NSZWQgc3R5bGVzIG91dCBvZiB0aGUgd2F5IG9mIFJlYWN0J3MgaHlkcmF0aW9uXG4gICAgLy8gZG9jdW1lbnQuaGVhZCBpcyBhIHNhZmUgcGxhY2UgdG8gbW92ZSB0aGVtIHRvKHRob3VnaCBub3RlIGRvY3VtZW50LmhlYWQgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBsYXN0IHBsYWNlIHRoZXkgd2lsbCBiZSlcbiAgICAvLyBub3RlIHRoaXMgdmVyeSB2ZXJ5IGludGVudGlvbmFsbHkgdGFyZ2V0cyBhbGwgc3R5bGUgZWxlbWVudHMgcmVnYXJkbGVzcyBvZiB0aGUga2V5IHRvIGVuc3VyZVxuICAgIC8vIHRoYXQgY3JlYXRpbmcgYSBjYWNoZSB3b3JrcyBpbnNpZGUgb2YgcmVuZGVyIG9mIGEgUmVhY3QgY29tcG9uZW50XG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNzclN0eWxlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIHdlIHdhbnQgdG8gb25seSBtb3ZlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBzcGFjZSBpbiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgLy8gYmVjYXVzZSB0aGF0IGluZGljYXRlcyB0aGF0IGl0IGlzIGFuIEVtb3Rpb24gMTEgc2VydmVyLXNpZGUgcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICAgIC8vIHdoaWxlIHdlIHdpbGwgYWxyZWFkeSBpZ25vcmUgRW1vdGlvbiAxMSBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgYmVjYXVzZSBvZiB0aGUgOm5vdChbZGF0YS1zXSkgcGFydCBpbiB0aGUgc2VsZWN0b3JcbiAgICAgIC8vIEVtb3Rpb24gMTAgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGRpZCBub3QgaGF2ZSBkYXRhLXMgKGJ1dCBpbXBvcnRhbnRseSBkaWQgbm90IGhhdmUgYSBzcGFjZSBpbiB0aGVpciBkYXRhLWVtb3Rpb24gYXR0cmlidXRlcylcbiAgICAgIC8vIHNvIGNoZWNraW5nIGZvciB0aGUgc3BhY2UgZW5zdXJlcyB0aGF0IGxvYWRpbmcgRW1vdGlvbiAxMSBhZnRlciBFbW90aW9uIDEwIGhhcyBpbnNlcnRlZCBzb21lIHN0eWxlc1xuICAgICAgLy8gd2lsbCBub3QgcmVzdWx0IGluIHRoZSBFbW90aW9uIDEwIHN0eWxlcyBiZWluZyBkZXN0cm95ZWRcbiAgICAgIHZhciBkYXRhRW1vdGlvbkF0dHJpYnV0ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nKTtcblxuICAgICAgaWYgKGRhdGFFbW90aW9uQXR0cmlidXRlLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgc3R5bGlzUGx1Z2lucyA9IG9wdGlvbnMuc3R5bGlzUGx1Z2lucyB8fCBkZWZhdWx0U3R5bGlzUGx1Z2lucztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307XG4gIHZhciBjb250YWluZXI7XG4gIHZhciBub2Rlc1RvSHlkcmF0ZSA9IFtdO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoIC8vIHRoaXMgbWVhbnMgd2Ugd2lsbCBpZ25vcmUgZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhIHNwYWNlIGluIHRoZW0gd2hpY2hcbiAgICAvLyBtZWFucyB0aGF0IHRoZSBzdHlsZSBlbGVtZW50cyB3ZSdyZSBsb29raW5nIGF0IGFyZSBvbmx5IEVtb3Rpb24gMTEgc2VydmVyLXJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl49XFxcIlwiICsga2V5ICsgXCIgXFxcIl1cIiksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXR0cmliID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb25cIikuc3BsaXQoJyAnKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGF0dHJpYi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnNlcnRlZFthdHRyaWJbaV1dID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZXNUb0h5ZHJhdGUucHVzaChub2RlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfaW5zZXJ0O1xuXG4gIHZhciBvbW5pcHJlc2VudFBsdWdpbnMgPSBbY29tcGF0LCByZW1vdmVMYWJlbF07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBvbW5pcHJlc2VudFBsdWdpbnMucHVzaChjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSh7XG4gICAgICBnZXQgY29tcGF0KCkge1xuICAgICAgICByZXR1cm4gY2FjaGUuY29tcGF0O1xuICAgICAgfVxuXG4gICAgfSksIGluY29ycmVjdEltcG9ydEFsYXJtKTtcbiAgfVxuXG4gIHtcbiAgICB2YXIgY3VycmVudFNoZWV0O1xuICAgIHZhciBmaW5hbGl6aW5nUGx1Z2lucyA9IFtzdHJpbmdpZnksIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKCFlbGVtZW50LnJvb3QpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnRbXCJyZXR1cm5cIl0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudmFsdWUgJiYgZWxlbWVudC50eXBlICE9PSBDT01NRU5UKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGVtcHR5IHJ1bGUgaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXG4gICAgICAgICAgLy8gc28gQGVtb3Rpb24vamVzdCBjYW4gZ3JhYiBga2V5YCBmcm9tIHRoZSAoSlMpRE9NIGZvciBjYWNoZXMgd2l0aG91dCBhbnkgcnVsZXMgaW5zZXJ0ZWQgeWV0XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50LnZhbHVlICsgXCJ7fVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gOiBydWxlc2hlZXQoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQocnVsZSk7XG4gICAgfSldO1xuICAgIHZhciBzZXJpYWxpemVyID0gbWlkZGxld2FyZShvbW5pcHJlc2VudFBsdWdpbnMuY29uY2F0KHN0eWxpc1BsdWdpbnMsIGZpbmFsaXppbmdQbHVnaW5zKSk7XG5cbiAgICB2YXIgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHN0eWxlcykge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZShjb21waWxlKHN0eWxlcyksIHNlcmlhbGl6ZXIpO1xuICAgIH07XG5cbiAgICBfaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHNlbGVjdG9yLCBzZXJpYWxpemVkLCBzaGVldCwgc2hvdWxkQ2FjaGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldCA9IHNoZWV0O1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN1cnJlbnRTaGVldCA9IHtcbiAgICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgICAgICAgICBzaGVldC5pbnNlcnQocnVsZSArIHNlcmlhbGl6ZWQubWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN0eWxpcyhzZWxlY3RvciA/IHNlbGVjdG9yICsgXCJ7XCIgKyBzZXJpYWxpemVkLnN0eWxlcyArIFwifVwiIDogc2VyaWFsaXplZC5zdHlsZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeSxcbiAgICAgIHByZXBlbmQ6IG9wdGlvbnMucHJlcGVuZCxcbiAgICAgIGluc2VydGlvblBvaW50OiBvcHRpb25zLmluc2VydGlvblBvaW50XG4gICAgfSksXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgaW5zZXJ0ZWQ6IGluc2VydGVkLFxuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydDogX2luc2VydFxuICB9O1xuICBjYWNoZS5zaGVldC5oeWRyYXRlKG5vZGVzVG9IeWRyYXRlKTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQ2FjaGUgYXMgZGVmYXVsdCB9O1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgeyBtZW1vaXplIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnRleHQsIGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdlYWtNZW1vaXplIGZyb20gJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnLi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xudmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG52YXIgRW1vdGlvbkNhY2hlQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL1JlYWN0LmNyZWF0ZUNvbnRleHQoIC8vIHdlJ3JlIGRvaW5nIHRoaXMgdG8gYXZvaWQgcHJlY29uc3RydWN0J3MgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGluIHRoaXMgb25lIGNhc2Vcbi8vIGJlY2F1c2UgdGhpcyBtb2R1bGUgaXMgcHJpbWFyaWx5IGludGVuZGVkIGZvciB0aGUgYnJvd3NlciBhbmQgbm9kZVxuLy8gYnV0IGl0J3MgYWxzbyByZXF1aXJlZCBpbiByZWFjdCBuYXRpdmUgYW5kIHNpbWlsYXIgZW52aXJvbm1lbnRzIHNvbWV0aW1lc1xuLy8gYW5kIHdlIGNvdWxkIGhhdmUgYSBzcGVjaWFsIGJ1aWxkIGp1c3QgZm9yIHRoYXRcbi8vIGJ1dCB0aGlzIGlzIG11Y2ggZWFzaWVyIGFuZCB0aGUgbmF0aXZlIHBhY2thZ2VzXG4vLyBtaWdodCB1c2UgYSBkaWZmZXJlbnQgdGhlbWUgY29udGV4dCBpbiB0aGUgZnV0dXJlIGFueXdheVxudHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNhY2hlKHtcbiAga2V5OiAnY3NzJ1xufSkgOiBudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRW1vdGlvbkNhY2hlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ2FjaGVDb250ZXh0Jztcbn1cblxudmFyIENhY2hlUHJvdmlkZXIgPSBFbW90aW9uQ2FjaGVDb250ZXh0LlByb3ZpZGVyO1xudmFyIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHVzZUVtb3Rpb25DYWNoZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG59O1xuXG52YXIgd2l0aEVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHdpdGhFbW90aW9uQ2FjaGUoZnVuYykge1xuICAvLyAkRmxvd0ZpeE1lXG4gIHJldHVybiAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIC8vIHRoZSBjYWNoZSB3aWxsIG5ldmVyIGJlIG51bGwgaW4gdGhlIGJyb3dzZXJcbiAgICB2YXIgY2FjaGUgPSB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xuICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSwgcmVmKTtcbiAgfSk7XG59O1xuXG5pZiAoIWlzQnJvd3Nlcikge1xuICB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcblxuICAgICAgaWYgKGNhY2hlID09PSBudWxsKSB7XG4gICAgICAgIC8vIHllcywgd2UncmUgcG90ZW50aWFsbHkgY3JlYXRpbmcgdGhpcyBvbiBldmVyeSByZW5kZXJcbiAgICAgICAgLy8gaXQgZG9lc24ndCBhY3R1YWxseSBtYXR0ZXIgdGhvdWdoIHNpbmNlIGl0J3Mgb25seSBvbiB0aGUgc2VydmVyXG4gICAgICAgIC8vIHNvIHRoZXJlIHdpbGwgb25seSBldmVyeSBiZSBhIHNpbmdsZSByZW5kZXJcbiAgICAgICAgLy8gdGhhdCBjb3VsZCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSBiZWNhdXNlIG9mIHN1c3BlbnNlIGFuZCBldGMuIGJ1dCBmb3Igbm93LFxuICAgICAgICAvLyB0aGlzIHdvcmtzIGFuZCBpIGRvbid0IHdhbnQgdG8gb3B0aW1pc2UgZm9yIGEgZnV0dXJlIHRoaW5nIHRoYXQgd2UgYXJlbid0IHN1cmUgYWJvdXRcbiAgICAgICAgY2FjaGUgPSBjcmVhdGVDYWNoZSh7XG4gICAgICAgICAga2V5OiAnY3NzJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgICB2YWx1ZTogY2FjaGVcbiAgICAgICAgfSwgZnVuYyhwcm9wcywgY2FjaGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL1JlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldExhc3RQYXJ0ID0gZnVuY3Rpb24gZ2V0TGFzdFBhcnQoZnVuY3Rpb25OYW1lKSB7XG4gIC8vIFRoZSBtYXRjaCBtYXkgYmUgc29tZXRoaW5nIGxpa2UgJ09iamVjdC5jcmVhdGVFbW90aW9uUHJvcHMnIG9yXG4gIC8vICdMb2FkZXIucHJvdG90eXBlLnJlbmRlcidcbiAgdmFyIHBhcnRzID0gZnVuY3Rpb25OYW1lLnNwbGl0KCcuJyk7XG4gIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbn07XG5cbnZhciBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUgPSBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZSkge1xuICAvLyBWOFxuICB2YXIgbWF0Y2ggPSAvXlxccythdFxccysoW0EtWmEtejAtOSQuXSspXFxzLy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2gpIHJldHVybiBnZXRMYXN0UGFydChtYXRjaFsxXSk7IC8vIFNhZmFyaSAvIEZpcmVmb3hcblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciBpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcyA9IC8qICNfX1BVUkVfXyAqL25ldyBTZXQoWydyZW5kZXJXaXRoSG9va3MnLCAncHJvY2Vzc0NoaWxkJywgJ2ZpbmlzaENsYXNzQ29tcG9uZW50JywgJ3JlbmRlclRvU3RyaW5nJ10pOyAvLyBUaGVzZSBpZGVudGlmaWVycyBjb21lIGZyb20gZXJyb3Igc3RhY2tzLCBzbyB0aGV5IGhhdmUgdG8gYmUgdmFsaWQgSlNcbi8vIGlkZW50aWZpZXJzLCB0aHVzIHdlIG9ubHkgbmVlZCB0byByZXBsYWNlIHdoYXQgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgZm9yIEpTLFxuLy8gYnV0IG5vdCBmb3IgQ1NTLlxuXG52YXIgc2FuaXRpemVJZGVudGlmaWVyID0gZnVuY3Rpb24gc2FuaXRpemVJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIucmVwbGFjZSgvXFwkL2csICctJyk7XG59O1xuXG52YXIgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIGdldExhYmVsRnJvbVN0YWNrVHJhY2Uoc3RhY2tUcmFjZSkge1xuICBpZiAoIXN0YWNrVHJhY2UpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBsaW5lcyA9IHN0YWNrVHJhY2Uuc3BsaXQoJ1xcbicpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lKGxpbmVzW2ldKTsgLy8gVGhlIGZpcnN0IGxpbmUgb2YgVjggc3RhY2sgdHJhY2VzIGlzIGp1c3QgXCJFcnJvclwiXG5cbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkgY29udGludWU7IC8vIElmIHdlIHJlYWNoIG9uZSBvZiB0aGVzZSwgd2UgaGF2ZSBnb25lIHRvbyBmYXIgYW5kIHNob3VsZCBxdWl0XG5cbiAgICBpZiAoaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMuaGFzKGZ1bmN0aW9uTmFtZSkpIGJyZWFrOyAvLyBUaGUgY29tcG9uZW50IG5hbWUgaXMgdGhlIGZpcnN0IGZ1bmN0aW9uIGluIHRoZSBzdGFjayB0aGF0IHN0YXJ0cyB3aXRoIGFuXG4gICAgLy8gdXBwZXJjYXNlIGxldHRlclxuXG4gICAgaWYgKC9eW0EtWl0vLnRlc3QoZnVuY3Rpb25OYW1lKSkgcmV0dXJuIHNhbml0aXplSWRlbnRpZmllcihmdW5jdGlvbk5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciB0eXBlUHJvcE5hbWUgPSAnX19FTU9USU9OX1RZUEVfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgbGFiZWxQcm9wTmFtZSA9ICdfX0VNT1RJT05fTEFCRUxfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgY3JlYXRlRW1vdGlvblByb3BzID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBwcm9wcy5jc3MgPT09ICdzdHJpbmcnICYmIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgY3NzIGRlY2xhcmF0aW9uXG4gIHByb3BzLmNzcy5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5ncyBhcmUgbm90IGFsbG93ZWQgYXMgY3NzIHByb3AgdmFsdWVzLCBwbGVhc2Ugd3JhcCBpdCBpbiBhIGNzcyB0ZW1wbGF0ZSBsaXRlcmFsIGZyb20gJ0BlbW90aW9uL3JlYWN0JyBsaWtlIHRoaXM6IGNzc2BcIiArIHByb3BzLmNzcyArIFwiYFwiKTtcbiAgfVxuXG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd24uY2FsbChwcm9wcywga2V5KSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHNbdHlwZVByb3BOYW1lXSA9IHR5cGU7IC8vIEZvciBwZXJmb3JtYW5jZSwgb25seSBjYWxsIGdldExhYmVsRnJvbVN0YWNrVHJhY2UgaW4gZGV2ZWxvcG1lbnQgYW5kIHdoZW5cbiAgLy8gdGhlIGxhYmVsIGhhc24ndCBhbHJlYWR5IGJlZW4gY29tcHV0ZWRcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhIXByb3BzLmNzcyAmJiAodHlwZW9mIHByb3BzLmNzcyAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHByb3BzLmNzcy5uYW1lICE9PSAnc3RyaW5nJyB8fCBwcm9wcy5jc3MubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSkge1xuICAgIHZhciBsYWJlbCA9IGdldExhYmVsRnJvbVN0YWNrVHJhY2UobmV3IEVycm9yKCkuc3RhY2spO1xuICAgIGlmIChsYWJlbCkgbmV3UHJvcHNbbGFiZWxQcm9wTmFtZV0gPSBsYWJlbDtcbiAgfVxuXG4gIHJldHVybiBuZXdQcm9wcztcbn07XG5cbnZhciBJbnNlcnRpb24gPSBmdW5jdGlvbiBJbnNlcnRpb24oX3JlZikge1xuICB2YXIgY2FjaGUgPSBfcmVmLmNhY2hlLFxuICAgICAgc2VyaWFsaXplZCA9IF9yZWYuc2VyaWFsaXplZCxcbiAgICAgIGlzU3RyaW5nVGFnID0gX3JlZi5pc1N0cmluZ1RhZztcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBFbW90aW9uID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgdmFyIGNzc1Byb3AgPSBwcm9wcy5jc3M7IC8vIHNvIHRoYXQgdXNpbmcgYGNzc2AgZnJvbSBgZW1vdGlvbmAgYW5kIHBhc3NpbmcgdGhlIHJlc3VsdCB0byB0aGUgY3NzIHByb3Agd29ya3NcbiAgLy8gbm90IHBhc3NpbmcgdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8gc2VyaWFsaXplU3R5bGVzIGJlY2F1c2UgaXQgd291bGRcbiAgLy8gbWFrZSBjZXJ0YWluIGJhYmVsIG9wdGltaXNhdGlvbnMgbm90IHBvc3NpYmxlXG5cbiAgaWYgKHR5cGVvZiBjc3NQcm9wID09PSAnc3RyaW5nJyAmJiBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICBjc3NQcm9wID0gY2FjaGUucmVnaXN0ZXJlZFtjc3NQcm9wXTtcbiAgfVxuXG4gIHZhciBXcmFwcGVkQ29tcG9uZW50ID0gcHJvcHNbdHlwZVByb3BOYW1lXTtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbY3NzUHJvcF07XG4gIHZhciBjbGFzc05hbWUgPSAnJztcblxuICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIHByb3BzLmNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMsIHVuZGVmaW5lZCwgUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkge1xuICAgIHZhciBsYWJlbEZyb21TdGFjayA9IHByb3BzW2xhYmVsUHJvcE5hbWVdO1xuXG4gICAgaWYgKGxhYmVsRnJvbVN0YWNrKSB7XG4gICAgICBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzZXJpYWxpemVkLCAnbGFiZWw6JyArIGxhYmVsRnJvbVN0YWNrICsgJzsnXSk7XG4gICAgfVxuICB9XG5cbiAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duLmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICBpc1N0cmluZ1RhZzogdHlwZW9mIFdyYXBwZWRDb21wb25lbnQgPT09ICdzdHJpbmcnXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBuZXdQcm9wcykpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59XG5cbnZhciBFbW90aW9uJDEgPSBFbW90aW9uO1xuXG5leHBvcnQgeyBDYWNoZVByb3ZpZGVyIGFzIEMsIEVtb3Rpb24kMSBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd24gYXMgaCwgaXNCcm93c2VyIGFzIGksIHVzZVRoZW1lIGFzIHUsIHdpdGhFbW90aW9uQ2FjaGUgYXMgdyB9O1xuIiwiaW1wb3J0IHsgaCBhcyBoYXNPd24sIEUgYXMgRW1vdGlvbiwgYyBhcyBjcmVhdGVFbW90aW9uUHJvcHMsIHcgYXMgd2l0aEVtb3Rpb25DYWNoZSwgVCBhcyBUaGVtZUNvbnRleHQsIGkgYXMgaXNCcm93c2VyJDEgfSBmcm9tICcuL2Vtb3Rpb24tZWxlbWVudC00M2M2ZmVhMC5icm93c2VyLmVzbS5qcyc7XG5leHBvcnQgeyBDIGFzIENhY2hlUHJvdmlkZXIsIFQgYXMgVGhlbWVDb250ZXh0LCBhIGFzIFRoZW1lUHJvdmlkZXIsIF8gYXMgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlLCB1IGFzIHVzZVRoZW1lLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIGIgYXMgd2l0aFRoZW1lIH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtNDNjNmZlYTAuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcywgZ2V0UmVnaXN0ZXJlZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjaywgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnLi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuXG52YXIgcGtnID0ge1xuXHRuYW1lOiBcIkBlbW90aW9uL3JlYWN0XCIsXG5cdHZlcnNpb246IFwiMTEuMTEuNFwiLFxuXHRtYWluOiBcImRpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIixcblx0bW9kdWxlOiBcImRpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIixcblx0YnJvd3Nlcjoge1xuXHRcdFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanNcIlxuXHR9LFxuXHRleHBvcnRzOiB7XG5cdFx0XCIuXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3Qud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJpbXBvcnRcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5janMubWpzXCIsXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2pzeC1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJpbXBvcnRcIjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5janMubWpzXCIsXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL19pc29sYXRlZC1obnJzXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJpbXBvcnRcIjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5janMubWpzXCIsXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2pzeC1kZXYtcnVudGltZVwiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiaW1wb3J0XCI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5janMubWpzXCIsXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vcGFja2FnZS5qc29uXCI6IFwiLi9wYWNrYWdlLmpzb25cIixcblx0XHRcIi4vdHlwZXMvY3NzLXByb3BcIjogXCIuL3R5cGVzL2Nzcy1wcm9wLmQudHNcIixcblx0XHRcIi4vbWFjcm9cIjoge1xuXHRcdFx0dHlwZXM6IHtcblx0XHRcdFx0XCJpbXBvcnRcIjogXCIuL21hY3JvLmQubXRzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vbWFjcm8uZC50c1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9tYWNyby5qc1wiXG5cdFx0fVxuXHR9LFxuXHR0eXBlczogXCJ0eXBlcy9pbmRleC5kLnRzXCIsXG5cdGZpbGVzOiBbXG5cdFx0XCJzcmNcIixcblx0XHRcImRpc3RcIixcblx0XHRcImpzeC1ydW50aW1lXCIsXG5cdFx0XCJqc3gtZGV2LXJ1bnRpbWVcIixcblx0XHRcIl9pc29sYXRlZC1obnJzXCIsXG5cdFx0XCJ0eXBlcy8qLmQudHNcIixcblx0XHRcIm1hY3JvLipcIlxuXHRdLFxuXHRzaWRlRWZmZWN0czogZmFsc2UsXG5cdGF1dGhvcjogXCJFbW90aW9uIENvbnRyaWJ1dG9yc1wiLFxuXHRsaWNlbnNlOiBcIk1JVFwiLFxuXHRzY3JpcHRzOiB7XG5cdFx0XCJ0ZXN0OnR5cGVzY3JpcHRcIjogXCJkdHNsaW50IHR5cGVzXCJcblx0fSxcblx0ZGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvcnVudGltZVwiOiBcIl43LjE4LjNcIixcblx0XHRcIkBlbW90aW9uL2JhYmVsLXBsdWdpblwiOiBcIl4xMS4xMS4wXCIsXG5cdFx0XCJAZW1vdGlvbi9jYWNoZVwiOiBcIl4xMS4xMS4wXCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJpYWxpemVcIjogXCJeMS4xLjNcIixcblx0XHRcIkBlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzXCI6IFwiXjEuMC4xXCIsXG5cdFx0XCJAZW1vdGlvbi91dGlsc1wiOiBcIl4xLjIuMVwiLFxuXHRcdFwiQGVtb3Rpb24vd2Vhay1tZW1vaXplXCI6IFwiXjAuMy4xXCIsXG5cdFx0XCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiOiBcIl4zLjMuMVwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXM6IHtcblx0XHRyZWFjdDogXCI+PTE2LjguMFwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXNNZXRhOiB7XG5cdFx0XCJAdHlwZXMvcmVhY3RcIjoge1xuXHRcdFx0b3B0aW9uYWw6IHRydWVcblx0XHR9XG5cdH0sXG5cdGRldkRlcGVuZGVuY2llczoge1xuXHRcdFwiQGRlZmluaXRlbHl0eXBlZC9kdHNsaW50XCI6IFwiMC4wLjExMlwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzXCI6IFwiMTEuMTEuMlwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzLXByZXR0aWZpZXJcIjogXCIxLjEuM1wiLFxuXHRcdFwiQGVtb3Rpb24vc2VydmVyXCI6IFwiMTEuMTEuMFwiLFxuXHRcdFwiQGVtb3Rpb24vc3R5bGVkXCI6IFwiMTEuMTEuMFwiLFxuXHRcdFwiaHRtbC10YWctbmFtZXNcIjogXCJeMS4xLjJcIixcblx0XHRyZWFjdDogXCIxNi4xNC4wXCIsXG5cdFx0XCJzdmctdGFnLW5hbWVzXCI6IFwiXjEuMS4xXCIsXG5cdFx0dHlwZXNjcmlwdDogXCJeNC41LjVcIlxuXHR9LFxuXHRyZXBvc2l0b3J5OiBcImh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vdHJlZS9tYWluL3BhY2thZ2VzL3JlYWN0XCIsXG5cdHB1Ymxpc2hDb25maWc6IHtcblx0XHRhY2Nlc3M6IFwicHVibGljXCJcblx0fSxcblx0XCJ1bWQ6bWFpblwiOiBcImRpc3QvZW1vdGlvbi1yZWFjdC51bWQubWluLmpzXCIsXG5cdHByZWNvbnN0cnVjdDoge1xuXHRcdGVudHJ5cG9pbnRzOiBbXG5cdFx0XHRcIi4vaW5kZXguanNcIixcblx0XHRcdFwiLi9qc3gtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL2pzeC1kZXYtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL19pc29sYXRlZC1obnJzLmpzXCJcblx0XHRdLFxuXHRcdHVtZE5hbWU6IFwiZW1vdGlvblJlYWN0XCIsXG5cdFx0ZXhwb3J0czoge1xuXHRcdFx0ZW52Q29uZGl0aW9uczogW1xuXHRcdFx0XHRcImJyb3dzZXJcIixcblx0XHRcdFx0XCJ3b3JrZXJcIlxuXHRcdFx0XSxcblx0XHRcdGV4dHJhOiB7XG5cdFx0XHRcdFwiLi90eXBlcy9jc3MtcHJvcFwiOiBcIi4vdHlwZXMvY3NzLXByb3AuZC50c1wiLFxuXHRcdFx0XHRcIi4vbWFjcm9cIjoge1xuXHRcdFx0XHRcdHR5cGVzOiB7XG5cdFx0XHRcdFx0XHRcImltcG9ydFwiOiBcIi4vbWFjcm8uZC5tdHNcIixcblx0XHRcdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vbWFjcm8uZC50c1wiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL21hY3JvLmpzXCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxudmFyIGpzeCA9IGZ1bmN0aW9uIGpzeCh0eXBlLCBwcm9wcykge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICBpZiAocHJvcHMgPT0gbnVsbCB8fCAhaGFzT3duLmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3NMZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVtpXSA9IGFyZ3NbaV07XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgY3JlYXRlRWxlbWVudEFyZ0FycmF5KTtcbn07XG5cbnZhciB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSBmYWxzZTsgLy8gbWFpbnRhaW4gcGxhY2Ugb3ZlciByZXJlbmRlcnMuXG4vLyBpbml0aWFsIHJlbmRlciBmcm9tIGJyb3dzZXIsIGluc2VydEJlZm9yZSBjb250ZXh0LnNoZWV0LnRhZ3NbMF0gb3IgaWYgYSBzdHlsZSBoYXNuJ3QgYmVlbiBpbnNlcnRlZCB0aGVyZSB5ZXQsIGFwcGVuZENoaWxkXG4vLyBpbml0aWFsIGNsaWVudC1zaWRlIHJlbmRlciBmcm9tIFNTUiwgdXNlIHBsYWNlIG9mIGh5ZHJhdGluZyB0YWdcblxudmFyIEdsb2JhbCA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsICYmICggLy8gY2hlY2sgZm9yIGNsYXNzTmFtZSBhcyB3ZWxsIHNpbmNlIHRoZSB1c2VyIGlzXG4gIC8vIHByb2JhYmx5IHVzaW5nIHRoZSBjdXN0b20gY3JlYXRlRWxlbWVudCB3aGljaFxuICAvLyBtZWFucyBpdCB3aWxsIGJlIHR1cm5lZCBpbnRvIGEgY2xhc3NOYW1lIHByb3BcbiAgLy8gJEZsb3dGaXhNZSBJIGRvbid0IHJlYWxseSB3YW50IHRvIGFkZCBpdCB0byB0aGUgdHlwZSBzaW5jZSBpdCBzaG91bGRuJ3QgYmUgdXNlZFxuICBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHMuY3NzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyB0aGUgY3NzIHByb3Agb24gR2xvYmFsLCBkaWQgeW91IG1lYW4gdG8gdXNlIHRoZSBzdHlsZXMgcHJvcCBpbnN0ZWFkP1wiKTtcbiAgICB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10sIHVuZGVmaW5lZCwgUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcblxuICBpZiAoIWlzQnJvd3NlciQxKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgc2VyaWFsaXplZE5hbWVzID0gc2VyaWFsaXplZC5uYW1lO1xuICAgIHZhciBzZXJpYWxpemVkU3R5bGVzID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gICAgdmFyIG5leHQgPSBzZXJpYWxpemVkLm5leHQ7XG5cbiAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXJpYWxpemVkTmFtZXMgKz0gJyAnICsgbmV4dC5uYW1lO1xuICAgICAgc2VyaWFsaXplZFN0eWxlcyArPSBuZXh0LnN0eWxlcztcbiAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgfVxuXG4gICAgdmFyIHNob3VsZENhY2hlID0gY2FjaGUuY29tcGF0ID09PSB0cnVlO1xuICAgIHZhciBydWxlcyA9IGNhY2hlLmluc2VydChcIlwiLCB7XG4gICAgICBuYW1lOiBzZXJpYWxpemVkTmFtZXMsXG4gICAgICBzdHlsZXM6IHNlcmlhbGl6ZWRTdHlsZXNcbiAgICB9LCBjYWNoZS5zaGVldCwgc2hvdWxkQ2FjaGUpO1xuXG4gICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCAoX3JlZiA9IHt9LCBfcmVmW1wiZGF0YS1lbW90aW9uXCJdID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsIFwiICsgc2VyaWFsaXplZE5hbWVzLCBfcmVmLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID0ge1xuICAgICAgX19odG1sOiBydWxlc1xuICAgIH0sIF9yZWYubm9uY2UgPSBjYWNoZS5zaGVldC5ub25jZSwgX3JlZikpO1xuICB9IC8vIHllcywgaSBrbm93IHRoZXNlIGhvb2tzIGFyZSB1c2VkIGNvbmRpdGlvbmFsbHlcbiAgLy8gYnV0IGl0IGlzIGJhc2VkIG9uIGEgY29uc3RhbnQgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSBhdCBydW50aW1lXG4gIC8vIGl0J3MgZWZmZWN0aXZlbHkgbGlrZSBoYXZpbmcgdHdvIGltcGxlbWVudGF0aW9ucyBhbmQgc3dpdGNoaW5nIHRoZW0gb3V0XG4gIC8vIHNvIGl0J3Mgbm90IGFjdHVhbGx5IGJyZWFraW5nIGFueXRoaW5nXG5cblxuICB2YXIgc2hlZXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5ID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsXCI7IC8vIHVzZSBjYXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vaXNzdWVzLzI2NzVcblxuICAgIHZhciBzaGVldCA9IG5ldyBjYWNoZS5zaGVldC5jb25zdHJ1Y3Rvcih7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIG5vbmNlOiBjYWNoZS5zaGVldC5ub25jZSxcbiAgICAgIGNvbnRhaW5lcjogY2FjaGUuc2hlZXQuY29udGFpbmVyLFxuICAgICAgc3BlZWR5OiBjYWNoZS5zaGVldC5pc1NwZWVkeVxuICAgIH0pO1xuICAgIHZhciByZWh5ZHJhdGluZyA9IGZhbHNlOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb249XFxcIlwiICsga2V5ICsgXCIgXCIgKyBzZXJpYWxpemVkLm5hbWUgKyBcIlxcXCJdXCIpO1xuXG4gICAgaWYgKGNhY2hlLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICBzaGVldC5iZWZvcmUgPSBjYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICByZWh5ZHJhdGluZyA9IHRydWU7IC8vIGNsZWFyIHRoZSBoYXNoIHNvIHRoaXMgbm9kZSB3b24ndCBiZSByZWNvZ25pemFibGUgYXMgcmVoeWRyYXRhYmxlIGJ5IG90aGVyIDxHbG9iYWwvPnNcblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIGtleSk7XG4gICAgICBzaGVldC5oeWRyYXRlKFtub2RlXSk7XG4gICAgfVxuXG4gICAgc2hlZXRSZWYuY3VycmVudCA9IFtzaGVldCwgcmVoeWRyYXRpbmddO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH07XG4gIH0sIFtjYWNoZV0pO1xuICB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGVldFJlZkN1cnJlbnQgPSBzaGVldFJlZi5jdXJyZW50O1xuICAgIHZhciBzaGVldCA9IHNoZWV0UmVmQ3VycmVudFswXSxcbiAgICAgICAgcmVoeWRyYXRpbmcgPSBzaGVldFJlZkN1cnJlbnRbMV07XG5cbiAgICBpZiAocmVoeWRyYXRpbmcpIHtcbiAgICAgIHNoZWV0UmVmQ3VycmVudFsxXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gc2hlZXQudGFnc1tzaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH1cblxuICAgIGNhY2hlLmluc2VydChcIlwiLCBzZXJpYWxpemVkLCBzaGVldCwgZmFsc2UpO1xuICB9LCBbY2FjaGUsIHNlcmlhbGl6ZWQubmFtZV0pO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHbG9iYWwuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkdsb2JhbCc7XG59XG5cbmZ1bmN0aW9uIGNzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVTdHlsZXMoYXJncyk7XG59XG5cbnZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIG5hbWUgKyBcIntcIiArIGluc2VydGFibGUuc3R5bGVzICsgXCJ9XCIsXG4gICAgYW5pbTogMSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJfRU1PX1wiICsgdGhpcy5uYW1lICsgXCJfXCIgKyB0aGlzLnN0eWxlcyArIFwiX0VNT19cIjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZy5zdHlsZXMgIT09IHVuZGVmaW5lZCAmJiBhcmcubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBoYXZlIHBhc3NlZCBzdHlsZXMgY3JlYXRlZCB3aXRoIGBjc3NgIGZyb20gYEBlbW90aW9uL3JlYWN0YCBwYWNrYWdlIHRvIHRoZSBgY3hgLlxcbicgKyAnYGN4YCBpcyBtZWFudCB0byBjb21wb3NlIGNsYXNzIG5hbWVzIChzdHJpbmdzKSBzbyB5b3Ugc2hvdWxkIGNvbnZlcnQgdGhvc2Ugc3R5bGVzIHRvIGEgY2xhc3MgbmFtZSBieSBwYXNzaW5nIHRoZW0gdG8gdGhlIGBjc3NgIHJlY2VpdmVkIGZyb20gPENsYXNzTmFtZXMvPiBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWRBcnIgPSBfcmVmLnNlcmlhbGl6ZWRBcnI7XG4gIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpYWxpemVkQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWRBcnJbaV0sIGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIENsYXNzTmFtZXMgPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUpIHtcbiAgdmFyIGhhc1JlbmRlcmVkID0gZmFsc2U7XG4gIHZhciBzZXJpYWxpemVkQXJyID0gW107XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjc3MgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQpO1xuICAgIHNlcmlhbGl6ZWRBcnIucHVzaChzZXJpYWxpemVkKTsgLy8gcmVnaXN0cmF0aW9uIGhhcyB0byBoYXBwZW4gaGVyZSBhcyB0aGUgcmVzdWx0IG9mIHRoaXMgbWlnaHQgZ2V0IGNvbnN1bWVkIGJ5IGBjeGBcblxuICAgIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgIGlmIChoYXNSZW5kZXJlZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2N4IGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShjYWNoZS5yZWdpc3RlcmVkLCBjc3MsIGNsYXNzbmFtZXMoYXJncykpO1xuICB9O1xuXG4gIHZhciBjb250ZW50ID0ge1xuICAgIGNzczogY3NzLFxuICAgIGN4OiBjeCxcbiAgICB0aGVtZTogUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpXG4gIH07XG4gIHZhciBlbGUgPSBwcm9wcy5jaGlsZHJlbihjb250ZW50KTtcbiAgaGFzUmVuZGVyZWQgPSB0cnVlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgIGNhY2hlOiBjYWNoZSxcbiAgICBzZXJpYWxpemVkQXJyOiBzZXJpYWxpemVkQXJyXG4gIH0pLCBlbGUpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIENsYXNzTmFtZXMuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNsYXNzTmFtZXMnO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7IC8vICMxNzI3LCAjMjkwNSBmb3Igc29tZSByZWFzb24gSmVzdCBhbmQgVml0ZXN0IGV2YWx1YXRlIG1vZHVsZXMgdHdpY2UgaWYgc29tZSBjb25zdW1pbmcgbW9kdWxlIGdldHMgbW9ja2VkXG5cbiAgdmFyIGlzVGVzdEVudiA9IHR5cGVvZiBqZXN0ICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmkgIT09ICd1bmRlZmluZWQnO1xuXG4gIGlmIChpc0Jyb3dzZXIgJiYgIWlzVGVzdEVudikge1xuICAgIC8vIGdsb2JhbFRoaXMgaGFzIHdpZGUgYnJvd3NlciBzdXBwb3J0IC0gaHR0cHM6Ly9jYW5pdXNlLmNvbS8/c2VhcmNoPWdsb2JhbFRoaXMsIE5vZGUuanMgMTIgYW5kIGxhdGVyXG4gICAgdmFyIGdsb2JhbENvbnRleHQgPSAvLyAkRmxvd0lnbm9yZVxuICAgIHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgIDogaXNCcm93c2VyID8gd2luZG93IDogZ2xvYmFsO1xuICAgIHZhciBnbG9iYWxLZXkgPSBcIl9fRU1PVElPTl9SRUFDVF9cIiArIHBrZy52ZXJzaW9uLnNwbGl0KCcuJylbMF0gKyBcIl9fXCI7XG5cbiAgICBpZiAoZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1lvdSBhcmUgbG9hZGluZyBAZW1vdGlvbi9yZWFjdCB3aGVuIGl0IGlzIGFscmVhZHkgbG9hZGVkLiBSdW5uaW5nICcgKyAnbXVsdGlwbGUgaW5zdGFuY2VzIG1heSBjYXVzZSBwcm9ibGVtcy4gVGhpcyBjYW4gaGFwcGVuIGlmIG11bHRpcGxlICcgKyAndmVyc2lvbnMgYXJlIHVzZWQsIG9yIGlmIG11bHRpcGxlIGJ1aWxkcyBvZiB0aGUgc2FtZSB2ZXJzaW9uIGFyZSAnICsgJ3VzZWQuJyk7XG4gICAgfVxuXG4gICAgZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldID0gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgeyBDbGFzc05hbWVzLCBHbG9iYWwsIGpzeCBhcyBjcmVhdGVFbGVtZW50LCBjc3MsIGpzeCwga2V5ZnJhbWVzIH07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IHsgbXVybXVyMiBhcyBkZWZhdWx0IH07XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYXNwZWN0UmF0aW86IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCB7IHVuaXRsZXNzS2V5cyBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcbnZhciBVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUiA9IFwiWW91IGhhdmUgcGFzc2VkIGluIGZhbHN5IHZhbHVlIGFzIHN0eWxlIG9iamVjdCdzIGtleSAoY2FuIGhhcHBlbiB3aGVuIGluIGV4YW1wbGUgeW91IHBhc3MgdW5leHBvcnRlZCBjb21wb25lbnQgYXMgY29tcHV0ZWQga2V5KS5cIjtcbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBhbmltYXRpb25SZWdleCA9IC9fRU1PXyhbXl9dKz8pXyhbXl0qPylfRU1PXy9nO1xuXG52YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IGZ1bmN0aW9uIGlzQ3VzdG9tUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuIHByb3BlcnR5LmNoYXJDb2RlQXQoMSkgPT09IDQ1O1xufTtcblxudmFyIGlzUHJvY2Vzc2FibGVWYWx1ZSA9IGZ1bmN0aW9uIGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJztcbn07XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBpc0N1c3RvbVByb3BlcnR5KHN0eWxlTmFtZSkgPyBzdHlsZU5hbWUgOiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcblxudmFyIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IHAxLFxuICAgICAgICAgICAgICBzdHlsZXM6IHAyLFxuICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfVxuXG4gIGlmICh1bml0bGVzc1trZXldICE9PSAxICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8odmFyfGF0dHJ8Y291bnRlcnM/fHVybHxlbGVtZW50fCgoKHJlcGVhdGluZy0pPyhsaW5lYXJ8cmFkaWFsKSl8Y29uaWMpLWdyYWRpZW50KVxcKHwobm8tKT8ob3BlbnxjbG9zZSktcXVvdGUvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgdmFyIGh5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuICB2YXIgaHlwaGVuYXRlZENhY2hlID0ge307XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBzZWVtIHRvIGJlIHVzaW5nIGEgdmFsdWUgZm9yICdjb250ZW50JyB3aXRob3V0IHF1b3RlcywgdHJ5IHJlcGxhY2luZyBpdCB3aXRoIGBjb250ZW50OiAnXFxcIlwiICsgdmFsdWUgKyBcIlxcXCInYFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvY2Vzc2VkID0gb2xkUHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSk7XG5cbiAgICBpZiAocHJvY2Vzc2VkICE9PSAnJyAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIGtleS5pbmRleE9mKCctJykgIT09IC0xICYmIGh5cGhlbmF0ZWRDYWNoZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGh5cGhlbmF0ZWRDYWNoZVtrZXldID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVc2luZyBrZWJhYi1jYXNlIGZvciBjc3MgcHJvcGVydGllcyBpbiBvYmplY3RzIGlzIG5vdCBzdXBwb3J0ZWQuIERpZCB5b3UgbWVhbiBcIiArIGtleS5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpLnJlcGxhY2UoaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKHN0ciwgX2NoYXIpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFyLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9KSArIFwiP1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkO1xuICB9O1xufVxuXG52YXIgbm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UgPSAnQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggJyArICdAZW1vdGlvbi9iYWJlbC1wbHVnaW4sIHRoZSBzd2MgRW1vdGlvbiBwbHVnaW4sIG9yIGFub3RoZXIgRW1vdGlvbi1hd2FyZSAnICsgJ2NvbXBpbGVyIHRyYW5zZm9ybS4nO1xuXG5mdW5jdGlvbiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoaW50ZXJwb2xhdGlvbi5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLnRvU3RyaW5nKCkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3Iobm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAge1xuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5hbmltID09PSAxKSB7XG4gICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgbmFtZTogaW50ZXJwb2xhdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3R5bGVzOiBpbnRlcnBvbGF0aW9uLnN0eWxlcyxcbiAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRpb24ubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBpbnRlcnBvbGF0aW9uLm5leHQ7XG5cbiAgICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHRoaW5nIGV2ZXIgYnV0IHRoaXMgaXMgYSBwcmV0dHkgcmFyZSBjYXNlXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUgd2lsbCBiZSB2ZXJ5IGZldyBpdGVyYXRpb25zIG9mIHRoaXMgZ2VuZXJhbGx5XG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXh0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBuZXh0LnN0eWxlcyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3R5bGVzID0gaW50ZXJwb2xhdGlvbi5zdHlsZXMgKyBcIjtcIjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24ubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0eWxlcyArPSBpbnRlcnBvbGF0aW9uLm1hcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICBpZiAobWVyZ2VkUHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBwcmV2aW91c0N1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcyk7XG4gICAgICAgICAgY3Vyc29yID0gcHJldmlvdXNDdXJzb3I7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Z1bmN0aW9ucyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgaW4gY3NzIGNhbGxzIHdpbGwgYmUgc3RyaW5naWZpZWQuXFxuJyArICdJZiB5b3Ugd2FudCB0byBoYXZlIGEgY3NzIGNhbGwgYmFzZWQgb24gcHJvcHMsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNzcyBjYWxsIGxpa2UgdGhpc1xcbicgKyAnbGV0IGR5bmFtaWNTdHlsZSA9IChwcm9wcykgPT4gY3NzYGNvbG9yOiAke3Byb3BzLmNvbG9yfWBcXG4nICsgJ0l0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgd2l0aCBwcm9wcyBvciBpbnRlcnBvbGF0ZWQgaW4gYSBzdHlsZWQgY2FsbCBsaWtlIHRoaXNcXG4nICsgXCJsZXQgU29tZUNvbXBvbmVudCA9IHN0eWxlZCgnZGl2JylgJHtkeW5hbWljU3R5bGV9YFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gW107XG4gICAgICAgIHZhciByZXBsYWNlZCA9IGludGVycG9sYXRpb24ucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICB2YXIgZmFrZVZhck5hbWUgPSBcImFuaW1hdGlvblwiICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgICAgbWF0Y2hlZC5wdXNoKFwiY29uc3QgXCIgKyBmYWtlVmFyTmFtZSArIFwiID0ga2V5ZnJhbWVzYFwiICsgcDIucmVwbGFjZSgvXkBrZXlmcmFtZXMgYW5pbWF0aW9uLVxcdysvLCAnJykgKyBcImBcIik7XG4gICAgICAgICAgcmV0dXJuIFwiJHtcIiArIGZha2VWYXJOYW1lICsgXCJ9XCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2BrZXlmcmFtZXNgIG91dHB1dCBnb3QgaW50ZXJwb2xhdGVkIGludG8gcGxhaW4gc3RyaW5nLCBwbGVhc2Ugd3JhcCBpdCB3aXRoIGBjc3NgLlxcblxcbicgKyAnSW5zdGVhZCBvZiBkb2luZyB0aGlzOlxcblxcbicgKyBbXS5jb25jYXQobWF0Y2hlZCwgW1wiYFwiICsgcmVwbGFjZWQgKyBcImBcIl0pLmpvaW4oJ1xcbicpICsgJ1xcblxcbllvdSBzaG91bGQgd3JhcCBpdCB3aXRoIGBjc3NgIGxpa2UgdGhpczpcXG5cXG4nICsgKFwiY3NzYFwiICsgcmVwbGFjZWQgKyBcImBcIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICB9IC8vIGZpbmFsaXplIHN0cmluZyB2YWx1ZXMgKHJlZ3VsYXIgc3RyaW5ncyBhbmQgZnVuY3Rpb25zIGludGVycG9sYXRlZCBpbnRvIGNzcyBjYWxscylcblxuXG4gIGlmIChyZWdpc3RlcmVkID09IG51bGwpIHtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHZhciBjYWNoZWQgPSByZWdpc3RlcmVkW2ludGVycG9sYXRpb25dO1xuICByZXR1cm4gY2FjaGVkICE9PSB1bmRlZmluZWQgPyBjYWNoZWQgOiBpbnRlcnBvbGF0aW9uO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmopIHtcbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9ialtpXSkgKyBcIjtcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtfa2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWQgIT0gbnVsbCAmJiByZWdpc3RlcmVkW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbdmFsdWVdICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9rZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iobm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ3N0cmluZycgJiYgKHJlZ2lzdGVyZWQgPT0gbnVsbCB8fCByZWdpc3RlcmVkW3ZhbHVlWzBdXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2YWx1ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWVbX2ldKSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWVbX2ldKSArIFwiO1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJwb2xhdGVkID0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgdmFsdWUpO1xuXG4gICAgICAgICAgc3dpdGNoIChfa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgaW50ZXJwb2xhdGVkICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIF9rZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgaW50ZXJwb2xhdGVkICsgXCJ9XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufVxuXG52YXIgbGFiZWxQYXR0ZXJuID0gL2xhYmVsOlxccyooW15cXHM7XFxue10rKVxccyooO3wkKS9nO1xudmFyIHNvdXJjZU1hcFBhdHRlcm47XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHNvdXJjZU1hcFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vZztcbn0gLy8gdGhpcyBpcyB0aGUgY3Vyc29yIGZvciBrZXlmcmFtZXNcbi8vIGtleWZyYW1lcyBhcmUgc3RvcmVkIG9uIHRoZSBTZXJpYWxpemVkU3R5bGVzIG9iamVjdCBhcyBhIGxpbmtlZCBsaXN0XG5cblxudmFyIGN1cnNvcjtcbnZhciBzZXJpYWxpemVTdHlsZXMgPSBmdW5jdGlvbiBzZXJpYWxpemVTdHlsZXMoYXJncywgcmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzWzBdID09PSAnb2JqZWN0JyAmJiBhcmdzWzBdICE9PSBudWxsICYmIGFyZ3NbMF0uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXJnc1swXTtcbiAgfVxuXG4gIHZhciBzdHJpbmdNb2RlID0gdHJ1ZTtcbiAgdmFyIHN0eWxlcyA9ICcnO1xuICBjdXJzb3IgPSB1bmRlZmluZWQ7XG4gIHZhciBzdHJpbmdzID0gYXJnc1swXTtcblxuICBpZiAoc3RyaW5ncyA9PSBudWxsIHx8IHN0cmluZ3MucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHJpbmdNb2RlID0gZmFsc2U7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHN0cmluZ3MpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgfVxuXG4gICAgc3R5bGVzICs9IHN0cmluZ3NbMF07XG4gIH0gLy8gd2Ugc3RhcnQgYXQgMSBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIGZpcnN0IGFyZ1xuXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGFyZ3NbaV0pO1xuXG4gICAgaWYgKHN0cmluZ01vZGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzICs9IHN0cmluZ3NbaV07XG4gICAgfVxuICB9XG5cbiAgdmFyIHNvdXJjZU1hcDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHN0eWxlcyA9IHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcFBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgc291cmNlTWFwID0gbWF0Y2g7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gIH0gLy8gdXNpbmcgYSBnbG9iYWwgcmVnZXggd2l0aCAuZXhlYyBpcyBzdGF0ZWZ1bCBzbyBsYXN0SW5kZXggaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZVxuXG5cbiAgbGFiZWxQYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuICB2YXIgbWF0Y2g7IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWI4MDljMmNmMjk0OTgwMGEwZjYxZmI1XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxhYmVsUGF0dGVybi5leGVjKHN0eWxlcykpICE9PSBudWxsKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gJy0nICsgLy8gJEZsb3dGaXhNZSB3ZSBrbm93IGl0J3Mgbm90IG51bGxcbiAgICBtYXRjaFsxXTtcbiAgfVxuXG4gIHZhciBuYW1lID0gaGFzaFN0cmluZyhzdHlsZXMpICsgaWRlbnRpZmllck5hbWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFNlcmlhbGl6ZWRTdHlsZXMgdHlwZSBkb2Vzbid0IGhhdmUgdG9TdHJpbmcgcHJvcGVydHkgKGFuZCB3ZSBkb24ndCB3YW50IHRvIGFkZCBpdClcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgbWFwOiBzb3VyY2VNYXAsXG4gICAgICBuZXh0OiBjdXJzb3IsXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIllvdSBoYXZlIHRyaWVkIHRvIHN0cmluZ2lmeSBvYmplY3QgcmV0dXJuZWQgZnJvbSBgY3NzYCBmdW5jdGlvbi4gSXQgaXNuJ3Qgc3VwcG9zZWQgdG8gYmUgdXNlZCBkaXJlY3RseSAoZS5nLiBhcyB2YWx1ZSBvZiB0aGUgYGNsYXNzTmFtZWAgcHJvcCksIGJ1dCByYXRoZXIgaGFuZGVkIHRvIGVtb3Rpb24gc28gaXQgY2FuIGhhbmRsZSBpdCAoZS5nLiBhcyB2YWx1ZSBvZiBgY3NzYCBwcm9wKS5cIjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogc3R5bGVzLFxuICAgIG5leHQ6IGN1cnNvclxuICB9O1xufTtcblxuZXhwb3J0IHsgc2VyaWFsaXplU3R5bGVzIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnZhciBzeW5jRmFsbGJhY2sgPSBmdW5jdGlvbiBzeW5jRmFsbGJhY2soY3JlYXRlKSB7XG4gIHJldHVybiBjcmVhdGUoKTtcbn07XG5cbnZhciB1c2VJbnNlcnRpb25FZmZlY3QgPSBSZWFjdFsndXNlSW5zZXJ0aW9uJyArICdFZmZlY3QnXSA/IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddIDogZmFsc2U7XG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayA9IHVzZUluc2VydGlvbkVmZmVjdCB8fCBzeW5jRmFsbGJhY2s7XG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrID0gdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcblxuZXhwb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjaywgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrIH07XG4iLCJ2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdICsgXCI7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciByZWdpc3RlclN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxufTtcbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBzZXJpYWxpemVkO1xuXG4gICAgZG8ge1xuICAgICAgY2FjaGUuaW5zZXJ0KHNlcmlhbGl6ZWQgPT09IGN1cnJlbnQgPyBcIi5cIiArIGNsYXNzTmFtZSA6ICcnLCBjdXJyZW50LCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG5cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgfSB3aGlsZSAoY3VycmVudCAhPT0gdW5kZWZpbmVkKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcyB9O1xuIiwiLyoqXG4gKiBFeHRyYWN0cyBldmVudCBoYW5kbGVycyBmcm9tIGEgZ2l2ZW4gb2JqZWN0LlxuICogQSBwcm9wIGlzIGNvbnNpZGVyZWQgYW4gZXZlbnQgaGFuZGxlciBpZiBpdCBpcyBhIGZ1bmN0aW9uIGFuZCBpdHMgbmFtZSBzdGFydHMgd2l0aCBgb25gLlxuICpcbiAqIEBwYXJhbSBvYmplY3QgQW4gb2JqZWN0IHRvIGV4dHJhY3QgZXZlbnQgaGFuZGxlcnMgZnJvbS5cbiAqIEBwYXJhbSBleGNsdWRlS2V5cyBBbiBhcnJheSBvZiBrZXlzIHRvIGV4Y2x1ZGUgZnJvbSB0aGUgcmV0dXJuZWQgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdEV2ZW50SGFuZGxlcnMob2JqZWN0LCBleGNsdWRlS2V5cyA9IFtdKSB7XG4gIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5maWx0ZXIocHJvcCA9PiBwcm9wLm1hdGNoKC9eb25bQS1aXS8pICYmIHR5cGVvZiBvYmplY3RbcHJvcF0gPT09ICdmdW5jdGlvbicgJiYgIWV4Y2x1ZGVLZXlzLmluY2x1ZGVzKHByb3ApKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIHJlc3VsdFtwcm9wXSA9IG9iamVjdFtwcm9wXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZWxlbWVudCBpcyBhIERPTSBlbGVtZW50IG5hbWUgKGkuZS4gbm90IGEgUmVhY3QgY29tcG9uZW50KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSG9zdENvbXBvbmVudChlbGVtZW50KSB7XG4gIHJldHVybiB0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZyc7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICcuL2lzSG9zdENvbXBvbmVudCc7XG5cbi8qKlxuICogVHlwZSBvZiB0aGUgb3duZXJTdGF0ZSBiYXNlZCBvbiB0aGUgdHlwZSBvZiBhbiBlbGVtZW50IGl0IGFwcGxpZXMgdG8uXG4gKiBUaGlzIHJlc29sdmVzIHRvIHRoZSBwcm92aWRlZCBPd25lclN0YXRlIGZvciBSZWFjdCBjb21wb25lbnRzIGFuZCBgdW5kZWZpbmVkYCBmb3IgaG9zdCBjb21wb25lbnRzLlxuICogRmFsbHMgYmFjayB0byBgT3duZXJTdGF0ZSB8IHVuZGVmaW5lZGAgd2hlbiB0aGUgZXhhY3QgdHlwZSBjYW4ndCBiZSBkZXRlcm1pbmVkIGluIGRldmVsb3BtZW50IHRpbWUuXG4gKi9cblxuLyoqXG4gKiBBcHBlbmRzIHRoZSBvd25lclN0YXRlIG9iamVjdCB0byB0aGUgcHJvcHMsIG1lcmdpbmcgd2l0aCB0aGUgZXhpc3Rpbmcgb25lIGlmIG5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudFR5cGUgVHlwZSBvZiB0aGUgZWxlbWVudCB0aGF0IG93bnMgdGhlIGBleGlzdGluZ1Byb3BzYC4gSWYgdGhlIGVsZW1lbnQgaXMgYSBET00gbm9kZSBvciB1bmRlZmluZWQsIGBvd25lclN0YXRlYCBpcyBub3QgYXBwbGllZC5cbiAqIEBwYXJhbSBvdGhlclByb3BzIFByb3BzIG9mIHRoZSBlbGVtZW50LlxuICogQHBhcmFtIG93bmVyU3RhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIG90aGVyUHJvcHMsIG93bmVyU3RhdGUpIHtcbiAgaWYgKGVsZW1lbnRUeXBlID09PSB1bmRlZmluZWQgfHwgaXNIb3N0Q29tcG9uZW50KGVsZW1lbnRUeXBlKSkge1xuICAgIHJldHVybiBvdGhlclByb3BzO1xuICB9XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcywge1xuICAgIG93bmVyU3RhdGU6IF9leHRlbmRzKHt9LCBvdGhlclByb3BzLm93bmVyU3RhdGUsIG93bmVyU3RhdGUpXG4gIH0pO1xufSIsIi8qKlxuICogUmVtb3ZlcyBldmVudCBoYW5kbGVycyBmcm9tIHRoZSBnaXZlbiBvYmplY3QuXG4gKiBBIGZpZWxkIGlzIGNvbnNpZGVyZWQgYW4gZXZlbnQgaGFuZGxlciBpZiBpdCBpcyBhIGZ1bmN0aW9uIHdpdGggYSBuYW1lIGJlZ2lubmluZyB3aXRoIGBvbmAuXG4gKlxuICogQHBhcmFtIG9iamVjdCBPYmplY3QgdG8gcmVtb3ZlIGV2ZW50IGhhbmRsZXJzIGZyb20uXG4gKiBAcmV0dXJucyBPYmplY3Qgd2l0aCBldmVudCBoYW5kbGVycyByZW1vdmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb21pdEV2ZW50SGFuZGxlcnMob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5maWx0ZXIocHJvcCA9PiAhKHByb3AubWF0Y2goL15vbltBLVpdLykgJiYgdHlwZW9mIG9iamVjdFtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgcmVzdWx0W3Byb3BdID0gb2JqZWN0W3Byb3BdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgZXh0cmFjdEV2ZW50SGFuZGxlcnMgfSBmcm9tICcuL2V4dHJhY3RFdmVudEhhbmRsZXJzJztcbmltcG9ydCB7IG9taXRFdmVudEhhbmRsZXJzIH0gZnJvbSAnLi9vbWl0RXZlbnRIYW5kbGVycyc7XG4vKipcbiAqIE1lcmdlcyB0aGUgc2xvdCBjb21wb25lbnQgaW50ZXJuYWwgcHJvcHMgKHVzdWFsbHkgY29taW5nIGZyb20gYSBob29rKVxuICogd2l0aCB0aGUgZXh0ZXJuYWxseSBwcm92aWRlZCBvbmVzLlxuICpcbiAqIFRoZSBtZXJnZSBvcmRlciBpcyAodGhlIGxhdHRlciBvdmVycmlkZXMgdGhlIGZvcm1lcik6XG4gKiAxLiBUaGUgaW50ZXJuYWwgcHJvcHMgKHNwZWNpZmllZCBhcyBhIGdldHRlciBmdW5jdGlvbiB0byB3b3JrIHdpdGggZ2V0KlByb3BzIGhvb2sgcmVzdWx0KVxuICogMi4gQWRkaXRpb25hbCBwcm9wcyAoc3BlY2lmaWVkIGludGVybmFsbHkgb24gYSBCYXNlIFVJIGNvbXBvbmVudClcbiAqIDMuIEV4dGVybmFsIHByb3BzIHNwZWNpZmllZCBvbiB0aGUgb3duZXIgY29tcG9uZW50LiBUaGVzZSBzaG91bGQgb25seSBiZSB1c2VkIG9uIGEgcm9vdCBzbG90LlxuICogNC4gRXh0ZXJuYWwgcHJvcHMgc3BlY2lmaWVkIGluIHRoZSBgc2xvdFByb3BzLipgIHByb3AuXG4gKiA1LiBUaGUgYGNsYXNzTmFtZWAgcHJvcCAtIGNvbWJpbmVkIGZyb20gYWxsIHRoZSBhYm92ZS5cbiAqIEBwYXJhbSBwYXJhbWV0ZXJzXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTbG90UHJvcHMocGFyYW1ldGVycykge1xuICBjb25zdCB7XG4gICAgZ2V0U2xvdFByb3BzLFxuICAgIGFkZGl0aW9uYWxQcm9wcyxcbiAgICBleHRlcm5hbFNsb3RQcm9wcyxcbiAgICBleHRlcm5hbEZvcndhcmRlZFByb3BzLFxuICAgIGNsYXNzTmFtZVxuICB9ID0gcGFyYW1ldGVycztcbiAgaWYgKCFnZXRTbG90UHJvcHMpIHtcbiAgICAvLyBUaGUgc2ltcGxlciBjYXNlIC0gZ2V0U2xvdFByb3BzIGlzIG5vdCBkZWZpbmVkLCBzbyBubyBpbnRlcm5hbCBldmVudCBoYW5kbGVycyBhcmUgZGVmaW5lZCxcbiAgICAvLyBzbyB3ZSBjYW4gc2ltcGx5IG1lcmdlIGFsbCB0aGUgcHJvcHMgd2l0aG91dCBoYXZpbmcgdG8gd29ycnkgYWJvdXQgZXh0cmFjdGluZyBldmVudCBoYW5kbGVycy5cbiAgICBjb25zdCBqb2luZWRDbGFzc2VzID0gY2xzeChhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcy5jbGFzc05hbWUsIGV4dGVybmFsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbFNsb3RQcm9wcy5jbGFzc05hbWUpO1xuICAgIGNvbnN0IG1lcmdlZFN0eWxlID0gX2V4dGVuZHMoe30sIGFkZGl0aW9uYWxQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogYWRkaXRpb25hbFByb3BzLnN0eWxlLCBleHRlcm5hbEZvcndhcmRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbEZvcndhcmRlZFByb3BzLnN0eWxlLCBleHRlcm5hbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxTbG90UHJvcHMuc3R5bGUpO1xuICAgIGNvbnN0IHByb3BzID0gX2V4dGVuZHMoe30sIGFkZGl0aW9uYWxQcm9wcywgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcywgZXh0ZXJuYWxTbG90UHJvcHMpO1xuICAgIGlmIChqb2luZWRDbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIHByb3BzLmNsYXNzTmFtZSA9IGpvaW5lZENsYXNzZXM7XG4gICAgfVxuICAgIGlmIChPYmplY3Qua2V5cyhtZXJnZWRTdHlsZSkubGVuZ3RoID4gMCkge1xuICAgICAgcHJvcHMuc3R5bGUgPSBtZXJnZWRTdHlsZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3BzLFxuICAgICAgaW50ZXJuYWxSZWY6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cblxuICAvLyBJbiB0aGlzIGNhc2UsIGdldFNsb3RQcm9wcyBpcyByZXNwb25zaWJsZSBmb3IgY2FsbGluZyB0aGUgZXh0ZXJuYWwgZXZlbnQgaGFuZGxlcnMuXG4gIC8vIFdlIGRvbid0IG5lZWQgdG8gaW5jbHVkZSB0aGVtIGluIHRoZSBtZXJnZWQgcHJvcHMgYmVjYXVzZSBvZiB0aGlzLlxuXG4gIGNvbnN0IGV2ZW50SGFuZGxlcnMgPSBleHRyYWN0RXZlbnRIYW5kbGVycyhfZXh0ZW5kcyh7fSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcywgZXh0ZXJuYWxTbG90UHJvcHMpKTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMgPSBvbWl0RXZlbnRIYW5kbGVycyhleHRlcm5hbFNsb3RQcm9wcyk7XG4gIGNvbnN0IG90aGVyUHJvcHNXaXRob3V0RXZlbnRIYW5kbGVycyA9IG9taXRFdmVudEhhbmRsZXJzKGV4dGVybmFsRm9yd2FyZGVkUHJvcHMpO1xuICBjb25zdCBpbnRlcm5hbFNsb3RQcm9wcyA9IGdldFNsb3RQcm9wcyhldmVudEhhbmRsZXJzKTtcblxuICAvLyBUaGUgb3JkZXIgb2YgY2xhc3NlcyBpcyBpbXBvcnRhbnQgaGVyZS5cbiAgLy8gRW1vdGlvbiAodGhhdCB3ZSB1c2UgaW4gbGlicmFyaWVzIGNvbnN1bWluZyBCYXNlIFVJKSBkZXBlbmRzIG9uIHRoaXMgb3JkZXJcbiAgLy8gdG8gcHJvcGVybHkgb3ZlcnJpZGUgc3R5bGUuIEl0IHJlcXVpcmVzIHRoZSBtb3N0IGltcG9ydGFudCBjbGFzc2VzIHRvIGJlIGxhc3RcbiAgLy8gKHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzMyMDUpIGZvciB0aGUgcmVsYXRlZCBkaXNjdXNzaW9uLlxuICBjb25zdCBqb2luZWRDbGFzc2VzID0gY2xzeChpbnRlcm5hbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogaW50ZXJuYWxTbG90UHJvcHMuY2xhc3NOYW1lLCBhZGRpdGlvbmFsUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IGFkZGl0aW9uYWxQcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSwgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcy5jbGFzc05hbWUsIGV4dGVybmFsU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbFNsb3RQcm9wcy5jbGFzc05hbWUpO1xuICBjb25zdCBtZXJnZWRTdHlsZSA9IF9leHRlbmRzKHt9LCBpbnRlcm5hbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogaW50ZXJuYWxTbG90UHJvcHMuc3R5bGUsIGFkZGl0aW9uYWxQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogYWRkaXRpb25hbFByb3BzLnN0eWxlLCBleHRlcm5hbEZvcndhcmRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbEZvcndhcmRlZFByb3BzLnN0eWxlLCBleHRlcm5hbFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogZXh0ZXJuYWxTbG90UHJvcHMuc3R5bGUpO1xuICBjb25zdCBwcm9wcyA9IF9leHRlbmRzKHt9LCBpbnRlcm5hbFNsb3RQcm9wcywgYWRkaXRpb25hbFByb3BzLCBvdGhlclByb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMsIGNvbXBvbmVudHNQcm9wc1dpdGhvdXRFdmVudEhhbmRsZXJzKTtcbiAgaWYgKGpvaW5lZENsYXNzZXMubGVuZ3RoID4gMCkge1xuICAgIHByb3BzLmNsYXNzTmFtZSA9IGpvaW5lZENsYXNzZXM7XG4gIH1cbiAgaWYgKE9iamVjdC5rZXlzKG1lcmdlZFN0eWxlKS5sZW5ndGggPiAwKSB7XG4gICAgcHJvcHMuc3R5bGUgPSBtZXJnZWRTdHlsZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByb3BzLFxuICAgIGludGVybmFsUmVmOiBpbnRlcm5hbFNsb3RQcm9wcy5yZWZcbiAgfTtcbn0iLCIvKipcbiAqIElmIGBjb21wb25lbnRQcm9wc2AgaXMgYSBmdW5jdGlvbiwgY2FsbHMgaXQgd2l0aCB0aGUgcHJvdmlkZWQgYG93bmVyU3RhdGVgLlxuICogT3RoZXJ3aXNlLCBqdXN0IHJldHVybnMgYGNvbXBvbmVudFByb3BzYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnRQcm9wcyhjb21wb25lbnRQcm9wcywgb3duZXJTdGF0ZSwgc2xvdFN0YXRlKSB7XG4gIGlmICh0eXBlb2YgY29tcG9uZW50UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY29tcG9uZW50UHJvcHMob3duZXJTdGF0ZSwgc2xvdFN0YXRlKTtcbiAgfVxuICByZXR1cm4gY29tcG9uZW50UHJvcHM7XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZWxlbWVudFR5cGVcIiwgXCJleHRlcm5hbFNsb3RQcm9wc1wiLCBcIm93bmVyU3RhdGVcIiwgXCJza2lwUmVzb2x2aW5nU2xvdFByb3BzXCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBhcHBlbmRPd25lclN0YXRlIH0gZnJvbSAnLi9hcHBlbmRPd25lclN0YXRlJztcbmltcG9ydCB7IG1lcmdlU2xvdFByb3BzIH0gZnJvbSAnLi9tZXJnZVNsb3RQcm9wcyc7XG5pbXBvcnQgeyByZXNvbHZlQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuL3Jlc29sdmVDb21wb25lbnRQcm9wcyc7XG4vKipcbiAqIEBpZ25vcmUgLSBkbyBub3QgZG9jdW1lbnQuXG4gKiBCdWlsZHMgdGhlIHByb3BzIHRvIGJlIHBhc3NlZCBpbnRvIHRoZSBzbG90IG9mIGFuIHVuc3R5bGVkIGNvbXBvbmVudC5cbiAqIEl0IG1lcmdlcyB0aGUgaW50ZXJuYWwgcHJvcHMgb2YgdGhlIGNvbXBvbmVudCB3aXRoIHRoZSBvbmVzIHN1cHBsaWVkIGJ5IHRoZSB1c2VyLCBhbGxvd2luZyB0byBjdXN0b21pemUgdGhlIGJlaGF2aW9yLlxuICogSWYgdGhlIHNsb3QgY29tcG9uZW50IGlzIG5vdCBhIGhvc3QgY29tcG9uZW50LCBpdCBhbHNvIG1lcmdlcyBpbiB0aGUgYG93bmVyU3RhdGVgLlxuICpcbiAqIEBwYXJhbSBwYXJhbWV0ZXJzLmdldFNsb3RQcm9wcyAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBwcm9wcyB0byBiZSBwYXNzZWQgdG8gdGhlIHNsb3QgY29tcG9uZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2xvdFByb3BzKHBhcmFtZXRlcnMpIHtcbiAgdmFyIF9wYXJhbWV0ZXJzJGFkZGl0aW9uYTtcbiAgY29uc3Qge1xuICAgICAgZWxlbWVudFR5cGUsXG4gICAgICBleHRlcm5hbFNsb3RQcm9wcyxcbiAgICAgIG93bmVyU3RhdGUsXG4gICAgICBza2lwUmVzb2x2aW5nU2xvdFByb3BzID0gZmFsc2VcbiAgICB9ID0gcGFyYW1ldGVycyxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocGFyYW1ldGVycywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcmVzb2x2ZWRDb21wb25lbnRzUHJvcHMgPSBza2lwUmVzb2x2aW5nU2xvdFByb3BzID8ge30gOiByZXNvbHZlQ29tcG9uZW50UHJvcHMoZXh0ZXJuYWxTbG90UHJvcHMsIG93bmVyU3RhdGUpO1xuICBjb25zdCB7XG4gICAgcHJvcHM6IG1lcmdlZFByb3BzLFxuICAgIGludGVybmFsUmVmXG4gIH0gPSBtZXJnZVNsb3RQcm9wcyhfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIGV4dGVybmFsU2xvdFByb3BzOiByZXNvbHZlZENvbXBvbmVudHNQcm9wc1xuICB9KSk7XG4gIGNvbnN0IHJlZiA9IHVzZUZvcmtSZWYoaW50ZXJuYWxSZWYsIHJlc29sdmVkQ29tcG9uZW50c1Byb3BzID09IG51bGwgPyB2b2lkIDAgOiByZXNvbHZlZENvbXBvbmVudHNQcm9wcy5yZWYsIChfcGFyYW1ldGVycyRhZGRpdGlvbmEgPSBwYXJhbWV0ZXJzLmFkZGl0aW9uYWxQcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJhbWV0ZXJzJGFkZGl0aW9uYS5yZWYpO1xuICBjb25zdCBwcm9wcyA9IGFwcGVuZE93bmVyU3RhdGUoZWxlbWVudFR5cGUsIF9leHRlbmRzKHt9LCBtZXJnZWRQcm9wcywge1xuICAgIHJlZlxuICB9KSwgb3duZXJTdGF0ZSk7XG4gIHJldHVybiBwcm9wcztcbn0iLCJcInVzZSBzdHJpY3RcIjtcbid1c2UgY2xpZW50JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3V0aWxzLmNyZWF0ZVN2Z0ljb247XG4gIH1cbn0pO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbXVpL21hdGVyaWFsL3V0aWxzXCIpOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFja2Ryb3BVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUJhY2tkcm9wJywgc2xvdCk7XG59XG5jb25zdCBiYWNrZHJvcENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCYWNrZHJvcCcsIFsncm9vdCcsICdpbnZpc2libGUnXSk7XG5leHBvcnQgZGVmYXVsdCBiYWNrZHJvcENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiaW52aXNpYmxlXCIsIFwib3BlblwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgRmFkZSBmcm9tICcuLi9GYWRlJztcbmltcG9ydCB7IGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9iYWNrZHJvcENsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGludmlzaWJsZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgaW52aXNpYmxlICYmICdpbnZpc2libGUnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJhY2tkcm9wVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBCYWNrZHJvcFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aUJhY2tkcm9wJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHN0eWxlcy5pbnZpc2libGVdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAnZml4ZWQnLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIHRvcDogMCxcbiAgbGVmdDogMCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCdcbn0sIG93bmVyU3RhdGUuaW52aXNpYmxlICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG59KSk7XG5jb25zdCBCYWNrZHJvcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJhY2tkcm9wKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RQcm9wcyRyb290LCBfcmVmLCBfc2xvdHMkcm9vdDtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQmFja2Ryb3AnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgY29tcG9uZW50c1Byb3BzID0ge30sXG4gICAgICBpbnZpc2libGUgPSBmYWxzZSxcbiAgICAgIG9wZW4sXG4gICAgICBzbG90UHJvcHMgPSB7fSxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gRmFkZSxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29tcG9uZW50LFxuICAgIGludmlzaWJsZVxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCByb290U2xvdFByb3BzID0gKF9zbG90UHJvcHMkcm9vdCA9IHNsb3RQcm9wcy5yb290KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRyb290IDogY29tcG9uZW50c1Byb3BzLnJvb3Q7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KEJhY2tkcm9wUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlXG4gICAgfSwgcm9vdFNsb3RQcm9wcywge1xuICAgICAgYXM6IChfcmVmID0gKF9zbG90cyRyb290ID0gc2xvdHMucm9vdCkgIT0gbnVsbCA/IF9zbG90cyRyb290IDogY29tcG9uZW50cy5Sb290KSAhPSBudWxsID8gX3JlZiA6IGNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgcm9vdFNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcm9vdFNsb3RQcm9wcy5jbGFzc05hbWUpLFxuICAgICAgb3duZXJTdGF0ZTogX2V4dGVuZHMoe30sIG93bmVyU3RhdGUsIHJvb3RTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHJvb3RTbG90UHJvcHMub3duZXJTdGF0ZSksXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWNrZHJvcC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgaW52aXNpYmxlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB3aGVuIHJlbmRlcmluZyBhIHBvcG92ZXIgb3IgYSBjdXN0b20gc2VsZWN0IGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBbRm9sbG93IHRoaXMgZ3VpZGVdKC9tYXRlcmlhbC11aS90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBGYWRlXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQmFja2Ryb3A7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4LCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJy4vc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuL3VzZVRoZW1lJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCb3gob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZUlkLFxuICAgIGRlZmF1bHRUaGVtZSxcbiAgICBkZWZhdWx0Q2xhc3NOYW1lID0gJ011aUJveC1yb290JyxcbiAgICBnZW5lcmF0ZUNsYXNzTmFtZVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgQm94Um9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICAgIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHByb3AgIT09ICd0aGVtZScgJiYgcHJvcCAhPT0gJ3N4JyAmJiBwcm9wICE9PSAnYXMnXG4gIH0pKHN0eWxlRnVuY3Rpb25TeCk7XG4gIGNvbnN0IEJveCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJveChpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gICAgY29uc3QgX2V4dGVuZFN4UHJvcCA9IGV4dGVuZFN4UHJvcChpblByb3BzKSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBjb21wb25lbnQgPSAnZGl2J1xuICAgICAgfSA9IF9leHRlbmRTeFByb3AsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9leHRlbmRTeFByb3AsIF9leGNsdWRlZCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEJveFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc05hbWUsIGdlbmVyYXRlQ2xhc3NOYW1lID8gZ2VuZXJhdGVDbGFzc05hbWUoZGVmYXVsdENsYXNzTmFtZSkgOiBkZWZhdWx0Q2xhc3NOYW1lKSxcbiAgICAgIHRoZW1lOiB0aGVtZUlkID8gdGhlbWVbdGhlbWVJZF0gfHwgdGhlbWUgOiB0aGVtZVxuICAgIH0sIG90aGVyKSk7XG4gIH0pO1xuICByZXR1cm4gQm94O1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5jb25zdCBib3hDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQm94JywgWydyb290J10pO1xuZXhwb3J0IGRlZmF1bHQgYm94Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnLi4vc3R5bGVzJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuLi9zdHlsZXMvaWRlbnRpZmllcic7XG5pbXBvcnQgYm94Q2xhc3NlcyBmcm9tICcuL2JveENsYXNzZXMnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmNvbnN0IEJveCA9IGNyZWF0ZUJveCh7XG4gIHRoZW1lSWQ6IFRIRU1FX0lELFxuICBkZWZhdWx0VGhlbWUsXG4gIGRlZmF1bHRDbGFzc05hbWU6IGJveENsYXNzZXMucm9vdCxcbiAgZ2VuZXJhdGVDbGFzc05hbWU6IENsYXNzTmFtZUdlbmVyYXRvci5nZW5lcmF0ZVxufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCb3gucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCb3g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cbiAgcmV0dXJuIHNlbGY7XG59IiwiaW1wb3J0IHsgQ2hpbGRyZW4sIGNsb25lRWxlbWVudCwgaXNWYWxpZEVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4sIG1hcEZuKSB7XG4gIHZhciBtYXBwZXIgPSBmdW5jdGlvbiBtYXBwZXIoY2hpbGQpIHtcbiAgICByZXR1cm4gbWFwRm4gJiYgaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gbWFwRm4oY2hpbGQpIDogY2hpbGQ7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChjaGlsZHJlbikgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIC8vIHJ1biB0aGUgbWFwIGZ1bmN0aW9uIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHRoZSBrZXkgaXMgdGhlIGNvbXB1dGVkIG9uZVxuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gbWFwcGVyKGNoaWxkKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKHByb3BzLCBvbkV4aXRlZCkge1xuICByZXR1cm4gZ2V0Q2hpbGRNYXBwaW5nKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICBpbjogdHJ1ZSxcbiAgICAgIGFwcGVhcjogZ2V0UHJvcChjaGlsZCwgJ2FwcGVhcicsIHByb3BzKSxcbiAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBwcm9wcyksXG4gICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIHByb3BzKVxuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0gKGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKTtcbiAgICB2YXIgaGFzTmV4dCA9IChrZXkgaW4gbmV4dENoaWxkTWFwcGluZyk7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG59O1xuLyoqXG4gKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnRzLCBgPFRyYW5zaXRpb25Hcm91cD5gIGlzIGEgc3RhdGUgbWFjaGluZSBmb3IgbWFuYWdpbmcgdGhlIG1vdW50aW5nXG4gKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAqXG4gKiBDb25zaWRlciB0aGUgZXhhbXBsZSBiZWxvdy4gQXMgaXRlbXMgYXJlIHJlbW92ZWQgb3IgYWRkZWQgdG8gdGhlIFRvZG9MaXN0IHRoZVxuICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAqXG4gKiBOb3RlIHRoYXQgYDxUcmFuc2l0aW9uR3JvdXA+YCAgZG9lcyBub3QgZGVmaW5lIGFueSBhbmltYXRpb24gYmVoYXZpb3IhXG4gKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAqIGl0ZW1zLlxuICovXG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfSAvLyBub2RlIGlzIGB1bmRlZmluZWRgIHdoZW4gdXNlciBwcm92aWRlZCBgbm9kZVJlZmAgcHJvcFxuICA7XG5cbiAgX3Byb3RvLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXRlZChjaGlsZCwgbm9kZSkge1xuICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChjaGlsZC5rZXkgaW4gY3VycmVudENoaWxkTWFwcGluZykgcmV0dXJuO1xuXG4gICAgaWYgKGNoaWxkLnByb3BzLm9uRXhpdGVkKSB7XG4gICAgICBjaGlsZC5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICAgIGRlbGV0ZSBjaGlsZHJlbltjaGlsZC5rZXldO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBjaGlsZEZhY3RvcnkgPSBfdGhpcyRwcm9wcy5jaGlsZEZhY3RvcnksXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNvbXBvbmVudFwiLCBcImNoaWxkRmFjdG9yeVwiXSk7XG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gdGhpcy5zdGF0ZS5jb250ZXh0VmFsdWU7XG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgICAgfSwgY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGNvbXBvbmVudCBpcyBtZWFudCBmb3IgbXVsdGlwbGUgYFRyYW5zaXRpb25gIG9yIGBDU1NUcmFuc2l0aW9uYFxuICAgKiBjaGlsZHJlbiwgc29tZXRpbWVzIHlvdSBtYXkgd2FudCB0byBoYXZlIGEgc2luZ2xlIHRyYW5zaXRpb24gY2hpbGQgd2l0aFxuICAgKiBjb250ZW50IHRoYXQgeW91IHdhbnQgdG8gYmUgdHJhbnNpdGlvbmVkIG91dCBhbmQgaW4gd2hlbiB5b3UgY2hhbmdlIGl0XG4gICAqIChlLmcuIHJvdXRlcywgaW1hZ2VzIGV0Yy4pIEluIHRoYXQgY2FzZSB5b3UgY2FuIGNoYW5nZSB0aGUgYGtleWAgcHJvcCBvZlxuICAgKiB0aGUgdHJhbnNpdGlvbiBjaGlsZCBhcyB5b3UgY2hhbmdlIGl0cyBjb250ZW50LCB0aGlzIHdpbGwgY2F1c2VcbiAgICogYFRyYW5zaXRpb25Hcm91cGAgdG8gdHJhbnNpdGlvbiB0aGUgY2hpbGQgb3V0IGFuZCBiYWNrIGluLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uR3JvdXA7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIFJpcHBsZShwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzZXMsXG4gICAgcHVsc2F0ZSA9IGZhbHNlLFxuICAgIHJpcHBsZVgsXG4gICAgcmlwcGxlWSxcbiAgICByaXBwbGVTaXplLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FeGl0ZWQsXG4gICAgdGltZW91dFxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFtsZWF2aW5nLCBzZXRMZWF2aW5nXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc05hbWUsIGNsYXNzZXMucmlwcGxlLCBjbGFzc2VzLnJpcHBsZVZpc2libGUsIHB1bHNhdGUgJiYgY2xhc3Nlcy5yaXBwbGVQdWxzYXRlKTtcbiAgY29uc3QgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgY29uc3QgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuICBpZiAoIWluUHJvcCAmJiAhbGVhdmluZykge1xuICAgIHNldExlYXZpbmcodHJ1ZSk7XG4gIH1cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWluUHJvcCAmJiBvbkV4aXRlZCAhPSBudWxsKSB7XG4gICAgICAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdGVkXG4gICAgICBjb25zdCB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KG9uRXhpdGVkLCB0aW1lb3V0KTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW29uRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgICB9KVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVYOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VG91Y2hSaXBwbGVVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRvdWNoUmlwcGxlJywgc2xvdCk7XG59XG5jb25zdCB0b3VjaFJpcHBsZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUb3VjaFJpcHBsZScsIFsncm9vdCcsICdyaXBwbGUnLCAncmlwcGxlVmlzaWJsZScsICdyaXBwbGVQdWxzYXRlJywgJ2NoaWxkJywgJ2NoaWxkTGVhdmluZycsICdjaGlsZFB1bHNhdGUnXSk7XG5leHBvcnQgZGVmYXVsdCB0b3VjaFJpcHBsZUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2VudGVyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXTtcbmxldCBfID0gdCA9PiB0LFxuICBfdCxcbiAgX3QyLFxuICBfdDMsXG4gIF90NDtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsga2V5ZnJhbWVzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHVzZVRpbWVvdXQgZnJvbSAnQG11aS91dGlscy91c2VUaW1lb3V0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbmltcG9ydCB0b3VjaFJpcHBsZUNsYXNzZXMgZnJvbSAnLi90b3VjaFJpcHBsZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IGNvbnN0IERFTEFZX1JJUFBMRSA9IDgwO1xuY29uc3QgZW50ZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgICBvcGFjaXR5OiAwLjE7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICAgIG9wYWNpdHk6IDAuMztcbiAgfVxuYCkpO1xuY29uc3QgZXhpdEtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG5gKSk7XG5jb25zdCBwdWxzYXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QzIHx8IChfdDMgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgfVxuXG4gIDUwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLjkyKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XG4gIH1cbmApKTtcbmV4cG9ydCBjb25zdCBUb3VjaFJpcHBsZVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZScsXG4gIHNsb3Q6ICdSb290J1xufSkoe1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHpJbmRleDogMCxcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwLFxuICBib3JkZXJSYWRpdXM6ICdpbmhlcml0J1xufSk7XG5cbi8vIFRoaXMgYHN0eWxlZCgpYCBmdW5jdGlvbiBpbnZva2VzIGtleWZyYW1lcy4gYHN0eWxlZC1jb21wb25lbnRzYCBvbmx5IHN1cHBvcnRzIGtleWZyYW1lc1xuLy8gaW4gc3RyaW5nIHRlbXBsYXRlcy4gRG8gbm90IGNvbnZlcnQgdGhlc2Ugc3R5bGVzIGluIEpTIG9iamVjdCBhcyBpdCB3aWxsIGJyZWFrLlxuZXhwb3J0IGNvbnN0IFRvdWNoUmlwcGxlUmlwcGxlID0gc3R5bGVkKFJpcHBsZSwge1xuICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnLFxuICBzbG90OiAnUmlwcGxlJ1xufSkoX3Q0IHx8IChfdDQgPSBfYFxuICBvcGFjaXR5OiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG5cbiAgJi4kezB9IHtcbiAgICBvcGFjaXR5OiAwLjM7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICBhbmltYXRpb24tbmFtZTogJHswfTtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiAkezB9O1xuICB9XG5cbiAgJi4kezB9IHtcbiAgICBhbmltYXRpb24tZHVyYXRpb246ICR7MH1tcztcbiAgfVxuXG4gICYgLiR7MH0ge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGFuaW1hdGlvbi1uYW1lOiAkezB9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogJHswfW1zO1xuICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ICR7MH07XG4gIH1cblxuICAmIC4kezB9IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgLyogQG5vZmxpcCAqL1xuICAgIGxlZnQ6IDBweDtcbiAgICB0b3A6IDA7XG4gICAgYW5pbWF0aW9uLW5hbWU6ICR7MH07XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAyNTAwbXM7XG4gICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHswfTtcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcbiAgICBhbmltYXRpb24tZGVsYXk6IDIwMG1zO1xuICB9XG5gKSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVZpc2libGUsIGVudGVyS2V5ZnJhbWUsIERVUkFUSU9OLCAoe1xuICB0aGVtZVxufSkgPT4gdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZVB1bHNhdGUsICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZExlYXZpbmcsIGV4aXRLZXlmcmFtZSwgRFVSQVRJT04sICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCB0b3VjaFJpcHBsZUNsYXNzZXMuY2hpbGRQdWxzYXRlLCBwdWxzYXRlS2V5ZnJhbWUsICh7XG4gIHRoZW1lXG59KSA9PiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIFRPRE8gdjU6IE1ha2UgcHJpdmF0ZVxuICovXG5jb25zdCBUb3VjaFJpcHBsZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvdWNoUmlwcGxlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNlbnRlcjogY2VudGVyUHJvcCA9IGZhbHNlLFxuICAgICAgY2xhc3NlcyA9IHt9LFxuICAgICAgY2xhc3NOYW1lXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IFtyaXBwbGVzLCBzZXRSaXBwbGVzXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcbiAgY29uc3QgbmV4dEtleSA9IFJlYWN0LnVzZVJlZigwKTtcbiAgY29uc3QgcmlwcGxlQ2FsbGJhY2sgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQpIHtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQoKTtcbiAgICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfSwgW3JpcHBsZXNdKTtcblxuICAvLyBVc2VkIHRvIGZpbHRlciBvdXQgbW91c2UgZW11bGF0ZWQgZXZlbnRzIG9uIG1vYmlsZS5cbiAgY29uc3QgaWdub3JpbmdNb3VzZURvd24gPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICAvLyBXZSB1c2UgYSB0aW1lciBpbiBvcmRlciB0byBvbmx5IHNob3cgdGhlIHJpcHBsZXMgZm9yIHRvdWNoIFwiY2xpY2tcIiBsaWtlIGV2ZW50cy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXNwbGF5IHRoZSByaXBwbGUgZm9yIHRvdWNoIHNjcm9sbCBldmVudHMuXG4gIGNvbnN0IHN0YXJ0VGltZXIgPSB1c2VUaW1lb3V0KCk7XG5cbiAgLy8gVGhpcyBpcyB0aGUgaG9vayBjYWxsZWQgb25jZSB0aGUgcHJldmlvdXMgdGltZW91dCBpcyByZWFkeS5cbiAgY29uc3Qgc3RhcnRUaW1lckNvbW1pdCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgY29udGFpbmVyID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBzdGFydENvbW1pdCA9IFJlYWN0LnVzZUNhbGxiYWNrKHBhcmFtcyA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVgsXG4gICAgICByaXBwbGVZLFxuICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgIGNiXG4gICAgfSA9IHBhcmFtcztcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4gWy4uLm9sZFJpcHBsZXMsIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUmlwcGxlLCB7XG4gICAgICBjbGFzc2VzOiB7XG4gICAgICAgIHJpcHBsZTogY2xzeChjbGFzc2VzLnJpcHBsZSwgdG91Y2hSaXBwbGVDbGFzc2VzLnJpcHBsZSksXG4gICAgICAgIHJpcHBsZVZpc2libGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlVmlzaWJsZSksXG4gICAgICAgIHJpcHBsZVB1bHNhdGU6IGNsc3goY2xhc3Nlcy5yaXBwbGVQdWxzYXRlLCB0b3VjaFJpcHBsZUNsYXNzZXMucmlwcGxlUHVsc2F0ZSksXG4gICAgICAgIGNoaWxkOiBjbHN4KGNsYXNzZXMuY2hpbGQsIHRvdWNoUmlwcGxlQ2xhc3Nlcy5jaGlsZCksXG4gICAgICAgIGNoaWxkTGVhdmluZzogY2xzeChjbGFzc2VzLmNoaWxkTGVhdmluZywgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkTGVhdmluZyksXG4gICAgICAgIGNoaWxkUHVsc2F0ZTogY2xzeChjbGFzc2VzLmNoaWxkUHVsc2F0ZSwgdG91Y2hSaXBwbGVDbGFzc2VzLmNoaWxkUHVsc2F0ZSlcbiAgICAgIH0sXG4gICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemVcbiAgICB9LCBuZXh0S2V5LmN1cnJlbnQpXSk7XG4gICAgbmV4dEtleS5jdXJyZW50ICs9IDE7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbY2xhc3Nlc10pO1xuICBjb25zdCBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKChldmVudCA9IHt9LCBvcHRpb25zID0ge30sIGNiID0gKCkgPT4ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwdWxzYXRlID0gZmFsc2UsXG4gICAgICBjZW50ZXIgPSBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgIGZha2VFbGVtZW50ID0gZmFsc2UgLy8gRm9yIHRlc3QgcHVycG9zZXNcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ21vdXNlZG93bicgJiYgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCkge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH07XG5cbiAgICAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuICAgIGxldCByaXBwbGVYO1xuICAgIGxldCByaXBwbGVZO1xuICAgIGxldCByaXBwbGVTaXplO1xuICAgIGlmIChjZW50ZXIgfHwgZXZlbnQgPT09IHVuZGVmaW5lZCB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xpZW50WCxcbiAgICAgICAgY2xpZW50WVxuICAgICAgfSA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAwID8gZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50O1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIH1cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogcmVjdC53aWR0aCAqKiAyICsgcmVjdC5oZWlnaHQgKiogMikgLyAzKTtcblxuICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaXMgZXZlbi5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIGNvbnN0IHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KHNpemVYICoqIDIgKyBzaXplWSAqKiAyKTtcbiAgICB9XG5cbiAgICAvLyBUb3VjaGUgZGV2aWNlc1xuICAgIGlmIChldmVudCAhPSBudWxsICYmIGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIC8vIGNoZWNrIHRoYXQgdGhpcyBpc24ndCBhbm90aGVyIHRvdWNoc3RhcnQgZHVlIHRvIG11bHRpdG91Y2hcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSB3aWxsIG9ubHkgY2xlYXIgYSBzaW5nbGUgdGltZXIgd2hlbiB1bm1vdW50aW5nIHdoaWxlIHR3b1xuICAgICAgLy8gYXJlIHJ1bm5pbmdcbiAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gKCkgPT4ge1xuICAgICAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYlxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEZWxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuICAgICAgICAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgZGVsYXkgdmFsdWUuXG4gICAgICAgIHN0YXJ0VGltZXIuc3RhcnQoREVMQVlfUklQUExFLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZSxcbiAgICAgICAgY2JcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2NlbnRlclByb3AsIHN0YXJ0Q29tbWl0LCBzdGFydFRpbWVyXSk7XG4gIGNvbnN0IHB1bHNhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc3RhcnQoe30sIHtcbiAgICAgIHB1bHNhdGU6IHRydWVcbiAgICB9KTtcbiAgfSwgW3N0YXJ0XSk7XG4gIGNvbnN0IHN0b3AgPSBSZWFjdC51c2VDYWxsYmFjaygoZXZlbnQsIGNiKSA9PiB7XG4gICAgc3RhcnRUaW1lci5jbGVhcigpO1xuXG4gICAgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cbiAgICBpZiAoKGV2ZW50ID09IG51bGwgPyB2b2lkIDAgOiBldmVudC50eXBlKSA9PT0gJ3RvdWNoZW5kJyAmJiBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHN0YXJ0VGltZXIuc3RhcnQoMCwgKCkgPT4ge1xuICAgICAgICBzdG9wKGV2ZW50LCBjYik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICBzZXRSaXBwbGVzKG9sZFJpcHBsZXMgPT4ge1xuICAgICAgaWYgKG9sZFJpcHBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gb2xkUmlwcGxlcy5zbGljZSgxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW3N0YXJ0VGltZXJdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsICgpID0+ICh7XG4gICAgcHVsc2F0ZSxcbiAgICBzdGFydCxcbiAgICBzdG9wXG4gIH0pLCBbcHVsc2F0ZSwgc3RhcnQsIHN0b3BdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRvdWNoUmlwcGxlUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeCh0b3VjaFJpcHBsZUNsYXNzZXMucm9vdCwgY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogY29udGFpbmVyXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFRyYW5zaXRpb25Hcm91cCwge1xuICAgICAgY29tcG9uZW50OiBudWxsLFxuICAgICAgZXhpdDogdHJ1ZSxcbiAgICAgIGNoaWxkcmVuOiByaXBwbGVzXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRvdWNoUmlwcGxlOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQnV0dG9uQmFzZScsIHNsb3QpO1xufVxuY29uc3QgYnV0dG9uQmFzZUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlCdXR0b25CYXNlJywgWydyb290JywgJ2Rpc2FibGVkJywgJ2ZvY3VzVmlzaWJsZSddKTtcbmV4cG9ydCBkZWZhdWx0IGJ1dHRvbkJhc2VDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFjdGlvblwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJMaW5rQ29tcG9uZW50XCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uQ29udGV4dE1lbnVcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInRvdWNoUmlwcGxlUmVmXCIsIFwidHlwZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCByZWZUeXBlIGZyb20gJ0BtdWkvdXRpbHMvcmVmVHlwZSc7XG5pbXBvcnQgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgZnJvbSAnQG11aS91dGlscy9lbGVtZW50VHlwZUFjY2VwdGluZ1JlZic7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgVG91Y2hSaXBwbGUgZnJvbSAnLi9Ub3VjaFJpcHBsZSc7XG5pbXBvcnQgYnV0dG9uQmFzZUNsYXNzZXMsIHsgZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vYnV0dG9uQmFzZUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkaXNhYmxlZCxcbiAgICBmb2N1c1Zpc2libGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGZvY3VzVmlzaWJsZSAmJiAnZm9jdXNWaXNpYmxlJ11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEJ1dHRvbkJhc2VVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSkge1xuICAgIGNvbXBvc2VkQ2xhc3Nlcy5yb290ICs9IGAgJHtmb2N1c1Zpc2libGVDbGFzc05hbWV9YDtcbiAgfVxuICByZXR1cm4gY29tcG9zZWRDbGFzc2VzO1xufTtcbmV4cG9ydCBjb25zdCBCdXR0b25CYXNlUm9vdCA9IHN0eWxlZCgnYnV0dG9uJywge1xuICBuYW1lOiAnTXVpQnV0dG9uQmFzZScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSkoe1xuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgb3V0bGluZTogMCxcbiAgYm9yZGVyOiAwLFxuICBtYXJnaW46IDAsXG4gIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICBib3JkZXJSYWRpdXM6IDAsXG4gIHBhZGRpbmc6IDAsXG4gIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgLy8gU28gd2UgdGFrZSBwcmVjZWRlbnQgb3ZlciB0aGUgc3R5bGUgb2YgYSBuYXRpdmUgPGEgLz4gZWxlbWVudC5cbiAgY29sb3I6ICdpbmhlcml0JyxcbiAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cbiAgfSxcbiAgW2AmLiR7YnV0dG9uQmFzZUNsYXNzZXMuZGlzYWJsZWR9YF06IHtcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gIH0sXG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgfVxufSk7XG5cbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cbmNvbnN0IEJ1dHRvbkJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b25CYXNlKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWN0aW9uLFxuICAgICAgY2VudGVyUmlwcGxlID0gZmFsc2UsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdidXR0b24nLFxuICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVSaXBwbGUgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IGZhbHNlLFxuICAgICAgZm9jdXNSaXBwbGUgPSBmYWxzZSxcbiAgICAgIExpbmtDb21wb25lbnQgPSAnYScsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25Db250ZXh0TWVudSxcbiAgICAgIG9uRHJhZ0xlYXZlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uRm9jdXNWaXNpYmxlLFxuICAgICAgb25LZXlEb3duLFxuICAgICAgb25LZXlVcCxcbiAgICAgIG9uTW91c2VEb3duLFxuICAgICAgb25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZVVwLFxuICAgICAgb25Ub3VjaEVuZCxcbiAgICAgIG9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0LFxuICAgICAgdGFiSW5kZXggPSAwLFxuICAgICAgVG91Y2hSaXBwbGVQcm9wcyxcbiAgICAgIHRvdWNoUmlwcGxlUmVmLFxuICAgICAgdHlwZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJpcHBsZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmlwcGxlUmVmID0gdXNlRm9ya1JlZihyaXBwbGVSZWYsIHRvdWNoUmlwcGxlUmVmKTtcbiAgY29uc3Qge1xuICAgIGlzRm9jdXNWaXNpYmxlUmVmLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZjogZm9jdXNWaXNpYmxlUmVmXG4gIH0gPSB1c2VJc0ZvY3VzVmlzaWJsZSgpO1xuICBjb25zdCBbZm9jdXNWaXNpYmxlLCBzZXRGb2N1c1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNWaXNpYmxlKSB7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgfVxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgKCkgPT4gKHtcbiAgICBmb2N1c1Zpc2libGU6ICgpID0+IHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuICB9KSwgW10pO1xuICBjb25zdCBbbW91bnRlZFN0YXRlLCBzZXRNb3VudGVkU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgfSwgW10pO1xuICBjb25zdCBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSAmJiBmb2N1c1JpcHBsZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiBtb3VudGVkU3RhdGUpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlUmlwcGxlLCBmb2N1c1JpcHBsZSwgZm9jdXNWaXNpYmxlLCBtb3VudGVkU3RhdGVdKTtcbiAgZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGVBY3Rpb24sIGV2ZW50Q2FsbGJhY2ssIHNraXBSaXBwbGVBY3Rpb24gPSBkaXNhYmxlVG91Y2hSaXBwbGUpIHtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnRDYWxsYmFjaykge1xuICAgICAgICBldmVudENhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlnbm9yZSA9IHNraXBSaXBwbGVBY3Rpb247XG4gICAgICBpZiAoIWlnbm9yZSAmJiByaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudFtyaXBwbGVBY3Rpb25dKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICBjb25zdCBoYW5kbGVDb250ZXh0TWVudSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkNvbnRleHRNZW51KTtcbiAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uRHJhZ0xlYXZlKTtcbiAgY29uc3QgaGFuZGxlTW91c2VVcCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbk1vdXNlVXApO1xuICBjb25zdCBoYW5kbGVNb3VzZUxlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGV2ZW50ID0+IHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIGNvbnN0IGhhbmRsZVRvdWNoRW5kID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hFbmQpO1xuICBjb25zdCBoYW5kbGVUb3VjaE1vdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaE1vdmUpO1xuICBjb25zdCBoYW5kbGVCbHVyID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGV2ZW50ID0+IHtcbiAgICBoYW5kbGVCbHVyVmlzaWJsZShldmVudCk7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQgPT09IGZhbHNlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIEZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgaWYgKCFidXR0b25SZWYuY3VycmVudCkge1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIH1cbiAgICBoYW5kbGVGb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICBpZiAob25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXNOb25OYXRpdmVCdXR0b24gPSAoKSA9PiB7XG4gICAgY29uc3QgYnV0dG9uID0gYnV0dG9uUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmICEoYnV0dG9uLnRhZ05hbWUgPT09ICdBJyAmJiBidXR0b24uaHJlZik7XG4gIH07XG5cbiAgLyoqXG4gICAqIElFMTEgc2hpbSBmb3IgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQvcmVwZWF0XG4gICAqL1xuICBjb25zdCBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgKCkgPT4ge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cblxuICAgIC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICdFbnRlcicgJiYgIWRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlS2V5VXAgPSB1c2VFdmVudENhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICAvLyBjYWxsaW5nIHByZXZlbnREZWZhdWx0IGluIGtleVVwIG9uIGEgPGJ1dHRvbj4gd2lsbCBub3QgZGlzcGF0Y2ggYSBjbGljayBldmVudCBpZiBTcGFjZSBpcyBwcmVzc2VkXG4gICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9wL3NhbmRib3gvYnV0dG9uLWtleXVwLXByZXZlbnRkZWZhdWx0LWRuN2YwXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCAoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcbiAgICBpZiAob25DbGljayAmJiBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgbGV0IENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG4gIGlmIChDb21wb25lbnRQcm9wID09PSAnYnV0dG9uJyAmJiAob3RoZXIuaHJlZiB8fCBvdGhlci50bykpIHtcbiAgICBDb21wb25lbnRQcm9wID0gTGlua0NvbXBvbmVudDtcbiAgfVxuICBjb25zdCBidXR0b25Qcm9wcyA9IHt9O1xuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicpIHtcbiAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZSA9PT0gdW5kZWZpbmVkID8gJ2J1dHRvbicgOiB0eXBlO1xuICAgIGJ1dHRvblByb3BzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFvdGhlci5ocmVmICYmICFvdGhlci50bykge1xuICAgICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgIH1cbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIGJ1dHRvblByb3BzWydhcmlhLWRpc2FibGVkJ10gPSBkaXNhYmxlZDtcbiAgICB9XG4gIH1cbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGZvY3VzVmlzaWJsZVJlZiwgYnV0dG9uUmVmKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBUaGUgYGNvbXBvbmVudGAgcHJvcCBwcm92aWRlZCB0byBCdXR0b25CYXNlIGlzIGludmFsaWQuJywgJ1BsZWFzZSBtYWtlIHN1cmUgdGhlIGNoaWxkcmVuIHByb3AgaXMgcmVuZGVyZWQgaW4gdGhpcyBjdXN0b20gY29tcG9uZW50LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZW5hYmxlVG91Y2hSaXBwbGVdKTtcbiAgfVxuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY2VudGVyUmlwcGxlLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZCxcbiAgICBkaXNhYmxlUmlwcGxlLFxuICAgIGRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICBmb2N1c1JpcHBsZSxcbiAgICB0YWJJbmRleCxcbiAgICBmb2N1c1Zpc2libGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhCdXR0b25CYXNlUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBDb21wb25lbnRQcm9wLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkNvbnRleHRNZW51OiBoYW5kbGVDb250ZXh0TWVudSxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uRHJhZ0xlYXZlOiBoYW5kbGVEcmFnTGVhdmUsXG4gICAgb25Ub3VjaEVuZDogaGFuZGxlVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmU6IGhhbmRsZVRvdWNoTW92ZSxcbiAgICBvblRvdWNoU3RhcnQ6IGhhbmRsZVRvdWNoU3RhcnQsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiB0YWJJbmRleCxcbiAgICB0eXBlOiB0eXBlXG4gIH0sIGJ1dHRvblByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbY2hpbGRyZW4sIGVuYWJsZVRvdWNoUmlwcGxlID9cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLyogVG91Y2hSaXBwbGUgaXMgb25seSBuZWVkZWQgY2xpZW50LXNpZGUsIHgyIGJvb3N0IG9uIHRoZSBzZXJ2ZXIuICovXG4gICAgX2pzeChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiBoYW5kbGVSaXBwbGVSZWYsXG4gICAgICBjZW50ZXI6IGNlbnRlclJpcHBsZVxuICAgIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGxdXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uQmFzZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgYXJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIGVmZmVjdCBpcyBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGAuTXVpLWZvY3VzVmlzaWJsZWAgY2xhc3MuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvdWNoIHJpcHBsZSBlZmZlY3QgaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFzZSBidXR0b24gd2lsbCBoYXZlIGEga2V5Ym9hcmQgZm9jdXMgcmlwcGxlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGlkZW50aWZ5IHdoaWNoIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWlucyB0aGUgZm9jdXMgdGhyb3VnaCBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvSEVBRC9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5hbnksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgdG8gcmVuZGVyIGEgbGluayB3aGVuIHRoZSBgaHJlZmAgcHJvcCBpcyBwcm92aWRlZC5cbiAgICogQGRlZmF1bHQgJ2EnXG4gICAqL1xuICBMaW5rQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNvbnRleHRNZW51OiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRHJhZ0xlYXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQgd2l0aCBhIGtleWJvYXJkLlxuICAgKiBXZSB0cmlnZ2VyIGEgYG9uRm9jdXNgIGNhbGxiYWNrIHRvby5cbiAgICovXG4gIG9uRm9jdXNWaXNpYmxlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaEVuZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICBUb3VjaFJpcHBsZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQSByZWYgdGhhdCBwb2ludHMgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIHRvdWNoUmlwcGxlUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVsc2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHN0YXJ0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgc3RvcDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pXG4gIH0pXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydidXR0b24nLCAncmVzZXQnLCAnc3VibWl0J10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCdXR0b25CYXNlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFkZEVuZExpc3RlbmVyXCIsIFwiYXBwZWFyXCIsIFwiY2hpbGRyZW5cIiwgXCJlYXNpbmdcIiwgXCJpblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBlbGVtZW50QWNjZXB0aW5nUmVmIGZyb20gJ0BtdWkvdXRpbHMvZWxlbWVudEFjY2VwdGluZ1JlZic7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCB7IHJlZmxvdywgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3Qgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIG9wYWNpdHk6IDFcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDFcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgRmFkZSB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtNb2RhbF0oL21hdGVyaWFsLXVpL3JlYWN0LW1vZGFsLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuY29uc3QgRmFkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZhZGUocHJvcHMsIHJlZikge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IGRlZmF1bHRUaW1lb3V0ID0ge1xuICAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG4gIH07XG4gIGNvbnN0IHtcbiAgICAgIGFkZEVuZExpc3RlbmVyLFxuICAgICAgYXBwZWFyID0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZWFzaW5nLFxuICAgICAgaW46IGluUHJvcCxcbiAgICAgIG9uRW50ZXIsXG4gICAgICBvbkVudGVyZWQsXG4gICAgICBvbkVudGVyaW5nLFxuICAgICAgb25FeGl0LFxuICAgICAgb25FeGl0ZWQsXG4gICAgICBvbkV4aXRpbmcsXG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQgPSBkZWZhdWx0VGltZW91dCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9wcm9wLXR5cGVzXG4gICAgICBUcmFuc2l0aW9uQ29tcG9uZW50ID0gVHJhbnNpdGlvblxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID0gdHJ1ZTtcbiAgY29uc3Qgbm9kZVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihub2RlUmVmLCBjaGlsZHJlbi5yZWYsIHJlZik7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiBtYXliZUlzQXBwZWFyaW5nID0+IHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG5vZGUgPSBub2RlUmVmLmN1cnJlbnQ7XG5cbiAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgaWYgKG1heWJlSXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGUsIG1heWJlSXNBcHBlYXJpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJpbmcpO1xuICBjb25zdCBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soKG5vZGUsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIGNvbnN0IHRyYW5zaXRpb25Qcm9wcyA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZSxcbiAgICAgIHRpbWVvdXQsXG4gICAgICBlYXNpbmdcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICBjb25zdCBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICBjb25zdCBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGVkKTtcbiAgY29uc3QgaGFuZGxlQWRkRW5kTGlzdGVuZXIgPSBuZXh0ID0+IHtcbiAgICBpZiAoYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIC8vIE9sZCBjYWxsIHNpZ25hdHVyZSBiZWZvcmUgYHJlYWN0LXRyYW5zaXRpb24tZ3JvdXBgIGltcGxlbWVudGVkIGBub2RlUmVmYFxuICAgICAgYWRkRW5kTGlzdGVuZXIobm9kZVJlZi5jdXJyZW50LCBuZXh0KTtcbiAgICB9XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiBhcHBlYXIsXG4gICAgaW46IGluUHJvcCxcbiAgICBub2RlUmVmOiBlbmFibGVTdHJpY3RNb2RlQ29tcGF0ID8gbm9kZVJlZiA6IHVuZGVmaW5lZCxcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBoYW5kbGVBZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IChzdGF0ZSwgY2hpbGRQcm9wcykgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmFkZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmcgRE9NXG4gICAqIG5vZGUgYW5kIGEgZG9uZSBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gTm90ZTogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgZWFzaW5nIG9yIGEgb2JqZWN0IGNvbnRhaW5pbmcgZW50ZXIgYW5kIGV4aXQgdmFsdWVzLlxuICAgKi9cbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGVudGVyOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgICogICBleGl0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuLFxuICAgKiB9XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFkZEVuZExpc3RlbmVyXCIsIFwiYXBwZWFyXCIsIFwiY2hpbGRyZW5cIiwgXCJlYXNpbmdcIiwgXCJpblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJzdHlsZVwiLCBcInRpbWVvdXRcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB1c2VUaW1lb3V0IGZyb20gJ0BtdWkvdXRpbHMvdXNlVGltZW91dCc7XG5pbXBvcnQgZWxlbWVudEFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRBY2NlcHRpbmdSZWYnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyBnZXRUcmFuc2l0aW9uUHJvcHMsIHJlZmxvdyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldFNjYWxlKHZhbHVlKSB7XG4gIHJldHVybiBgc2NhbGUoJHt2YWx1ZX0sICR7dmFsdWUgKiogMn0pYDtcbn1cbmNvbnN0IHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMSlcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiAnbm9uZSdcbiAgfVxufTtcblxuLypcbiBUT0RPIHY2OiByZW1vdmVcbiBDb25kaXRpb25hbGx5IGFwcGx5IGEgd29ya2Fyb3VuZCBmb3IgdGhlIENTUyB0cmFuc2l0aW9uIGJ1ZyBpbiBTYWZhcmkgMTUuNCAvIFdlYktpdCBicm93c2Vycy5cbiAqL1xuY29uc3QgaXNXZWJLaXQxNTQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSooc2FmYXJpfG1vYmlsZSkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmIC8ob3MgfHZlcnNpb25cXC8pMTUoLnxfKTQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIFRoZSBHcm93IHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW1Rvb2x0aXBdKC9tYXRlcmlhbC11aS9yZWFjdC10b29sdGlwLykgYW5kXG4gKiBbUG9wb3Zlcl0oL21hdGVyaWFsLXVpL3JlYWN0LXBvcG92ZXIvKSBjb21wb25lbnRzLlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuY29uc3QgR3JvdyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEdyb3cocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgICBhZGRFbmRMaXN0ZW5lcixcbiAgICAgIGFwcGVhciA9IHRydWUsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVhc2luZyxcbiAgICAgIGluOiBpblByb3AsXG4gICAgICBvbkVudGVyLFxuICAgICAgb25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyxcbiAgICAgIG9uRXhpdCxcbiAgICAgIG9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nLFxuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0ID0gJ2F1dG8nLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3Byb3AtdHlwZXNcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBUcmFuc2l0aW9uXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHRpbWVyID0gdXNlVGltZW91dCgpO1xuICBjb25zdCBhdXRvVGltZW91dCA9IFJlYWN0LnVzZVJlZigpO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobm9kZVJlZiwgY2hpbGRyZW4ucmVmLCByZWYpO1xuICBjb25zdCBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrID0gY2FsbGJhY2sgPT4gbWF5YmVJc0FwcGVhcmluZyA9PiB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZVJlZi5jdXJyZW50O1xuXG4gICAgICAvLyBvbkVudGVyWHh4IGFuZCBvbkV4aXRYeHggY2FsbGJhY2tzIGhhdmUgYSBkaWZmZXJlbnQgYXJndW1lbnRzLmxlbmd0aCB2YWx1ZS5cbiAgICAgIGlmIChtYXliZUlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhub2RlLCBtYXliZUlzQXBwZWFyaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUVudGVyaW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyaW5nKTtcbiAgY29uc3QgaGFuZGxlRW50ZXIgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKChub2RlLCBpc0FwcGVhcmluZykgPT4ge1xuICAgIHJlZmxvdyhub2RlKTsgLy8gU28gdGhlIGFuaW1hdGlvbiBhbHdheXMgc3RhcnQgZnJvbSB0aGUgc3RhcnQuXG5cbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgZGVsYXksXG4gICAgICBlYXNpbmc6IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuICAgIH0gPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2VudGVyJ1xuICAgIH0pO1xuICAgIGxldCBkdXJhdGlvbjtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICBkdXJhdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmdldEF1dG9IZWlnaHREdXJhdGlvbihub2RlLmNsaWVudEhlaWdodCk7XG4gICAgICBhdXRvVGltZW91dC5jdXJyZW50ID0gZHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgIH1cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb24sXG4gICAgICBkZWxheVxuICAgIH0pLCB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgIGR1cmF0aW9uOiBpc1dlYktpdDE1NCA/IGR1cmF0aW9uIDogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgIGRlbGF5LFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9KV0uam9pbignLCcpO1xuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVFbnRlcmVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkVudGVyZWQpO1xuICBjb25zdCBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICBjb25zdCBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhub2RlID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgZGVsYXksXG4gICAgICBlYXNpbmc6IHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuICAgIH0gPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGUsXG4gICAgICB0aW1lb3V0LFxuICAgICAgZWFzaW5nXG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSk7XG4gICAgbGV0IGR1cmF0aW9uO1xuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgIGF1dG9UaW1lb3V0LmN1cnJlbnQgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgfVxuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IFt0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbixcbiAgICAgIGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGlzV2ViS2l0MTU0ID8gZHVyYXRpb24gOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXk6IGlzV2ViS2l0MTU0ID8gZGVsYXkgOiBkZWxheSB8fCBkdXJhdGlvbiAqIDAuMzMzLFxuICAgICAgZWFzaW5nOiB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cbiAgICB9KV0uam9pbignLCcpO1xuICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBnZXRTY2FsZSgwLjc1KTtcbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFuZGxlRXhpdGVkID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRlZCk7XG4gIGNvbnN0IGhhbmRsZUFkZEVuZExpc3RlbmVyID0gbmV4dCA9PiB7XG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgdGltZXIuc3RhcnQoYXV0b1RpbWVvdXQuY3VycmVudCB8fCAwLCBuZXh0KTtcbiAgICB9XG4gICAgaWYgKGFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAvLyBPbGQgY2FsbCBzaWduYXR1cmUgYmVmb3JlIGByZWFjdC10cmFuc2l0aW9uLWdyb3VwYCBpbXBsZW1lbnRlZCBgbm9kZVJlZmBcbiAgICAgIGFkZEVuZExpc3RlbmVyKG5vZGVSZWYuY3VycmVudCwgbmV4dCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogYXBwZWFyLFxuICAgIGluOiBpblByb3AsXG4gICAgbm9kZVJlZjogbm9kZVJlZixcbiAgICBvbkVudGVyOiBoYW5kbGVFbnRlcixcbiAgICBvbkVudGVyZWQ6IGhhbmRsZUVudGVyZWQsXG4gICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmcsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIG9uRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBoYW5kbGVBZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAoc3RhdGUsIGNoaWxkUHJvcHMpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDAuNzUpLFxuICAgICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICB9XG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3Jvdy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmcgRE9NXG4gICAqIG5vZGUgYW5kIGEgZG9uZSBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gTm90ZTogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlbiBpdCBmaXJzdCBtb3VudHMgaWYgYGluYCBpcyBhbHNvIGB0cnVlYC5cbiAgICogU2V0IHRoaXMgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHRyYW5zaXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgZWFzaW5nIG9yIGEgb2JqZWN0IGNvbnRhaW5pbmcgZW50ZXIgYW5kIGV4aXQgdmFsdWVzLlxuICAgKi9cbiAgZWFzaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICpcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbkdyb3cubXVpU3VwcG9ydEF1dG8gPSB0cnVlO1xuZXhwb3J0IGRlZmF1bHQgR3JvdzsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbGlnbkl0ZW1zXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY29tcG9uZW50XCIsIFwiY2hpbGRyZW5cIiwgXCJkZW5zZVwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZGl2aWRlclwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcInNlbGVjdGVkXCIsIFwiY2xhc3NOYW1lXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICdAbXVpL3N5c3RlbS9jb2xvck1hbmlwdWxhdG9yJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICcuLi91dGlscy91c2VFbmhhbmNlZEVmZmVjdCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuLi9MaXN0L0xpc3RDb250ZXh0JztcbmltcG9ydCBsaXN0SXRlbUJ1dHRvbkNsYXNzZXMsIHsgZ2V0TGlzdEl0ZW1CdXR0b25VdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IG92ZXJyaWRlc1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGVcbiAgfSA9IHByb3BzO1xuICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLmRlbnNlICYmIHN0eWxlcy5kZW5zZSwgb3duZXJTdGF0ZS5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYgc3R5bGVzLmFsaWduSXRlbXNGbGV4U3RhcnQsIG93bmVyU3RhdGUuZGl2aWRlciAmJiBzdHlsZXMuZGl2aWRlciwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYgc3R5bGVzLmd1dHRlcnNdO1xufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbkl0ZW1zLFxuICAgIGNsYXNzZXMsXG4gICAgZGVuc2UsXG4gICAgZGlzYWJsZWQsXG4gICAgZGlzYWJsZUd1dHRlcnMsXG4gICAgZGl2aWRlcixcbiAgICBzZWxlY3RlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGVuc2UgJiYgJ2RlbnNlJywgIWRpc2FibGVHdXR0ZXJzICYmICdndXR0ZXJzJywgZGl2aWRlciAmJiAnZGl2aWRlcicsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGFsaWduSXRlbXMgPT09ICdmbGV4LXN0YXJ0JyAmJiAnYWxpZ25JdGVtc0ZsZXhTdGFydCcsIHNlbGVjdGVkICYmICdzZWxlY3RlZCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaXN0SXRlbUJ1dHRvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBMaXN0SXRlbUJ1dHRvblJvb3QgPSBzdHlsZWQoQnV0dG9uQmFzZSwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpTGlzdEl0ZW1CdXR0b24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnZmxleCcsXG4gIGZsZXhHcm93OiAxLFxuICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gIG1pbldpZHRoOiAwLFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgdGV4dEFsaWduOiAnbGVmdCcsXG4gIHBhZGRpbmdUb3A6IDgsXG4gIHBhZGRpbmdCb3R0b206IDgsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfSksXG4gICcmOmhvdmVyJzoge1xuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uaG92ZXIsXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICB9XG4gIH0sXG4gIFtgJi4ke2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5zZWxlY3RlZH1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnByaW1hcnkubWFpbkNoYW5uZWx9IC8gJHt0aGVtZS52YXJzLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eX0pYCA6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHkpLFxuICAgIFtgJi4ke2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5mb2N1c1Zpc2libGV9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnByaW1hcnkubWFpbkNoYW5uZWx9IC8gY2FsYygke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5mb2N1c09wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmZvY3VzT3BhY2l0eSlcbiAgICB9XG4gIH0sXG4gIFtgJi4ke2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5zZWxlY3RlZH06aG92ZXJgXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLnByaW1hcnkubWFpbkNoYW5uZWx9IC8gY2FsYygke3RoZW1lLnZhcnMucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5fSArICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHl9KSlgIDogYWxwaGEodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkT3BhY2l0eSArIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5wcmltYXJ5Lm1haW5DaGFubmVsfSAvICR7dGhlbWUudmFycy5wYWxldHRlLmFjdGlvbi5zZWxlY3RlZE9wYWNpdHl9KWAgOiBhbHBoYSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uc2VsZWN0ZWRPcGFjaXR5KVxuICAgIH1cbiAgfSxcbiAgW2AmLiR7bGlzdEl0ZW1CdXR0b25DbGFzc2VzLmZvY3VzVmlzaWJsZX1gXToge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYWN0aW9uLmZvY3VzXG4gIH0sXG4gIFtgJi4ke2xpc3RJdGVtQnV0dG9uQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgIG9wYWNpdHk6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZE9wYWNpdHlcbiAgfVxufSwgb3duZXJTdGF0ZS5kaXZpZGVyICYmIHtcbiAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuZGl2aWRlcn1gLFxuICBiYWNrZ3JvdW5kQ2xpcDogJ3BhZGRpbmctYm94J1xufSwgb3duZXJTdGF0ZS5hbGlnbkl0ZW1zID09PSAnZmxleC1zdGFydCcgJiYge1xuICBhbGlnbkl0ZW1zOiAnZmxleC1zdGFydCdcbn0sICFvd25lclN0YXRlLmRpc2FibGVHdXR0ZXJzICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDE2LFxuICBwYWRkaW5nUmlnaHQ6IDE2XG59LCBvd25lclN0YXRlLmRlbnNlICYmIHtcbiAgcGFkZGluZ1RvcDogNCxcbiAgcGFkZGluZ0JvdHRvbTogNFxufSkpO1xuY29uc3QgTGlzdEl0ZW1CdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaXN0SXRlbUJ1dHRvbihpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGlzdEl0ZW1CdXR0b24nXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhbGlnbkl0ZW1zID0gJ2NlbnRlcicsXG4gICAgICBhdXRvRm9jdXMgPSBmYWxzZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBkZW5zZSA9IGZhbHNlLFxuICAgICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICAgIGRpdmlkZXIgPSBmYWxzZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIHNlbGVjdGVkID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGlzdENvbnRleHQpO1xuICBjb25zdCBjaGlsZENvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgZGVuc2U6IGRlbnNlIHx8IGNvbnRleHQuZGVuc2UgfHwgZmFsc2UsXG4gICAgYWxpZ25JdGVtcyxcbiAgICBkaXNhYmxlR3V0dGVyc1xuICB9KSwgW2FsaWduSXRlbXMsIGNvbnRleHQuZGVuc2UsIGRlbnNlLCBkaXNhYmxlR3V0dGVyc10pO1xuICBjb25zdCBsaXN0SXRlbVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGlmIChsaXN0SXRlbVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGxpc3RJdGVtUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFVuYWJsZSB0byBzZXQgZm9jdXMgdG8gYSBMaXN0SXRlbUJ1dHRvbiB3aG9zZSBjb21wb25lbnQgaGFzIG5vdCBiZWVuIHJlbmRlcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWxpZ25JdGVtcyxcbiAgICBkZW5zZTogY2hpbGRDb250ZXh0LmRlbnNlLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIGRpdmlkZXIsXG4gICAgc2VsZWN0ZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihsaXN0SXRlbVJlZiwgcmVmKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KExpc3RDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNoaWxkQ29udGV4dCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTGlzdEl0ZW1CdXR0b25Sb290LCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgIGhyZWY6IG90aGVyLmhyZWYgfHwgb3RoZXIudG9cbiAgICAgIC8vIGBCdXR0b25CYXNlYCBwcm9jZXNzZXMgYGhyZWZgIG9yIGB0b2AgaWYgYGNvbXBvbmVudGAgaXMgc2V0IHRvICdidXR0b24nXG4gICAgICAsXG4gICAgICBjb21wb25lbnQ6IChvdGhlci5ocmVmIHx8IG90aGVyLnRvKSAmJiBjb21wb25lbnQgPT09ICdkaXYnID8gJ2J1dHRvbicgOiBjb21wb25lbnQsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgIH0sIG90aGVyLCB7XG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbUJ1dHRvbi5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgYWxpZ24taXRlbXNgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBAZGVmYXVsdCAnY2VudGVyJ1xuICAgKi9cbiAgYWxpZ25JdGVtczogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2ZsZXgtc3RhcnQnXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsaXN0IGl0ZW0gaXMgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKiBGb2N1cyB3aWxsIGFsc28gYmUgdHJpZ2dlcmVkIGlmIHRoZSB2YWx1ZSBjaGFuZ2VzIGZyb20gZmFsc2UgdG8gdHJ1ZS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50IGlmIGEgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYCBpcyB1c2VkIGl0IG11c3RcbiAgICogYmUgdGhlIGxhc3QgY2hpbGQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IGlzIHVzZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IExpc3QgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVuc2U6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGVmdCBhbmQgcmlnaHQgcGFkZGluZyBpcyByZW1vdmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIDFweCBsaWdodCBib3JkZXIgaXMgYWRkZWQgdG8gdGhlIGJvdHRvbSBvZiB0aGUgbGlzdCBpdGVtLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgY2FuIGhlbHAgaWRlbnRpZnkgd2hpY2ggZWxlbWVudCBoYXMga2V5Ym9hcmQgZm9jdXMuXG4gICAqIFRoZSBjbGFzcyBuYW1lIHdpbGwgYmUgYXBwbGllZCB3aGVuIHRoZSBlbGVtZW50IGdhaW5zIHRoZSBmb2N1cyB0aHJvdWdoIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9IRUFEL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGhyZWY6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBVc2UgdG8gYXBwbHkgc2VsZWN0ZWQgc3R5bGluZy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNlbGVjdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtQnV0dG9uOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdEl0ZW1CdXR0b25VdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtQnV0dG9uJywgc2xvdCk7XG59XG5jb25zdCBsaXN0SXRlbUJ1dHRvbkNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaXN0SXRlbUJ1dHRvbicsIFsncm9vdCcsICdmb2N1c1Zpc2libGUnLCAnZGVuc2UnLCAnYWxpZ25JdGVtc0ZsZXhTdGFydCcsICdkaXNhYmxlZCcsICdkaXZpZGVyJywgJ2d1dHRlcnMnLCAnc2VsZWN0ZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbUJ1dHRvbkNsYXNzZXM7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXN0SXRlbVRleHRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3RJdGVtVGV4dCcsIHNsb3QpO1xufVxuY29uc3QgbGlzdEl0ZW1UZXh0Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpc3RJdGVtVGV4dCcsIFsncm9vdCcsICdtdWx0aWxpbmUnLCAnZGVuc2UnLCAnaW5zZXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSk7XG5leHBvcnQgZGVmYXVsdCBsaXN0SXRlbVRleHRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZVR5cG9ncmFwaHlcIiwgXCJpbnNldFwiLCBcInByaW1hcnlcIiwgXCJwcmltYXJ5VHlwb2dyYXBoeVByb3BzXCIsIFwic2Vjb25kYXJ5XCIsIFwic2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi4vTGlzdC9MaXN0Q29udGV4dCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGxpc3RJdGVtVGV4dENsYXNzZXMsIHsgZ2V0TGlzdEl0ZW1UZXh0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0SXRlbVRleHRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBpbnNldCxcbiAgICBwcmltYXJ5LFxuICAgIHNlY29uZGFyeSxcbiAgICBkZW5zZVxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgaW5zZXQgJiYgJ2luc2V0JywgZGVuc2UgJiYgJ2RlbnNlJywgcHJpbWFyeSAmJiBzZWNvbmRhcnkgJiYgJ211bHRpbGluZSddLFxuICAgIHByaW1hcnk6IFsncHJpbWFyeSddLFxuICAgIHNlY29uZGFyeTogWydzZWNvbmRhcnknXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpc3RJdGVtVGV4dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgTGlzdEl0ZW1UZXh0Um9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpTGlzdEl0ZW1UZXh0JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbe1xuICAgICAgW2AmIC4ke2xpc3RJdGVtVGV4dENsYXNzZXMucHJpbWFyeX1gXTogc3R5bGVzLnByaW1hcnlcbiAgICB9LCB7XG4gICAgICBbYCYgLiR7bGlzdEl0ZW1UZXh0Q2xhc3Nlcy5zZWNvbmRhcnl9YF06IHN0eWxlcy5zZWNvbmRhcnlcbiAgICB9LCBzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5pbnNldCAmJiBzdHlsZXMuaW5zZXQsIG93bmVyU3RhdGUucHJpbWFyeSAmJiBvd25lclN0YXRlLnNlY29uZGFyeSAmJiBzdHlsZXMubXVsdGlsaW5lLCBvd25lclN0YXRlLmRlbnNlICYmIHN0eWxlcy5kZW5zZV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZmxleDogJzEgMSBhdXRvJyxcbiAgbWluV2lkdGg6IDAsXG4gIG1hcmdpblRvcDogNCxcbiAgbWFyZ2luQm90dG9tOiA0XG59LCBvd25lclN0YXRlLnByaW1hcnkgJiYgb3duZXJTdGF0ZS5zZWNvbmRhcnkgJiYge1xuICBtYXJnaW5Ub3A6IDYsXG4gIG1hcmdpbkJvdHRvbTogNlxufSwgb3duZXJTdGF0ZS5pbnNldCAmJiB7XG4gIHBhZGRpbmdMZWZ0OiA1NlxufSkpO1xuY29uc3QgTGlzdEl0ZW1UZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdEl0ZW1UZXh0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaXN0SXRlbVRleHQnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVUeXBvZ3JhcGh5ID0gZmFsc2UsXG4gICAgICBpbnNldCA9IGZhbHNlLFxuICAgICAgcHJpbWFyeTogcHJpbWFyeVByb3AsXG4gICAgICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzLFxuICAgICAgc2Vjb25kYXJ5OiBzZWNvbmRhcnlQcm9wLFxuICAgICAgc2Vjb25kYXJ5VHlwb2dyYXBoeVByb3BzXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBkZW5zZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChMaXN0Q29udGV4dCk7XG4gIGxldCBwcmltYXJ5ID0gcHJpbWFyeVByb3AgIT0gbnVsbCA/IHByaW1hcnlQcm9wIDogY2hpbGRyZW47XG4gIGxldCBzZWNvbmRhcnkgPSBzZWNvbmRhcnlQcm9wO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGlzYWJsZVR5cG9ncmFwaHksXG4gICAgaW5zZXQsXG4gICAgcHJpbWFyeTogISFwcmltYXJ5LFxuICAgIHNlY29uZGFyeTogISFzZWNvbmRhcnksXG4gICAgZGVuc2VcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgaWYgKHByaW1hcnkgIT0gbnVsbCAmJiBwcmltYXJ5LnR5cGUgIT09IFR5cG9ncmFwaHkgJiYgIWRpc2FibGVUeXBvZ3JhcGh5KSB7XG4gICAgcHJpbWFyeSA9IC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHksIF9leHRlbmRzKHtcbiAgICAgIHZhcmlhbnQ6IGRlbnNlID8gJ2JvZHkyJyA6ICdib2R5MScsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMucHJpbWFyeSxcbiAgICAgIGNvbXBvbmVudDogcHJpbWFyeVR5cG9ncmFwaHlQcm9wcyAhPSBudWxsICYmIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHMudmFyaWFudCA/IHVuZGVmaW5lZCA6ICdzcGFuJyxcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHByaW1hcnlUeXBvZ3JhcGh5UHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBwcmltYXJ5XG4gICAgfSkpO1xuICB9XG4gIGlmIChzZWNvbmRhcnkgIT0gbnVsbCAmJiBzZWNvbmRhcnkudHlwZSAhPT0gVHlwb2dyYXBoeSAmJiAhZGlzYWJsZVR5cG9ncmFwaHkpIHtcbiAgICBzZWNvbmRhcnkgPSAvKiNfX1BVUkVfXyovX2pzeChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgICB2YXJpYW50OiBcImJvZHkyXCIsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc2Vjb25kYXJ5LFxuICAgICAgY29sb3I6IFwidGV4dC5zZWNvbmRhcnlcIixcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgIH0sIHNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcywge1xuICAgICAgY2hpbGRyZW46IHNlY29uZGFyeVxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKExpc3RJdGVtVGV4dFJvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW3ByaW1hcnksIHNlY29uZGFyeV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0SXRlbVRleHQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQWxpYXMgZm9yIHRoZSBgcHJpbWFyeWAgcHJvcC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjaGlsZHJlbiB3b24ndCBiZSB3cmFwcGVkIGJ5IGEgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCB0byByZW5kZXIgYW4gYWx0ZXJuYXRpdmUgVHlwb2dyYXBoeSB2YXJpYW50IGJ5IHdyYXBwaW5nXG4gICAqIHRoZSBgY2hpbGRyZW5gIChvciBgcHJpbWFyeWApIHRleHQsIGFuZCBvcHRpb25hbCBgc2Vjb25kYXJ5YCB0ZXh0XG4gICAqIHdpdGggdGhlIFR5cG9ncmFwaHkgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVR5cG9ncmFwaHk6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY2hpbGRyZW4gYXJlIGluZGVudGVkLlxuICAgKiBUaGlzIHNob3VsZCBiZSB1c2VkIGlmIHRoZXJlIGlzIG5vIGxlZnQgYXZhdGFyIG9yIGxlZnQgaWNvbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGluc2V0OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBtYWluIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHByaW1hcnk6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlc2UgcHJvcHMgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHByaW1hcnkgdHlwb2dyYXBoeSBjb21wb25lbnRcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHNlY29uZGFyeSBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBzZWNvbmRhcnk6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlc2UgcHJvcHMgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHNlY29uZGFyeSB0eXBvZ3JhcGh5IGNvbXBvbmVudFxuICAgKiAoYXMgbG9uZyBhcyBkaXNhYmxlVHlwb2dyYXBoeSBpcyBub3QgYHRydWVgKS5cbiAgICovXG4gIHNlY29uZGFyeVR5cG9ncmFwaHlQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpc3RJdGVtVGV4dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpc3RVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpc3QnLCBzbG90KTtcbn1cbmNvbnN0IGxpc3RDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTGlzdCcsIFsncm9vdCcsICdwYWRkaW5nJywgJ2RlbnNlJywgJ3N1YmhlYWRlciddKTtcbmV4cG9ydCBkZWZhdWx0IGxpc3RDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlUGFkZGluZ1wiLCBcInN1YmhlYWRlclwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgTGlzdENvbnRleHQgZnJvbSAnLi9MaXN0Q29udGV4dCc7XG5pbXBvcnQgeyBnZXRMaXN0VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saXN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgZGlzYWJsZVBhZGRpbmcsXG4gICAgZGVuc2UsXG4gICAgc3ViaGVhZGVyXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCAhZGlzYWJsZVBhZGRpbmcgJiYgJ3BhZGRpbmcnLCBkZW5zZSAmJiAnZGVuc2UnLCBzdWJoZWFkZXIgJiYgJ3N1YmhlYWRlciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGlzdFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgTGlzdFJvb3QgPSBzdHlsZWQoJ3VsJywge1xuICBuYW1lOiAnTXVpTGlzdCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCAhb3duZXJTdGF0ZS5kaXNhYmxlUGFkZGluZyAmJiBzdHlsZXMucGFkZGluZywgb3duZXJTdGF0ZS5kZW5zZSAmJiBzdHlsZXMuZGVuc2UsIG93bmVyU3RhdGUuc3ViaGVhZGVyICYmIHN0eWxlcy5zdWJoZWFkZXJdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGxpc3RTdHlsZTogJ25vbmUnLFxuICBtYXJnaW46IDAsXG4gIHBhZGRpbmc6IDAsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnXG59LCAhb3duZXJTdGF0ZS5kaXNhYmxlUGFkZGluZyAmJiB7XG4gIHBhZGRpbmdUb3A6IDgsXG4gIHBhZGRpbmdCb3R0b206IDhcbn0sIG93bmVyU3RhdGUuc3ViaGVhZGVyICYmIHtcbiAgcGFkZGluZ1RvcDogMFxufSkpO1xuY29uc3QgTGlzdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpc3QoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpc3QnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICd1bCcsXG4gICAgICBkZW5zZSA9IGZhbHNlLFxuICAgICAgZGlzYWJsZVBhZGRpbmcgPSBmYWxzZSxcbiAgICAgIHN1YmhlYWRlclxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGRlbnNlXG4gIH0pLCBbZGVuc2VdKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbXBvbmVudCxcbiAgICBkZW5zZSxcbiAgICBkaXNhYmxlUGFkZGluZ1xuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3hzKExpc3RSb290LCBfZXh0ZW5kcyh7XG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0sIG90aGVyLCB7XG4gICAgICBjaGlsZHJlbjogW3N1YmhlYWRlciwgY2hpbGRyZW5dXG4gICAgfSkpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaXN0LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGNvbXBhY3QgdmVydGljYWwgcGFkZGluZyBkZXNpZ25lZCBmb3Iga2V5Ym9hcmQgYW5kIG1vdXNlIGlucHV0IGlzIHVzZWQgZm9yXG4gICAqIHRoZSBsaXN0IGFuZCBsaXN0IGl0ZW1zLlxuICAgKiBUaGUgcHJvcCBpcyBhdmFpbGFibGUgdG8gZGVzY2VuZGFudCBjb21wb25lbnRzIGFzIHRoZSBgZGVuc2VgIGNvbnRleHQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZW5zZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHZlcnRpY2FsIHBhZGRpbmcgaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBhZGRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHN1YmhlYWRlciwgbm9ybWFsbHkgYExpc3RTdWJoZWFkZXJgLlxuICAgKi9cbiAgc3ViaGVhZGVyOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpc3Q7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuY29uc3QgTGlzdENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7fSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBMaXN0Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdMaXN0Q29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBMaXN0Q29udGV4dDsiLCJpbXBvcnQgeyB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdywgdW5zdGFibGVfb3duZXJEb2N1bWVudCBhcyBvd25lckRvY3VtZW50LCB1bnN0YWJsZV9nZXRTY3JvbGxiYXJTaXplIGFzIGdldFNjcm9sbGJhclNpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbi8vIElzIGEgdmVydGljYWwgc2Nyb2xsYmFyIGRpc3BsYXllZD9cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSB7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKTtcbiAgaWYgKGRvYy5ib2R5ID09PSBjb250YWluZXIpIHtcbiAgICByZXR1cm4gb3duZXJXaW5kb3coY29udGFpbmVyKS5pbm5lcldpZHRoID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuICByZXR1cm4gY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gYXJpYUhpZGRlbihlbGVtZW50LCBzaG93KSB7XG4gIGlmIChzaG93KSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UGFkZGluZ1JpZ2h0KGVsZW1lbnQpIHtcbiAgcmV0dXJuIHBhcnNlSW50KG93bmVyV2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucGFkZGluZ1JpZ2h0LCAxMCkgfHwgMDtcbn1cbmZ1bmN0aW9uIGlzQXJpYUhpZGRlbkZvcmJpZGRlbk9uRWxlbWVudChlbGVtZW50KSB7XG4gIC8vIFRoZSBmb3JiaWRkZW4gSFRNTCB0YWdzIGFyZSB0aGUgb25lcyBmcm9tIEFSSUEgc3BlY2lmaWNhdGlvbiB0aGF0XG4gIC8vIGNhbiBiZSBjaGlsZHJlbiBvZiBib2R5IGFuZCBjYW4ndCBoYXZlIGFyaWEtaGlkZGVuIGF0dHJpYnV0ZS5cbiAgLy8gY2YuIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sLWFyaWEvI2RvY2NvbmZvcm1hbmNlXG4gIGNvbnN0IGZvcmJpZGRlblRhZ05hbWVzID0gWydURU1QTEFURScsICdTQ1JJUFQnLCAnU1RZTEUnLCAnTElOSycsICdNQVAnLCAnTUVUQScsICdOT1NDUklQVCcsICdQSUNUVVJFJywgJ0NPTCcsICdDT0xHUk9VUCcsICdQQVJBTScsICdTTE9UJywgJ1NPVVJDRScsICdUUkFDSyddO1xuICBjb25zdCBpc0ZvcmJpZGRlblRhZ05hbWUgPSBmb3JiaWRkZW5UYWdOYW1lcy5pbmRleE9mKGVsZW1lbnQudGFnTmFtZSkgIT09IC0xO1xuICBjb25zdCBpc0lucHV0SGlkZGVuID0gZWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0eXBlJykgPT09ICdoaWRkZW4nO1xuICByZXR1cm4gaXNGb3JiaWRkZW5UYWdOYW1lIHx8IGlzSW5wdXRIaWRkZW47XG59XG5mdW5jdGlvbiBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb3VudEVsZW1lbnQsIGN1cnJlbnRFbGVtZW50LCBlbGVtZW50c1RvRXhjbHVkZSwgc2hvdykge1xuICBjb25zdCBibGFja2xpc3QgPSBbbW91bnRFbGVtZW50LCBjdXJyZW50RWxlbWVudCwgLi4uZWxlbWVudHNUb0V4Y2x1ZGVdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBlbGVtZW50ID0+IHtcbiAgICBjb25zdCBpc05vdEV4Y2x1ZGVkRWxlbWVudCA9IGJsYWNrbGlzdC5pbmRleE9mKGVsZW1lbnQpID09PSAtMTtcbiAgICBjb25zdCBpc05vdEZvcmJpZGRlbkVsZW1lbnQgPSAhaXNBcmlhSGlkZGVuRm9yYmlkZGVuT25FbGVtZW50KGVsZW1lbnQpO1xuICAgIGlmIChpc05vdEV4Y2x1ZGVkRWxlbWVudCAmJiBpc05vdEZvcmJpZGRlbkVsZW1lbnQpIHtcbiAgICAgIGFyaWFIaWRkZW4oZWxlbWVudCwgc2hvdyk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGZpbmRJbmRleE9mKGl0ZW1zLCBjYWxsYmFjaykge1xuICBsZXQgaWR4ID0gLTE7XG4gIGl0ZW1zLnNvbWUoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgaWYgKGNhbGxiYWNrKGl0ZW0pKSB7XG4gICAgICBpZHggPSBpbmRleDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufVxuZnVuY3Rpb24gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKSB7XG4gIGNvbnN0IHJlc3RvcmVTdHlsZSA9IFtdO1xuICBjb25zdCBjb250YWluZXIgPSBjb250YWluZXJJbmZvLmNvbnRhaW5lcjtcbiAgaWYgKCFwcm9wcy5kaXNhYmxlU2Nyb2xsTG9jaykge1xuICAgIGlmIChpc092ZXJmbG93aW5nKGNvbnRhaW5lcikpIHtcbiAgICAgIC8vIENvbXB1dGUgdGhlIHNpemUgYmVmb3JlIGFwcGx5aW5nIG92ZXJmbG93IGhpZGRlbiB0byBhdm9pZCBhbnkgc2Nyb2xsIGp1bXBzLlxuICAgICAgY29uc3Qgc2Nyb2xsYmFyU2l6ZSA9IGdldFNjcm9sbGJhclNpemUob3duZXJEb2N1bWVudChjb250YWluZXIpKTtcbiAgICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgICAgdmFsdWU6IGNvbnRhaW5lci5zdHlsZS5wYWRkaW5nUmlnaHQsXG4gICAgICAgIHByb3BlcnR5OiAncGFkZGluZy1yaWdodCcsXG4gICAgICAgIGVsOiBjb250YWluZXJcbiAgICAgIH0pO1xuICAgICAgLy8gVXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nIHRvIGFkZCBvdXIgc2Nyb2xsYmFyIHdpZHRoLlxuICAgICAgY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke2dldFBhZGRpbmdSaWdodChjb250YWluZXIpICsgc2Nyb2xsYmFyU2l6ZX1weGA7XG5cbiAgICAgIC8vIC5tdWktZml4ZWQgaXMgYSBnbG9iYWwgaGVscGVyLlxuICAgICAgY29uc3QgZml4ZWRFbGVtZW50cyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yQWxsKCcubXVpLWZpeGVkJyk7XG4gICAgICBbXS5mb3JFYWNoLmNhbGwoZml4ZWRFbGVtZW50cywgZWxlbWVudCA9PiB7XG4gICAgICAgIHJlc3RvcmVTdHlsZS5wdXNoKHtcbiAgICAgICAgICB2YWx1ZTogZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQsXG4gICAgICAgICAgcHJvcGVydHk6ICdwYWRkaW5nLXJpZ2h0JyxcbiAgICAgICAgICBlbDogZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHtnZXRQYWRkaW5nUmlnaHQoZWxlbWVudCkgKyBzY3JvbGxiYXJTaXplfXB4YDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgc2Nyb2xsQ29udGFpbmVyO1xuICAgIGlmIChjb250YWluZXIucGFyZW50Tm9kZSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICAgIHNjcm9sbENvbnRhaW5lciA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKS5ib2R5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdXBwb3J0IGh0bWwgb3ZlcmZsb3cteTogYXV0byBmb3Igc2Nyb2xsIHN0YWJpbGl0eSBiZXR3ZWVuIHBhZ2VzXG4gICAgICAvLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9mb3JjZS12ZXJ0aWNhbC1zY3JvbGxiYXIvXG4gICAgICBjb25zdCBwYXJlbnQgPSBjb250YWluZXIucGFyZW50RWxlbWVudDtcbiAgICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGNvbnRhaW5lcik7XG4gICAgICBzY3JvbGxDb250YWluZXIgPSAocGFyZW50ID09IG51bGwgPyB2b2lkIDAgOiBwYXJlbnQubm9kZU5hbWUpID09PSAnSFRNTCcgJiYgY29udGFpbmVyV2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KS5vdmVyZmxvd1kgPT09ICdzY3JvbGwnID8gcGFyZW50IDogY29udGFpbmVyO1xuICAgIH1cblxuICAgIC8vIEJsb2NrIHRoZSBzY3JvbGwgZXZlbiBpZiBubyBzY3JvbGxiYXIgaXMgdmlzaWJsZSB0byBhY2NvdW50IGZvciBtb2JpbGUga2V5Ym9hcmRcbiAgICAvLyBzY3JlZW5zaXplIHNocmluay5cbiAgICByZXN0b3JlU3R5bGUucHVzaCh7XG4gICAgICB2YWx1ZTogc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgICAgcHJvcGVydHk6ICdvdmVyZmxvdycsXG4gICAgICBlbDogc2Nyb2xsQ29udGFpbmVyXG4gICAgfSwge1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvd1gsXG4gICAgICBwcm9wZXJ0eTogJ292ZXJmbG93LXgnLFxuICAgICAgZWw6IHNjcm9sbENvbnRhaW5lclxuICAgIH0sIHtcbiAgICAgIHZhbHVlOiBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3dZLFxuICAgICAgcHJvcGVydHk6ICdvdmVyZmxvdy15JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9KTtcbiAgICBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgfVxuICBjb25zdCByZXN0b3JlID0gKCkgPT4ge1xuICAgIHJlc3RvcmVTdHlsZS5mb3JFYWNoKCh7XG4gICAgICB2YWx1ZSxcbiAgICAgIGVsLFxuICAgICAgcHJvcGVydHlcbiAgICB9KSA9PiB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHJlc3RvcmU7XG59XG5mdW5jdGlvbiBnZXRIaWRkZW5TaWJsaW5ncyhjb250YWluZXIpIHtcbiAgY29uc3QgaGlkZGVuU2libGluZ3MgPSBbXTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZWxlbWVudCA9PiB7XG4gICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpID09PSAndHJ1ZScpIHtcbiAgICAgIGhpZGRlblNpYmxpbmdzLnB1c2goZWxlbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGhpZGRlblNpYmxpbmdzO1xufVxuLyoqXG4gKiBAaWdub3JlIC0gZG8gbm90IGRvY3VtZW50LlxuICpcbiAqIFByb3BlciBzdGF0ZSBtYW5hZ2VtZW50IGZvciBjb250YWluZXJzIGFuZCB0aGUgbW9kYWxzIGluIHRob3NlIGNvbnRhaW5lcnMuXG4gKiBTaW1wbGlmaWVkLCBidXQgaW5zcGlyZWQgYnkgcmVhY3Qtb3ZlcmxheSdzIE1vZGFsTWFuYWdlciBjbGFzcy5cbiAqIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG5leHBvcnQgY2xhc3MgTW9kYWxNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250YWluZXJzID0gdm9pZCAwO1xuICAgIHRoaXMubW9kYWxzID0gdm9pZCAwO1xuICAgIHRoaXMubW9kYWxzID0gW107XG4gICAgdGhpcy5jb250YWluZXJzID0gW107XG4gIH1cbiAgYWRkKG1vZGFsLCBjb250YWluZXIpIHtcbiAgICBsZXQgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuICAgIGlmIChtb2RhbEluZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgfVxuICAgIG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgdGhpcy5tb2RhbHMucHVzaChtb2RhbCk7XG5cbiAgICAvLyBJZiB0aGUgbW9kYWwgd2UgYXJlIGFkZGluZyBpcyBhbHJlYWR5IGluIHRoZSBET00uXG4gICAgaWYgKG1vZGFsLm1vZGFsUmVmKSB7XG4gICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgfVxuICAgIGNvbnN0IGhpZGRlblNpYmxpbmdzID0gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKTtcbiAgICBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb2RhbC5tb3VudCwgbW9kYWwubW9kYWxSZWYsIGhpZGRlblNpYmxpbmdzLCB0cnVlKTtcbiAgICBjb25zdCBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgaXRlbSA9PiBpdGVtLmNvbnRhaW5lciA9PT0gY29udGFpbmVyKTtcbiAgICBpZiAoY29udGFpbmVySW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdLm1vZGFscy5wdXNoKG1vZGFsKTtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lcnMucHVzaCh7XG4gICAgICBtb2RhbHM6IFttb2RhbF0sXG4gICAgICBjb250YWluZXIsXG4gICAgICByZXN0b3JlOiBudWxsLFxuICAgICAgaGlkZGVuU2libGluZ3NcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgfVxuICBtb3VudChtb2RhbCwgcHJvcHMpIHtcbiAgICBjb25zdCBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgaXRlbSA9PiBpdGVtLm1vZGFscy5pbmRleE9mKG1vZGFsKSAhPT0gLTEpO1xuICAgIGNvbnN0IGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuICAgIGlmICghY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUgPSBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpO1xuICAgIH1cbiAgfVxuICByZW1vdmUobW9kYWwsIGFyaWFIaWRkZW5TdGF0ZSA9IHRydWUpIHtcbiAgICBjb25zdCBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG4gICAgaWYgKG1vZGFsSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGl0ZW0gPT4gaXRlbS5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xKTtcbiAgICBjb25zdCBjb250YWluZXJJbmZvID0gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XTtcbiAgICBjb250YWluZXJJbmZvLm1vZGFscy5zcGxpY2UoY29udGFpbmVySW5mby5tb2RhbHMuaW5kZXhPZihtb2RhbCksIDEpO1xuICAgIHRoaXMubW9kYWxzLnNwbGljZShtb2RhbEluZGV4LCAxKTtcblxuICAgIC8vIElmIHRoYXQgd2FzIHRoZSBsYXN0IG1vZGFsIGluIGEgY29udGFpbmVyLCBjbGVhbiB1cCB0aGUgY29udGFpbmVyLlxuICAgIGlmIChjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIFRoZSBtb2RhbCBtaWdodCBiZSBjbG9zZWQgYmVmb3JlIGl0IGhhZCB0aGUgY2hhbmNlIHRvIGJlIG1vdW50ZWQgaW4gdGhlIERPTS5cbiAgICAgIGlmIChjb250YWluZXJJbmZvLnJlc3RvcmUpIHtcbiAgICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgLy8gSW4gY2FzZSB0aGUgbW9kYWwgd2Fzbid0IGluIHRoZSBET00geWV0LlxuICAgICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCBhcmlhSGlkZGVuU3RhdGUpO1xuICAgICAgfVxuICAgICAgYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lckluZm8uY29udGFpbmVyLCBtb2RhbC5tb3VudCwgbW9kYWwubW9kYWxSZWYsIGNvbnRhaW5lckluZm8uaGlkZGVuU2libGluZ3MsIGZhbHNlKTtcbiAgICAgIHRoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySW5kZXgsIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgc2NyZWVuIHJlYWRlci5cbiAgICAgIGNvbnN0IG5leHRUb3AgPSBjb250YWluZXJJbmZvLm1vZGFsc1tjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggLSAxXTtcbiAgICAgIC8vIGFzIHNvb24gYXMgYSBtb2RhbCBpcyBhZGRpbmcgaXRzIG1vZGFsUmVmIGlzIHVuZGVmaW5lZC4gaXQgY2FuJ3Qgc2V0XG4gICAgICAvLyBhcmlhLWhpZGRlbiBiZWNhdXNlIHRoZSBkb20gZWxlbWVudCBkb2Vzbid0IGV4aXN0IGVpdGhlclxuICAgICAgLy8gd2hlbiBtb2RhbCB3YXMgdW5tb3VudGVkIGJlZm9yZSBtb2RhbFJlZiBnZXRzIG51bGxcbiAgICAgIGlmIChuZXh0VG9wLm1vZGFsUmVmKSB7XG4gICAgICAgIGFyaWFIaWRkZW4obmV4dFRvcC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgfVxuICBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kYWxzLmxlbmd0aCA+IDAgJiYgdGhpcy5tb2RhbHNbdGhpcy5tb2RhbHMubGVuZ3RoIC0gMV0gPT09IG1vZGFsO1xuICB9XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCwgdW5zdGFibGVfdXNlRm9ya1JlZiBhcyB1c2VGb3JrUmVmLCB1bnN0YWJsZV91c2VFdmVudENhbGxiYWNrIGFzIHVzZUV2ZW50Q2FsbGJhY2ssIHVuc3RhYmxlX2NyZWF0ZUNoYWluZWRGdW5jdGlvbiBhcyBjcmVhdGVDaGFpbmVkRnVuY3Rpb24gfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGV4dHJhY3RFdmVudEhhbmRsZXJzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgTW9kYWxNYW5hZ2VyLCBhcmlhSGlkZGVuIH0gZnJvbSAnLi9Nb2RhbE1hbmFnZXInO1xuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xufVxuZnVuY3Rpb24gZ2V0SGFzVHJhbnNpdGlvbihjaGlsZHJlbikge1xuICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlbi5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgnaW4nKSA6IGZhbHNlO1xufVxuXG4vLyBBIG1vZGFsIG1hbmFnZXIgdXNlZCB0byB0cmFjayBhbmQgbWFuYWdlIHRoZSBzdGF0ZSBvZiBvcGVuIE1vZGFscy5cbi8vIE1vZGFscyBkb24ndCBvcGVuIG9uIHRoZSBzZXJ2ZXIgc28gdGhpcyB3b24ndCBjb25mbGljdCB3aXRoIGNvbmN1cnJlbnQgcmVxdWVzdHMuXG5jb25zdCBkZWZhdWx0TWFuYWdlciA9IG5ldyBNb2RhbE1hbmFnZXIoKTtcbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW01vZGFsXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1tb2RhbC8jaG9vaylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbdXNlTW9kYWwgQVBJXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1tb2RhbC9ob29rcy1hcGkvI3VzZS1tb2RhbClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1vZGFsKHBhcmFtZXRlcnMpIHtcbiAgY29uc3Qge1xuICAgIGNvbnRhaW5lcixcbiAgICBkaXNhYmxlRXNjYXBlS2V5RG93biA9IGZhbHNlLFxuICAgIGRpc2FibGVTY3JvbGxMb2NrID0gZmFsc2UsXG4gICAgLy8gQHRzLWlnbm9yZSBpbnRlcm5hbCBsb2dpYyAtIEJhc2UgVUkgc3VwcG9ydHMgdGhlIG1hbmFnZXIgYXMgYSBwcm9wIHRvb1xuICAgIG1hbmFnZXIgPSBkZWZhdWx0TWFuYWdlcixcbiAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IGZhbHNlLFxuICAgIG9uVHJhbnNpdGlvbkVudGVyLFxuICAgIG9uVHJhbnNpdGlvbkV4aXRlZCxcbiAgICBjaGlsZHJlbixcbiAgICBvbkNsb3NlLFxuICAgIG9wZW4sXG4gICAgcm9vdFJlZlxuICB9ID0gcGFyYW1ldGVycztcblxuICAvLyBAdHMtaWdub3JlIGludGVybmFsIGxvZ2ljXG4gIGNvbnN0IG1vZGFsID0gUmVhY3QudXNlUmVmKHt9KTtcbiAgY29uc3QgbW91bnROb2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBtb2RhbFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihtb2RhbFJlZiwgcm9vdFJlZik7XG4gIGNvbnN0IFtleGl0ZWQsIHNldEV4aXRlZF0gPSBSZWFjdC51c2VTdGF0ZSghb3Blbik7XG4gIGNvbnN0IGhhc1RyYW5zaXRpb24gPSBnZXRIYXNUcmFuc2l0aW9uKGNoaWxkcmVuKTtcbiAgbGV0IGFyaWFIaWRkZW5Qcm9wID0gdHJ1ZTtcbiAgaWYgKHBhcmFtZXRlcnNbJ2FyaWEtaGlkZGVuJ10gPT09ICdmYWxzZScgfHwgcGFyYW1ldGVyc1snYXJpYS1oaWRkZW4nXSA9PT0gZmFsc2UpIHtcbiAgICBhcmlhSGlkZGVuUHJvcCA9IGZhbHNlO1xuICB9XG4gIGNvbnN0IGdldERvYyA9ICgpID0+IG93bmVyRG9jdW1lbnQobW91bnROb2RlUmVmLmN1cnJlbnQpO1xuICBjb25zdCBnZXRNb2RhbCA9ICgpID0+IHtcbiAgICBtb2RhbC5jdXJyZW50Lm1vZGFsUmVmID0gbW9kYWxSZWYuY3VycmVudDtcbiAgICBtb2RhbC5jdXJyZW50Lm1vdW50ID0gbW91bnROb2RlUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIG1vZGFsLmN1cnJlbnQ7XG4gIH07XG4gIGNvbnN0IGhhbmRsZU1vdW50ZWQgPSAoKSA9PiB7XG4gICAgbWFuYWdlci5tb3VudChnZXRNb2RhbCgpLCB7XG4gICAgICBkaXNhYmxlU2Nyb2xsTG9ja1xuICAgIH0pO1xuXG4gICAgLy8gRml4IGEgYnVnIG9uIENocm9tZSB3aGVyZSB0aGUgc2Nyb2xsIGlzbid0IGluaXRpYWxseSAwLlxuICAgIGlmIChtb2RhbFJlZi5jdXJyZW50KSB7XG4gICAgICBtb2RhbFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IDA7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVPcGVuID0gdXNlRXZlbnRDYWxsYmFjaygoKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWRDb250YWluZXIgPSBnZXRDb250YWluZXIoY29udGFpbmVyKSB8fCBnZXREb2MoKS5ib2R5O1xuICAgIG1hbmFnZXIuYWRkKGdldE1vZGFsKCksIHJlc29sdmVkQ29udGFpbmVyKTtcblxuICAgIC8vIFRoZSBlbGVtZW50IHdhcyBhbHJlYWR5IG1vdW50ZWQuXG4gICAgaWYgKG1vZGFsUmVmLmN1cnJlbnQpIHtcbiAgICAgIGhhbmRsZU1vdW50ZWQoKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBpc1RvcE1vZGFsID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4gbWFuYWdlci5pc1RvcE1vZGFsKGdldE1vZGFsKCkpLCBbbWFuYWdlcl0pO1xuICBjb25zdCBoYW5kbGVQb3J0YWxSZWYgPSB1c2VFdmVudENhbGxiYWNrKG5vZGUgPT4ge1xuICAgIG1vdW50Tm9kZVJlZi5jdXJyZW50ID0gbm9kZTtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wZW4gJiYgaXNUb3BNb2RhbCgpKSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfSBlbHNlIGlmIChtb2RhbFJlZi5jdXJyZW50KSB7XG4gICAgICBhcmlhSGlkZGVuKG1vZGFsUmVmLmN1cnJlbnQsIGFyaWFIaWRkZW5Qcm9wKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVDbG9zZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBtYW5hZ2VyLnJlbW92ZShnZXRNb2RhbCgpLCBhcmlhSGlkZGVuUHJvcCk7XG4gIH0sIFthcmlhSGlkZGVuUHJvcCwgbWFuYWdlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH07XG4gIH0sIFtoYW5kbGVDbG9zZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBoYW5kbGVPcGVuKCk7XG4gICAgfSBlbHNlIGlmICghaGFzVHJhbnNpdGlvbiB8fCAhY2xvc2VBZnRlclRyYW5zaXRpb24pIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfVxuICB9LCBbb3BlbiwgaGFuZGxlQ2xvc2UsIGhhc1RyYW5zaXRpb24sIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uLCBoYW5kbGVPcGVuXSk7XG4gIGNvbnN0IGNyZWF0ZUhhbmRsZUtleURvd24gPSBvdGhlckhhbmRsZXJzID0+IGV2ZW50ID0+IHtcbiAgICB2YXIgX290aGVySGFuZGxlcnMkb25LZXlEO1xuICAgIChfb3RoZXJIYW5kbGVycyRvbktleUQgPSBvdGhlckhhbmRsZXJzLm9uS2V5RG93bikgPT0gbnVsbCB8fCBfb3RoZXJIYW5kbGVycyRvbktleUQuY2FsbChvdGhlckhhbmRsZXJzLCBldmVudCk7XG5cbiAgICAvLyBUaGUgaGFuZGxlciBkb2Vzbid0IHRha2UgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCBpbnRvIGFjY291bnQ6XG4gICAgLy9cbiAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvcnMgbGlrZVxuICAgIC8vIGNsaWNraW5nIGEgY2hlY2tib3ggdG8gY2hlY2sgaXQsIGhpdHRpbmcgYSBidXR0b24gdG8gc3VibWl0IGEgZm9ybSxcbiAgICAvLyBhbmQgaGl0dGluZyBsZWZ0IGFycm93IHRvIG1vdmUgdGhlIGN1cnNvciBpbiBhIHRleHQgaW5wdXQgZXRjLlxuICAgIC8vIE9ubHkgc3BlY2lhbCBIVE1MIGVsZW1lbnRzIGhhdmUgdGhlc2UgZGVmYXVsdCBiZWhhdmlvcnMuXG4gICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VzY2FwZScgfHwgZXZlbnQud2hpY2ggPT09IDIyOSB8fFxuICAgIC8vIFdhaXQgdW50aWwgSU1FIGlzIHNldHRsZWQuXG4gICAgIWlzVG9wTW9kYWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWRpc2FibGVFc2NhcGVLZXlEb3duKSB7XG4gICAgICAvLyBTd2FsbG93IHRoZSBldmVudCwgaW4gY2FzZSBzb21lb25lIGlzIGxpc3RlbmluZyBmb3IgdGhlIGVzY2FwZSBrZXkgb24gdGhlIGJvZHkuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICdlc2NhcGVLZXlEb3duJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBjcmVhdGVIYW5kbGVCYWNrZHJvcENsaWNrID0gb3RoZXJIYW5kbGVycyA9PiBldmVudCA9PiB7XG4gICAgdmFyIF9vdGhlckhhbmRsZXJzJG9uQ2xpYztcbiAgICAoX290aGVySGFuZGxlcnMkb25DbGljID0gb3RoZXJIYW5kbGVycy5vbkNsaWNrKSA9PSBudWxsIHx8IF9vdGhlckhhbmRsZXJzJG9uQ2xpYy5jYWxsKG90aGVySGFuZGxlcnMsIGV2ZW50KTtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50LCAnYmFja2Ryb3BDbGljaycpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0Um9vdFByb3BzID0gKG90aGVySGFuZGxlcnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHByb3BzRXZlbnRIYW5kbGVycyA9IGV4dHJhY3RFdmVudEhhbmRsZXJzKHBhcmFtZXRlcnMpO1xuXG4gICAgLy8gVGhlIGN1c3RvbSBldmVudCBoYW5kbGVycyBzaG91bGRuJ3QgYmUgc3ByZWFkIG9uIHRoZSByb290IGVsZW1lbnRcbiAgICBkZWxldGUgcHJvcHNFdmVudEhhbmRsZXJzLm9uVHJhbnNpdGlvbkVudGVyO1xuICAgIGRlbGV0ZSBwcm9wc0V2ZW50SGFuZGxlcnMub25UcmFuc2l0aW9uRXhpdGVkO1xuICAgIGNvbnN0IGV4dGVybmFsRXZlbnRIYW5kbGVycyA9IF9leHRlbmRzKHt9LCBwcm9wc0V2ZW50SGFuZGxlcnMsIG90aGVySGFuZGxlcnMpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICByb2xlOiAncHJlc2VudGF0aW9uJ1xuICAgIH0sIGV4dGVybmFsRXZlbnRIYW5kbGVycywge1xuICAgICAgb25LZXlEb3duOiBjcmVhdGVIYW5kbGVLZXlEb3duKGV4dGVybmFsRXZlbnRIYW5kbGVycyksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXRCYWNrZHJvcFByb3BzID0gKG90aGVySGFuZGxlcnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IGV4dGVybmFsRXZlbnRIYW5kbGVycyA9IG90aGVySGFuZGxlcnM7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICdhcmlhLWhpZGRlbic6IHRydWVcbiAgICB9LCBleHRlcm5hbEV2ZW50SGFuZGxlcnMsIHtcbiAgICAgIG9uQ2xpY2s6IGNyZWF0ZUhhbmRsZUJhY2tkcm9wQ2xpY2soZXh0ZXJuYWxFdmVudEhhbmRsZXJzKSxcbiAgICAgIG9wZW5cbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ2V0VHJhbnNpdGlvblByb3BzID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUVudGVyID0gKCkgPT4ge1xuICAgICAgc2V0RXhpdGVkKGZhbHNlKTtcbiAgICAgIGlmIChvblRyYW5zaXRpb25FbnRlcikge1xuICAgICAgICBvblRyYW5zaXRpb25FbnRlcigpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlRXhpdGVkID0gKCkgPT4ge1xuICAgICAgc2V0RXhpdGVkKHRydWUpO1xuICAgICAgaWYgKG9uVHJhbnNpdGlvbkV4aXRlZCkge1xuICAgICAgICBvblRyYW5zaXRpb25FeGl0ZWQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChjbG9zZUFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgICBoYW5kbGVDbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uRW50ZXI6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFbnRlciwgY2hpbGRyZW4gPT0gbnVsbCA/IHZvaWQgMCA6IGNoaWxkcmVuLnByb3BzLm9uRW50ZXIpLFxuICAgICAgb25FeGl0ZWQ6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFeGl0ZWQsIGNoaWxkcmVuID09IG51bGwgPyB2b2lkIDAgOiBjaGlsZHJlbi5wcm9wcy5vbkV4aXRlZClcbiAgICB9O1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldFJvb3RQcm9wcyxcbiAgICBnZXRCYWNrZHJvcFByb3BzLFxuICAgIGdldFRyYW5zaXRpb25Qcm9wcyxcbiAgICByb290UmVmOiBoYW5kbGVSZWYsXG4gICAgcG9ydGFsUmVmOiBoYW5kbGVQb3J0YWxSZWYsXG4gICAgaXNUb3BNb2RhbCxcbiAgICBleGl0ZWQsXG4gICAgaGFzVHJhbnNpdGlvblxuICB9O1xufSIsIid1c2UgY2xpZW50JztcblxuLyogZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4sIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLXRhYmluZGV4ICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCBlbGVtZW50QWNjZXB0aW5nUmVmLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX293bmVyRG9jdW1lbnQgYXMgb3duZXJEb2N1bWVudCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9mb2N1cy10cmFwL3RhYmJhYmxlXG5jb25zdCBjYW5kaWRhdGVzU2VsZWN0b3IgPSBbJ2lucHV0JywgJ3NlbGVjdCcsICd0ZXh0YXJlYScsICdhW2hyZWZdJywgJ2J1dHRvbicsICdbdGFiaW5kZXhdJywgJ2F1ZGlvW2NvbnRyb2xzXScsICd2aWRlb1tjb250cm9sc10nLCAnW2NvbnRlbnRlZGl0YWJsZV06bm90KFtjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiXSknXS5qb2luKCcsJyk7XG5mdW5jdGlvbiBnZXRUYWJJbmRleChub2RlKSB7XG4gIGNvbnN0IHRhYmluZGV4QXR0ciA9IHBhcnNlSW50KG5vZGUuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpIHx8ICcnLCAxMCk7XG4gIGlmICghTnVtYmVyLmlzTmFOKHRhYmluZGV4QXR0cikpIHtcbiAgICByZXR1cm4gdGFiaW5kZXhBdHRyO1xuICB9XG5cbiAgLy8gQnJvd3NlcnMgZG8gbm90IHJldHVybiBgdGFiSW5kZXhgIGNvcnJlY3RseSBmb3IgY29udGVudEVkaXRhYmxlIG5vZGVzO1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02NjExMDgmcT1jb250ZW50ZWRpdGFibGUlMjB0YWJpbmRleCZjYW49MlxuICAvLyBzbyBpZiB0aGV5IGRvbid0IGhhdmUgYSB0YWJpbmRleCBhdHRyaWJ1dGUgc3BlY2lmaWNhbGx5IHNldCwgYXNzdW1lIGl0J3MgMC5cbiAgLy8gaW4gQ2hyb21lLCA8ZGV0YWlscy8+LCA8YXVkaW8gY29udHJvbHMvPiBhbmQgPHZpZGVvIGNvbnRyb2xzLz4gZWxlbWVudHMgZ2V0IGEgZGVmYXVsdFxuICAvLyAgYHRhYkluZGV4YCBvZiAtMSB3aGVuIHRoZSAndGFiaW5kZXgnIGF0dHJpYnV0ZSBpc24ndCBzcGVjaWZpZWQgaW4gdGhlIERPTSxcbiAgLy8gIHlldCB0aGV5IGFyZSBzdGlsbCBwYXJ0IG9mIHRoZSByZWd1bGFyIHRhYiBvcmRlcjsgaW4gRkYsIHRoZXkgZ2V0IGEgZGVmYXVsdFxuICAvLyAgYHRhYkluZGV4YCBvZiAwOyBzaW5jZSBDaHJvbWUgc3RpbGwgcHV0cyB0aG9zZSBlbGVtZW50cyBpbiB0aGUgcmVndWxhciB0YWJcbiAgLy8gIG9yZGVyLCBjb25zaWRlciB0aGVpciB0YWIgaW5kZXggdG8gYmUgMC5cbiAgaWYgKG5vZGUuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScgfHwgKG5vZGUubm9kZU5hbWUgPT09ICdBVURJTycgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ1ZJREVPJyB8fCBub2RlLm5vZGVOYW1lID09PSAnREVUQUlMUycpICYmIG5vZGUuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpID09PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIG5vZGUudGFiSW5kZXg7XG59XG5mdW5jdGlvbiBpc05vblRhYmJhYmxlUmFkaW8obm9kZSkge1xuICBpZiAobm9kZS50YWdOYW1lICE9PSAnSU5QVVQnIHx8IG5vZGUudHlwZSAhPT0gJ3JhZGlvJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIW5vZGUubmFtZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBnZXRSYWRpbyA9IHNlbGVjdG9yID0+IG5vZGUub3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFt0eXBlPVwicmFkaW9cIl0ke3NlbGVjdG9yfWApO1xuICBsZXQgcm92aW5nID0gZ2V0UmFkaW8oYFtuYW1lPVwiJHtub2RlLm5hbWV9XCJdOmNoZWNrZWRgKTtcbiAgaWYgKCFyb3ZpbmcpIHtcbiAgICByb3ZpbmcgPSBnZXRSYWRpbyhgW25hbWU9XCIke25vZGUubmFtZX1cIl1gKTtcbiAgfVxuICByZXR1cm4gcm92aW5nICE9PSBub2RlO1xufVxuZnVuY3Rpb24gaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZShub2RlKSB7XG4gIGlmIChub2RlLmRpc2FibGVkIHx8IG5vZGUudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBub2RlLnR5cGUgPT09ICdoaWRkZW4nIHx8IGlzTm9uVGFiYmFibGVSYWRpbyhub2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRHZXRUYWJiYWJsZShyb290KSB7XG4gIGNvbnN0IHJlZ3VsYXJUYWJOb2RlcyA9IFtdO1xuICBjb25zdCBvcmRlcmVkVGFiTm9kZXMgPSBbXTtcbiAgQXJyYXkuZnJvbShyb290LnF1ZXJ5U2VsZWN0b3JBbGwoY2FuZGlkYXRlc1NlbGVjdG9yKSkuZm9yRWFjaCgobm9kZSwgaSkgPT4ge1xuICAgIGNvbnN0IG5vZGVUYWJJbmRleCA9IGdldFRhYkluZGV4KG5vZGUpO1xuICAgIGlmIChub2RlVGFiSW5kZXggPT09IC0xIHx8ICFpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG5vZGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChub2RlVGFiSW5kZXggPT09IDApIHtcbiAgICAgIHJlZ3VsYXJUYWJOb2Rlcy5wdXNoKG5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcmRlcmVkVGFiTm9kZXMucHVzaCh7XG4gICAgICAgIGRvY3VtZW50T3JkZXI6IGksXG4gICAgICAgIHRhYkluZGV4OiBub2RlVGFiSW5kZXgsXG4gICAgICAgIG5vZGU6IG5vZGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvcmRlcmVkVGFiTm9kZXMuc29ydCgoYSwgYikgPT4gYS50YWJJbmRleCA9PT0gYi50YWJJbmRleCA/IGEuZG9jdW1lbnRPcmRlciAtIGIuZG9jdW1lbnRPcmRlciA6IGEudGFiSW5kZXggLSBiLnRhYkluZGV4KS5tYXAoYSA9PiBhLm5vZGUpLmNvbmNhdChyZWd1bGFyVGFiTm9kZXMpO1xufVxuZnVuY3Rpb24gZGVmYXVsdElzRW5hYmxlZCgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogVXRpbGl0eSBjb21wb25lbnQgdGhhdCBsb2NrcyBmb2N1cyBpbnNpZGUgdGhlIGNvbXBvbmVudC5cbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtGb2N1cyBUcmFwXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC1mb2N1cy10cmFwLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbRm9jdXNUcmFwIEFQSV0oaHR0cHM6Ly9tdWkuY29tL2Jhc2UtdWkvcmVhY3QtZm9jdXMtdHJhcC9jb21wb25lbnRzLWFwaS8jZm9jdXMtdHJhcClcbiAqL1xuZnVuY3Rpb24gRm9jdXNUcmFwKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjaGlsZHJlbixcbiAgICBkaXNhYmxlQXV0b0ZvY3VzID0gZmFsc2UsXG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IGZhbHNlLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBmYWxzZSxcbiAgICBnZXRUYWJiYWJsZSA9IGRlZmF1bHRHZXRUYWJiYWJsZSxcbiAgICBpc0VuYWJsZWQgPSBkZWZhdWx0SXNFbmFibGVkLFxuICAgIG9wZW5cbiAgfSA9IHByb3BzO1xuICBjb25zdCBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3Qgc2VudGluZWxTdGFydCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3Qgc2VudGluZWxFbmQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IG5vZGVUb1Jlc3RvcmUgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIGNvbnN0IHJlYWN0Rm9jdXNFdmVudFRhcmdldCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgLy8gVGhpcyB2YXJpYWJsZSBpcyB1c2VmdWwgd2hlbiBkaXNhYmxlQXV0b0ZvY3VzIGlzIHRydWUuXG4gIC8vIEl0IHdhaXRzIGZvciB0aGUgYWN0aXZlIGVsZW1lbnQgdG8gbW92ZSBpbnRvIHRoZSBjb21wb25lbnQgdG8gYWN0aXZhdGUuXG4gIGNvbnN0IGFjdGl2YXRlZCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IHJvb3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETyB1cHN0cmVhbSBmaXhcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJvb3RSZWYpO1xuICBjb25zdCBsYXN0S2V5ZG93biA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBXZSBtaWdodCByZW5kZXIgYW4gZW1wdHkgY2hpbGQuXG4gICAgaWYgKCFvcGVuIHx8ICFyb290UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWN0aXZhdGVkLmN1cnJlbnQgPSAhZGlzYWJsZUF1dG9Gb2N1cztcbiAgfSwgW2Rpc2FibGVBdXRvRm9jdXMsIG9wZW5dKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBXZSBtaWdodCByZW5kZXIgYW4gZW1wdHkgY2hpbGQuXG4gICAgaWYgKCFvcGVuIHx8ICFyb290UmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChyb290UmVmLmN1cnJlbnQpO1xuICAgIGlmICghcm9vdFJlZi5jdXJyZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgaWYgKCFyb290UmVmLmN1cnJlbnQuaGFzQXR0cmlidXRlKCd0YWJJbmRleCcpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlIG1vZGFsIGNvbnRlbnQgbm9kZSBkb2VzIG5vdCBhY2NlcHQgZm9jdXMuJywgJ0ZvciB0aGUgYmVuZWZpdCBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCAnICsgJ3RoZSB0YWJJbmRleCBvZiB0aGUgbm9kZSBpcyBiZWluZyBzZXQgdG8gXCItMVwiLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgICByb290UmVmLmN1cnJlbnQuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsICctMScpO1xuICAgICAgfVxuICAgICAgaWYgKGFjdGl2YXRlZC5jdXJyZW50KSB7XG4gICAgICAgIHJvb3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gcmVzdG9yZUxhc3RGb2N1cygpXG4gICAgICBpZiAoIWRpc2FibGVSZXN0b3JlRm9jdXMpIHtcbiAgICAgICAgLy8gSW4gSUUxMSBpdCBpcyBwb3NzaWJsZSBmb3IgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB0byBiZSBudWxsIHJlc3VsdGluZ1xuICAgICAgICAvLyBpbiBub2RlVG9SZXN0b3JlLmN1cnJlbnQgYmVpbmcgbnVsbC5cbiAgICAgICAgLy8gTm90IGFsbCBlbGVtZW50cyBpbiBJRTExIGhhdmUgYSBmb2N1cyBtZXRob2QuXG4gICAgICAgIC8vIE9uY2UgSUUxMSBzdXBwb3J0IGlzIGRyb3BwZWQgdGhlIGZvY3VzKCkgY2FsbCBjYW4gYmUgdW5jb25kaXRpb25hbC5cbiAgICAgICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCAmJiBub2RlVG9SZXN0b3JlLmN1cnJlbnQuZm9jdXMpIHtcbiAgICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBNaXNzaW5nIGBkaXNhYmxlUmVzdG9yZUZvY3VzYCB3aGljaCBpcyBmaW5lLlxuICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgY2hhbmdpbmcgdGhhdCBwcm9wIG9uIGFuIG9wZW4gRm9jdXNUcmFwXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbb3Blbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdlIG1pZ2h0IHJlbmRlciBhbiBlbXB0eSBjaGlsZC5cbiAgICBpZiAoIW9wZW4gfHwgIXJvb3RSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkb2MgPSBvd25lckRvY3VtZW50KHJvb3RSZWYuY3VycmVudCk7XG4gICAgY29uc3QgbG9vcEZvY3VzID0gbmF0aXZlRXZlbnQgPT4ge1xuICAgICAgbGFzdEtleWRvd24uY3VycmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgICAgaWYgKGRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIWlzRW5hYmxlZCgpIHx8IG5hdGl2ZUV2ZW50LmtleSAhPT0gJ1RhYicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIG5leHQgdGFiIHN0YXJ0cyBmcm9tIHRoZSByaWdodCBwbGFjZS5cbiAgICAgIC8vIGRvYy5hY3RpdmVFbGVtZW50IHJlZmVycyB0byB0aGUgb3JpZ2luLlxuICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ID09PSByb290UmVmLmN1cnJlbnQgJiYgbmF0aXZlRXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBpZ25vcmUgdGhlIG5leHQgY29udGFpbiBhc1xuICAgICAgICAvLyBpdCB3aWxsIHRyeSB0byBtb3ZlIHRoZSBmb2N1cyBiYWNrIHRvIHRoZSByb290UmVmIGVsZW1lbnQuXG4gICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IHRydWU7XG4gICAgICAgIGlmIChzZW50aW5lbEVuZC5jdXJyZW50KSB7XG4gICAgICAgICAgc2VudGluZWxFbmQuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBjb250YWluID0gKCkgPT4ge1xuICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSByb290UmVmLmN1cnJlbnQ7XG5cbiAgICAgIC8vIENsZWFudXAgZnVuY3Rpb25zIGFyZSBleGVjdXRlZCBsYXppbHkgaW4gUmVhY3QgMTcuXG4gICAgICAvLyBDb250YWluIGNhbiBiZSBjYWxsZWQgYmV0d2VlbiB0aGUgY29tcG9uZW50IGJlaW5nIHVubW91bnRlZCBhbmQgaXRzIGNsZWFudXAgZnVuY3Rpb24gYmVpbmcgcnVuLlxuICAgICAgaWYgKHJvb3RFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghZG9jLmhhc0ZvY3VzKCkgfHwgIWlzRW5hYmxlZCgpIHx8IGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCkge1xuICAgICAgICBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgZm9jdXMgaXMgYWxyZWFkeSBpbnNpZGVcbiAgICAgIGlmIChyb290RWxlbWVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgZGlzYWJsZUVuZm9yY2VGb2N1cyBpcyBzZXQgYW5kIHRoZSBmb2N1cyBpcyBvdXRzaWRlIG9mIHRoZSBmb2N1cyB0cmFwIChhbmQgc2VudGluZWwgbm9kZXMpXG4gICAgICBpZiAoZGlzYWJsZUVuZm9yY2VGb2N1cyAmJiBkb2MuYWN0aXZlRWxlbWVudCAhPT0gc2VudGluZWxTdGFydC5jdXJyZW50ICYmIGRvYy5hY3RpdmVFbGVtZW50ICE9PSBzZW50aW5lbEVuZC5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgdGhlIGZvY3VzIGV2ZW50IGlzIG5vdCBjb21pbmcgZnJvbSBpbnNpZGUgdGhlIGNoaWxkcmVuJ3MgcmVhY3QgdHJlZSwgcmVzZXQgdGhlIHJlZnNcbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCAhPT0gcmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQpIHtcbiAgICAgICAgcmVhY3RGb2N1c0V2ZW50VGFyZ2V0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChyZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWFjdGl2YXRlZC5jdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCB0YWJiYWJsZSA9IFtdO1xuICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ID09PSBzZW50aW5lbFN0YXJ0LmN1cnJlbnQgfHwgZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHNlbnRpbmVsRW5kLmN1cnJlbnQpIHtcbiAgICAgICAgdGFiYmFibGUgPSBnZXRUYWJiYWJsZShyb290UmVmLmN1cnJlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBvbmUgb2YgdGhlIHNlbnRpbmVsIG5vZGVzIHdhcyBmb2N1c2VkLCBzbyBtb3ZlIHRoZSBmb2N1c1xuICAgICAgLy8gdG8gdGhlIGZpcnN0L2xhc3QgdGFiYmFibGUgZWxlbWVudCBpbnNpZGUgdGhlIGZvY3VzIHRyYXBcbiAgICAgIGlmICh0YWJiYWJsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBfbGFzdEtleWRvd24kY3VycmVudCwgX2xhc3RLZXlkb3duJGN1cnJlbnQyO1xuICAgICAgICBjb25zdCBpc1NoaWZ0VGFiID0gQm9vbGVhbigoKF9sYXN0S2V5ZG93biRjdXJyZW50ID0gbGFzdEtleWRvd24uY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sYXN0S2V5ZG93biRjdXJyZW50LnNoaWZ0S2V5KSAmJiAoKF9sYXN0S2V5ZG93biRjdXJyZW50MiA9IGxhc3RLZXlkb3duLmN1cnJlbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbGFzdEtleWRvd24kY3VycmVudDIua2V5KSA9PT0gJ1RhYicpO1xuICAgICAgICBjb25zdCBmb2N1c05leHQgPSB0YWJiYWJsZVswXTtcbiAgICAgICAgY29uc3QgZm9jdXNQcmV2aW91cyA9IHRhYmJhYmxlW3RhYmJhYmxlLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodHlwZW9mIGZvY3VzTmV4dCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIGZvY3VzUHJldmlvdXMgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGlzU2hpZnRUYWIpIHtcbiAgICAgICAgICAgIGZvY3VzUHJldmlvdXMuZm9jdXMoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9jdXNOZXh0LmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG5vIHRhYmJhYmxlIGVsZW1lbnRzIGluIHRoZSB0cmFwIGZvY3VzIG9yIHRoZSBmb2N1cyB3YXMgb3V0c2lkZSBvZiB0aGUgZm9jdXMgdHJhcFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgY29udGFpbik7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpO1xuXG4gICAgLy8gV2l0aCBFZGdlLCBTYWZhcmkgYW5kIEZpcmVmb3gsIG5vIGZvY3VzIHJlbGF0ZWQgZXZlbnRzIGFyZSBmaXJlZCB3aGVuIHRoZSBmb2N1c2VkIGFyZWEgc3RvcHMgYmVpbmcgYSBmb2N1c2VkIGFyZWEuXG4gICAgLy8gZm9yIGV4YW1wbGUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTU5NTYxLlxuICAgIC8vIEluc3RlYWQsIHdlIGNhbiBsb29rIGlmIHRoZSBhY3RpdmUgZWxlbWVudCB3YXMgcmVzdG9yZWQgb24gdGhlIEJPRFkgZWxlbWVudC5cbiAgICAvL1xuICAgIC8vIFRoZSB3aGF0d2cgc3BlYyBkZWZpbmVzIGhvdyB0aGUgYnJvd3NlciBzaG91bGQgYmVoYXZlIGJ1dCBkb2VzIG5vdCBleHBsaWNpdGx5IG1lbnRpb24gYW55IGV2ZW50czpcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbnRlcmFjdGlvbi5odG1sI2ZvY3VzLWZpeHVwLXJ1bGUuXG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgJiYgZG9jLmFjdGl2ZUVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGNvbnRhaW4oKTtcbiAgICAgIH1cbiAgICB9LCA1MCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBjb250YWluKTtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgbG9vcEZvY3VzLCB0cnVlKTtcbiAgICB9O1xuICB9LCBbZGlzYWJsZUF1dG9Gb2N1cywgZGlzYWJsZUVuZm9yY2VGb2N1cywgZGlzYWJsZVJlc3RvcmVGb2N1cywgaXNFbmFibGVkLCBvcGVuLCBnZXRUYWJiYWJsZV0pO1xuICBjb25zdCBvbkZvY3VzID0gZXZlbnQgPT4ge1xuICAgIGlmIChub2RlVG9SZXN0b3JlLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgfVxuICAgIGFjdGl2YXRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICByZWFjdEZvY3VzRXZlbnRUYXJnZXQuY3VycmVudCA9IGV2ZW50LnRhcmdldDtcbiAgICBjb25zdCBjaGlsZHJlblByb3BzSGFuZGxlciA9IGNoaWxkcmVuLnByb3BzLm9uRm9jdXM7XG4gICAgaWYgKGNoaWxkcmVuUHJvcHNIYW5kbGVyKSB7XG4gICAgICBjaGlsZHJlblByb3BzSGFuZGxlcihldmVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVGb2N1c1NlbnRpbmVsID0gZXZlbnQgPT4ge1xuICAgIGlmIChub2RlVG9SZXN0b3JlLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgfVxuICAgIGFjdGl2YXRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goXCJkaXZcIiwge1xuICAgICAgdGFiSW5kZXg6IG9wZW4gPyAwIDogLTEsXG4gICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1NlbnRpbmVsLFxuICAgICAgcmVmOiBzZW50aW5lbFN0YXJ0LFxuICAgICAgXCJkYXRhLXRlc3RpZFwiOiBcInNlbnRpbmVsU3RhcnRcIlxuICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICByZWY6IGhhbmRsZVJlZixcbiAgICAgIG9uRm9jdXNcbiAgICB9KSwgLyojX19QVVJFX18qL19qc3goXCJkaXZcIiwge1xuICAgICAgdGFiSW5kZXg6IG9wZW4gPyAwIDogLTEsXG4gICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1NlbnRpbmVsLFxuICAgICAgcmVmOiBzZW50aW5lbEVuZCxcbiAgICAgIFwiZGF0YS10ZXN0aWRcIjogXCJzZW50aW5lbEVuZFwiXG4gICAgfSldXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9jdXNUcmFwLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZm9jdXMgdHJhcCB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuXG4gICAqIFRoaXMgYWxzbyB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgZm9jdXMgdHJhcCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgZm9jdXMgdHJhcCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZm9jdXMgdHJhcCB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgZm9jdXMgdHJhcCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgZm9jdXMgdHJhcCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZm9jdXMgdHJhcCB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogZm9jdXMgdHJhcCBpcyBoaWRkZW4gb3IgdW5tb3VudGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIG9yZGVyZWQgdGFiYmFibGUgbm9kZXMgKGkuZS4gaW4gdGFiIG9yZGVyKSB3aXRoaW4gdGhlIHJvb3QuXG4gICAqIEZvciBpbnN0YW5jZSwgeW91IGNhbiBwcm92aWRlIHRoZSBcInRhYmJhYmxlXCIgbnBtIGRlcGVuZGVuY3kuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3RcbiAgICovXG4gIGdldFRhYmJhYmxlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBleHRlbmRzIHRoZSBgb3BlbmAgcHJvcC5cbiAgICogSXQgYWxsb3dzIHRvIHRvZ2dsZSB0aGUgb3BlbiBzdGF0ZSB3aXRob3V0IGhhdmluZyB0byB3YWl0IGZvciBhIHJlcmVuZGVyIHdoZW4gY2hhbmdpbmcgdGhlIGBvcGVuYCBwcm9wLlxuICAgKiBUaGlzIHByb3Agc2hvdWxkIGJlIG1lbW9pemVkLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB0byBzdXBwb3J0IG11bHRpcGxlIGZvY3VzIHRyYXAgbW91bnRlZCBhdCB0aGUgc2FtZSB0aW1lLlxuICAgKiBAZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0SXNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgKiAgIHJldHVybiB0cnVlO1xuICAgKiB9XG4gICAqL1xuICBpc0VuYWJsZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBmb2N1cyBpcyBsb2NrZWQuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIEZvY3VzVHJhcFsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChGb2N1c1RyYXAucHJvcFR5cGVzKTtcbn1cbmV4cG9ydCB7IEZvY3VzVHJhcCB9OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AsIEhUTUxFbGVtZW50VHlwZSwgdW5zdGFibGVfdXNlRW5oYW5jZWRFZmZlY3QgYXMgdXNlRW5oYW5jZWRFZmZlY3QsIHVuc3RhYmxlX3VzZUZvcmtSZWYgYXMgdXNlRm9ya1JlZiwgdW5zdGFibGVfc2V0UmVmIGFzIHNldFJlZiB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgcmV0dXJuIHR5cGVvZiBjb250YWluZXIgPT09ICdmdW5jdGlvbicgPyBjb250YWluZXIoKSA6IGNvbnRhaW5lcjtcbn1cblxuLyoqXG4gKiBQb3J0YWxzIHByb3ZpZGUgYSBmaXJzdC1jbGFzcyB3YXkgdG8gcmVuZGVyIGNoaWxkcmVuIGludG8gYSBET00gbm9kZVxuICogdGhhdCBleGlzdHMgb3V0c2lkZSB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtQb3J0YWxdKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXBvcnRhbC8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW1BvcnRhbCBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXBvcnRhbC9jb21wb25lbnRzLWFwaS8jcG9ydGFsKVxuICovXG5jb25zdCBQb3J0YWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3J0YWwocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgY29udGFpbmVyLFxuICAgIGRpc2FibGVQb3J0YWwgPSBmYWxzZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IFttb3VudE5vZGUsIHNldE1vdW50Tm9kZV0gPSBSZWFjdC51c2VTdGF0ZShudWxsKTtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPIHVwc3RyZWFtIGZpeFxuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gY2hpbGRyZW4ucmVmIDogbnVsbCwgZm9yd2FyZGVkUmVmKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0TW91bnROb2RlKGdldENvbnRhaW5lcihjb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHkpO1xuICAgIH1cbiAgfSwgW2NvbnRhaW5lciwgZGlzYWJsZVBvcnRhbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG1vdW50Tm9kZSAmJiAhZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0UmVmKGZvcndhcmRlZFJlZiwgbW91bnROb2RlKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHNldFJlZihmb3J3YXJkZWRSZWYsIG51bGwpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2ZvcndhcmRlZFJlZiwgbW91bnROb2RlLCBkaXNhYmxlUG9ydGFsXSk7XG4gIGlmIChkaXNhYmxlUG9ydGFsKSB7XG4gICAgaWYgKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pKSB7XG4gICAgICBjb25zdCBuZXdQcm9wcyA9IHtcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH07XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgbmV3UHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBtb3VudE5vZGUgPyAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBtb3VudE5vZGUpIDogbW91bnROb2RlXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3J0YWwucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4g4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIHRvIHJlbmRlciBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgY2FsbGJhY2ssIHdoaWNoIGlzIGNhbGxlZCBpbiBhIFJlYWN0IGxheW91dCBlZmZlY3QuXG4gICAqIFRoaXMgbGV0cyB5b3Ugc2V0IHRoZSBjb250YWluZXIgZnJvbSBhIHJlZiwgYW5kIGFsc28gbWFrZXMgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHBvc3NpYmxlLlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgUG9ydGFsWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKFBvcnRhbC5wcm9wVHlwZXMpO1xufVxuZXhwb3J0IHsgUG9ydGFsIH07IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RhbFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTW9kYWwnLCBzbG90KTtcbn1cbmNvbnN0IG1vZGFsQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU1vZGFsJywgWydyb290JywgJ2hpZGRlbicsICdiYWNrZHJvcCddKTtcbmV4cG9ydCBkZWZhdWx0IG1vZGFsQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJCYWNrZHJvcENvbXBvbmVudFwiLCBcIkJhY2tkcm9wUHJvcHNcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY2xvc2VBZnRlclRyYW5zaXRpb25cIiwgXCJjaGlsZHJlblwiLCBcImNvbnRhaW5lclwiLCBcImNvbXBvbmVudFwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzXCIsIFwiZGlzYWJsZUVuZm9yY2VGb2N1c1wiLCBcImRpc2FibGVFc2NhcGVLZXlEb3duXCIsIFwiZGlzYWJsZVBvcnRhbFwiLCBcImRpc2FibGVSZXN0b3JlRm9jdXNcIiwgXCJkaXNhYmxlU2Nyb2xsTG9ja1wiLCBcImhpZGVCYWNrZHJvcFwiLCBcImtlZXBNb3VudGVkXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uVHJhbnNpdGlvbkVudGVyXCIsIFwib25UcmFuc2l0aW9uRXhpdGVkXCIsIFwib3BlblwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwidGhlbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgSFRNTEVsZW1lbnRUeXBlIGZyb20gJ0BtdWkvdXRpbHMvSFRNTEVsZW1lbnRUeXBlJztcbmltcG9ydCBlbGVtZW50QWNjZXB0aW5nUmVmIGZyb20gJ0BtdWkvdXRpbHMvZWxlbWVudEFjY2VwdGluZ1JlZic7XG5pbXBvcnQgeyB1c2VTbG90UHJvcHMgfSBmcm9tICdAbXVpL2Jhc2UvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfdXNlTW9kYWwgYXMgdXNlTW9kYWwgfSBmcm9tICdAbXVpL2Jhc2UvdW5zdGFibGVfdXNlTW9kYWwnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IEZvY3VzVHJhcCBmcm9tICcuLi9VbnN0YWJsZV9UcmFwRm9jdXMnO1xuaW1wb3J0IFBvcnRhbCBmcm9tICcuLi9Qb3J0YWwnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBCYWNrZHJvcCBmcm9tICcuLi9CYWNrZHJvcCc7XG5pbXBvcnQgeyBnZXRNb2RhbFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vbW9kYWxDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgb3BlbixcbiAgICBleGl0ZWQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgIW9wZW4gJiYgZXhpdGVkICYmICdoaWRkZW4nXSxcbiAgICBiYWNrZHJvcDogWydiYWNrZHJvcCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TW9kYWxVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IE1vZGFsUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpTW9kYWwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgIW93bmVyU3RhdGUub3BlbiAmJiBvd25lclN0YXRlLmV4aXRlZCAmJiBzdHlsZXMuaGlkZGVuXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdmaXhlZCcsXG4gIHpJbmRleDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnpJbmRleC5tb2RhbCxcbiAgcmlnaHQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgdG9wOiAwLFxuICBsZWZ0OiAwXG59LCAhb3duZXJTdGF0ZS5vcGVuICYmIG93bmVyU3RhdGUuZXhpdGVkICYmIHtcbiAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbn0pKTtcbmNvbnN0IE1vZGFsQmFja2Ryb3AgPSBzdHlsZWQoQmFja2Ryb3AsIHtcbiAgbmFtZTogJ011aU1vZGFsJyxcbiAgc2xvdDogJ0JhY2tkcm9wJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgcmV0dXJuIHN0eWxlcy5iYWNrZHJvcDtcbiAgfVxufSkoe1xuICB6SW5kZXg6IC0xXG59KTtcblxuLyoqXG4gKiBNb2RhbCBpcyBhIGxvd2VyLWxldmVsIGNvbnN0cnVjdCB0aGF0IGlzIGxldmVyYWdlZCBieSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogLSBbRGlhbG9nXSgvbWF0ZXJpYWwtdWkvYXBpL2RpYWxvZy8pXG4gKiAtIFtEcmF3ZXJdKC9tYXRlcmlhbC11aS9hcGkvZHJhd2VyLylcbiAqIC0gW01lbnVdKC9tYXRlcmlhbC11aS9hcGkvbWVudS8pXG4gKiAtIFtQb3BvdmVyXSgvbWF0ZXJpYWwtdWkvYXBpL3BvcG92ZXIvKVxuICpcbiAqIElmIHlvdSBhcmUgY3JlYXRpbmcgYSBtb2RhbCBkaWFsb2csIHlvdSBwcm9iYWJseSB3YW50IHRvIHVzZSB0aGUgW0RpYWxvZ10oL21hdGVyaWFsLXVpL2FwaS9kaWFsb2cvKSBjb21wb25lbnRcbiAqIHJhdGhlciB0aGFuIGRpcmVjdGx5IHVzaW5nIE1vZGFsLlxuICpcbiAqIFRoaXMgY29tcG9uZW50IHNoYXJlcyBtYW55IGNvbmNlcHRzIHdpdGggW3JlYWN0LW92ZXJsYXlzXShodHRwczovL3JlYWN0LWJvb3RzdHJhcC5naXRodWIuaW8vcmVhY3Qtb3ZlcmxheXMvI21vZGFscykuXG4gKi9cbmNvbnN0IE1vZGFsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTW9kYWwoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfc2xvdHMkcm9vdCwgX3JlZjIsIF9zbG90cyRiYWNrZHJvcCwgX3Nsb3RQcm9wcyRyb290LCBfc2xvdFByb3BzJGJhY2tkcm9wO1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIG5hbWU6ICdNdWlNb2RhbCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gTW9kYWxCYWNrZHJvcCxcbiAgICAgIEJhY2tkcm9wUHJvcHMsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb250YWluZXIsXG4gICAgICBjb21wb25lbnQsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICAgIGRpc2FibGVBdXRvRm9jdXMgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVFbmZvcmNlRm9jdXMgPSBmYWxzZSxcbiAgICAgIGRpc2FibGVFc2NhcGVLZXlEb3duID0gZmFsc2UsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gZmFsc2UsXG4gICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzID0gZmFsc2UsXG4gICAgICBkaXNhYmxlU2Nyb2xsTG9jayA9IGZhbHNlLFxuICAgICAgaGlkZUJhY2tkcm9wID0gZmFsc2UsXG4gICAgICBrZWVwTW91bnRlZCA9IGZhbHNlLFxuICAgICAgb25CYWNrZHJvcENsaWNrLFxuICAgICAgb3BlbixcbiAgICAgIHNsb3RQcm9wcyxcbiAgICAgIHNsb3RzXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBwcm9wc1dpdGhEZWZhdWx0cyA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uLFxuICAgIGRpc2FibGVBdXRvRm9jdXMsXG4gICAgZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICBkaXNhYmxlRXNjYXBlS2V5RG93bixcbiAgICBkaXNhYmxlUG9ydGFsLFxuICAgIGRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgZGlzYWJsZVNjcm9sbExvY2ssXG4gICAgaGlkZUJhY2tkcm9wLFxuICAgIGtlZXBNb3VudGVkXG4gIH0pO1xuICBjb25zdCB7XG4gICAgZ2V0Um9vdFByb3BzLFxuICAgIGdldEJhY2tkcm9wUHJvcHMsXG4gICAgZ2V0VHJhbnNpdGlvblByb3BzLFxuICAgIHBvcnRhbFJlZixcbiAgICBpc1RvcE1vZGFsLFxuICAgIGV4aXRlZCxcbiAgICBoYXNUcmFuc2l0aW9uXG4gIH0gPSB1c2VNb2RhbChfZXh0ZW5kcyh7fSwgcHJvcHNXaXRoRGVmYXVsdHMsIHtcbiAgICByb290UmVmOiByZWZcbiAgfSkpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzV2l0aERlZmF1bHRzLCB7XG4gICAgZXhpdGVkXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGNoaWxkUHJvcHMgPSB7fTtcbiAgaWYgKGNoaWxkcmVuLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZFByb3BzLnRhYkluZGV4ID0gJy0xJztcbiAgfVxuXG4gIC8vIEl0J3MgYSBUcmFuc2l0aW9uIGxpa2UgY29tcG9uZW50XG4gIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgb25FbnRlcixcbiAgICAgIG9uRXhpdGVkXG4gICAgfSA9IGdldFRyYW5zaXRpb25Qcm9wcygpO1xuICAgIGNoaWxkUHJvcHMub25FbnRlciA9IG9uRW50ZXI7XG4gICAgY2hpbGRQcm9wcy5vbkV4aXRlZCA9IG9uRXhpdGVkO1xuICB9XG4gIGNvbnN0IFJvb3RTbG90ID0gKF9yZWYgPSAoX3Nsb3RzJHJvb3QgPSBzbG90cyA9PSBudWxsID8gdm9pZCAwIDogc2xvdHMucm9vdCkgIT0gbnVsbCA/IF9zbG90cyRyb290IDogY29tcG9uZW50cy5Sb290KSAhPSBudWxsID8gX3JlZiA6IE1vZGFsUm9vdDtcbiAgY29uc3QgQmFja2Ryb3BTbG90ID0gKF9yZWYyID0gKF9zbG90cyRiYWNrZHJvcCA9IHNsb3RzID09IG51bGwgPyB2b2lkIDAgOiBzbG90cy5iYWNrZHJvcCkgIT0gbnVsbCA/IF9zbG90cyRiYWNrZHJvcCA6IGNvbXBvbmVudHMuQmFja2Ryb3ApICE9IG51bGwgPyBfcmVmMiA6IEJhY2tkcm9wQ29tcG9uZW50O1xuICBjb25zdCByb290U2xvdFByb3BzID0gKF9zbG90UHJvcHMkcm9vdCA9IHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLnJvb3QpICE9IG51bGwgPyBfc2xvdFByb3BzJHJvb3QgOiBjb21wb25lbnRzUHJvcHMucm9vdDtcbiAgY29uc3QgYmFja2Ryb3BTbG90UHJvcHMgPSAoX3Nsb3RQcm9wcyRiYWNrZHJvcCA9IHNsb3RQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogc2xvdFByb3BzLmJhY2tkcm9wKSAhPSBudWxsID8gX3Nsb3RQcm9wcyRiYWNrZHJvcCA6IGNvbXBvbmVudHNQcm9wcy5iYWNrZHJvcDtcbiAgY29uc3Qgcm9vdFByb3BzID0gdXNlU2xvdFByb3BzKHtcbiAgICBlbGVtZW50VHlwZTogUm9vdFNsb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHJvb3RTbG90UHJvcHMsXG4gICAgZXh0ZXJuYWxGb3J3YXJkZWRQcm9wczogb3RoZXIsXG4gICAgZ2V0U2xvdFByb3BzOiBnZXRSb290UHJvcHMsXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICByZWYsXG4gICAgICBhczogY29tcG9uZW50XG4gICAgfSxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc05hbWUsIHJvb3RTbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHJvb3RTbG90UHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzID09IG51bGwgPyB2b2lkIDAgOiBjbGFzc2VzLnJvb3QsICFvd25lclN0YXRlLm9wZW4gJiYgb3duZXJTdGF0ZS5leGl0ZWQgJiYgKGNsYXNzZXMgPT0gbnVsbCA/IHZvaWQgMCA6IGNsYXNzZXMuaGlkZGVuKSlcbiAgfSk7XG4gIGNvbnN0IGJhY2tkcm9wUHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBCYWNrZHJvcFNsb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IGJhY2tkcm9wU2xvdFByb3BzLFxuICAgIGFkZGl0aW9uYWxQcm9wczogQmFja2Ryb3BQcm9wcyxcbiAgICBnZXRTbG90UHJvcHM6IG90aGVySGFuZGxlcnMgPT4ge1xuICAgICAgcmV0dXJuIGdldEJhY2tkcm9wUHJvcHMoX2V4dGVuZHMoe30sIG90aGVySGFuZGxlcnMsIHtcbiAgICAgICAgb25DbGljazogZSA9PiB7XG4gICAgICAgICAgaWYgKG9uQmFja2Ryb3BDbGljaykge1xuICAgICAgICAgICAgb25CYWNrZHJvcENsaWNrKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3RoZXJIYW5kbGVycyAhPSBudWxsICYmIG90aGVySGFuZGxlcnMub25DbGljaykge1xuICAgICAgICAgICAgb3RoZXJIYW5kbGVycy5vbkNsaWNrKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH0sXG4gICAgY2xhc3NOYW1lOiBjbHN4KGJhY2tkcm9wU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBiYWNrZHJvcFNsb3RQcm9wcy5jbGFzc05hbWUsIEJhY2tkcm9wUHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IEJhY2tkcm9wUHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzID09IG51bGwgPyB2b2lkIDAgOiBjbGFzc2VzLmJhY2tkcm9wKSxcbiAgICBvd25lclN0YXRlXG4gIH0pO1xuICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghaGFzVHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFBvcnRhbCwge1xuICAgIHJlZjogcG9ydGFsUmVmLFxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGRpc2FibGVQb3J0YWw6IGRpc2FibGVQb3J0YWwsXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4cyhSb290U2xvdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywge1xuICAgICAgY2hpbGRyZW46IFshaGlkZUJhY2tkcm9wICYmIEJhY2tkcm9wQ29tcG9uZW50ID8gLyojX19QVVJFX18qL19qc3goQmFja2Ryb3BTbG90LCBfZXh0ZW5kcyh7fSwgYmFja2Ryb3BQcm9wcykpIDogbnVsbCwgLyojX19QVVJFX18qL19qc3goRm9jdXNUcmFwLCB7XG4gICAgICAgIGRpc2FibGVFbmZvcmNlRm9jdXM6IGRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgICAgIGRpc2FibGVBdXRvRm9jdXM6IGRpc2FibGVBdXRvRm9jdXMsXG4gICAgICAgIGRpc2FibGVSZXN0b3JlRm9jdXM6IGRpc2FibGVSZXN0b3JlRm9jdXMsXG4gICAgICAgIGlzRW5hYmxlZDogaXNUb3BNb2RhbCxcbiAgICAgICAgb3Blbjogb3BlbixcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIGNoaWxkUHJvcHMpXG4gICAgICB9KV1cbiAgICB9KSlcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE1vZGFsLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEEgYmFja2Ryb3AgY29tcG9uZW50LiBUaGlzIHByb3AgZW5hYmxlcyBjdXN0b20gYmFja2Ryb3AgcmVuZGVyaW5nLlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHNsb3RzLmJhY2tkcm9wYCBpbnN0ZWFkLiBXaGlsZSB0aGlzIHByb3AgY3VycmVudGx5IHdvcmtzLCBpdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICogVXNlIHRoZSBgc2xvdHMuYmFja2Ryb3BgIHByb3AgdG8gbWFrZSB5b3VyIGFwcGxpY2F0aW9uIHJlYWR5IGZvciB0aGUgbmV4dCB2ZXJzaW9uIG9mIE1hdGVyaWFsIFVJLlxuICAgKiBAZGVmYXVsdCBzdHlsZWQoQmFja2Ryb3AsIHtcbiAgICogICBuYW1lOiAnTXVpTW9kYWwnLFxuICAgKiAgIHNsb3Q6ICdCYWNrZHJvcCcsXG4gICAqICAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAqICAgICByZXR1cm4gc3R5bGVzLmJhY2tkcm9wO1xuICAgKiAgIH0sXG4gICAqIH0pKHtcbiAgICogICB6SW5kZXg6IC0xLFxuICAgKiB9KVxuICAgKi9cbiAgQmFja2Ryb3BDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgQmFja2Ryb3BgXSgvbWF0ZXJpYWwtdWkvYXBpL2JhY2tkcm9wLykgZWxlbWVudC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90UHJvcHMuYmFja2Ryb3BgIGluc3RlYWQuXG4gICAqL1xuICBCYWNrZHJvcFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBXaGVuIHNldCB0byB0cnVlIHRoZSBNb2RhbCB3YWl0cyB1bnRpbCBhIG5lc3RlZCBUcmFuc2l0aW9uIGlzIGNvbXBsZXRlZCBiZWZvcmUgY2xvc2luZy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIEJhY2tkcm9wOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJhY2tkcm9wOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG9uZS5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIGNhbGxiYWNrLCB3aGljaCBpcyBjYWxsZWQgaW4gYSBSZWFjdCBsYXlvdXQgZWZmZWN0LlxuICAgKiBUaGlzIGxldHMgeW91IHNldCB0aGUgY29udGFpbmVyIGZyb20gYSByZWYsIGFuZCBhbHNvIG1ha2VzIHNlcnZlci1zaWRlIHJlbmRlcmluZyBwb3NzaWJsZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IG1vZGFsIGNoaWxkcmVuIHRoYXQgaGF2ZSB0aGUgYGRpc2FibGVBdXRvRm9jdXNgIHByb3AuXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcHJldmVudCBmb2N1cyBmcm9tIGxlYXZpbmcgdGhlIG1vZGFsIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSBtb2RhbCBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIHRoZSBgb25DbG9zZWAgY2FsbGJhY2suXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgYGNoaWxkcmVuYCB3aWxsIGJlIHVuZGVyIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuIG9yIHVubW91bnRlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBub3QgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBoaWRlQmFja2Ryb3A6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIE1vZGFsLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYmFja2Ryb3AgaXMgY2xpY2tlZC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgb25DbG9zZWAgcHJvcCB3aXRoIHRoZSBgcmVhc29uYCBhcmd1bWVudCB0byBoYW5kbGUgdGhlIGBiYWNrZHJvcENsaWNrYCBldmVudHMuXG4gICAqL1xuICBvbkJhY2tkcm9wQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBhIHRyYW5zaXRpb24gZW50ZXJzLlxuICAgKi9cbiAgb25UcmFuc2l0aW9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQSBmdW5jdGlvbiBjYWxsZWQgd2hlbiBhIHRyYW5zaXRpb24gaGFzIGV4aXRlZC5cbiAgICovXG4gIG9uVHJhbnNpdGlvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgc2hvd24uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVGhlIHByb3BzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUgdGhlIE1vZGFsLlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJhY2tkcm9wOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlIHRoZSBNb2RhbC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGJhY2tkcm9wOiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgcm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7IiwiLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy1pb3MvYmxvYi9iY2EzNjEwNzQwNTU5NGQ1YjdiMTYyNjVhNWIwZWQ2OThmODVhNWVlL2NvbXBvbmVudHMvRWxldmF0aW9uL3NyYy9VSUNvbG9yJTJCTWF0ZXJpYWxFbGV2YXRpb24ubSNMNjFcbmNvbnN0IGdldE92ZXJsYXlBbHBoYSA9IGVsZXZhdGlvbiA9PiB7XG4gIGxldCBhbHBoYVZhbHVlO1xuICBpZiAoZWxldmF0aW9uIDwgMSkge1xuICAgIGFscGhhVmFsdWUgPSA1LjExOTE2ICogZWxldmF0aW9uICoqIDI7XG4gIH0gZWxzZSB7XG4gICAgYWxwaGFWYWx1ZSA9IDQuNSAqIE1hdGgubG9nKGVsZXZhdGlvbiArIDEpICsgMjtcbiAgfVxuICByZXR1cm4gKGFscGhhVmFsdWUgLyAxMDApLnRvRml4ZWQoMik7XG59O1xuZXhwb3J0IGRlZmF1bHQgZ2V0T3ZlcmxheUFscGhhOyIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFwZXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVBhcGVyJywgc2xvdCk7XG59XG5jb25zdCBwYXBlckNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlQYXBlcicsIFsncm9vdCcsICdyb3VuZGVkJywgJ291dGxpbmVkJywgJ2VsZXZhdGlvbicsICdlbGV2YXRpb24wJywgJ2VsZXZhdGlvbjEnLCAnZWxldmF0aW9uMicsICdlbGV2YXRpb24zJywgJ2VsZXZhdGlvbjQnLCAnZWxldmF0aW9uNScsICdlbGV2YXRpb242JywgJ2VsZXZhdGlvbjcnLCAnZWxldmF0aW9uOCcsICdlbGV2YXRpb245JywgJ2VsZXZhdGlvbjEwJywgJ2VsZXZhdGlvbjExJywgJ2VsZXZhdGlvbjEyJywgJ2VsZXZhdGlvbjEzJywgJ2VsZXZhdGlvbjE0JywgJ2VsZXZhdGlvbjE1JywgJ2VsZXZhdGlvbjE2JywgJ2VsZXZhdGlvbjE3JywgJ2VsZXZhdGlvbjE4JywgJ2VsZXZhdGlvbjE5JywgJ2VsZXZhdGlvbjIwJywgJ2VsZXZhdGlvbjIxJywgJ2VsZXZhdGlvbjIyJywgJ2VsZXZhdGlvbjIzJywgJ2VsZXZhdGlvbjI0J10pO1xuZXhwb3J0IGRlZmF1bHQgcGFwZXJDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImVsZXZhdGlvblwiLCBcInNxdWFyZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgaW50ZWdlclByb3BUeXBlIGZyb20gJ0BtdWkvdXRpbHMvaW50ZWdlclByb3BUeXBlJztcbmltcG9ydCBjaGFpblByb3BUeXBlcyBmcm9tICdAbXVpL3V0aWxzL2NoYWluUHJvcFR5cGVzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG11aS9zeXN0ZW0vY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGdldE92ZXJsYXlBbHBoYSBmcm9tICcuLi9zdHlsZXMvZ2V0T3ZlcmxheUFscGhhJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgZ2V0UGFwZXJVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3BhcGVyQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIHNxdWFyZSxcbiAgICBlbGV2YXRpb24sXG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCAhc3F1YXJlICYmICdyb3VuZGVkJywgdmFyaWFudCA9PT0gJ2VsZXZhdGlvbicgJiYgYGVsZXZhdGlvbiR7ZWxldmF0aW9ufWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0UGFwZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IFBhcGVyUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpUGFwZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sICFvd25lclN0YXRlLnNxdWFyZSAmJiBzdHlsZXMucm91bmRlZCwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZWxldmF0aW9uJyAmJiBzdHlsZXNbYGVsZXZhdGlvbiR7b3duZXJTdGF0ZS5lbGV2YXRpb259YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHZhcnMkb3ZlcmxheXM7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyLFxuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3gtc2hhZG93JylcbiAgfSwgIW93bmVyU3RhdGUuc3F1YXJlICYmIHtcbiAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICAgIGJvcmRlcjogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmRpdmlkZXJ9YFxuICB9LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdlbGV2YXRpb24nICYmIF9leHRlbmRzKHtcbiAgICBib3hTaGFkb3c6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFkb3dzW293bmVyU3RhdGUuZWxldmF0aW9uXVxuICB9LCAhdGhlbWUudmFycyAmJiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdkYXJrJyAmJiB7XG4gICAgYmFja2dyb3VuZEltYWdlOiBgbGluZWFyLWdyYWRpZW50KCR7YWxwaGEoJyNmZmYnLCBnZXRPdmVybGF5QWxwaGEob3duZXJTdGF0ZS5lbGV2YXRpb24pKX0sICR7YWxwaGEoJyNmZmYnLCBnZXRPdmVybGF5QWxwaGEob3duZXJTdGF0ZS5lbGV2YXRpb24pKX0pYFxuICB9LCB0aGVtZS52YXJzICYmIHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IChfdGhlbWUkdmFycyRvdmVybGF5cyA9IHRoZW1lLnZhcnMub3ZlcmxheXMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdmFycyRvdmVybGF5c1tvd25lclN0YXRlLmVsZXZhdGlvbl1cbiAgfSkpO1xufSk7XG5jb25zdCBQYXBlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhcGVyKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQYXBlcidcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdkaXYnLFxuICAgICAgZWxldmF0aW9uID0gMSxcbiAgICAgIHNxdWFyZSA9IGZhbHNlLFxuICAgICAgdmFyaWFudCA9ICdlbGV2YXRpb24nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgZWxldmF0aW9uLFxuICAgIHNxdWFyZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICAgIGlmICh0aGVtZS5zaGFkb3dzW2VsZXZhdGlvbl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGVsZXZhdGlvbiBwcm92aWRlZCA8UGFwZXIgZWxldmF0aW9uPXske2VsZXZhdGlvbn19PiBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSB0aGVtZS5gLCBgUGxlYXNlIG1ha2Ugc3VyZSB0aGF0IFxcYHRoZW1lLnNoYWRvd3NbJHtlbGV2YXRpb259XVxcYCBpcyBkZWZpbmVkLmBdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFBhcGVyUm9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBjb21wb25lbnQsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhcGVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBTaGFkb3cgZGVwdGgsIGNvcnJlc3BvbmRzIHRvIGBkcGAgaW4gdGhlIHNwZWMuXG4gICAqIEl0IGFjY2VwdHMgdmFsdWVzIGJldHdlZW4gMCBhbmQgMjQgaW5jbHVzaXZlLlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBlbGV2YXRpb246IGNoYWluUHJvcFR5cGVzKGludGVnZXJQcm9wVHlwZSwgcHJvcHMgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsZXZhdGlvbixcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gcHJvcHM7XG4gICAgaWYgKGVsZXZhdGlvbiA+IDAgJiYgdmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgTVVJOiBDb21iaW5pbmcgXFxgZWxldmF0aW9uPXske2VsZXZhdGlvbn19XFxgIHdpdGggXFxgdmFyaWFudD1cIiR7dmFyaWFudH1cIlxcYCBoYXMgbm8gZWZmZWN0LiBFaXRoZXIgdXNlIFxcYGVsZXZhdGlvbj17MH1cXGAgb3IgdXNlIGEgZGlmZmVyZW50IFxcYHZhcmlhbnRcXGAuYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdlbGV2YXRpb24nXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2VsZXZhdGlvbicsICdvdXRsaW5lZCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUGFwZXI7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQb3BvdmVyVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlQb3BvdmVyJywgc2xvdCk7XG59XG5jb25zdCBwb3BvdmVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVBvcG92ZXInLCBbJ3Jvb3QnLCAncGFwZXInXSk7XG5leHBvcnQgZGVmYXVsdCBwb3BvdmVyQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkVudGVyaW5nXCJdLFxuICBfZXhjbHVkZWQyID0gW1wiYWN0aW9uXCIsIFwiYW5jaG9yRWxcIiwgXCJhbmNob3JPcmlnaW5cIiwgXCJhbmNob3JQb3NpdGlvblwiLCBcImFuY2hvclJlZmVyZW5jZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29udGFpbmVyXCIsIFwiZWxldmF0aW9uXCIsIFwibWFyZ2luVGhyZXNob2xkXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJzbG90c1wiLCBcInNsb3RQcm9wc1wiLCBcInRyYW5zZm9ybU9yaWdpblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIiwgXCJkaXNhYmxlU2Nyb2xsTG9ja1wiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcInNsb3RQcm9wc1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVzZVNsb3RQcm9wcywgaXNIb3N0Q29tcG9uZW50IH0gZnJvbSAnQG11aS9iYXNlL3V0aWxzJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBIVE1MRWxlbWVudFR5cGUgZnJvbSAnQG11aS91dGlscy9IVE1MRWxlbWVudFR5cGUnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiBmcm9tICdAbXVpL3V0aWxzL2VsZW1lbnRUeXBlQWNjZXB0aW5nUmVmJztcbmltcG9ydCBpbnRlZ2VyUHJvcFR5cGUgZnJvbSAnQG11aS91dGlscy9pbnRlZ2VyUHJvcFR5cGUnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJ0BtdWkvdXRpbHMvY2hhaW5Qcm9wVHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBvd25lcldpbmRvdyBmcm9tICcuLi91dGlscy9vd25lcldpbmRvdyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBHcm93IGZyb20gJy4uL0dyb3cnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsJztcbmltcG9ydCBQYXBlckJhc2UgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IHsgZ2V0UG9wb3ZlclV0aWxpdHlDbGFzcyB9IGZyb20gJy4vcG9wb3ZlckNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRUb3AocmVjdCwgdmVydGljYWwpIHtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGlmICh0eXBlb2YgdmVydGljYWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gdmVydGljYWw7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQgLyAyO1xuICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAnYm90dG9tJykge1xuICAgIG9mZnNldCA9IHJlY3QuaGVpZ2h0O1xuICB9XG4gIHJldHVybiBvZmZzZXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0T2Zmc2V0TGVmdChyZWN0LCBob3Jpem9udGFsKSB7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBpZiAodHlwZW9mIGhvcml6b250YWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gaG9yaXpvbnRhbDtcbiAgfSBlbHNlIGlmIChob3Jpem9udGFsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGggLyAyO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdyaWdodCcpIHtcbiAgICBvZmZzZXQgPSByZWN0LndpZHRoO1xuICB9XG4gIHJldHVybiBvZmZzZXQ7XG59XG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSh0cmFuc2Zvcm1PcmlnaW4pIHtcbiAgcmV0dXJuIFt0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsXS5tYXAobiA9PiB0eXBlb2YgbiA9PT0gJ251bWJlcicgPyBgJHtufXB4YCA6IG4pLmpvaW4oJyAnKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVBbmNob3JFbChhbmNob3JFbCkge1xuICByZXR1cm4gdHlwZW9mIGFuY2hvckVsID09PSAnZnVuY3Rpb24nID8gYW5jaG9yRWwoKSA6IGFuY2hvckVsO1xufVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddLFxuICAgIHBhcGVyOiBbJ3BhcGVyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRQb3BvdmVyVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgUG9wb3ZlclJvb3QgPSBzdHlsZWQoTW9kYWwsIHtcbiAgbmFtZTogJ011aVBvcG92ZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbmV4cG9ydCBjb25zdCBQb3BvdmVyUGFwZXIgPSBzdHlsZWQoUGFwZXJCYXNlLCB7XG4gIG5hbWU6ICdNdWlQb3BvdmVyJyxcbiAgc2xvdDogJ1BhcGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucGFwZXJcbn0pKHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIG92ZXJmbG93WTogJ2F1dG8nLFxuICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAvLyBTbyB3ZSBzZWUgdGhlIHBvcG92ZXIgd2hlbiBpdCdzIGVtcHR5LlxuICAvLyBJdCdzIG1vc3QgbGlrZWx5IG9uIGlzc3VlIG9uIHVzZXJsYW5kLlxuICBtaW5XaWR0aDogMTYsXG4gIG1pbkhlaWdodDogMTYsXG4gIG1heFdpZHRoOiAnY2FsYygxMDAlIC0gMzJweCknLFxuICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gIG91dGxpbmU6IDBcbn0pO1xuY29uc3QgUG9wb3ZlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcG92ZXIoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfc2xvdFByb3BzJHBhcGVyLCBfc2xvdHMkcm9vdCwgX3Nsb3RzJHBhcGVyO1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlQb3BvdmVyJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYWN0aW9uLFxuICAgICAgYW5jaG9yRWwsXG4gICAgICBhbmNob3JPcmlnaW4gPSB7XG4gICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgYW5jaG9yUG9zaXRpb24sXG4gICAgICBhbmNob3JSZWZlcmVuY2UgPSAnYW5jaG9yRWwnLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclByb3AsXG4gICAgICBlbGV2YXRpb24gPSA4LFxuICAgICAgbWFyZ2luVGhyZXNob2xkID0gMTYsXG4gICAgICBvcGVuLFxuICAgICAgUGFwZXJQcm9wczogUGFwZXJQcm9wc1Byb3AgPSB7fSxcbiAgICAgIHNsb3RzLFxuICAgICAgc2xvdFByb3BzLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luID0ge1xuICAgICAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICAgICAgfSxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBHcm93LFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID0gJ2F1dG8nLFxuICAgICAgVHJhbnNpdGlvblByb3BzOiB7XG4gICAgICAgIG9uRW50ZXJpbmdcbiAgICAgIH0gPSB7fSxcbiAgICAgIGRpc2FibGVTY3JvbGxMb2NrID0gZmFsc2VcbiAgICB9ID0gcHJvcHMsXG4gICAgVHJhbnNpdGlvblByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMuVHJhbnNpdGlvblByb3BzLCBfZXhjbHVkZWQpLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZDIpO1xuICBjb25zdCBleHRlcm5hbFBhcGVyU2xvdFByb3BzID0gKF9zbG90UHJvcHMkcGFwZXIgPSBzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5wYXBlcikgIT0gbnVsbCA/IF9zbG90UHJvcHMkcGFwZXIgOiBQYXBlclByb3BzUHJvcDtcbiAgY29uc3QgcGFwZXJSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgaGFuZGxlUGFwZXJSZWYgPSB1c2VGb3JrUmVmKHBhcGVyUmVmLCBleHRlcm5hbFBhcGVyU2xvdFByb3BzLnJlZik7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbmNob3JPcmlnaW4sXG4gICAgYW5jaG9yUmVmZXJlbmNlLFxuICAgIGVsZXZhdGlvbixcbiAgICBtYXJnaW5UaHJlc2hvbGQsXG4gICAgZXh0ZXJuYWxQYXBlclNsb3RQcm9wcyxcbiAgICB0cmFuc2Zvcm1PcmlnaW4sXG4gICAgVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblByb3AsXG4gICAgVHJhbnNpdGlvblByb3BzXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG5cbiAgLy8gUmV0dXJucyB0aGUgdG9wL2xlZnQgb2Zmc2V0IG9mIHRoZSBwb3NpdGlvblxuICAvLyB0byBhdHRhY2ggdG8gb24gdGhlIGFuY2hvciBlbGVtZW50IChvciBib2R5IGlmIG5vbmUgaXMgcHJvdmlkZWQpXG4gIGNvbnN0IGdldEFuY2hvck9mZnNldCA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnYW5jaG9yUG9zaXRpb24nKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIWFuY2hvclBvc2l0aW9uKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgYGFuY2hvclBvc2l0aW9uYCBwcm9wIHdoZW4gdXNpbmcgJyArICc8UG9wb3ZlciBhbmNob3JSZWZlcmVuY2U9XCJhbmNob3JQb3NpdGlvblwiIC8+LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYW5jaG9yUG9zaXRpb247XG4gICAgfVxuICAgIGNvbnN0IHJlc29sdmVkQW5jaG9yRWwgPSByZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpO1xuXG4gICAgLy8gSWYgYW4gYW5jaG9yIGVsZW1lbnQgd2Fzbid0IHByb3ZpZGVkLCBqdXN0IHVzZSB0aGUgcGFyZW50IGJvZHkgZWxlbWVudCBvZiB0aGlzIFBvcG92ZXJcbiAgICBjb25zdCBhbmNob3JFbGVtZW50ID0gcmVzb2x2ZWRBbmNob3JFbCAmJiByZXNvbHZlZEFuY2hvckVsLm5vZGVUeXBlID09PSAxID8gcmVzb2x2ZWRBbmNob3JFbCA6IG93bmVyRG9jdW1lbnQocGFwZXJSZWYuY3VycmVudCkuYm9keTtcbiAgICBjb25zdCBhbmNob3JSZWN0ID0gYW5jaG9yRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgYm94ID0gYW5jaG9yRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGJveC50b3AgPT09IDAgJiYgYm94LmxlZnQgPT09IDAgJiYgYm94LnJpZ2h0ID09PSAwICYmIGJveC5ib3R0b20gPT09IDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCAnVGhlIGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBsYXlvdXQuJywgXCJNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQgb3IgdGhhdCBpdCdzIG5vdCBkaXNwbGF5IG5vbmUuXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYW5jaG9yUmVjdC50b3AgKyBnZXRPZmZzZXRUb3AoYW5jaG9yUmVjdCwgYW5jaG9yT3JpZ2luLnZlcnRpY2FsKSxcbiAgICAgIGxlZnQ6IGFuY2hvclJlY3QubGVmdCArIGdldE9mZnNldExlZnQoYW5jaG9yUmVjdCwgYW5jaG9yT3JpZ2luLmhvcml6b250YWwpXG4gICAgfTtcbiAgfSwgW2FuY2hvckVsLCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCwgYW5jaG9yT3JpZ2luLnZlcnRpY2FsLCBhbmNob3JQb3NpdGlvbiwgYW5jaG9yUmVmZXJlbmNlXSk7XG5cbiAgLy8gUmV0dXJucyB0aGUgYmFzZSB0cmFuc2Zvcm0gb3JpZ2luIHVzaW5nIHRoZSBlbGVtZW50XG4gIGNvbnN0IGdldFRyYW5zZm9ybU9yaWdpbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGVsZW1SZWN0ID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdmVydGljYWw6IGdldE9mZnNldFRvcChlbGVtUmVjdCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsKSxcbiAgICAgIGhvcml6b250YWw6IGdldE9mZnNldExlZnQoZWxlbVJlY3QsIHRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsKVxuICAgIH07XG4gIH0sIFt0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsXSk7XG4gIGNvbnN0IGdldFBvc2l0aW9uaW5nU3R5bGUgPSBSZWFjdC51c2VDYWxsYmFjayhlbGVtZW50ID0+IHtcbiAgICBjb25zdCBlbGVtUmVjdCA9IHtcbiAgICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoLFxuICAgICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodFxuICAgIH07XG5cbiAgICAvLyBHZXQgdGhlIHRyYW5zZm9ybSBvcmlnaW4gcG9pbnQgb24gdGhlIGVsZW1lbnQgaXRzZWxmXG4gICAgY29uc3QgZWxlbVRyYW5zZm9ybU9yaWdpbiA9IGdldFRyYW5zZm9ybU9yaWdpbihlbGVtUmVjdCk7XG4gICAgaWYgKGFuY2hvclJlZmVyZW5jZSA9PT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IG51bGwsXG4gICAgICAgIGxlZnQ6IG51bGwsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUoZWxlbVRyYW5zZm9ybU9yaWdpbilcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBvZmZzZXQgb2YgdGhlIGFuY2hvcmluZyBlbGVtZW50XG4gICAgY29uc3QgYW5jaG9yT2Zmc2V0ID0gZ2V0QW5jaG9yT2Zmc2V0KCk7XG5cbiAgICAvLyBDYWxjdWxhdGUgZWxlbWVudCBwb3NpdGlvbmluZ1xuICAgIGxldCB0b3AgPSBhbmNob3JPZmZzZXQudG9wIC0gZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbDtcbiAgICBsZXQgbGVmdCA9IGFuY2hvck9mZnNldC5sZWZ0IC0gZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsO1xuICAgIGNvbnN0IGJvdHRvbSA9IHRvcCArIGVsZW1SZWN0LmhlaWdodDtcbiAgICBjb25zdCByaWdodCA9IGxlZnQgKyBlbGVtUmVjdC53aWR0aDtcblxuICAgIC8vIFVzZSB0aGUgcGFyZW50IHdpbmRvdyBvZiB0aGUgYW5jaG9yRWwgaWYgcHJvdmlkZWRcbiAgICBjb25zdCBjb250YWluZXJXaW5kb3cgPSBvd25lcldpbmRvdyhyZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpKTtcblxuICAgIC8vIFdpbmRvdyB0aHJlc2hvbGRzIHRha2luZyByZXF1aXJlZCBtYXJnaW4gaW50byBhY2NvdW50XG4gICAgY29uc3QgaGVpZ2h0VGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVySGVpZ2h0IC0gbWFyZ2luVGhyZXNob2xkO1xuICAgIGNvbnN0IHdpZHRoVGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVyV2lkdGggLSBtYXJnaW5UaHJlc2hvbGQ7XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgdmVydGljYWwgYXhpcyBuZWVkcyBzaGlmdGluZ1xuICAgIGlmIChtYXJnaW5UaHJlc2hvbGQgIT09IG51bGwgJiYgdG9wIDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICBjb25zdCBkaWZmID0gdG9wIC0gbWFyZ2luVGhyZXNob2xkO1xuICAgICAgdG9wIC09IGRpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsICs9IGRpZmY7XG4gICAgfSBlbHNlIGlmIChtYXJnaW5UaHJlc2hvbGQgIT09IG51bGwgJiYgYm90dG9tID4gaGVpZ2h0VGhyZXNob2xkKSB7XG4gICAgICBjb25zdCBkaWZmID0gYm90dG9tIC0gaGVpZ2h0VGhyZXNob2xkO1xuICAgICAgdG9wIC09IGRpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsICs9IGRpZmY7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZWxlbVJlY3QuaGVpZ2h0ID4gaGVpZ2h0VGhyZXNob2xkICYmIGVsZW1SZWN0LmhlaWdodCAmJiBoZWlnaHRUaHJlc2hvbGQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlIHBvcG92ZXIgY29tcG9uZW50IGlzIHRvbyB0YWxsLicsIGBTb21lIHBhcnQgb2YgaXQgY2FuIG5vdCBiZSBzZWVuIG9uIHRoZSBzY3JlZW4gKCR7ZWxlbVJlY3QuaGVpZ2h0IC0gaGVpZ2h0VGhyZXNob2xkfXB4KS5gLCAnUGxlYXNlIGNvbnNpZGVyIGFkZGluZyBhIGBtYXgtaGVpZ2h0YCB0byBpbXByb3ZlIHRoZSB1c2VyLWV4cGVyaWVuY2UuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHRoZSBob3Jpem9udGFsIGF4aXMgbmVlZHMgc2hpZnRpbmdcbiAgICBpZiAobWFyZ2luVGhyZXNob2xkICE9PSBudWxsICYmIGxlZnQgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgIGNvbnN0IGRpZmYgPSBsZWZ0IC0gbWFyZ2luVGhyZXNob2xkO1xuICAgICAgbGVmdCAtPSBkaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IGRpZmY7XG4gICAgfSBlbHNlIGlmIChyaWdodCA+IHdpZHRoVGhyZXNob2xkKSB7XG4gICAgICBjb25zdCBkaWZmID0gcmlnaHQgLSB3aWR0aFRocmVzaG9sZDtcbiAgICAgIGxlZnQgLT0gZGlmZjtcbiAgICAgIGVsZW1UcmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCArPSBkaWZmO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBgJHtNYXRoLnJvdW5kKHRvcCl9cHhgLFxuICAgICAgbGVmdDogYCR7TWF0aC5yb3VuZChsZWZ0KX1weGAsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IGdldFRyYW5zZm9ybU9yaWdpblZhbHVlKGVsZW1UcmFuc2Zvcm1PcmlnaW4pXG4gICAgfTtcbiAgfSwgW2FuY2hvckVsLCBhbmNob3JSZWZlcmVuY2UsIGdldEFuY2hvck9mZnNldCwgZ2V0VHJhbnNmb3JtT3JpZ2luLCBtYXJnaW5UaHJlc2hvbGRdKTtcbiAgY29uc3QgW2lzUG9zaXRpb25lZCwgc2V0SXNQb3NpdGlvbmVkXSA9IFJlYWN0LnVzZVN0YXRlKG9wZW4pO1xuICBjb25zdCBzZXRQb3NpdGlvbmluZ1N0eWxlcyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gcGFwZXJSZWYuY3VycmVudDtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcG9zaXRpb25pbmcgPSBnZXRQb3NpdGlvbmluZ1N0eWxlKGVsZW1lbnQpO1xuICAgIGlmIChwb3NpdGlvbmluZy50b3AgIT09IG51bGwpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUudG9wID0gcG9zaXRpb25pbmcudG9wO1xuICAgIH1cbiAgICBpZiAocG9zaXRpb25pbmcubGVmdCAhPT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gcG9zaXRpb25pbmcubGVmdDtcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBwb3NpdGlvbmluZy50cmFuc2Zvcm1PcmlnaW47XG4gICAgc2V0SXNQb3NpdGlvbmVkKHRydWUpO1xuICB9LCBbZ2V0UG9zaXRpb25pbmdTdHlsZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChkaXNhYmxlU2Nyb2xsTG9jaykge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNldFBvc2l0aW9uaW5nU3R5bGVzKTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzZXRQb3NpdGlvbmluZ1N0eWxlcyk7XG4gIH0sIFthbmNob3JFbCwgZGlzYWJsZVNjcm9sbExvY2ssIHNldFBvc2l0aW9uaW5nU3R5bGVzXSk7XG4gIGNvbnN0IGhhbmRsZUVudGVyaW5nID0gKGVsZW1lbnQsIGlzQXBwZWFyaW5nKSA9PiB7XG4gICAgaWYgKG9uRW50ZXJpbmcpIHtcbiAgICAgIG9uRW50ZXJpbmcoZWxlbWVudCwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICB9O1xuICBjb25zdCBoYW5kbGVFeGl0ZWQgPSAoKSA9PiB7XG4gICAgc2V0SXNQb3NpdGlvbmVkKGZhbHNlKTtcbiAgfTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAob3Blbikge1xuICAgICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgICB9XG4gIH0pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgKCkgPT4gb3BlbiA/IHtcbiAgICB1cGRhdGVQb3NpdGlvbjogKCkgPT4ge1xuICAgICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgICB9XG4gIH0gOiBudWxsLCBbb3Blbiwgc2V0UG9zaXRpb25pbmdTdHlsZXNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKCgpID0+IHtcbiAgICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gICAgfSk7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coYW5jaG9yRWwpO1xuICAgIGNvbnRhaW5lcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBoYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICAgIGNvbnRhaW5lcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIH07XG4gIH0sIFthbmNob3JFbCwgb3Blbiwgc2V0UG9zaXRpb25pbmdTdHlsZXNdKTtcbiAgbGV0IHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvblByb3A7XG4gIGlmICh0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID09PSAnYXV0bycgJiYgIVRyYW5zaXRpb25Db21wb25lbnQubXVpU3VwcG9ydEF1dG8pIHtcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBJZiB0aGUgY29udGFpbmVyIHByb3AgaXMgcHJvdmlkZWQsIHVzZSB0aGF0XG4gIC8vIElmIHRoZSBhbmNob3JFbCBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgaXRzIHBhcmVudCBib2R5IGVsZW1lbnQgYXMgdGhlIGNvbnRhaW5lclxuICAvLyBJZiBuZWl0aGVyIGFyZSBwcm92aWRlZCBsZXQgdGhlIE1vZGFsIHRha2UgY2FyZSBvZiBjaG9vc2luZyB0aGUgY29udGFpbmVyXG4gIGNvbnN0IGNvbnRhaW5lciA9IGNvbnRhaW5lclByb3AgfHwgKGFuY2hvckVsID8gb3duZXJEb2N1bWVudChyZXNvbHZlQW5jaG9yRWwoYW5jaG9yRWwpKS5ib2R5IDogdW5kZWZpbmVkKTtcbiAgY29uc3QgUm9vdFNsb3QgPSAoX3Nsb3RzJHJvb3QgPSBzbG90cyA9PSBudWxsID8gdm9pZCAwIDogc2xvdHMucm9vdCkgIT0gbnVsbCA/IF9zbG90cyRyb290IDogUG9wb3ZlclJvb3Q7XG4gIGNvbnN0IFBhcGVyU2xvdCA9IChfc2xvdHMkcGFwZXIgPSBzbG90cyA9PSBudWxsID8gdm9pZCAwIDogc2xvdHMucGFwZXIpICE9IG51bGwgPyBfc2xvdHMkcGFwZXIgOiBQb3BvdmVyUGFwZXI7XG4gIGNvbnN0IHBhcGVyUHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgIGVsZW1lbnRUeXBlOiBQYXBlclNsb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IF9leHRlbmRzKHt9LCBleHRlcm5hbFBhcGVyU2xvdFByb3BzLCB7XG4gICAgICBzdHlsZTogaXNQb3NpdGlvbmVkID8gZXh0ZXJuYWxQYXBlclNsb3RQcm9wcy5zdHlsZSA6IF9leHRlbmRzKHt9LCBleHRlcm5hbFBhcGVyU2xvdFByb3BzLnN0eWxlLCB7XG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH0pXG4gICAgfSksXG4gICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICBlbGV2YXRpb24sXG4gICAgICByZWY6IGhhbmRsZVBhcGVyUmVmXG4gICAgfSxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBhcGVyLCBleHRlcm5hbFBhcGVyU2xvdFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBleHRlcm5hbFBhcGVyU2xvdFByb3BzLmNsYXNzTmFtZSlcbiAgfSk7XG4gIGNvbnN0IF91c2VTbG90UHJvcHMgPSB1c2VTbG90UHJvcHMoe1xuICAgICAgZWxlbWVudFR5cGU6IFJvb3RTbG90LFxuICAgICAgZXh0ZXJuYWxTbG90UHJvcHM6IChzbG90UHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNsb3RQcm9wcy5yb290KSB8fCB7fSxcbiAgICAgIGV4dGVybmFsRm9yd2FyZGVkUHJvcHM6IG90aGVyLFxuICAgICAgYWRkaXRpb25hbFByb3BzOiB7XG4gICAgICAgIHJlZixcbiAgICAgICAgc2xvdFByb3BzOiB7XG4gICAgICAgICAgYmFja2Ryb3A6IHtcbiAgICAgICAgICAgIGludmlzaWJsZTogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBvcGVuXG4gICAgICB9LFxuICAgICAgb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgICB9KSxcbiAgICB7XG4gICAgICBzbG90UHJvcHM6IHJvb3RTbG90UHJvcHNQcm9wXG4gICAgfSA9IF91c2VTbG90UHJvcHMsXG4gICAgcm9vdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3VzZVNsb3RQcm9wcywgX2V4Y2x1ZGVkMyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSb290U2xvdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgIWlzSG9zdENvbXBvbmVudChSb290U2xvdCkgJiYge1xuICAgIHNsb3RQcm9wczogcm9vdFNsb3RQcm9wc1Byb3AsXG4gICAgZGlzYWJsZVNjcm9sbExvY2tcbiAgfSwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICBhcHBlYXI6IHRydWUsXG4gICAgICBpbjogb3BlbixcbiAgICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICAgIHRpbWVvdXQ6IHRyYW5zaXRpb25EdXJhdGlvblxuICAgIH0sIFRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KFBhcGVyU2xvdCwgX2V4dGVuZHMoe30sIHBhcGVyUHJvcHMsIHtcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KSlcbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3BvdmVyLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIHVwZGF0ZVBvc2l0aW9uKCkgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuICAvKipcbiAgICogQW4gSFRNTCBlbGVtZW50LCBbUG9wb3ZlclZpcnR1YWxFbGVtZW50XSgvbWF0ZXJpYWwtdWkvcmVhY3QtcG9wb3Zlci8jdmlydHVhbC1lbGVtZW50KSxcbiAgICogb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBJdCdzIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvckVsOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5mdW5jXSksIHByb3BzID0+IHtcbiAgICBpZiAocHJvcHMub3BlbiAmJiAoIXByb3BzLmFuY2hvclJlZmVyZW5jZSB8fCBwcm9wcy5hbmNob3JSZWZlcmVuY2UgPT09ICdhbmNob3JFbCcpKSB7XG4gICAgICBjb25zdCByZXNvbHZlZEFuY2hvckVsID0gcmVzb2x2ZUFuY2hvckVsKHByb3BzLmFuY2hvckVsKTtcbiAgICAgIGlmIChyZXNvbHZlZEFuY2hvckVsICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgYm94ID0gcmVzb2x2ZWRBbmNob3JFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNVUk6IFRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTVVJOiBUaGUgYGFuY2hvckVsYCBwcm9wIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQgaXMgaW52YWxpZC4nLCBgSXQgc2hvdWxkIGJlIGFuIEVsZW1lbnQgb3IgUG9wb3ZlclZpcnR1YWxFbGVtZW50IGluc3RhbmNlIGJ1dCBpdCdzIFxcYCR7cmVzb2x2ZWRBbmNob3JFbH1cXGAgaW5zdGVhZC5gXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBhbmNob3Igd2hlcmUgdGhlIHBvcG92ZXInc1xuICAgKiBgYW5jaG9yRWxgIHdpbGwgYXR0YWNoIHRvLiBUaGlzIGlzIG5vdCB1c2VkIHdoZW4gdGhlXG4gICAqIGFuY2hvclJlZmVyZW5jZSBpcyAnYW5jaG9yUG9zaXRpb24nLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dO1xuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgY2VudGVyLCByaWdodF0uXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAqICAgaG9yaXpvbnRhbDogJ2xlZnQnLFxuICAgKiB9XG4gICAqL1xuICBhbmNob3JPcmlnaW46IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2xlZnQnLCAncmlnaHQnXSksIFByb3BUeXBlcy5udW1iZXJdKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnY2VudGVyJywgJ3RvcCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWRcbiAgfSksXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb3NpdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIFRoZSBjb29yZGluYXRlcyBhcmUgcmVsYXRpdmUgdG8gdGhlIGFwcGxpY2F0aW9uJ3MgY2xpZW50IGFyZWEuXG4gICAqL1xuICBhbmNob3JQb3NpdGlvbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBsZWZ0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgdG9wOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgfSksXG4gIC8qKlxuICAgKiBUaGlzIGRldGVybWluZXMgd2hpY2ggYW5jaG9yIHByb3AgdG8gcmVmZXIgdG8gd2hlbiBzZXR0aW5nXG4gICAqIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICogQGRlZmF1bHQgJ2FuY2hvckVsJ1xuICAgKi9cbiAgYW5jaG9yUmVmZXJlbmNlOiBQcm9wVHlwZXMub25lT2YoWydhbmNob3JFbCcsICdhbmNob3JQb3NpdGlvbicsICdub25lJ10pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBBbiBIVE1MIGVsZW1lbnQsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgcGFzc2VkIHRvIHRoZSBNb2RhbCBjb21wb25lbnQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIGFuY2hvckVsJ3MgdG9wLWxldmVsIGRvY3VtZW50IG9iamVjdCxcbiAgICogc28gaXQncyBzaW1wbHkgYGRvY3VtZW50LmJvZHlgIG1vc3Qgb2YgdGhlIHRpbWUuXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuZnVuY10pLFxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgc2Nyb2xsIGxvY2sgYmVoYXZpb3IuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2Nyb2xsTG9jazogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgZWxldmF0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBAZGVmYXVsdCA4XG4gICAqL1xuICBlbGV2YXRpb246IGludGVnZXJQcm9wVHlwZSxcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBob3cgY2xvc2UgdG8gdGhlIGVkZ2Ugb2YgdGhlIHdpbmRvdyB0aGUgcG9wb3ZlciBjYW4gYXBwZWFyLlxuICAgKiBJZiBudWxsLCB0aGUgcG9wb3ZlciB3aWxsIG5vdCBiZSBjb25zdHJhaW5lZCBieSB0aGUgd2luZG93LlxuICAgKiBAZGVmYXVsdCAxNlxuICAgKi9cbiAgbWFyZ2luVGhyZXNob2xkOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgUGFwZXJgXSgvbWF0ZXJpYWwtdWkvYXBpL3BhcGVyLykgZWxlbWVudC5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciBgc2xvdFByb3BzLnBhcGVyYCBhbmQgd2lsbCBiZSBvdmVycmlkZW4gYnkgaXQgaWYgYm90aCBhcmUgdXNlZC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzbG90UHJvcHMucGFwZXJgIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5zaGFwZSh7XG4gICAgY29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZlxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHBhcGVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGFwZXI6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgcG9wb3ZlciB3aGljaFxuICAgKiB3aWxsIGF0dGFjaCB0byB0aGUgYW5jaG9yJ3Mgb3JpZ2luLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b20sIHgocHgpXTtcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIGNlbnRlciwgcmlnaHQsIHgocHgpXS5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICogICBob3Jpem9udGFsOiAnbGVmdCcsXG4gICAqIH1cbiAgICovXG4gIHRyYW5zZm9ybU9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdjZW50ZXInLCAndG9wJ10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZFxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqIFtGb2xsb3cgdGhpcyBndWlkZV0oL21hdGVyaWFsLXVpL3RyYW5zaXRpb25zLyN0cmFuc2l0aW9uY29tcG9uZW50LXByb3ApIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHJlcXVpcmVtZW50cyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IEdyb3dcbiAgICovXG4gIFRyYW5zaXRpb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICogQGRlZmF1bHQgJ2F1dG8nXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIHRyYW5zaXRpb24gZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgdGhlIGVsZW1lbnQgaXMgYmFzZWQgb24gdGhpcyBbYFRyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24vKSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBQb3BvdmVyOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2hhbmdlXCIsIFwibWF4Um93c1wiLCBcIm1pblJvd3NcIiwgXCJzdHlsZVwiLCBcInZhbHVlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX2RlYm91bmNlIGFzIGRlYm91bmNlLCB1bnN0YWJsZV91c2VGb3JrUmVmIGFzIHVzZUZvcmtSZWYsIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IGFzIHVzZUVuaGFuY2VkRWZmZWN0LCB1bnN0YWJsZV9vd25lcldpbmRvdyBhcyBvd25lcldpbmRvdyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIGdldFN0eWxlVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCkgfHwgMDtcbn1cbmNvbnN0IHN0eWxlcyA9IHtcbiAgc2hhZG93OiB7XG4gICAgLy8gVmlzaWJpbGl0eSBuZWVkZWQgdG8gaGlkZSB0aGUgZXh0cmEgdGV4dCBhcmVhIG9uIGlQYWRzXG4gICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgLy8gUmVtb3ZlIGZyb20gdGhlIGNvbnRlbnQgZmxvd1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIC8vIElnbm9yZSB0aGUgc2Nyb2xsYmFyIHdpZHRoXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIGhlaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICAvLyBDcmVhdGUgYSBuZXcgbGF5ZXIsIGluY3JlYXNlIHRoZSBpc29sYXRpb24gb2YgdGhlIGNvbXB1dGVkIHZhbHVlc1xuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknXG4gIH1cbn07XG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgfHwgb2JqID09PSBudWxsIHx8IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwIHx8IG9iai5vdXRlckhlaWdodFN0eWxlID09PSAwICYmICFvYmoub3ZlcmZsb3dpbmc7XG59XG5cbi8qKlxuICpcbiAqIERlbW9zOlxuICpcbiAqIC0gW1RleHRhcmVhIEF1dG9zaXplXShodHRwczovL211aS5jb20vYmFzZS11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pXG4gKiAtIFtUZXh0YXJlYSBBdXRvc2l6ZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbVGV4dGFyZWFBdXRvc2l6ZSBBUEldKGh0dHBzOi8vbXVpLmNvbS9iYXNlLXVpL3JlYWN0LXRleHRhcmVhLWF1dG9zaXplL2NvbXBvbmVudHMtYXBpLyN0ZXh0YXJlYS1hdXRvc2l6ZSlcbiAqL1xuY29uc3QgVGV4dGFyZWFBdXRvc2l6ZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRhcmVhQXV0b3NpemUocHJvcHMsIGZvcndhcmRlZFJlZikge1xuICBjb25zdCB7XG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG1heFJvd3MsXG4gICAgICBtaW5Sb3dzID0gMSxcbiAgICAgIHN0eWxlLFxuICAgICAgdmFsdWVcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzQ29udHJvbGxlZFxuICB9ID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihmb3J3YXJkZWRSZWYsIGlucHV0UmVmKTtcbiAgY29uc3Qgc2hhZG93UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBjYWxjdWxhdGVUZXh0YXJlYVN0eWxlcyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IGlucHV0UmVmLmN1cnJlbnQ7XG4gICAgY29uc3QgY29udGFpbmVyV2luZG93ID0gb3duZXJXaW5kb3coaW5wdXQpO1xuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBjb250YWluZXJXaW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCk7XG5cbiAgICAvLyBJZiBpbnB1dCdzIHdpZHRoIGlzIHNocnVuayBhbmQgaXQncyBub3QgdmlzaWJsZSwgZG9uJ3Qgc3luYyBoZWlnaHQuXG4gICAgaWYgKGNvbXB1dGVkU3R5bGUud2lkdGggPT09ICcwcHgnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvdXRlckhlaWdodFN0eWxlOiAwLFxuICAgICAgICBvdmVyZmxvd2luZzogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGlucHV0U2hhbGxvdyA9IHNoYWRvd1JlZi5jdXJyZW50O1xuICAgIGlucHV0U2hhbGxvdy5zdHlsZS53aWR0aCA9IGNvbXB1dGVkU3R5bGUud2lkdGg7XG4gICAgaW5wdXRTaGFsbG93LnZhbHVlID0gaW5wdXQudmFsdWUgfHwgcHJvcHMucGxhY2Vob2xkZXIgfHwgJ3gnO1xuICAgIGlmIChpbnB1dFNoYWxsb3cudmFsdWUuc2xpY2UoLTEpID09PSAnXFxuJykge1xuICAgICAgLy8gQ2VydGFpbiBmb250cyB3aGljaCBvdmVyZmxvdyB0aGUgbGluZSBoZWlnaHQgd2lsbCBjYXVzZSB0aGUgdGV4dGFyZWFcbiAgICAgIC8vIHRvIHJlcG9ydCBhIGRpZmZlcmVudCBzY3JvbGxIZWlnaHQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIGxhc3QgbGluZVxuICAgICAgLy8gaXMgZW1wdHkuIE1ha2UgaXQgbm9uLWVtcHR5IHRvIGF2b2lkIHRoaXMgaXNzdWUuXG4gICAgICBpbnB1dFNoYWxsb3cudmFsdWUgKz0gJyAnO1xuICAgIH1cbiAgICBjb25zdCBib3hTaXppbmcgPSBjb21wdXRlZFN0eWxlLmJveFNpemluZztcbiAgICBjb25zdCBwYWRkaW5nID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLnBhZGRpbmdCb3R0b20pICsgZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLnBhZGRpbmdUb3ApO1xuICAgIGNvbnN0IGJvcmRlciA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCkgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUuYm9yZGVyVG9wV2lkdGgpO1xuXG4gICAgLy8gVGhlIGhlaWdodCBvZiB0aGUgaW5uZXIgY29udGVudFxuICAgIGNvbnN0IGlubmVySGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodDtcblxuICAgIC8vIE1lYXN1cmUgaGVpZ2h0IG9mIGEgdGV4dGFyZWEgd2l0aCBhIHNpbmdsZSByb3dcbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSAneCc7XG4gICAgY29uc3Qgc2luZ2xlUm93SGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodDtcblxuICAgIC8vIFRoZSBoZWlnaHQgb2YgdGhlIG91dGVyIGNvbnRlbnRcbiAgICBsZXQgb3V0ZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcbiAgICBpZiAobWluUm93cykge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChOdW1iZXIobWluUm93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG4gICAgaWYgKG1heFJvd3MpIHtcbiAgICAgIG91dGVySGVpZ2h0ID0gTWF0aC5taW4oTnVtYmVyKG1heFJvd3MpICogc2luZ2xlUm93SGVpZ2h0LCBvdXRlckhlaWdodCk7XG4gICAgfVxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7XG5cbiAgICAvLyBUYWtlIHRoZSBib3ggc2l6aW5nIGludG8gYWNjb3VudCBmb3IgYXBwbHlpbmcgdGhpcyB2YWx1ZSBhcyBhIHN0eWxlLlxuICAgIGNvbnN0IG91dGVySGVpZ2h0U3R5bGUgPSBvdXRlckhlaWdodCArIChib3hTaXppbmcgPT09ICdib3JkZXItYm94JyA/IHBhZGRpbmcgKyBib3JkZXIgOiAwKTtcbiAgICBjb25zdCBvdmVyZmxvd2luZyA9IE1hdGguYWJzKG91dGVySGVpZ2h0IC0gaW5uZXJIZWlnaHQpIDw9IDE7XG4gICAgcmV0dXJuIHtcbiAgICAgIG91dGVySGVpZ2h0U3R5bGUsXG4gICAgICBvdmVyZmxvd2luZ1xuICAgIH07XG4gIH0sIFttYXhSb3dzLCBtaW5Sb3dzLCBwcm9wcy5wbGFjZWhvbGRlcl0pO1xuICBjb25zdCBzeW5jSGVpZ2h0ID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IHRleHRhcmVhU3R5bGVzID0gY2FsY3VsYXRlVGV4dGFyZWFTdHlsZXMoKTtcbiAgICBpZiAoaXNFbXB0eSh0ZXh0YXJlYVN0eWxlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGlucHV0LnN0eWxlLmhlaWdodCA9IGAke3RleHRhcmVhU3R5bGVzLm91dGVySGVpZ2h0U3R5bGV9cHhgO1xuICAgIGlucHV0LnN0eWxlLm92ZXJmbG93ID0gdGV4dGFyZWFTdHlsZXMub3ZlcmZsb3dpbmcgPyAnaGlkZGVuJyA6ICcnO1xuICB9LCBbY2FsY3VsYXRlVGV4dGFyZWFTdHlsZXNdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9O1xuICAgIC8vIFdvcmthcm91bmQgYSBcIlJlc2l6ZU9ic2VydmVyIGxvb3AgY29tcGxldGVkIHdpdGggdW5kZWxpdmVyZWQgbm90aWZpY2F0aW9uc1wiIGVycm9yXG4gICAgLy8gaW4gdGVzdC5cbiAgICAvLyBOb3RlIHRoYXQgd2UgbWlnaHQgbmVlZCB0byB1c2UgdGhpcyBsb2dpYyBpbiBwcm9kdWN0aW9uIHBlciBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9yZXNpemUtb2JzZXJ2ZXIvaXNzdWVzLzM4XG4gICAgLy8gQWxzbyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tdWkteC9pc3N1ZXMvODczM1xuICAgIGxldCByQUY7XG4gICAgY29uc3QgckFGSGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUockFGKTtcbiAgICAgIHJBRiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGhhbmRsZVJlc2l6ZSgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBkZWJvdW5jZUhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGhhbmRsZVJlc2l6ZSk7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KGlucHV0KTtcbiAgICBjb250YWluZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2VIYW5kbGVSZXNpemUpO1xuICAgIGxldCByZXNpemVPYnNlcnZlcjtcbiAgICBpZiAodHlwZW9mIFJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/IHJBRkhhbmRsZVJlc2l6ZSA6IGhhbmRsZVJlc2l6ZSk7XG4gICAgICByZXNpemVPYnNlcnZlci5vYnNlcnZlKGlucHV0KTtcbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRlYm91bmNlSGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyQUYpO1xuICAgICAgY29udGFpbmVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGRlYm91bmNlSGFuZGxlUmVzaXplKTtcbiAgICAgIGlmIChyZXNpemVPYnNlcnZlcikge1xuICAgICAgICByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2NhbGN1bGF0ZVRleHRhcmVhU3R5bGVzLCBzeW5jSGVpZ2h0XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBzeW5jSGVpZ2h0KCk7XG4gIH0pO1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9XG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChcInRleHRhcmVhXCIsIF9leHRlbmRzKHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgICAgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAgICxcbiAgICAgIHJvd3M6IG1pblJvd3MsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovX2pzeChcInRleHRhcmVhXCIsIHtcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICByZWY6IHNoYWRvd1JlZixcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7fSwgc3R5bGVzLnNoYWRvdywgc3R5bGUsIHtcbiAgICAgICAgcGFkZGluZ1RvcDogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogMFxuICAgICAgfSlcbiAgICB9KV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhQXV0b3NpemUucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4g4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgbWF4Um93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgeyBUZXh0YXJlYUF1dG9zaXplIH07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gIHByb3BzLFxuICBzdGF0ZXMsXG4gIG11aUZvcm1Db250cm9sXG59KSB7XG4gIHJldHVybiBzdGF0ZXMucmVkdWNlKChhY2MsIHN0YXRlKSA9PiB7XG4gICAgYWNjW3N0YXRlXSA9IHByb3BzW3N0YXRlXTtcbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbc3RhdGVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhY2Nbc3RhdGVdID0gbXVpRm9ybUNvbnRyb2xbc3RhdGVdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBGb3JtQ29udHJvbENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRm9ybUNvbnRyb2xDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Zvcm1Db250cm9sQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbENvbnRleHQ7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4vRm9ybUNvbnRyb2xDb250ZXh0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcm1Db250cm9sKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChGb3JtQ29udHJvbENvbnRleHQpO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyBhcyBNdWlHbG9iYWxTdHlsZXMgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBHbG9iYWxTdHlsZXMoe1xuICBzdHlsZXMsXG4gIHRoZW1lSWQsXG4gIGRlZmF1bHRUaGVtZSA9IHt9XG59KSB7XG4gIGNvbnN0IHVwcGVyVGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuICBjb25zdCBnbG9iYWxTdHlsZXMgPSB0eXBlb2Ygc3R5bGVzID09PSAnZnVuY3Rpb24nID8gc3R5bGVzKHRoZW1lSWQgPyB1cHBlclRoZW1lW3RoZW1lSWRdIHx8IHVwcGVyVGhlbWUgOiB1cHBlclRoZW1lKSA6IHN0eWxlcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE11aUdsb2JhbFN0eWxlcywge1xuICAgIHN0eWxlczogZ2xvYmFsU3R5bGVzXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRlZmF1bHRUaGVtZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlczogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWVJZDogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFN0eWxlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyBhcyBTeXN0ZW1HbG9iYWxTdHlsZXMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4uL3N0eWxlcy9kZWZhdWx0VGhlbWUnO1xuaW1wb3J0IFRIRU1FX0lEIGZyb20gJy4uL3N0eWxlcy9pZGVudGlmaWVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBHbG9iYWxTdHlsZXMocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN5c3RlbUdsb2JhbFN0eWxlcywgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWUsXG4gICAgdGhlbWVJZDogVEhFTUVfSURcbiAgfSkpO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBzdHlsZXMgeW91IHdhbnQgdG8gYXBwbHkgZ2xvYmFsbHkuXG4gICAqL1xuICBzdHlsZXM6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmJvb2xdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEdsb2JhbFN0eWxlczsiLCIvLyBTdXBwb3J0cyBkZXRlcm1pbmF0aW9uIG9mIGlzQ29udHJvbGxlZCgpLlxuLy8gQ29udHJvbGxlZCBpbnB1dCBhY2NlcHRzIGl0cyBjdXJyZW50IHZhbHVlIGFzIGEgcHJvcC5cbi8vXG4vLyBAc2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZm9ybXMuaHRtbCNjb250cm9sbGVkLWNvbXBvbmVudHNcbi8vIEBwYXJhbSB2YWx1ZVxuLy8gQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgc3RyaW5nIChpbmNsdWRpbmcgJycpIG9yIG51bWJlciAoaW5jbHVkaW5nIHplcm8pXG5leHBvcnQgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xufVxuXG4vLyBEZXRlcm1pbmUgaWYgZmllbGQgaXMgZW1wdHkgb3IgZmlsbGVkLlxuLy8gUmVzcG9uc2UgZGV0ZXJtaW5lcyBpZiBsYWJlbCBpcyBwcmVzZW50ZWQgYWJvdmUgZmllbGQgb3IgYXMgcGxhY2Vob2xkZXIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHBhcmFtIFNTUlxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm90IHByZXNlbnQgb3IgZW1wdHkgc3RyaW5nLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhbnkgbnVtYmVyIG9yIHN0cmluZyB3aXRoIGxlbmd0aC5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGxlZChvYmosIFNTUiA9IGZhbHNlKSB7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufVxuXG4vLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fkb3JuZWRTdGFydChvYmopIHtcbiAgcmV0dXJuIG9iai5zdGFydEFkb3JubWVudDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0QmFzZVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXRCYXNlJywgc2xvdCk7XG59XG5jb25zdCBpbnB1dEJhc2VDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpSW5wdXRCYXNlJywgWydyb290JywgJ2Zvcm1Db250cm9sJywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnYWRvcm5lZFN0YXJ0JywgJ2Fkb3JuZWRFbmQnLCAnZXJyb3InLCAnc2l6ZVNtYWxsJywgJ211bHRpbGluZScsICdjb2xvclNlY29uZGFyeScsICdmdWxsV2lkdGgnLCAnaGlkZGVuTGFiZWwnLCAncmVhZE9ubHknLCAnaW5wdXQnLCAnaW5wdXRTaXplU21hbGwnLCAnaW5wdXRNdWx0aWxpbmUnLCAnaW5wdXRUeXBlU2VhcmNoJywgJ2lucHV0QWRvcm5lZFN0YXJ0JywgJ2lucHV0QWRvcm5lZEVuZCcsICdpbnB1dEhpZGRlbkxhYmVsJ10pO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRCYXNlQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiQG11aS91dGlscy9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFyaWEtZGVzY3JpYmVkYnlcIiwgXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudHNcIiwgXCJjb21wb25lbnRzUHJvcHNcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVJbmplY3RpbmdHbG9iYWxTdHlsZXNcIiwgXCJlbmRBZG9ybm1lbnRcIiwgXCJlcnJvclwiLCBcImZ1bGxXaWR0aFwiLCBcImlkXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJpbnB1dFByb3BzXCIsIFwiaW5wdXRSZWZcIiwgXCJtYXJnaW5cIiwgXCJtYXhSb3dzXCIsIFwibWluUm93c1wiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJTdWZmaXhcIiwgXCJyb3dzXCIsIFwic2l6ZVwiLCBcInNsb3RQcm9wc1wiLCBcInNsb3RzXCIsIFwic3RhcnRBZG9ybm1lbnRcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYgZnJvbSAnQG11aS91dGlscy9lbGVtZW50VHlwZUFjY2VwdGluZ1JlZic7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IHsgVGV4dGFyZWFBdXRvc2l6ZSB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBpc0hvc3RDb21wb25lbnQgfSBmcm9tICdAbXVpL2Jhc2UvdXRpbHMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0IGZyb20gJy4uL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sQ29udGV4dCc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRW5oYW5jZWRFZmZlY3QgZnJvbSAnLi4vdXRpbHMvdXNlRW5oYW5jZWRFZmZlY3QnO1xuaW1wb3J0IEdsb2JhbFN0eWxlcyBmcm9tICcuLi9HbG9iYWxTdHlsZXMnO1xuaW1wb3J0IHsgaXNGaWxsZWQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBpbnB1dEJhc2VDbGFzc2VzLCB7IGdldElucHV0QmFzZVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vaW5wdXRCYXNlQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IHJvb3RPdmVycmlkZXNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5mb3JtQ29udHJvbCAmJiBzdHlsZXMuZm9ybUNvbnRyb2wsIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYgc3R5bGVzLmFkb3JuZWRTdGFydCwgb3duZXJTdGF0ZS5lbmRBZG9ybm1lbnQgJiYgc3R5bGVzLmFkb3JuZWRFbmQsIG93bmVyU3RhdGUuZXJyb3IgJiYgc3R5bGVzLmVycm9yLCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgc3R5bGVzLnNpemVTbWFsbCwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgc3R5bGVzLm11bHRpbGluZSwgb3duZXJTdGF0ZS5jb2xvciAmJiBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoLCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHN0eWxlcy5oaWRkZW5MYWJlbF07XG59O1xuZXhwb3J0IGNvbnN0IGlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcykgPT4ge1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBbc3R5bGVzLmlucHV0LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYgc3R5bGVzLmlucHV0U2l6ZVNtYWxsLCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBzdHlsZXMuaW5wdXRNdWx0aWxpbmUsIG93bmVyU3RhdGUudHlwZSA9PT0gJ3NlYXJjaCcgJiYgc3R5bGVzLmlucHV0VHlwZVNlYXJjaCwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiBzdHlsZXMuaW5wdXRBZG9ybmVkU3RhcnQsIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHN0eWxlcy5pbnB1dEFkb3JuZWRFbmQsIG93bmVyU3RhdGUuaGlkZGVuTGFiZWwgJiYgc3R5bGVzLmlucHV0SGlkZGVuTGFiZWxdO1xufTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGVuZEFkb3JubWVudCxcbiAgICBmb2N1c2VkLFxuICAgIGZvcm1Db250cm9sLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbCxcbiAgICBtdWx0aWxpbmUsXG4gICAgcmVhZE9ubHksXG4gICAgc2l6ZSxcbiAgICBzdGFydEFkb3JubWVudCxcbiAgICB0eXBlXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIGRpc2FibGVkICYmICdkaXNhYmxlZCcsIGVycm9yICYmICdlcnJvcicsIGZ1bGxXaWR0aCAmJiAnZnVsbFdpZHRoJywgZm9jdXNlZCAmJiAnZm9jdXNlZCcsIGZvcm1Db250cm9sICYmICdmb3JtQ29udHJvbCcsIHNpemUgJiYgc2l6ZSAhPT0gJ21lZGl1bScgJiYgYHNpemUke2NhcGl0YWxpemUoc2l6ZSl9YCwgbXVsdGlsaW5lICYmICdtdWx0aWxpbmUnLCBzdGFydEFkb3JubWVudCAmJiAnYWRvcm5lZFN0YXJ0JywgZW5kQWRvcm5tZW50ICYmICdhZG9ybmVkRW5kJywgaGlkZGVuTGFiZWwgJiYgJ2hpZGRlbkxhYmVsJywgcmVhZE9ubHkgJiYgJ3JlYWRPbmx5J10sXG4gICAgaW5wdXQ6IFsnaW5wdXQnLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCB0eXBlID09PSAnc2VhcmNoJyAmJiAnaW5wdXRUeXBlU2VhcmNoJywgbXVsdGlsaW5lICYmICdpbnB1dE11bHRpbGluZScsIHNpemUgPT09ICdzbWFsbCcgJiYgJ2lucHV0U2l6ZVNtYWxsJywgaGlkZGVuTGFiZWwgJiYgJ2lucHV0SGlkZGVuTGFiZWwnLCBzdGFydEFkb3JubWVudCAmJiAnaW5wdXRBZG9ybmVkU3RhcnQnLCBlbmRBZG9ybm1lbnQgJiYgJ2lucHV0QWRvcm5lZEVuZCcsIHJlYWRPbmx5ICYmICdyZWFkT25seSddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0SW5wdXRCYXNlVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgSW5wdXRCYXNlUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogcm9vdE92ZXJyaWRlc1Jlc29sdmVyXG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgbGluZUhlaWdodDogJzEuNDM3NWVtJyxcbiAgLy8gMjNweFxuICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggZnVsbFdpZHRoLlxuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgY3Vyc29yOiAndGV4dCcsXG4gIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICBbYCYuJHtpbnB1dEJhc2VDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWQsXG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfVxufSwgb3duZXJTdGF0ZS5tdWx0aWxpbmUgJiYgX2V4dGVuZHMoe1xuICBwYWRkaW5nOiAnNHB4IDAgNXB4J1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgcGFkZGluZ1RvcDogMVxufSksIG93bmVyU3RhdGUuZnVsbFdpZHRoICYmIHtcbiAgd2lkdGg6ICcxMDAlJ1xufSkpO1xuZXhwb3J0IGNvbnN0IElucHV0QmFzZUNvbXBvbmVudCA9IHN0eWxlZCgnaW5wdXQnLCB7XG4gIG5hbWU6ICdNdWlJbnB1dEJhc2UnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IHBsYWNlaG9sZGVyID0gX2V4dGVuZHMoe1xuICAgIGNvbG9yOiAnY3VycmVudENvbG9yJ1xuICB9LCB0aGVtZS52YXJzID8ge1xuICAgIG9wYWNpdHk6IHRoZW1lLnZhcnMub3BhY2l0eS5pbnB1dFBsYWNlaG9sZGVyXG4gIH0gOiB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH0sIHtcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH0pO1xuICBjb25zdCBwbGFjZWhvbGRlckhpZGRlbiA9IHtcbiAgICBvcGFjaXR5OiAnMCAhaW1wb3J0YW50J1xuICB9O1xuICBjb25zdCBwbGFjZWhvbGRlclZpc2libGUgPSB0aGVtZS52YXJzID8ge1xuICAgIG9wYWNpdHk6IHRoZW1lLnZhcnMub3BhY2l0eS5pbnB1dFBsYWNlaG9sZGVyXG4gIH0gOiB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZm9udDogJ2luaGVyaXQnLFxuICAgIGxldHRlclNwYWNpbmc6ICdpbmhlcml0JyxcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgcGFkZGluZzogJzRweCAwIDVweCcsXG4gICAgYm9yZGVyOiAwLFxuICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgaGVpZ2h0OiAnMS40Mzc1ZW0nLFxuICAgIC8vIFJlc2V0IDIzcHh0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlc2V0IGZvciBTYWZhcmlcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIC8vIE1ha2UgdGhlIGZsZXggaXRlbSBzaHJpbmsgd2l0aCBGaXJlZm94XG4gICAgbWluV2lkdGg6IDAsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICAvLyBGaXggSUUxMSB3aWR0aCBpc3N1ZVxuICAgIGFuaW1hdGlvbk5hbWU6ICdtdWktYXV0by1maWxsLWNhbmNlbCcsXG4gICAgYW5pbWF0aW9uRHVyYXRpb246ICcxMG1zJyxcbiAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgLy8gRmlyZWZveCAxOStcbiAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAvLyBJRTExXG4gICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgIC8vIEVkZ2VcbiAgICAnJjpmb2N1cyc6IHtcbiAgICAgIG91dGxpbmU6IDBcbiAgICB9LFxuICAgIC8vIFJlc2V0IEZpcmVmb3ggaW52YWxpZCByZXF1aXJlZCBpbnB1dCBzdHlsZVxuICAgICcmOmludmFsaWQnOiB7XG4gICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgIH0sXG4gICAgJyY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24nOiB7XG4gICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJ1xuICAgIH0sXG4gICAgLy8gU2hvdyBhbmQgaGlkZSB0aGUgcGxhY2Vob2xkZXIgbG9naWNcbiAgICBbYGxhYmVsW2RhdGEtc2hyaW5rPWZhbHNlXSArIC4ke2lucHV0QmFzZUNsYXNzZXMuZm9ybUNvbnRyb2x9ICZgXToge1xuICAgICAgJyY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgJyY6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBJRTExXG4gICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAvLyBFZGdlXG4gICAgICAnJjpmb2N1czo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOmZvY3VzOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgIC8vIElFMTFcbiAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRCYXNlQ2xhc3Nlcy5kaXNhYmxlZH1gXToge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIC8vIFJlc2V0IGlPUyBvcGFjaXR5XG4gICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LmRpc2FibGVkIC8vIEZpeCBvcGFjaXR5IFNhZmFyaSBidWdcbiAgICB9LFxuICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogJzUwMDBzJyxcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICdtdWktYXV0by1maWxsJ1xuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgICBwYWRkaW5nVG9wOiAxXG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICByZXNpemU6ICdub25lJyxcbiAgICBwYWRkaW5nOiAwLFxuICAgIHBhZGRpbmdUb3A6IDBcbiAgfSwgb3duZXJTdGF0ZS50eXBlID09PSAnc2VhcmNoJyAmJiB7XG4gICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICBNb3pBcHBlYXJhbmNlOiAndGV4dGZpZWxkJ1xuICB9KTtcbn0pO1xuY29uc3QgaW5wdXRHbG9iYWxTdHlsZXMgPSAvKiNfX1BVUkVfXyovX2pzeChHbG9iYWxTdHlsZXMsIHtcbiAgc3R5bGVzOiB7XG4gICAgJ0BrZXlmcmFtZXMgbXVpLWF1dG8tZmlsbCc6IHtcbiAgICAgIGZyb206IHtcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLWF1dG8tZmlsbC1jYW5jZWwnOiB7XG4gICAgICBmcm9tOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuXG4vKipcbiAqIGBJbnB1dEJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhbiBpbnB1dC5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBzdGF0ZSBsb2dpYy5cbiAqL1xuY29uc3QgSW5wdXRCYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKGluUHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RQcm9wcyRpbnB1dDtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBhdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHMgPSB7fSxcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyxcbiAgICAgIGVuZEFkb3JubWVudCxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgaWQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzUHJvcCA9IHt9LFxuICAgICAgaW5wdXRSZWY6IGlucHV0UmVmUHJvcCxcbiAgICAgIG1heFJvd3MsXG4gICAgICBtaW5Sb3dzLFxuICAgICAgbXVsdGlsaW5lID0gZmFsc2UsXG4gICAgICBuYW1lLFxuICAgICAgb25CbHVyLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNsaWNrLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAsXG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIHJlYWRPbmx5LFxuICAgICAgcmVuZGVyU3VmZml4LFxuICAgICAgcm93cyxcbiAgICAgIHNsb3RQcm9wcyA9IHt9LFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgICAgdHlwZSA9ICd0ZXh0JyxcbiAgICAgIHZhbHVlOiB2YWx1ZVByb3BcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgdmFsdWUgPSBpbnB1dFByb3BzUHJvcC52YWx1ZSAhPSBudWxsID8gaW5wdXRQcm9wc1Byb3AudmFsdWUgOiB2YWx1ZVByb3A7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZih2YWx1ZSAhPSBudWxsKTtcbiAgY29uc3QgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgY29uc3QgaGFuZGxlSW5wdXRSZWZXYXJuaW5nID0gUmVhY3QudXNlQ2FsbGJhY2soaW5zdGFuY2UgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2Uubm9kZU5hbWUgIT09ICdJTlBVVCcgJiYgIWluc3RhbmNlLmZvY3VzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYGlucHV0Q29tcG9uZW50YCB0byB0aGUgaW5wdXQgY29tcG9uZW50JywgJ3RoYXQgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSB0aGUgYHJlZmAgcHJvcC4nLCAnTWFrZSBzdXJlIHRoZSBgcmVmYCBwcm9wIGlzIGNhbGxlZCB3aXRoIGEgSFRNTElucHV0RWxlbWVudC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZUlucHV0UmVmID0gdXNlRm9ya1JlZihpbnB1dFJlZiwgaW5wdXRSZWZQcm9wLCBpbnB1dFByb3BzUHJvcC5yZWYsIGhhbmRsZUlucHV0UmVmV2FybmluZyk7XG4gIGNvbnN0IFtmb2N1c2VkLCBzZXRGb2N1c2VkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIG11aUZvcm1Db250cm9sLnJlZ2lzdGVyRWZmZWN0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sIFttdWlGb3JtQ29udHJvbF0pO1xuICB9XG4gIGNvbnN0IGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdkaXNhYmxlZCcsICdlcnJvcicsICdoaWRkZW5MYWJlbCcsICdzaXplJywgJ3JlcXVpcmVkJywgJ2ZpbGxlZCddXG4gIH0pO1xuICBmY3MuZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IGZvY3VzZWQ7XG5cbiAgLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAvLyBXZSBuZWVkIHRvIGJvb2sga2VlcCB0aGUgZm9jdXNlZCBzdGF0ZSBtYW51YWxseS5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIW11aUZvcm1Db250cm9sICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgaWYgKG9uQmx1cikge1xuICAgICAgICBvbkJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgZGlzYWJsZWQsIGZvY3VzZWQsIG9uQmx1cl0pO1xuICBjb25zdCBvbkZpbGxlZCA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRmlsbGVkO1xuICBjb25zdCBvbkVtcHR5ID0gbXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eTtcbiAgY29uc3QgY2hlY2tEaXJ0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKG9iaiA9PiB7XG4gICAgaWYgKGlzRmlsbGVkKG9iaikpIHtcbiAgICAgIGlmIChvbkZpbGxlZCkge1xuICAgICAgICBvbkZpbGxlZCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25FbXB0eSkge1xuICAgICAgb25FbXB0eSgpO1xuICAgIH1cbiAgfSwgW29uRmlsbGVkLCBvbkVtcHR5XSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaXNDb250cm9sbGVkKSB7XG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3ZhbHVlLCBjaGVja0RpcnR5LCBpc0NvbnRyb2xsZWRdKTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBldmVudCA9PiB7XG4gICAgLy8gRml4IGEgYnVnIHdpdGggSUUxMSB3aGVyZSB0aGUgZm9jdXMvYmx1ciBldmVudHMgYXJlIHRyaWdnZXJlZFxuICAgIC8vIHdoaWxlIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAgaWYgKGZjcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uRm9jdXMpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25Gb2N1cykge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25Gb2N1cyhldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkJsdXIpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQmx1cihldmVudCk7XG4gICAgfVxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cihldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcbiAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IEV4cGVjdGVkIHZhbGlkIGlucHV0IHRhcmdldC4gRGlkIHlvdSB1c2UgYSBjdXN0b20gXFxgaW5wdXRDb21wb25lbnRcXGAgYW5kIGZvcmdldCB0byBmb3J3YXJkIHJlZnM/IFNlZSBodHRwczovL211aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEpKTtcbiAgICAgIH1cbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogZWxlbWVudC52YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkNoYW5nZSkge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25DaGFuZ2UoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgdGhlIGlucHV0IHN0YXRlIG9uIG1vdW50LCBpbiBjYXNlIGl0IHdhcyBmaWxsZWQgYnkgdGhlIHVzZXJcbiAgLy8gb3IgYXV0byBmaWxsZWQgYnkgdGhlIGJyb3dzZXIgYmVmb3JlIHRoZSBoeWRyYXRpb24gKGZvciBTU1IpLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNoZWNrRGlydHkoaW5wdXRSZWYuY3VycmVudCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gZXZlbnQgPT4ge1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgaW5wdXRSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuICBsZXQgSW5wdXRDb21wb25lbnQgPSBpbnB1dENvbXBvbmVudDtcbiAgbGV0IGlucHV0UHJvcHMgPSBpbnB1dFByb3BzUHJvcDtcbiAgaWYgKG11bHRpbGluZSAmJiBJbnB1dENvbXBvbmVudCA9PT0gJ2lucHV0Jykge1xuICAgIGlmIChyb3dzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAobWluUm93cyB8fCBtYXhSb3dzKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdNVUk6IFlvdSBjYW4gbm90IHVzZSB0aGUgYG1pblJvd3NgIG9yIGBtYXhSb3dzYCBwcm9wcyB3aGVuIHRoZSBpbnB1dCBgcm93c2AgcHJvcCBpcyBzZXQuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgbWluUm93czogcm93cyxcbiAgICAgICAgbWF4Um93czogcm93c1xuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4Um93cyxcbiAgICAgICAgbWluUm93c1xuICAgICAgfSwgaW5wdXRQcm9wcyk7XG4gICAgfVxuICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgfVxuICBjb25zdCBoYW5kbGVBdXRvRmlsbCA9IGV2ZW50ID0+IHtcbiAgICAvLyBQcm92aWRlIGEgZmFrZSB2YWx1ZSBhcyBDaHJvbWUgbWlnaHQgbm90IGxldCB5b3UgYWNjZXNzIGl0IGZvciBzZWN1cml0eSByZWFzb25zLlxuICAgIGNoZWNrRGlydHkoZXZlbnQuYW5pbWF0aW9uTmFtZSA9PT0gJ211aS1hdXRvLWZpbGwtY2FuY2VsJyA/IGlucHV0UmVmLmN1cnJlbnQgOiB7XG4gICAgICB2YWx1ZTogJ3gnXG4gICAgfSk7XG4gIH07XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5zZXRBZG9ybmVkU3RhcnQoQm9vbGVhbihzdGFydEFkb3JubWVudCkpO1xuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBzdGFydEFkb3JubWVudF0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3I6IGZjcy5jb2xvciB8fCAncHJpbWFyeScsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlbmRBZG9ybm1lbnQsXG4gICAgZXJyb3I6IGZjcy5lcnJvcixcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICBmb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgZnVsbFdpZHRoLFxuICAgIGhpZGRlbkxhYmVsOiBmY3MuaGlkZGVuTGFiZWwsXG4gICAgbXVsdGlsaW5lLFxuICAgIHNpemU6IGZjcy5zaXplLFxuICAgIHN0YXJ0QWRvcm5tZW50LFxuICAgIHR5cGVcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgUm9vdCA9IHNsb3RzLnJvb3QgfHwgY29tcG9uZW50cy5Sb290IHx8IElucHV0QmFzZVJvb3Q7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHNsb3RQcm9wcy5yb290IHx8IGNvbXBvbmVudHNQcm9wcy5yb290IHx8IHt9O1xuICBjb25zdCBJbnB1dCA9IHNsb3RzLmlucHV0IHx8IGNvbXBvbmVudHMuSW5wdXQgfHwgSW5wdXRCYXNlQ29tcG9uZW50O1xuICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHMsIChfc2xvdFByb3BzJGlucHV0ID0gc2xvdFByb3BzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RQcm9wcyRpbnB1dCA6IGNvbXBvbmVudHNQcm9wcy5pbnB1dCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWyFkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzICYmIGlucHV0R2xvYmFsU3R5bGVzLCAvKiNfX1BVUkVfXyovX2pzeHMoUm9vdCwgX2V4dGVuZHMoe30sIHJvb3RQcm9wcywgIWlzSG9zdENvbXBvbmVudChSb290KSAmJiB7XG4gICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgcm9vdFByb3BzLm93bmVyU3RhdGUpXG4gICAgfSwge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgIH0sIG90aGVyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCByb290UHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUsIHJlYWRPbmx5ICYmICdNdWlJbnB1dEJhc2UtcmVhZE9ubHknKSxcbiAgICAgIGNoaWxkcmVuOiBbc3RhcnRBZG9ybm1lbnQsIC8qI19fUFVSRV9fKi9fanN4KEZvcm1Db250cm9sQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KElucHV0LCBfZXh0ZW5kcyh7XG4gICAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgICBcImFyaWEtaW52YWxpZFwiOiBmY3MuZXJyb3IsXG4gICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBvbkFuaW1hdGlvblN0YXJ0OiBoYW5kbGVBdXRvRmlsbCxcbiAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICAgICAgICBvbktleVVwOiBvbktleVVwLFxuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSwgaW5wdXRQcm9wcywgIWlzSG9zdENvbXBvbmVudChJbnB1dCkgJiYge1xuICAgICAgICAgIGFzOiBJbnB1dENvbXBvbmVudCxcbiAgICAgICAgICBvd25lclN0YXRlOiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZSwgaW5wdXRQcm9wcy5vd25lclN0YXRlKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgcmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pbnB1dCwgaW5wdXRQcm9wcy5jbGFzc05hbWUsIHJlYWRPbmx5ICYmICdNdWlJbnB1dEJhc2UtcmVhZE9ubHknKSxcbiAgICAgICAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICBvbkZvY3VzOiBoYW5kbGVGb2N1c1xuICAgICAgICB9KSlcbiAgICAgIH0pLCBlbmRBZG9ybm1lbnQsIHJlbmRlclN1ZmZpeCA/IHJlbmRlclN1ZmZpeChfZXh0ZW5kcyh7fSwgZmNzLCB7XG4gICAgICAgIHN0YXJ0QWRvcm5tZW50XG4gICAgICB9KSkgOiBudWxsXVxuICAgIH0pKV1cbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ3ByaW1hcnknYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgR2xvYmFsU3R5bGVzIGZvciB0aGUgYXV0by1maWxsIGtleWZyYW1lcyB3aWxsIG5vdCBiZSBpbmplY3RlZC9yZW1vdmVkIG9uIG1vdW50L3VubW91bnQuIE1ha2Ugc3VyZSB0byBpbmplY3QgdGhlbSBhdCB0aGUgdG9wIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqIFRoaXMgb3B0aW9uIGlzIGludGVuZGVkIHRvIGhlbHAgd2l0aCBib29zdGluZyB0aGUgaW5pdGlhbCByZW5kZXJpbmcgcGVyZm9ybWFuY2UgaWYgeW91IGFyZSBsb2FkaW5nIGEgYmlnIGFtb3VudCBvZiBJbnB1dCBjb21wb25lbnRzIGF0IG9uY2UuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSW5qZWN0aW5nR2xvYmFsU3R5bGVzOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZnVsbFdpZHRoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbnB1dCdcbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZixcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIFtUZXh0YXJlYUF1dG9zaXplXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvKSBlbGVtZW50IGlzIHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgYGlucHV0YCBpcyBibHVycmVkLlxuICAgKlxuICAgKiBOb3RpY2UgdGhhdCB0aGUgZmlyc3QgYXJndW1lbnQgKGV2ZW50KSBtaWdodCBiZSB1bmRlZmluZWQuXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGBpbnB1dGAgZG9lc24ndCBzYXRpc2Z5IGl0cyBjb25zdHJhaW50cy5cbiAgICovXG4gIG9uSW52YWxpZDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlbmRlclN1ZmZpeDogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IElucHV0QmFzZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5pbXBvcnQgeyBpbnB1dEJhc2VDbGFzc2VzIH0gZnJvbSAnLi4vSW5wdXRCYXNlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnB1dFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXQnLCBzbG90KTtcbn1cbmNvbnN0IGlucHV0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBpbnB1dEJhc2VDbGFzc2VzLCBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJbnB1dCcsIFsncm9vdCcsICd1bmRlcmxpbmUnLCAnaW5wdXQnXSkpO1xuZXhwb3J0IGRlZmF1bHQgaW5wdXRDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImRpc2FibGVVbmRlcmxpbmVcIiwgXCJjb21wb25lbnRzXCIsIFwiY29tcG9uZW50c1Byb3BzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBpbnB1dENsYXNzZXMsIHsgZ2V0SW5wdXRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2lucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpSW5wdXQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFsuLi5pbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHN0eWxlcyksICFvd25lclN0YXRlLmRpc2FibGVVbmRlcmxpbmUgJiYgc3R5bGVzLnVuZGVybGluZV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnO1xuICBsZXQgYm90dG9tTGluZUNvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjQyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJztcbiAgaWYgKHRoZW1lLnZhcnMpIHtcbiAgICBib3R0b21MaW5lQ29sb3IgPSBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5jb21tb24ub25CYWNrZ3JvdW5kQ2hhbm5lbH0gLyAke3RoZW1lLnZhcnMub3BhY2l0eS5pbnB1dFVuZGVybGluZX0pYDtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gIH0sIG93bmVyU3RhdGUuZm9ybUNvbnRyb2wgJiYge1xuICAgICdsYWJlbCArICYnOiB7XG4gICAgICBtYXJnaW5Ub3A6IDE2XG4gICAgfVxuICB9LCAhb3duZXJTdGF0ZS5kaXNhYmxlVW5kZXJsaW5lICYmIHtcbiAgICAnJjo6YWZ0ZXInOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAycHggc29saWQgJHsodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWlufWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG4gICAgfSxcbiAgICBbYCYuJHtpbnB1dENsYXNzZXMuZm9jdXNlZH06YWZ0ZXJgXToge1xuICAgICAgLy8gdHJhbnNsYXRlWCgwKSBpcyBhIHdvcmthcm91bmQgZm9yIFNhZmFyaSB0cmFuc2Zvcm0gc2NhbGUgYnVnXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMzE3NjZcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSB0cmFuc2xhdGVYKDApJ1xuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgICAnJjo6YmVmb3JlLCAmOjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9LFxuICAgICcmOjpiZWZvcmUnOiB7XG4gICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHtib3R0b21MaW5lQ29sb3J9YCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRTExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuICAgIH0sXG4gICAgW2AmOmhvdmVyOm5vdCguJHtpbnB1dENsYXNzZXMuZGlzYWJsZWR9LCAuJHtpbnB1dENsYXNzZXMuZXJyb3J9KTpiZWZvcmVgXToge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7KHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUudGV4dC5wcmltYXJ5fWAsXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IGAxcHggc29saWQgJHtib3R0b21MaW5lQ29sb3J9YFxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7aW5wdXRDbGFzc2VzLmRpc2FibGVkfTpiZWZvcmVgXToge1xuICAgICAgYm9yZGVyQm90dG9tU3R5bGU6ICdkb3R0ZWQnXG4gICAgfVxuICB9KTtcbn0pO1xuY29uc3QgSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoe30pO1xuY29uc3QgSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJGlucHV0O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlJbnB1dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGRpc2FibGVVbmRlcmxpbmUsXG4gICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICBjb21wb25lbnRzUHJvcHM6IGNvbXBvbmVudHNQcm9wc1Byb3AsXG4gICAgICBmdWxsV2lkdGggPSBmYWxzZSxcbiAgICAgIGlucHV0Q29tcG9uZW50ID0gJ2lucHV0JyxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgc2xvdFByb3BzLFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHR5cGUgPSAndGV4dCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKHByb3BzKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IHtcbiAgICBkaXNhYmxlVW5kZXJsaW5lXG4gIH07XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50c1Byb3BzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNvbXBvbmVudHNQcm9wcyA9IChzbG90UHJvcHMgIT0gbnVsbCA/IHNsb3RQcm9wcyA6IGNvbXBvbmVudHNQcm9wc1Byb3ApID8gZGVlcG1lcmdlKHNsb3RQcm9wcyAhPSBudWxsID8gc2xvdFByb3BzIDogY29tcG9uZW50c1Byb3BzUHJvcCwgaW5wdXRDb21wb25lbnRzUHJvcHMpIDogaW5wdXRDb21wb25lbnRzUHJvcHM7XG4gIGNvbnN0IFJvb3RTbG90ID0gKF9yZWYgPSAoX3Nsb3RzJHJvb3QgPSBzbG90cy5yb290KSAhPSBudWxsID8gX3Nsb3RzJHJvb3QgOiBjb21wb25lbnRzLlJvb3QpICE9IG51bGwgPyBfcmVmIDogSW5wdXRSb290O1xuICBjb25zdCBJbnB1dFNsb3QgPSAoX3JlZjIgPSAoX3Nsb3RzJGlucHV0ID0gc2xvdHMuaW5wdXQpICE9IG51bGwgPyBfc2xvdHMkaW5wdXQgOiBjb21wb25lbnRzLklucHV0KSAhPSBudWxsID8gX3JlZjIgOiBJbnB1dElucHV0O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgc2xvdHM6IHtcbiAgICAgIHJvb3Q6IFJvb3RTbG90LFxuICAgICAgaW5wdXQ6IElucHV0U2xvdFxuICAgIH0sXG4gICAgc2xvdFByb3BzOiBjb21wb25lbnRzUHJvcHMsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgc2xvdFByb3BzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RQcm9wc2AgcHJvcCBpbnN0ZWFkLCBhcyBgY29tcG9uZW50c1Byb3BzYCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNvbXBvbmVudHNQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgZGlzYWJsZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5wdXQnXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBjb21wb25lbnRzUHJvcHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdFByb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB1c2VkIGZvciBlYWNoIHNsb3QgaW5zaWRlLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c2AgcHJvcCwgd2hpY2ggd2lsbCBiZSBkZXByZWNhdGVkIGluIHRoZSBmdXR1cmUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKiBAZGVmYXVsdCAndGV4dCdcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IHsgaW5wdXRCYXNlQ2xhc3NlcyB9IGZyb20gJy4uL0lucHV0QmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsbGVkSW5wdXRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZpbGxlZElucHV0Jywgc2xvdCk7XG59XG5jb25zdCBmaWxsZWRJbnB1dENsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgaW5wdXRCYXNlQ2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpRmlsbGVkSW5wdXQnLCBbJ3Jvb3QnLCAndW5kZXJsaW5lJywgJ2lucHV0J10pKTtcbmV4cG9ydCBkZWZhdWx0IGZpbGxlZElucHV0Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY29tcG9uZW50c1wiLCBcImNvbXBvbmVudHNQcm9wc1wiLCBcImZ1bGxXaWR0aFwiLCBcImhpZGRlbkxhYmVsXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJzbG90UHJvcHNcIiwgXCJzbG90c1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCByZWZUeXBlIGZyb20gJ0BtdWkvdXRpbHMvcmVmVHlwZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBmaWxsZWRJbnB1dENsYXNzZXMsIHsgZ2V0RmlsbGVkSW5wdXRVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2ZpbGxlZElucHV0Q2xhc3Nlcyc7XG5pbXBvcnQgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGRpc2FibGVVbmRlcmxpbmVcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsICFkaXNhYmxlVW5kZXJsaW5lICYmICd1bmRlcmxpbmUnXSxcbiAgICBpbnB1dDogWydpbnB1dCddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRGaWxsZWRJbnB1dFV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgY29tcG9zZWRDbGFzc2VzKTtcbn07XG5jb25zdCBGaWxsZWRJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFsuLi5pbnB1dEJhc2VSb290T3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHN0eWxlcyksICFvd25lclN0YXRlLmRpc2FibGVVbmRlcmxpbmUgJiYgc3R5bGVzLnVuZGVybGluZV07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIHZhciBfcGFsZXR0ZTtcbiAgY29uc3QgbGlnaHQgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCc7XG4gIGNvbnN0IGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wNiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknO1xuICBjb25zdCBob3ZlckJhY2tncm91bmQgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMDkpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTMpJztcbiAgY29uc3QgZGlzYWJsZWRCYWNrZ3JvdW5kID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjEyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS52YXJzID8gdGhlbWUudmFycy5wYWxldHRlLkZpbGxlZElucHV0LmJnIDogYmFja2dyb3VuZENvbG9yLFxuICAgIGJvcmRlclRvcExlZnRSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgfSksXG4gICAgJyY6aG92ZXInOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuRmlsbGVkSW5wdXQuaG92ZXJCZyA6IGhvdmVyQmFja2dyb3VuZCxcbiAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5GaWxsZWRJbnB1dC5iZyA6IGJhY2tncm91bmRDb2xvclxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmZvY3VzZWR9YF06IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUudmFycyA/IHRoZW1lLnZhcnMucGFsZXR0ZS5GaWxsZWRJbnB1dC5iZyA6IGJhY2tncm91bmRDb2xvclxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnZhcnMgPyB0aGVtZS52YXJzLnBhbGV0dGUuRmlsbGVkSW5wdXQuZGlzYWJsZWRCZyA6IGRpc2FibGVkQmFja2dyb3VuZFxuICAgIH1cbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZVVuZGVybGluZSAmJiB7XG4gICAgJyY6OmFmdGVyJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMnB4IHNvbGlkICR7KF9wYWxldHRlID0gKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvciB8fCAncHJpbWFyeSddKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUubWFpbn1gLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSksXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuICAgIH0sXG4gICAgW2AmLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmZvY3VzZWR9OmFmdGVyYF06IHtcbiAgICAgIC8vIHRyYW5zbGF0ZVgoMCkgaXMgYSB3b3JrYXJvdW5kIGZvciBTYWZhcmkgdHJhbnNmb3JtIHNjYWxlIGJ1Z1xuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvaXNzdWVzLzMxNzY2XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSkgdHJhbnNsYXRlWCgwKSdcbiAgICB9LFxuICAgIFtgJi4ke2ZpbGxlZElucHV0Q2xhc3Nlcy5lcnJvcn1gXToge1xuICAgICAgJyY6OmJlZm9yZSwgJjo6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSxcbiAgICAnJjo6YmVmb3JlJzoge1xuICAgICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7dGhlbWUudmFycyA/IGByZ2JhKCR7dGhlbWUudmFycy5wYWxldHRlLmNvbW1vbi5vbkJhY2tncm91bmRDaGFubmVsfSAvICR7dGhlbWUudmFycy5vcGFjaXR5LmlucHV0VW5kZXJsaW5lfSlgIDogYm90dG9tTGluZUNvbG9yfWAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgIGNvbnRlbnQ6ICdcIlxcXFwwMGEwXCInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm9yZGVyLWJvdHRvbS1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cbiAgICB9LFxuICAgIFtgJjpob3Zlcjpub3QoLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSwgLiR7ZmlsbGVkSW5wdXRDbGFzc2VzLmVycm9yfSk6YmVmb3JlYF06IHtcbiAgICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAkeyh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeX1gXG4gICAgfSxcbiAgICBbYCYuJHtmaWxsZWRJbnB1dENsYXNzZXMuZGlzYWJsZWR9OmJlZm9yZWBdOiB7XG4gICAgICBib3JkZXJCb3R0b21TdHlsZTogJ2RvdHRlZCdcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUuc3RhcnRBZG9ybm1lbnQgJiYge1xuICAgIHBhZGRpbmdMZWZ0OiAxMlxuICB9LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAxMlxuICB9LCBvd25lclN0YXRlLm11bHRpbGluZSAmJiBfZXh0ZW5kcyh7XG4gICAgcGFkZGluZzogJzI1cHggMTJweCA4cHgnXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZ1RvcDogMjEsXG4gICAgcGFkZGluZ0JvdHRvbTogNFxuICB9LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHtcbiAgICBwYWRkaW5nVG9wOiAxNixcbiAgICBwYWRkaW5nQm90dG9tOiAxN1xuICB9LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZ1RvcDogOCxcbiAgICBwYWRkaW5nQm90dG9tOiA5XG4gIH0pKTtcbn0pO1xuY29uc3QgRmlsbGVkSW5wdXRJbnB1dCA9IHN0eWxlZChJbnB1dEJhc2VJbnB1dCwge1xuICBuYW1lOiAnTXVpRmlsbGVkSW5wdXQnLFxuICBzbG90OiAnSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogaW5wdXRCYXNlSW5wdXRPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgcGFkZGluZ1RvcDogMjUsXG4gIHBhZGRpbmdSaWdodDogMTIsXG4gIHBhZGRpbmdCb3R0b206IDgsXG4gIHBhZGRpbmdMZWZ0OiAxMlxufSwgIXRoZW1lLnZhcnMgJiYge1xuICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICBXZWJraXRUZXh0RmlsbENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2luaGVyaXQnLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnaW5oZXJpdCdcbiAgfVxufSwgdGhlbWUudmFycyAmJiB7XG4gICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2luaGVyaXQnLFxuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAnaW5oZXJpdCdcbiAgfSxcbiAgW3RoZW1lLmdldENvbG9yU2NoZW1lU2VsZWN0b3IoJ2RhcmsnKV06IHtcbiAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgV2Via2l0Qm94U2hhZG93OiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiAnI2ZmZicsXG4gICAgICBjYXJldENvbG9yOiAnI2ZmZidcbiAgICB9XG4gIH1cbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDIxLFxuICBwYWRkaW5nQm90dG9tOiA0XG59LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIHtcbiAgcGFkZGluZ1RvcDogMTYsXG4gIHBhZGRpbmdCb3R0b206IDE3XG59LCBvd25lclN0YXRlLnN0YXJ0QWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ0xlZnQ6IDBcbn0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgcGFkZGluZ1JpZ2h0OiAwXG59LCBvd25lclN0YXRlLmhpZGRlbkxhYmVsICYmIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHBhZGRpbmdUb3A6IDgsXG4gIHBhZGRpbmdCb3R0b206IDlcbn0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgcGFkZGluZ1RvcDogMCxcbiAgcGFkZGluZ0JvdHRvbTogMCxcbiAgcGFkZGluZ0xlZnQ6IDAsXG4gIHBhZGRpbmdSaWdodDogMFxufSkpO1xuY29uc3QgRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChpblByb3BzLCByZWYpIHtcbiAgdmFyIF9yZWYsIF9zbG90cyRyb290LCBfcmVmMiwgX3Nsb3RzJGlucHV0O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNvbXBvbmVudHMgPSB7fSxcbiAgICAgIGNvbXBvbmVudHNQcm9wczogY29tcG9uZW50c1Byb3BzUHJvcCxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgLy8gZGVjbGFyZSBoZXJlIHRvIHByZXZlbnQgc3ByZWFkaW5nIHRvIERPTVxuICAgICAgaW5wdXRDb21wb25lbnQgPSAnaW5wdXQnLFxuICAgICAgbXVsdGlsaW5lID0gZmFsc2UsXG4gICAgICBzbG90UHJvcHMsXG4gICAgICBzbG90cyA9IHt9LFxuICAgICAgdHlwZSA9ICd0ZXh0J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZSxcbiAgICB0eXBlXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMocHJvcHMpO1xuICBjb25zdCBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcyA9IHtcbiAgICByb290OiB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSxcbiAgICBpbnB1dDoge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH1cbiAgfTtcbiAgY29uc3QgY29tcG9uZW50c1Byb3BzID0gKHNsb3RQcm9wcyAhPSBudWxsID8gc2xvdFByb3BzIDogY29tcG9uZW50c1Byb3BzUHJvcCkgPyBkZWVwbWVyZ2UoZmlsbGVkSW5wdXRDb21wb25lbnRzUHJvcHMsIHNsb3RQcm9wcyAhPSBudWxsID8gc2xvdFByb3BzIDogY29tcG9uZW50c1Byb3BzUHJvcCkgOiBmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcztcbiAgY29uc3QgUm9vdFNsb3QgPSAoX3JlZiA9IChfc2xvdHMkcm9vdCA9IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiBGaWxsZWRJbnB1dFJvb3Q7XG4gIGNvbnN0IElucHV0U2xvdCA9IChfcmVmMiA9IChfc2xvdHMkaW5wdXQgPSBzbG90cy5pbnB1dCkgIT0gbnVsbCA/IF9zbG90cyRpbnB1dCA6IGNvbXBvbmVudHMuSW5wdXQpICE9IG51bGwgPyBfcmVmMiA6IEZpbGxlZElucHV0SW5wdXQ7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChJbnB1dEJhc2UsIF9leHRlbmRzKHtcbiAgICBzbG90czoge1xuICAgICAgcm9vdDogUm9vdFNsb3QsXG4gICAgICBpbnB1dDogSW5wdXRTbG90XG4gICAgfSxcbiAgICBjb21wb25lbnRzUHJvcHM6IGNvbXBvbmVudHNQcm9wcyxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlciwge1xuICAgIGNsYXNzZXM6IGNsYXNzZXNcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGaWxsZWRJbnB1dC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IGlzIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgJ3ByaW1hcnknYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYHNsb3RzYCBwcm9wLlxuICAgKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgYHNsb3RzYCBwcm9wIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBjb21wb25lbnRzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIElucHV0OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgUm9vdDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlXG4gIH0pLFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90UHJvcHNgIHByb3AuXG4gICAqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBgc2xvdFByb3BzYCBwcm9wIGluc3RlYWQsIGFzIGBjb21wb25lbnRzUHJvcHNgIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50c1Byb3BzOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGlucHV0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHJvb3Q6IFByb3BUeXBlcy5vYmplY3RcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBoaWRkZW4uXG4gICAqIFRoaXMgaXMgdXNlZCB0byBpbmNyZWFzZSBkZW5zaXR5IGZvciBhIGBGaWxsZWRJbnB1dGAuXG4gICAqIEJlIHN1cmUgdG8gYWRkIGBhcmlhLWxhYmVsYCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaGlkZGVuTGFiZWw6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2lucHV0J1xuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGAnbm9uZSdgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtYXhSb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgbWluUm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIFtUZXh0YXJlYUF1dG9zaXplXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dGFyZWEtYXV0b3NpemUvKSBlbGVtZW50IGlzIHJlbmRlcmVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdC5DaGFuZ2VFdmVudDxIVE1MVGV4dEFyZWFFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudD59IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBgaW5wdXRgIGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYGZhbHNlYCkgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBGb3JtQ29udHJvbCBjb21wb25lbnQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBleHRyYSBwcm9wcyBmb3IgdGhlIHNsb3QgY29tcG9uZW50cy5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGUgZXhpc3RpbmcgcHJvcHMgb3IgYWRkIG5ldyBvbmVzLlxuICAgKlxuICAgKiBUaGlzIHByb3AgaXMgYW4gYWxpYXMgZm9yIHRoZSBgY29tcG9uZW50c1Byb3BzYCBwcm9wLCB3aGljaCB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICpcbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIHNsb3RQcm9wczogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBpbnB1dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICByb290OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IEZpbGxlZElucHV0OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbnZhciBfc3BhbjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImxhYmVsXCIsIFwibm90Y2hlZFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgc3R5bGVkLCB7IHJvb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IE5vdGNoZWRPdXRsaW5lUm9vdCA9IHN0eWxlZCgnZmllbGRzZXQnLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiByb290U2hvdWxkRm9yd2FyZFByb3Bcbn0pKHtcbiAgdGV4dEFsaWduOiAnbGVmdCcsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBib3R0b206IDAsXG4gIHJpZ2h0OiAwLFxuICB0b3A6IC01LFxuICBsZWZ0OiAwLFxuICBtYXJnaW46IDAsXG4gIHBhZGRpbmc6ICcwIDhweCcsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCcsXG4gIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICBib3JkZXJXaWR0aDogMSxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBtaW5XaWR0aDogJzAlJ1xufSk7XG5jb25zdCBOb3RjaGVkT3V0bGluZUxlZ2VuZCA9IHN0eWxlZCgnbGVnZW5kJywge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcm9vdFNob3VsZEZvcndhcmRQcm9wXG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBmbG9hdDogJ3Vuc2V0JyxcbiAgLy8gRml4IGNvbmZsaWN0IHdpdGggYm9vdHN0cmFwXG4gIHdpZHRoOiAnYXV0bycsXG4gIC8vIEZpeCBjb25mbGljdCB3aXRoIGJvb3RzdHJhcFxuICBvdmVyZmxvdzogJ2hpZGRlbidcbn0sICFvd25lclN0YXRlLndpdGhMYWJlbCAmJiB7XG4gIHBhZGRpbmc6IDAsXG4gIGxpbmVIZWlnaHQ6ICcxMXB4JyxcbiAgLy8gc3luYyB3aXRoIGBoZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3dpZHRoJywge1xuICAgIGR1cmF0aW9uOiAxNTAsXG4gICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICB9KVxufSwgb3duZXJTdGF0ZS53aXRoTGFiZWwgJiYgX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnYmxvY2snLFxuICAvLyBGaXggY29uZmxpY3Qgd2l0aCBub3JtYWxpemUuY3NzIGFuZCBzYW5pdGl6ZS5jc3NcbiAgcGFkZGluZzogMCxcbiAgaGVpZ2h0OiAxMSxcbiAgLy8gc3luYyB3aXRoIGBsaW5lSGVpZ2h0YCBpbiBgbGVnZW5kYCBzdHlsZXNcbiAgZm9udFNpemU6ICcwLjc1ZW0nLFxuICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgbWF4V2lkdGg6IDAuMDEsXG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgIGR1cmF0aW9uOiA1MCxcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gIH0pLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgJyYgPiBzcGFuJzoge1xuICAgIHBhZGRpbmdMZWZ0OiA1LFxuICAgIHBhZGRpbmdSaWdodDogNSxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICBvcGFjaXR5OiAwLFxuICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJ1xuICB9XG59LCBvd25lclN0YXRlLm5vdGNoZWQgJiYge1xuICBtYXhXaWR0aDogJzEwMCUnLFxuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ21heC13aWR0aCcsIHtcbiAgICBkdXJhdGlvbjogMTAwLFxuICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXQsXG4gICAgZGVsYXk6IDUwXG4gIH0pXG59KSkpO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5vdGNoZWRPdXRsaW5lKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGxhYmVsLFxuICAgICAgbm90Y2hlZFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB3aXRoTGFiZWwgPSBsYWJlbCAhPSBudWxsICYmIGxhYmVsICE9PSAnJztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIG5vdGNoZWQsXG4gICAgd2l0aExhYmVsXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTm90Y2hlZE91dGxpbmVSb290LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTm90Y2hlZE91dGxpbmVMZWdlbmQsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjaGlsZHJlbjogd2l0aExhYmVsID8gLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgY2hpbGRyZW46IGxhYmVsXG4gICAgICB9KSA6IC8vIG5vdHJhbnNsYXRlIG5lZWRlZCB3aGlsZSBHb29nbGUgVHJhbnNsYXRlIHdpbGwgbm90IGZpeCB6ZXJvLXdpZHRoIHNwYWNlIGlzc3VlXG4gICAgICBfc3BhbiB8fCAoX3NwYW4gPSAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IFwibm90cmFuc2xhdGVcIixcbiAgICAgICAgY2hpbGRyZW46IFwiXFx1MjAwQlwiXG4gICAgICB9KSlcbiAgICB9KVxuICB9KSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOb3RjaGVkT3V0bGluZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBsYWJlbC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG91dGxpbmUgaXMgbm90Y2hlZCB0byBhY2NvbW1vZGF0ZSB0aGUgbGFiZWwuXG4gICAqL1xuICBub3RjaGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IHsgaW5wdXRCYXNlQ2xhc3NlcyB9IGZyb20gJy4uL0lucHV0QmFzZSc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpT3V0bGluZWRJbnB1dCcsIHNsb3QpO1xufVxuY29uc3Qgb3V0bGluZWRJbnB1dENsYXNzZXMgPSBfZXh0ZW5kcyh7fSwgaW5wdXRCYXNlQ2xhc3NlcywgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpT3V0bGluZWRJbnB1dCcsIFsncm9vdCcsICdub3RjaGVkT3V0bGluZScsICdpbnB1dCddKSk7XG5leHBvcnQgZGVmYXVsdCBvdXRsaW5lZElucHV0Q2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjb21wb25lbnRzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJsYWJlbFwiLCBcIm11bHRpbGluZVwiLCBcIm5vdGNoZWRcIiwgXCJzbG90c1wiLCBcInR5cGVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBOb3RjaGVkT3V0bGluZSBmcm9tICcuL05vdGNoZWRPdXRsaW5lJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgb3V0bGluZWRJbnB1dENsYXNzZXMsIHsgZ2V0T3V0bGluZWRJbnB1dFV0aWxpdHlDbGFzcyB9IGZyb20gJy4vb3V0bGluZWRJbnB1dENsYXNzZXMnO1xuaW1wb3J0IElucHV0QmFzZSwgeyByb290T3ZlcnJpZGVzUmVzb2x2ZXIgYXMgaW5wdXRCYXNlUm9vdE92ZXJyaWRlc1Jlc29sdmVyLCBpbnB1dE92ZXJyaWRlc1Jlc29sdmVyIGFzIGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXIsIElucHV0QmFzZVJvb3QsIElucHV0QmFzZUNvbXBvbmVudCBhcyBJbnB1dEJhc2VJbnB1dCB9IGZyb20gJy4uL0lucHV0QmFzZS9JbnB1dEJhc2UnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnXSxcbiAgICBub3RjaGVkT3V0bGluZTogWydub3RjaGVkT3V0bGluZSddLFxuICAgIGlucHV0OiBbJ2lucHV0J11cbiAgfTtcbiAgY29uc3QgY29tcG9zZWRDbGFzc2VzID0gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE91dGxpbmVkSW5wdXRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgT3V0bGluZWRJbnB1dFJvb3QgPSBzdHlsZWQoSW5wdXRCYXNlUm9vdCwge1xuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgfHwgcHJvcCA9PT0gJ2NsYXNzZXMnLFxuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZVJvb3RPdmVycmlkZXNSZXNvbHZlclxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3QgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAodGhlbWUudmFycyB8fCB0aGVtZSkuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgIFtgJjpob3ZlciAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sXG4gICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICBbYCY6aG92ZXIgLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnZhcnMgPyBgcmdiYSgke3RoZW1lLnZhcnMucGFsZXR0ZS5jb21tb24ub25CYWNrZ3JvdW5kQ2hhbm5lbH0gLyAwLjIzKWAgOiBib3JkZXJDb2xvclxuICAgICAgfVxuICAgIH0sXG4gICAgW2AmLiR7b3V0bGluZWRJbnB1dENsYXNzZXMuZm9jdXNlZH0gLiR7b3V0bGluZWRJbnB1dENsYXNzZXMubm90Y2hlZE91dGxpbmV9YF06IHtcbiAgICAgIGJvcmRlckNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluLFxuICAgICAgYm9yZGVyV2lkdGg6IDJcbiAgICB9LFxuICAgIFtgJi4ke291dGxpbmVkSW5wdXRDbGFzc2VzLmVycm9yfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuICAgIFtgJi4ke291dGxpbmVkSW5wdXRDbGFzc2VzLmRpc2FibGVkfSAuJHtvdXRsaW5lZElucHV0Q2xhc3Nlcy5ub3RjaGVkT3V0bGluZX1gXToge1xuICAgICAgYm9yZGVyQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgIH1cbiAgfSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gICAgcGFkZGluZ0xlZnQ6IDE0XG4gIH0sIG93bmVyU3RhdGUuZW5kQWRvcm5tZW50ICYmIHtcbiAgICBwYWRkaW5nUmlnaHQ6IDE0XG4gIH0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIF9leHRlbmRzKHtcbiAgICBwYWRkaW5nOiAnMTYuNXB4IDE0cHgnXG4gIH0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gICAgcGFkZGluZzogJzguNXB4IDE0cHgnXG4gIH0pKTtcbn0pO1xuY29uc3QgTm90Y2hlZE91dGxpbmVSb290ID0gc3R5bGVkKE5vdGNoZWRPdXRsaW5lLCB7XG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0JyxcbiAgc2xvdDogJ05vdGNoZWRPdXRsaW5lJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubm90Y2hlZE91dGxpbmVcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiB7XG4gIGNvbnN0IGJvcmRlckNvbG9yID0gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknO1xuICByZXR1cm4ge1xuICAgIGJvcmRlckNvbG9yOiB0aGVtZS52YXJzID8gYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuY29tbW9uLm9uQmFja2dyb3VuZENoYW5uZWx9IC8gMC4yMylgIDogYm9yZGVyQ29sb3JcbiAgfTtcbn0pO1xuY29uc3QgT3V0bGluZWRJbnB1dElucHV0ID0gc3R5bGVkKElucHV0QmFzZUlucHV0LCB7XG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0JyxcbiAgc2xvdDogJ0lucHV0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IGlucHV0QmFzZUlucHV0T3ZlcnJpZGVzUmVzb2x2ZXJcbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBhZGRpbmc6ICcxNi41cHggMTRweCdcbn0sICF0aGVtZS52YXJzICYmIHtcbiAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICBjYXJldENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBudWxsIDogJyNmZmYnLFxuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gIH1cbn0sIHRoZW1lLnZhcnMgJiYge1xuICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gIH0sXG4gIFt0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yKCdkYXJrJyldOiB7XG4gICAgJyY6LXdlYmtpdC1hdXRvZmlsbCc6IHtcbiAgICAgIFdlYmtpdEJveFNoYWRvdzogJzAgMCAwIDEwMHB4ICMyNjY3OTggaW5zZXQnLFxuICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogJyNmZmYnLFxuICAgICAgY2FyZXRDb2xvcjogJyNmZmYnXG4gICAgfVxuICB9XG59LCBvd25lclN0YXRlLnNpemUgPT09ICdzbWFsbCcgJiYge1xuICBwYWRkaW5nOiAnOC41cHggMTRweCdcbn0sIG93bmVyU3RhdGUubXVsdGlsaW5lICYmIHtcbiAgcGFkZGluZzogMFxufSwgb3duZXJTdGF0ZS5zdGFydEFkb3JubWVudCAmJiB7XG4gIHBhZGRpbmdMZWZ0OiAwXG59LCBvd25lclN0YXRlLmVuZEFkb3JubWVudCAmJiB7XG4gIHBhZGRpbmdSaWdodDogMFxufSkpO1xuY29uc3QgT3V0bGluZWRJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE91dGxpbmVkSW5wdXQoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciBfcmVmLCBfc2xvdHMkcm9vdCwgX3JlZjIsIF9zbG90cyRpbnB1dCwgX1JlYWN0JEZyYWdtZW50O1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY29tcG9uZW50cyA9IHt9LFxuICAgICAgZnVsbFdpZHRoID0gZmFsc2UsXG4gICAgICBpbnB1dENvbXBvbmVudCA9ICdpbnB1dCcsXG4gICAgICBsYWJlbCxcbiAgICAgIG11bHRpbGluZSA9IGZhbHNlLFxuICAgICAgbm90Y2hlZCxcbiAgICAgIHNsb3RzID0ge30sXG4gICAgICB0eXBlID0gJ3RleHQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhwcm9wcyk7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ2NvbG9yJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnaGlkZGVuTGFiZWwnLCAnc2l6ZScsICdyZXF1aXJlZCddXG4gIH0pO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3I6IGZjcy5jb2xvciB8fCAncHJpbWFyeScsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlcnJvcjogZmNzLmVycm9yLFxuICAgIGZvY3VzZWQ6IGZjcy5mb2N1c2VkLFxuICAgIGZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWw6IGZjcy5oaWRkZW5MYWJlbCxcbiAgICBtdWx0aWxpbmUsXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgdHlwZVxuICB9KTtcbiAgY29uc3QgUm9vdFNsb3QgPSAoX3JlZiA9IChfc2xvdHMkcm9vdCA9IHNsb3RzLnJvb3QpICE9IG51bGwgPyBfc2xvdHMkcm9vdCA6IGNvbXBvbmVudHMuUm9vdCkgIT0gbnVsbCA/IF9yZWYgOiBPdXRsaW5lZElucHV0Um9vdDtcbiAgY29uc3QgSW5wdXRTbG90ID0gKF9yZWYyID0gKF9zbG90cyRpbnB1dCA9IHNsb3RzLmlucHV0KSAhPSBudWxsID8gX3Nsb3RzJGlucHV0IDogY29tcG9uZW50cy5JbnB1dCkgIT0gbnVsbCA/IF9yZWYyIDogT3V0bGluZWRJbnB1dElucHV0O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgc2xvdHM6IHtcbiAgICAgIHJvb3Q6IFJvb3RTbG90LFxuICAgICAgaW5wdXQ6IElucHV0U2xvdFxuICAgIH0sXG4gICAgcmVuZGVyU3VmZml4OiBzdGF0ZSA9PiAvKiNfX1BVUkVfXyovX2pzeChOb3RjaGVkT3V0bGluZVJvb3QsIHtcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubm90Y2hlZE91dGxpbmUsXG4gICAgICBsYWJlbDogbGFiZWwgIT0gbnVsbCAmJiBsYWJlbCAhPT0gJycgJiYgZmNzLnJlcXVpcmVkID8gX1JlYWN0JEZyYWdtZW50IHx8IChfUmVhY3QkRnJhZ21lbnQgPSAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICAgICAgY2hpbGRyZW46IFtsYWJlbCwgXCJcXHUyMDA5XCIsICcqJ11cbiAgICAgIH0pKSA6IGxhYmVsLFxuICAgICAgbm90Y2hlZDogdHlwZW9mIG5vdGNoZWQgIT09ICd1bmRlZmluZWQnID8gbm90Y2hlZCA6IEJvb2xlYW4oc3RhdGUuc3RhcnRBZG9ybm1lbnQgfHwgc3RhdGUuZmlsbGVkIHx8IHN0YXRlLmZvY3VzZWQpXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBfZXh0ZW5kcyh7fSwgY2xhc3Nlcywge1xuICAgICAgbm90Y2hlZE91dGxpbmU6IG51bGxcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE91dGxpbmVkSW5wdXQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdwcmltYXJ5J2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIFRoaXMgcHJvcCBpcyBhbiBhbGlhcyBmb3IgdGhlIGBzbG90c2AgcHJvcC5cbiAgICogSXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIGBzbG90c2AgcHJvcCBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgY29tcG9uZW50czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBJbnB1dDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIFJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBUaGUgcHJvcCBkZWZhdWx0cyB0byB0aGUgdmFsdWUgKGBmYWxzZWApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2lucHV0J1xuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuICAvKipcbiAgICogVGhlIGxhYmVsIG9mIHRoZSBgaW5wdXRgLiBJdCBpcyBvbmx5IHVzZWQgZm9yIGxheW91dC4gVGhlIGFjdHVhbCBsYWJlbGxpbmdcbiAgICogaXMgaGFuZGxlZCBieSBgSW5wdXRMYWJlbGAuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqIFRoZSBwcm9wIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSAoYCdub25lJ2ApIGluaGVyaXRlZCBmcm9tIHRoZSBwYXJlbnQgRm9ybUNvbnRyb2wgY29tcG9uZW50LlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgW1RleHRhcmVhQXV0b3NpemVdKC9tYXRlcmlhbC11aS9yZWFjdC10ZXh0YXJlYS1hdXRvc2l6ZS8pIGVsZW1lbnQgaXMgcmVuZGVyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0LkNoYW5nZUV2ZW50PEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50Pn0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyByZXF1aXJlZC5cbiAgICogVGhlIHByb3AgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIChgZmFsc2VgKSBpbmhlcml0ZWQgZnJvbSB0aGUgcGFyZW50IEZvcm1Db250cm9sIGNvbXBvbmVudC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudHMgdXNlZCBmb3IgZWFjaCBzbG90IGluc2lkZS5cbiAgICpcbiAgICogVGhpcyBwcm9wIGlzIGFuIGFsaWFzIGZvciB0aGUgYGNvbXBvbmVudHNgIHByb3AsIHdoaWNoIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgc2xvdHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgICByb290OiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbiAgfSksXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC4gSXQgc2hvdWxkIGJlIFthIHZhbGlkIEhUTUw1IGlucHV0IHR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNGb3JtXyUzQ2lucHV0JTNFX3R5cGVzKS5cbiAgICogQGRlZmF1bHQgJ3RleHQnXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5PdXRsaW5lZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgT3V0bGluZWRJbnB1dDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1MYWJlbFV0aWxpdHlDbGFzc2VzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlGb3JtTGFiZWwnLCBzbG90KTtcbn1cbmNvbnN0IGZvcm1MYWJlbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtTGFiZWwnLCBbJ3Jvb3QnLCAnY29sb3JTZWNvbmRhcnknLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnLCAncmVxdWlyZWQnLCAnYXN0ZXJpc2snXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtTGFiZWxDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcInJlcXVpcmVkXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IGZvcm1MYWJlbENsYXNzZXMsIHsgZ2V0Rm9ybUxhYmVsVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL2Zvcm1MYWJlbENsYXNzZXMnO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgY29sb3IsXG4gICAgZm9jdXNlZCxcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmaWxsZWQsXG4gICAgcmVxdWlyZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZXJyb3IgJiYgJ2Vycm9yJywgZmlsbGVkICYmICdmaWxsZWQnLCBmb2N1c2VkICYmICdmb2N1c2VkJywgcmVxdWlyZWQgJiYgJ3JlcXVpcmVkJ10sXG4gICAgYXN0ZXJpc2s6IFsnYXN0ZXJpc2snLCBlcnJvciAmJiAnZXJyb3InXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZvcm1MYWJlbFV0aWxpdHlDbGFzc2VzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgRm9ybUxhYmVsUm9vdCA9IHN0eWxlZCgnbGFiZWwnLCB7XG4gIG5hbWU6ICdNdWlGb3JtTGFiZWwnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAoe1xuICAgIG93bmVyU3RhdGVcbiAgfSwgc3R5bGVzKSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ3NlY29uZGFyeScgJiYgc3R5bGVzLmNvbG9yU2Vjb25kYXJ5LCBvd25lclN0YXRlLmZpbGxlZCAmJiBzdHlsZXMuZmlsbGVkKTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG59LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gIGxpbmVIZWlnaHQ6ICcxLjQzNzVlbScsXG4gIHBhZGRpbmc6IDAsXG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBbYCYuJHtmb3JtTGFiZWxDbGFzc2VzLmZvY3VzZWR9YF06IHtcbiAgICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxuICB9LFxuICBbYCYuJHtmb3JtTGFiZWxDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgfSxcbiAgW2AmLiR7Zm9ybUxhYmVsQ2xhc3Nlcy5lcnJvcn1gXToge1xuICAgIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5lcnJvci5tYWluXG4gIH1cbn0pKTtcbmNvbnN0IEFzdGVyaXNrQ29tcG9uZW50ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJyxcbiAgc2xvdDogJ0FzdGVyaXNrJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuYXN0ZXJpc2tcbn0pKCh7XG4gIHRoZW1lXG59KSA9PiAoe1xuICBbYCYuJHtmb3JtTGFiZWxDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgfVxufSkpO1xuY29uc3QgRm9ybUxhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUxhYmVsKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlGb3JtTGFiZWwnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCA9ICdsYWJlbCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnY29sb3InLCAncmVxdWlyZWQnLCAnZm9jdXNlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmaWxsZWQnXVxuICB9KTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yOiBmY3MuY29sb3IgfHwgJ3ByaW1hcnknLFxuICAgIGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgIGVycm9yOiBmY3MuZXJyb3IsXG4gICAgZmlsbGVkOiBmY3MuZmlsbGVkLFxuICAgIGZvY3VzZWQ6IGZjcy5mb2N1c2VkLFxuICAgIHJlcXVpcmVkOiBmY3MucmVxdWlyZWRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhGb3JtTGFiZWxSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IGNvbXBvbmVudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCBmY3MucmVxdWlyZWQgJiYgLyojX19QVVJFX18qL19qc3hzKEFzdGVyaXNrQ29tcG9uZW50LCB7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmFzdGVyaXNrLFxuICAgICAgY2hpbGRyZW46IFtcIlxcdTIwMDlcIiwgJyonXVxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1MYWJlbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlcnJvcicsICdpbmZvJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCBvZiB0aGlzIGxhYmVsIGlzIGZvY3VzZWQgKHVzZWQgYnkgYEZvcm1Hcm91cGAgY29tcG9uZW50cykuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgYGlucHV0YCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEZvcm1MYWJlbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0TGFiZWxVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpSW5wdXRMYWJlbCcsIHNsb3QpO1xufVxuY29uc3QgaW5wdXRMYWJlbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlJbnB1dExhYmVsJywgWydyb290JywgJ2ZvY3VzZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAncmVxdWlyZWQnLCAnYXN0ZXJpc2snLCAnZm9ybUNvbnRyb2wnLCAnc2l6ZVNtYWxsJywgJ3NocmluaycsICdhbmltYXRlZCcsICdzdGFuZGFyZCcsICdmaWxsZWQnLCAnb3V0bGluZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBpbnB1dExhYmVsQ2xhc3NlczsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkaXNhYmxlQW5pbWF0aW9uXCIsIFwibWFyZ2luXCIsIFwic2hyaW5rXCIsIFwidmFyaWFudFwiLCBcImNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBGb3JtTGFiZWwsIHsgZm9ybUxhYmVsQ2xhc3NlcyB9IGZyb20gJy4uL0Zvcm1MYWJlbCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRJbnB1dExhYmVsVXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL2lucHV0TGFiZWxDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBmb3JtQ29udHJvbCxcbiAgICBzaXplLFxuICAgIHNocmluayxcbiAgICBkaXNhYmxlQW5pbWF0aW9uLFxuICAgIHZhcmlhbnQsXG4gICAgcmVxdWlyZWRcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGZvcm1Db250cm9sICYmICdmb3JtQ29udHJvbCcsICFkaXNhYmxlQW5pbWF0aW9uICYmICdhbmltYXRlZCcsIHNocmluayAmJiAnc2hyaW5rJywgc2l6ZSAmJiBzaXplICE9PSAnbm9ybWFsJyAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCB2YXJpYW50XSxcbiAgICBhc3RlcmlzazogW3JlcXVpcmVkICYmICdhc3RlcmlzayddXG4gIH07XG4gIGNvbnN0IGNvbXBvc2VkQ2xhc3NlcyA9IGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRJbnB1dExhYmVsVXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGNsYXNzZXMsIGNvbXBvc2VkQ2xhc3Nlcyk7XG59O1xuY29uc3QgSW5wdXRMYWJlbFJvb3QgPSBzdHlsZWQoRm9ybUxhYmVsLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHJvb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB8fCBwcm9wID09PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlJbnB1dExhYmVsJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbe1xuICAgICAgW2AmIC4ke2Zvcm1MYWJlbENsYXNzZXMuYXN0ZXJpc2t9YF06IHN0eWxlcy5hc3Rlcmlza1xuICAgIH0sIHN0eWxlcy5yb290LCBvd25lclN0YXRlLmZvcm1Db250cm9sICYmIHN0eWxlcy5mb3JtQ29udHJvbCwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHN0eWxlcy5zaXplU21hbGwsIG93bmVyU3RhdGUuc2hyaW5rICYmIHN0eWxlcy5zaHJpbmssICFvd25lclN0YXRlLmRpc2FibGVBbmltYXRpb24gJiYgc3R5bGVzLmFuaW1hdGVkLCBvd25lclN0YXRlLmZvY3VzZWQgJiYgc3R5bGVzLmZvY3VzZWQsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gIG1heFdpZHRoOiAnMTAwJSdcbn0sIG93bmVyU3RhdGUuZm9ybUNvbnRyb2wgJiYge1xuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgdG9wOiAwLFxuICAvLyBzbGlnaHQgYWx0ZXJhdGlvbiB0byBzcGVjIHNwYWNpbmcgdG8gbWF0Y2ggdmlzdWFsIHNwZWMgcmVzdWx0XG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyMHB4KSBzY2FsZSgxKSdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIC8vIENvbXBlbnNhdGlvbiBmb3IgdGhlIGBJbnB1dC5pbnB1dFNpemVTbWFsbGAgc3R5bGUuXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAxN3B4KSBzY2FsZSgxKSdcbn0sIG93bmVyU3RhdGUuc2hyaW5rICYmIHtcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDAsIC0xLjVweCkgc2NhbGUoMC43NSknLFxuICB0cmFuc2Zvcm1PcmlnaW46ICd0b3AgbGVmdCcsXG4gIG1heFdpZHRoOiAnMTMzJSdcbn0sICFvd25lclN0YXRlLmRpc2FibGVBbmltYXRpb24gJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICd0cmFuc2Zvcm0nLCAnbWF4LXdpZHRoJ10sIHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gIH0pXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdmaWxsZWQnICYmIF9leHRlbmRzKHtcbiAgLy8gQ2hyb21lJ3MgYXV0b2ZpbGwgZmVhdHVyZSBnaXZlcyB0aGUgaW5wdXQgZmllbGQgYSB5ZWxsb3cgYmFja2dyb3VuZC5cbiAgLy8gU2luY2UgdGhlIGlucHV0IGZpZWxkIGlzIGJlaGluZCB0aGUgbGFiZWwgaW4gdGhlIEhUTUwgdHJlZSxcbiAgLy8gdGhlIGlucHV0IGZpZWxkIGlzIGRyYXduIGxhc3QgYW5kIGhpZGVzIHRoZSBsYWJlbCB3aXRoIGFuIG9wYXF1ZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICAvLyB6SW5kZXg6IDEgd2lsbCByYWlzZSB0aGUgbGFiZWwgYWJvdmUgb3BhcXVlIGJhY2tncm91bmQtY29sb3JzIG9mIGlucHV0LlxuICB6SW5kZXg6IDEsXG4gIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDE2cHgpIHNjYWxlKDEpJyxcbiAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSAyNHB4KSdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCAxM3B4KSBzY2FsZSgxKSdcbn0sIG93bmVyU3RhdGUuc2hyaW5rICYmIF9leHRlbmRzKHtcbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBwb2ludGVyRXZlbnRzOiAnYXV0bycsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCA3cHgpIHNjYWxlKDAuNzUpJyxcbiAgbWF4V2lkdGg6ICdjYWxjKDEzMyUgLSAyNHB4KSdcbn0sIG93bmVyU3RhdGUuc2l6ZSA9PT0gJ3NtYWxsJyAmJiB7XG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCA0cHgpIHNjYWxlKDAuNzUpJ1xufSkpLCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgX2V4dGVuZHMoe1xuICAvLyBzZWUgY29tbWVudCBhYm92ZSBvbiBmaWxsZWQuekluZGV4XG4gIHpJbmRleDogMSxcbiAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgMTZweCkgc2NhbGUoMSknLFxuICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDI0cHgpJ1xufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDE0cHgsIDlweCkgc2NhbGUoMSknXG59LCBvd25lclN0YXRlLnNocmluayAmJiB7XG4gIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgcG9pbnRlckV2ZW50czogJ2F1dG8nLFxuICAvLyBUaGVvcmV0aWNhbGx5LCB3ZSBzaG91bGQgaGF2ZSAoOCs1KSoyLzAuNzUgPSAzNHB4XG4gIC8vIGJ1dCBpdCBmZWVscyBhIGJldHRlciB3aGVuIGl0IGJsZWVkcyBhIGJpdCBvbiB0aGUgbGVmdCwgc28gMzJweC5cbiAgbWF4V2lkdGg6ICdjYWxjKDEzMyUgLSAzMnB4KScsXG4gIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAtOXB4KSBzY2FsZSgwLjc1KSdcbn0pKSk7XG5jb25zdCBJbnB1dExhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRMYWJlbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBuYW1lOiAnTXVpSW5wdXRMYWJlbCcsXG4gICAgcHJvcHM6IGluUHJvcHNcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGRpc2FibGVBbmltYXRpb24gPSBmYWxzZSxcbiAgICAgIHNocmluazogc2hyaW5rUHJvcCxcbiAgICAgIGNsYXNzTmFtZVxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIGxldCBzaHJpbmsgPSBzaHJpbmtQcm9wO1xuICBpZiAodHlwZW9mIHNocmluayA9PT0gJ3VuZGVmaW5lZCcgJiYgbXVpRm9ybUNvbnRyb2wpIHtcbiAgICBzaHJpbmsgPSBtdWlGb3JtQ29udHJvbC5maWxsZWQgfHwgbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCB8fCBtdWlGb3JtQ29udHJvbC5hZG9ybmVkU3RhcnQ7XG4gIH1cbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3NpemUnLCAndmFyaWFudCcsICdyZXF1aXJlZCcsICdmb2N1c2VkJ11cbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkaXNhYmxlQW5pbWF0aW9uLFxuICAgIGZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzaHJpbmssXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgdmFyaWFudDogZmNzLnZhcmlhbnQsXG4gICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goSW5wdXRMYWJlbFJvb3QsIF9leHRlbmRzKHtcbiAgICBcImRhdGEtc2hyaW5rXCI6IHNocmluayxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBjbGFzc2VzXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSW5wdXRMYWJlbC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydlcnJvcicsICdpbmZvJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgZGlzYWJsZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQW5pbWF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuICAvKipcbiAgICogaWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBgaW5wdXRgIGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgc2hydW5rLlxuICAgKi9cbiAgc2hyaW5rOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdub3JtYWwnXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ25vcm1hbCcsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgSW5wdXRMYWJlbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZvcm1Db250cm9sJywgc2xvdCk7XG59XG5jb25zdCBmb3JtQ29udHJvbENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtQ29udHJvbCcsIFsncm9vdCcsICdtYXJnaW5Ob25lJywgJ21hcmdpbk5vcm1hbCcsICdtYXJnaW5EZW5zZScsICdmdWxsV2lkdGgnLCAnZGlzYWJsZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtQ29udHJvbENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmb2N1c2VkXCIsIFwiZnVsbFdpZHRoXCIsIFwiaGlkZGVuTGFiZWxcIiwgXCJtYXJnaW5cIiwgXCJyZXF1aXJlZFwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGlzRmlsbGVkLCBpc0Fkb3JuZWRTdGFydCB9IGZyb20gJy4uL0lucHV0QmFzZS91dGlscyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHsgZ2V0Rm9ybUNvbnRyb2xVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vZm9ybUNvbnRyb2xDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBtYXJnaW4sXG4gICAgZnVsbFdpZHRoXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBtYXJnaW4gIT09ICdub25lJyAmJiBgbWFyZ2luJHtjYXBpdGFsaXplKG1hcmdpbil9YCwgZnVsbFdpZHRoICYmICdmdWxsV2lkdGgnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldEZvcm1Db250cm9sVXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcbmNvbnN0IEZvcm1Db250cm9sUm9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpRm9ybUNvbnRyb2wnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAoe1xuICAgIG93bmVyU3RhdGVcbiAgfSwgc3R5bGVzKSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdHlsZXMucm9vdCwgc3R5bGVzW2BtYXJnaW4ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5tYXJnaW4pfWBdLCBvd25lclN0YXRlLmZ1bGxXaWR0aCAmJiBzdHlsZXMuZnVsbFdpZHRoKTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIC8vIFJlc2V0IGZpZWxkc2V0IGRlZmF1bHQgc3R5bGUuXG4gIG1pbldpZHRoOiAwLFxuICBwYWRkaW5nOiAwLFxuICBtYXJnaW46IDAsXG4gIGJvcmRlcjogMCxcbiAgdmVydGljYWxBbGlnbjogJ3RvcCdcbn0sIG93bmVyU3RhdGUubWFyZ2luID09PSAnbm9ybWFsJyAmJiB7XG4gIG1hcmdpblRvcDogMTYsXG4gIG1hcmdpbkJvdHRvbTogOFxufSwgb3duZXJTdGF0ZS5tYXJnaW4gPT09ICdkZW5zZScgJiYge1xuICBtYXJnaW5Ub3A6IDgsXG4gIG1hcmdpbkJvdHRvbTogNFxufSwgb3duZXJTdGF0ZS5mdWxsV2lkdGggJiYge1xuICB3aWR0aDogJzEwMCUnXG59KSk7XG5cbi8qKlxuICogUHJvdmlkZXMgY29udGV4dCBzdWNoIGFzIGZpbGxlZC9mb2N1c2VkL2Vycm9yL3JlcXVpcmVkIGZvciBmb3JtIGlucHV0cy5cbiAqIFJlbHlpbmcgb24gdGhlIGNvbnRleHQgcHJvdmlkZXMgaGlnaCBmbGV4aWJpbGl0eSBhbmQgZW5zdXJlcyB0aGF0IHRoZSBzdGF0ZSBhbHdheXMgc3RheXNcbiAqIGNvbnNpc3RlbnQgYWNyb3NzIHRoZSBjaGlsZHJlbiBvZiB0aGUgYEZvcm1Db250cm9sYC5cbiAqIFRoaXMgY29udGV4dCBpcyB1c2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAgLSBGb3JtTGFiZWxcbiAqICAtIEZvcm1IZWxwZXJUZXh0XG4gKiAgLSBJbnB1dFxuICogIC0gSW5wdXRMYWJlbFxuICpcbiAqIFlvdSBjYW4gZmluZCBvbmUgY29tcG9zaXRpb24gZXhhbXBsZSBiZWxvdyBhbmQgbW9yZSBnb2luZyB0byBbdGhlIGRlbW9zXSgvbWF0ZXJpYWwtdWkvcmVhY3QtdGV4dC1maWVsZC8jY29tcG9uZW50cykuXG4gKlxuICogYGBganN4XG4gKiA8Rm9ybUNvbnRyb2w+XG4gKiAgIDxJbnB1dExhYmVsIGh0bWxGb3I9XCJteS1pbnB1dFwiPkVtYWlsIGFkZHJlc3M8L0lucHV0TGFiZWw+XG4gKiAgIDxJbnB1dCBpZD1cIm15LWlucHV0XCIgYXJpYS1kZXNjcmliZWRieT1cIm15LWhlbHBlci10ZXh0XCIgLz5cbiAqICAgPEZvcm1IZWxwZXJUZXh0IGlkPVwibXktaGVscGVyLXRleHRcIj5XZSdsbCBuZXZlciBzaGFyZSB5b3VyIGVtYWlsLjwvRm9ybUhlbHBlclRleHQ+XG4gKiA8L0Zvcm1Db250cm9sPlxuICogYGBgXG4gKlxuICog4pqg77iPIE9ubHkgb25lIGBJbnB1dEJhc2VgIGNhbiBiZSB1c2VkIHdpdGhpbiBhIEZvcm1Db250cm9sIGJlY2F1c2UgaXQgY3JlYXRlcyB2aXN1YWwgaW5jb25zaXN0ZW5jaWVzLlxuICogRm9yIGluc3RhbmNlLCBvbmx5IG9uZSBpbnB1dCBjYW4gYmUgZm9jdXNlZCBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgc3RhdGUgc2hvdWxkbid0IGJlIHNoYXJlZC5cbiAqL1xuY29uc3QgRm9ybUNvbnRyb2wgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbChpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpRm9ybUNvbnRyb2wnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICBkaXNhYmxlZCA9IGZhbHNlLFxuICAgICAgZXJyb3IgPSBmYWxzZSxcbiAgICAgIGZvY3VzZWQ6IHZpc3VhbGx5Rm9jdXNlZCxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgaGlkZGVuTGFiZWwgPSBmYWxzZSxcbiAgICAgIG1hcmdpbiA9ICdub25lJyxcbiAgICAgIHJlcXVpcmVkID0gZmFsc2UsXG4gICAgICBzaXplID0gJ21lZGl1bScsXG4gICAgICB2YXJpYW50ID0gJ291dGxpbmVkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgY29tcG9uZW50LFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGZ1bGxXaWR0aCxcbiAgICBoaWRkZW5MYWJlbCxcbiAgICBtYXJnaW4sXG4gICAgcmVxdWlyZWQsXG4gICAgc2l6ZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IFthZG9ybmVkU3RhcnQsIHNldEFkb3JuZWRTdGFydF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGxldCBpbml0aWFsQWRvcm5lZFN0YXJ0ID0gZmFsc2U7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmICghaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnB1dCA9IGlzTXVpRWxlbWVudChjaGlsZCwgWydTZWxlY3QnXSkgPyBjaGlsZC5wcm9wcy5pbnB1dCA6IGNoaWxkO1xuICAgICAgICBpZiAoaW5wdXQgJiYgaXNBZG9ybmVkU3RhcnQoaW5wdXQucHJvcHMpKSB7XG4gICAgICAgICAgaW5pdGlhbEFkb3JuZWRTdGFydCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSk7XG4gIGNvbnN0IFtmaWxsZWQsIHNldEZpbGxlZF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGxldCBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgIGlmICghaXNNdWlFbGVtZW50KGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGaWxsZWQoY2hpbGQucHJvcHMsIHRydWUpIHx8IGlzRmlsbGVkKGNoaWxkLnByb3BzLmlucHV0UHJvcHMsIHRydWUpKSB7XG4gICAgICAgICAgaW5pdGlhbEZpbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdGlhbEZpbGxlZDtcbiAgfSk7XG4gIGNvbnN0IFtmb2N1c2VkU3RhdGUsIHNldEZvY3VzZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNlZFN0YXRlKSB7XG4gICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gIH1cbiAgY29uc3QgZm9jdXNlZCA9IHZpc3VhbGx5Rm9jdXNlZCAhPT0gdW5kZWZpbmVkICYmICFkaXNhYmxlZCA/IHZpc3VhbGx5Rm9jdXNlZCA6IGZvY3VzZWRTdGF0ZTtcbiAgbGV0IHJlZ2lzdGVyRWZmZWN0O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIGNvbnN0IHJlZ2lzdGVyZWRJbnB1dCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gICAgcmVnaXN0ZXJFZmZlY3QgPSAoKSA9PiB7XG4gICAgICBpZiAocmVnaXN0ZXJlZElucHV0LmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogVGhlcmUgYXJlIG11bHRpcGxlIGBJbnB1dEJhc2VgIGNvbXBvbmVudHMgaW5zaWRlIGEgRm9ybUNvbnRyb2wuJywgJ1RoaXMgY3JlYXRlcyB2aXN1YWwgaW5jb25zaXN0ZW5jaWVzLCBvbmx5IHVzZSBvbmUgYElucHV0QmFzZWAuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICBjb25zdCBjaGlsZENvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgYWRvcm5lZFN0YXJ0LFxuICAgICAgc2V0QWRvcm5lZFN0YXJ0LFxuICAgICAgY29sb3IsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGVycm9yLFxuICAgICAgZmlsbGVkLFxuICAgICAgZm9jdXNlZCxcbiAgICAgIGZ1bGxXaWR0aCxcbiAgICAgIGhpZGRlbkxhYmVsLFxuICAgICAgc2l6ZSxcbiAgICAgIG9uQmx1cjogKCkgPT4ge1xuICAgICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBvbkVtcHR5OiAoKSA9PiB7XG4gICAgICAgIHNldEZpbGxlZChmYWxzZSk7XG4gICAgICB9LFxuICAgICAgb25GaWxsZWQ6ICgpID0+IHtcbiAgICAgICAgc2V0RmlsbGVkKHRydWUpO1xuICAgICAgfSxcbiAgICAgIG9uRm9jdXM6ICgpID0+IHtcbiAgICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICAgIH0sXG4gICAgICByZWdpc3RlckVmZmVjdCxcbiAgICAgIHJlcXVpcmVkLFxuICAgICAgdmFyaWFudFxuICAgIH07XG4gIH0sIFthZG9ybmVkU3RhcnQsIGNvbG9yLCBkaXNhYmxlZCwgZXJyb3IsIGZpbGxlZCwgZm9jdXNlZCwgZnVsbFdpZHRoLCBoaWRkZW5MYWJlbCwgcmVnaXN0ZXJFZmZlY3QsIHJlcXVpcmVkLCBzaXplLCB2YXJpYW50XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0LFxuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ29udHJvbFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIsIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH0pKVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUNvbnRyb2wucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2N1c3RvbS1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsLCBpbnB1dCBhbmQgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc3BsYXllZCBpbiBmb2N1c2VkIHN0YXRlLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgaGlkZGVuLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gaW5jcmVhc2UgZGVuc2l0eSBmb3IgYSBgRmlsbGVkSW5wdXRgLlxuICAgKiBCZSBzdXJlIHRvIGFkZCBgYXJpYS1sYWJlbGAgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGhpZGRlbkxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGBkZW5zZWAgb3IgYG5vcm1hbGAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcgb2YgdGhpcyBhbmQgY29udGFpbmVkIGNvbXBvbmVudHMuXG4gICAqIEBkZWZhdWx0ICdub25lJ1xuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJywgJ25vcm1hbCddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgYGlucHV0YCBpcyByZXF1aXJlZC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBAZGVmYXVsdCAnb3V0bGluZWQnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1IZWxwZXJUZXh0VXRpbGl0eUNsYXNzZXMoc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUZvcm1IZWxwZXJUZXh0Jywgc2xvdCk7XG59XG5jb25zdCBmb3JtSGVscGVyVGV4dENsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlGb3JtSGVscGVyVGV4dCcsIFsncm9vdCcsICdlcnJvcicsICdkaXNhYmxlZCcsICdzaXplU21hbGwnLCAnc2l6ZU1lZGl1bScsICdjb250YWluZWQnLCAnZm9jdXNlZCcsICdmaWxsZWQnLCAncmVxdWlyZWQnXSk7XG5leHBvcnQgZGVmYXVsdCBmb3JtSGVscGVyVGV4dENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xudmFyIF9zcGFuO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBmb3JtSGVscGVyVGV4dENsYXNzZXMsIHsgZ2V0Rm9ybUhlbHBlclRleHRVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vZm9ybUhlbHBlclRleHRDbGFzc2VzJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICBjb250YWluZWQsXG4gICAgc2l6ZSxcbiAgICBkaXNhYmxlZCxcbiAgICBlcnJvcixcbiAgICBmaWxsZWQsXG4gICAgZm9jdXNlZCxcbiAgICByZXF1aXJlZFxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgZXJyb3IgJiYgJ2Vycm9yJywgc2l6ZSAmJiBgc2l6ZSR7Y2FwaXRhbGl6ZShzaXplKX1gLCBjb250YWluZWQgJiYgJ2NvbnRhaW5lZCcsIGZvY3VzZWQgJiYgJ2ZvY3VzZWQnLCBmaWxsZWQgJiYgJ2ZpbGxlZCcsIHJlcXVpcmVkICYmICdyZXF1aXJlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Rm9ybUhlbHBlclRleHRVdGlsaXR5Q2xhc3NlcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgRm9ybUhlbHBlclRleHRSb290ID0gc3R5bGVkKCdwJywge1xuICBuYW1lOiAnTXVpRm9ybUhlbHBlclRleHQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5zaXplICYmIHN0eWxlc1tgc2l6ZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnNpemUpfWBdLCBvd25lclN0YXRlLmNvbnRhaW5lZCAmJiBzdHlsZXMuY29udGFpbmVkLCBvd25lclN0YXRlLmZpbGxlZCAmJiBzdHlsZXMuZmlsbGVkXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG59LCB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sIHtcbiAgdGV4dEFsaWduOiAnbGVmdCcsXG4gIG1hcmdpblRvcDogMyxcbiAgbWFyZ2luUmlnaHQ6IDAsXG4gIG1hcmdpbkJvdHRvbTogMCxcbiAgbWFyZ2luTGVmdDogMCxcbiAgW2AmLiR7Zm9ybUhlbHBlclRleHRDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLnRleHQuZGlzYWJsZWRcbiAgfSxcbiAgW2AmLiR7Zm9ybUhlbHBlclRleHRDbGFzc2VzLmVycm9yfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmVycm9yLm1haW5cbiAgfVxufSwgb3duZXJTdGF0ZS5zaXplID09PSAnc21hbGwnICYmIHtcbiAgbWFyZ2luVG9wOiA0XG59LCBvd25lclN0YXRlLmNvbnRhaW5lZCAmJiB7XG4gIG1hcmdpbkxlZnQ6IDE0LFxuICBtYXJnaW5SaWdodDogMTRcbn0pKTtcbmNvbnN0IEZvcm1IZWxwZXJUZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUhlbHBlclRleHQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUZvcm1IZWxwZXJUZXh0J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQgPSAncCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbXVpRm9ybUNvbnRyb2wgPSB1c2VGb3JtQ29udHJvbCgpO1xuICBjb25zdCBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCcsICdzaXplJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCcsICdmb2N1c2VkJywgJ3JlcXVpcmVkJ11cbiAgfSk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb21wb25lbnQsXG4gICAgY29udGFpbmVkOiBmY3MudmFyaWFudCA9PT0gJ2ZpbGxlZCcgfHwgZmNzLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcsXG4gICAgdmFyaWFudDogZmNzLnZhcmlhbnQsXG4gICAgc2l6ZTogZmNzLnNpemUsXG4gICAgZGlzYWJsZWQ6IGZjcy5kaXNhYmxlZCxcbiAgICBlcnJvcjogZmNzLmVycm9yLFxuICAgIGZpbGxlZDogZmNzLmZpbGxlZCxcbiAgICBmb2N1c2VkOiBmY3MuZm9jdXNlZCxcbiAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkXG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChGb3JtSGVscGVyVGV4dFJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbiA9PT0gJyAnID8gLy8gbm90cmFuc2xhdGUgbmVlZGVkIHdoaWxlIEdvb2dsZSBUcmFuc2xhdGUgd2lsbCBub3QgZml4IHplcm8td2lkdGggc3BhY2UgaXNzdWVcbiAgICBfc3BhbiB8fCAoX3NwYW4gPSAvKiNfX1BVUkVfXyovX2pzeChcInNwYW5cIiwge1xuICAgICAgY2xhc3NOYW1lOiBcIm5vdHJhbnNsYXRlXCIsXG4gICAgICBjaGlsZHJlbjogXCJcXHUyMDBCXCJcbiAgICB9KSkgOiBjaGlsZHJlblxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1IZWxwZXJUZXh0LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIElmIGAnICdgIGlzIHByb3ZpZGVkLCB0aGUgY29tcG9uZW50IHJlc2VydmVzIG9uZSBsaW5lIGhlaWdodCBmb3IgZGlzcGxheWluZyBhIGZ1dHVyZSBtZXNzYWdlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSBmaWxsZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmaWxsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSBmb2N1c2VkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSByZXF1aXJlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGb3JtSGVscGVyVGV4dDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFsdWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFJ0bENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCgpO1xuZnVuY3Rpb24gUnRsUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgICAgdmFsdWVcbiAgICB9ID0gX3JlZixcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSdGxDb250ZXh0LlByb3ZpZGVyLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHRydWVcbiAgfSwgcHJvcHMpKTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJ0bFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICB2YWx1ZTogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgY29uc3QgdXNlUnRsID0gKCkgPT4ge1xuICBjb25zdCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoUnRsQ29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBmYWxzZTtcbn07XG5leHBvcnQgZGVmYXVsdCBSdGxQcm92aWRlcjsiLCJpbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICdAbXVpL3V0aWxzL2dldFNjcm9sbGJhclNpemUnO1xuZXhwb3J0IGRlZmF1bHQgZ2V0U2Nyb2xsYmFyU2l6ZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhY3Rpb25zXCIsIFwiYXV0b0ZvY3VzXCIsIFwiYXV0b0ZvY3VzSXRlbVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZVwiLCBcImRpc2FibGVMaXN0V3JhcFwiLCBcIm9uS2V5RG93blwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi4vTGlzdCc7XG5pbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICcuLi91dGlscy9nZXRTY3JvbGxiYXJTaXplJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4uL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5mdW5jdGlvbiBuZXh0SXRlbShsaXN0LCBpdGVtLCBkaXNhYmxlTGlzdFdyYXApIHtcbiAgaWYgKGxpc3QgPT09IGl0ZW0pIHtcbiAgICByZXR1cm4gbGlzdC5maXJzdENoaWxkO1xuICB9XG4gIGlmIChpdGVtICYmIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgcmV0dXJuIGl0ZW0ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG4gIHJldHVybiBkaXNhYmxlTGlzdFdyYXAgPyBudWxsIDogbGlzdC5maXJzdENoaWxkO1xufVxuZnVuY3Rpb24gcHJldmlvdXNJdGVtKGxpc3QsIGl0ZW0sIGRpc2FibGVMaXN0V3JhcCkge1xuICBpZiAobGlzdCA9PT0gaXRlbSkge1xuICAgIHJldHVybiBkaXNhYmxlTGlzdFdyYXAgPyBsaXN0LmZpcnN0Q2hpbGQgOiBsaXN0Lmxhc3RDaGlsZDtcbiAgfVxuICBpZiAoaXRlbSAmJiBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG4gIHJldHVybiBkaXNhYmxlTGlzdFdyYXAgPyBudWxsIDogbGlzdC5sYXN0Q2hpbGQ7XG59XG5mdW5jdGlvbiB0ZXh0Q3JpdGVyaWFNYXRjaGVzKG5leHRGb2N1cywgdGV4dENyaXRlcmlhKSB7XG4gIGlmICh0ZXh0Q3JpdGVyaWEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGxldCB0ZXh0ID0gbmV4dEZvY3VzLmlubmVyVGV4dDtcbiAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIGpzZG9tIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lclRleHRcbiAgICB0ZXh0ID0gbmV4dEZvY3VzLnRleHRDb250ZW50O1xuICB9XG4gIHRleHQgPSB0ZXh0LnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICBpZiAodGV4dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHRleHRDcml0ZXJpYS5yZXBlYXRpbmcpIHtcbiAgICByZXR1cm4gdGV4dFswXSA9PT0gdGV4dENyaXRlcmlhLmtleXNbMF07XG4gIH1cbiAgcmV0dXJuIHRleHQuaW5kZXhPZih0ZXh0Q3JpdGVyaWEua2V5cy5qb2luKCcnKSkgPT09IDA7XG59XG5mdW5jdGlvbiBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHRyYXZlcnNhbEZ1bmN0aW9uLCB0ZXh0Q3JpdGVyaWEpIHtcbiAgbGV0IHdyYXBwZWRPbmNlID0gZmFsc2U7XG4gIGxldCBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBjdXJyZW50Rm9jdXMsIGN1cnJlbnRGb2N1cyA/IGRpc2FibGVMaXN0V3JhcCA6IGZhbHNlKTtcbiAgd2hpbGUgKG5leHRGb2N1cykge1xuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcC5cbiAgICBpZiAobmV4dEZvY3VzID09PSBsaXN0LmZpcnN0Q2hpbGQpIHtcbiAgICAgIGlmICh3cmFwcGVkT25jZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB3cmFwcGVkT25jZSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gU2FtZSBsb2dpYyBhcyB1c2VBdXRvY29tcGxldGUuanNcbiAgICBjb25zdCBuZXh0Rm9jdXNEaXNhYmxlZCA9IGRpc2FibGVkSXRlbXNGb2N1c2FibGUgPyBmYWxzZSA6IG5leHRGb2N1cy5kaXNhYmxlZCB8fCBuZXh0Rm9jdXMuZ2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJykgPT09ICd0cnVlJztcbiAgICBpZiAoIW5leHRGb2N1cy5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykgfHwgIXRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpIHx8IG5leHRGb2N1c0Rpc2FibGVkKSB7XG4gICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnQuXG4gICAgICBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBuZXh0Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRGb2N1cy5mb2N1cygpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBBIHBlcm1hbmVudGx5IGRpc3BsYXllZCBtZW51IGZvbGxvd2luZyBodHRwczovL3d3dy53My5vcmcvV0FJL0FSSUEvYXBnL3BhdHRlcm5zL21lbnUtYnV0dG9uLy5cbiAqIEl0J3MgZXhwb3NlZCB0byBoZWxwIGN1c3RvbWl6YXRpb24gb2YgdGhlIFtgTWVudWBdKC9tYXRlcmlhbC11aS9hcGkvbWVudS8pIGNvbXBvbmVudCBpZiB5b3VcbiAqIHVzZSBpdCBzZXBhcmF0ZWx5IHlvdSBuZWVkIHRvIG1vdmUgZm9jdXMgaW50byB0aGUgY29tcG9uZW50IG1hbnVhbGx5LiBPbmNlXG4gKiB0aGUgZm9jdXMgaXMgcGxhY2VkIGluc2lkZSB0aGUgY29tcG9uZW50IGl0IGlzIGZ1bGx5IGtleWJvYXJkIGFjY2Vzc2libGUuXG4gKi9cbmNvbnN0IE1lbnVMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTWVudUxpc3QocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgICAvLyBwcml2YXRlXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvcHJvcC10eXBlc1xuICAgICAgYWN0aW9ucyxcbiAgICAgIGF1dG9Gb2N1cyA9IGZhbHNlLFxuICAgICAgYXV0b0ZvY3VzSXRlbSA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID0gZmFsc2UsXG4gICAgICBkaXNhYmxlTGlzdFdyYXAgPSBmYWxzZSxcbiAgICAgIG9uS2V5RG93bixcbiAgICAgIHZhcmlhbnQgPSAnc2VsZWN0ZWRNZW51J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBsaXN0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCB0ZXh0Q3JpdGVyaWFSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIGtleXM6IFtdLFxuICAgIHJlcGVhdGluZzogdHJ1ZSxcbiAgICBwcmV2aW91c0tleU1hdGNoZWQ6IHRydWUsXG4gICAgbGFzdFRpbWU6IG51bGxcbiAgfSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBsaXN0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb25zLCAoKSA9PiAoe1xuICAgIGFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyOiAoY29udGFpbmVyRWxlbWVudCwge1xuICAgICAgZGlyZWN0aW9uXG4gICAgfSkgPT4ge1xuICAgICAgLy8gTGV0J3MgaWdub3JlIHRoYXQgcGllY2Ugb2YgbG9naWMgaWYgdXNlcnMgYXJlIGFscmVhZHkgb3ZlcnJpZGluZyB0aGUgd2lkdGhcbiAgICAgIC8vIG9mIHRoZSBtZW51LlxuICAgICAgY29uc3Qgbm9FeHBsaWNpdFdpZHRoID0gIWxpc3RSZWYuY3VycmVudC5zdHlsZS53aWR0aDtcbiAgICAgIGlmIChjb250YWluZXJFbGVtZW50LmNsaWVudEhlaWdodCA8IGxpc3RSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgJiYgbm9FeHBsaWNpdFdpZHRoKSB7XG4gICAgICAgIGNvbnN0IHNjcm9sbGJhclNpemUgPSBgJHtnZXRTY3JvbGxiYXJTaXplKG93bmVyRG9jdW1lbnQoY29udGFpbmVyRWxlbWVudCkpfXB4YDtcbiAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlW2RpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCddID0gc2Nyb2xsYmFyU2l6ZTtcbiAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlLndpZHRoID0gYGNhbGMoMTAwJSArICR7c2Nyb2xsYmFyU2l6ZX0pYDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsaXN0UmVmLmN1cnJlbnQ7XG4gICAgfVxuICB9KSwgW10pO1xuICBjb25zdCBoYW5kbGVLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGNvbnN0IGxpc3QgPSBsaXN0UmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qga2V5ID0gZXZlbnQua2V5O1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtFbGVtZW50fSAtIHdpbGwgYWx3YXlzIGJlIGRlZmluZWQgc2luY2Ugd2UgYXJlIGluIGEga2V5ZG93biBoYW5kbGVyXG4gICAgICogYXR0YWNoZWQgdG8gYW4gZWxlbWVudC4gQSBrZXlkb3duIGV2ZW50IGlzIGVpdGhlciBkaXNwYXRjaGVkIHRvIHRoZSBhY3RpdmVFbGVtZW50XG4gICAgICogb3IgZG9jdW1lbnQuYm9keSBvciBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuIE9ubHkgdGhlIGZpcnN0IGNhc2Ugd2lsbFxuICAgICAqIHRyaWdnZXIgdGhpcyBzcGVjaWZpYyBoYW5kbGVyLlxuICAgICAqL1xuICAgIGNvbnN0IGN1cnJlbnRGb2N1cyA9IG93bmVyRG9jdW1lbnQobGlzdCkuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoa2V5ID09PSAnQXJyb3dEb3duJykge1xuICAgICAgLy8gUHJldmVudCBzY3JvbGwgb2YgdGhlIHBhZ2VcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBwcmV2aW91c0l0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnSG9tZScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBuZXh0SXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdFbmQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbW92ZUZvY3VzKGxpc3QsIG51bGwsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgcHJldmlvdXNJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNyaXRlcmlhID0gdGV4dENyaXRlcmlhUmVmLmN1cnJlbnQ7XG4gICAgICBjb25zdCBsb3dlcktleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY29uc3QgY3VyclRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGlmIChjcml0ZXJpYS5rZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gUmVzZXRcbiAgICAgICAgaWYgKGN1cnJUaW1lIC0gY3JpdGVyaWEubGFzdFRpbWUgPiA1MDApIHtcbiAgICAgICAgICBjcml0ZXJpYS5rZXlzID0gW107XG4gICAgICAgICAgY3JpdGVyaWEucmVwZWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGNyaXRlcmlhLnJlcGVhdGluZyAmJiBsb3dlcktleSAhPT0gY3JpdGVyaWEua2V5c1swXSkge1xuICAgICAgICAgIGNyaXRlcmlhLnJlcGVhdGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjcml0ZXJpYS5sYXN0VGltZSA9IGN1cnJUaW1lO1xuICAgICAgY3JpdGVyaWEua2V5cy5wdXNoKGxvd2VyS2V5KTtcbiAgICAgIGNvbnN0IGtlZXBGb2N1c09uQ3VycmVudCA9IGN1cnJlbnRGb2N1cyAmJiAhY3JpdGVyaWEucmVwZWF0aW5nICYmIHRleHRDcml0ZXJpYU1hdGNoZXMoY3VycmVudEZvY3VzLCBjcml0ZXJpYSk7XG4gICAgICBpZiAoY3JpdGVyaWEucHJldmlvdXNLZXlNYXRjaGVkICYmIChrZWVwRm9jdXNPbkN1cnJlbnQgfHwgbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZmFsc2UsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtLCBjcml0ZXJpYSkpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobGlzdFJlZiwgcmVmKTtcblxuICAvKipcbiAgICogdGhlIGluZGV4IG9mIHRoZSBpdGVtIHNob3VsZCByZWNlaXZlIGZvY3VzXG4gICAqIGluIGEgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAgaXQncyB0aGUgZmlyc3QgYHNlbGVjdGVkYCBpdGVtXG4gICAqIG90aGVyd2lzZSBpdCdzIHRoZSB2ZXJ5IGZpcnN0IGl0ZW0uXG4gICAqL1xuICBsZXQgYWN0aXZlSXRlbUluZGV4ID0gLTE7XG4gIC8vIHNpbmNlIHdlIGluamVjdCBmb2N1cyByZWxhdGVkIHByb3BzIGludG8gY2hpbGRyZW4gd2UgaGF2ZSB0byBkbyBhIGxvb2thaGVhZFxuICAvLyB0byBjaGVjayBpZiB0aGVyZSBpcyBhIGBzZWxlY3RlZGAgaXRlbS4gV2UncmUgbG9va2luZyBmb3IgdGhlIGxhc3QgYHNlbGVjdGVkYFxuICAvLyBpdGVtIGFuZCB1c2UgdGhlIGZpcnN0IHZhbGlkIGl0ZW0gYXMgYSBmYWxsYmFja1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ICs9IDE7XG4gICAgICAgIGlmIChhY3RpdmVJdGVtSW5kZXggPj0gY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdGhlcmUgYXJlIG5vIGZvY3VzYWJsZSBpdGVtcyB3aXRoaW4gdGhlIGxpc3QuXG4gICAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1VSTogVGhlIE1lbnUgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgaWYgKHZhcmlhbnQgPT09ICdzZWxlY3RlZE1lbnUnICYmIGNoaWxkLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfSBlbHNlIGlmIChhY3RpdmVJdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWN0aXZlSXRlbUluZGV4ID09PSBpbmRleCAmJiAoY2hpbGQucHJvcHMuZGlzYWJsZWQgfHwgY2hpbGQucHJvcHMubXVpU2tpcExpc3RIaWdobGlnaHQgfHwgY2hpbGQudHlwZS5tdWlTa2lwTGlzdEhpZ2hsaWdodCkpIHtcbiAgICAgIGFjdGl2ZUl0ZW1JbmRleCArPSAxO1xuICAgICAgaWYgKGFjdGl2ZUl0ZW1JbmRleCA+PSBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgLy8gdGhlcmUgYXJlIG5vIGZvY3VzYWJsZSBpdGVtcyB3aXRoaW4gdGhlIGxpc3QuXG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IC0xO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGl0ZW1zID0gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSBhY3RpdmVJdGVtSW5kZXgpIHtcbiAgICAgIGNvbnN0IG5ld0NoaWxkUHJvcHMgPSB7fTtcbiAgICAgIGlmIChhdXRvRm9jdXNJdGVtKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMuYXV0b0ZvY3VzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkICYmIHZhcmlhbnQgPT09ICdzZWxlY3RlZE1lbnUnKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMudGFiSW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIG5ld0NoaWxkUHJvcHMpO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goTGlzdCwgX2V4dGVuZHMoe1xuICAgIHJvbGU6IFwibWVudVwiLFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICB0YWJJbmRleDogYXV0b0ZvY3VzID8gMCA6IC0xXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IGl0ZW1zXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTWVudUxpc3QucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogSWYgYHRydWVgLCB3aWxsIGZvY3VzIHRoZSBgW3JvbGU9XCJtZW51XCJdYCBjb250YWluZXIgYW5kIG1vdmUgaW50byB0YWIgb3JkZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB3aWxsIGZvY3VzIHRoZSBmaXJzdCBtZW51aXRlbSBpZiBgdmFyaWFudD1cIm1lbnVcImAgb3Igc2VsZWN0ZWQgaXRlbVxuICAgKiBpZiBgdmFyaWFudD1cInNlbGVjdGVkTWVudVwiYC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1c0l0ZW06IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTWVudUxpc3QgY29udGVudHMsIG5vcm1hbGx5IGBNZW51SXRlbWBzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB3aWxsIGFsbG93IGZvY3VzIG9uIGRpc2FibGVkIGl0ZW1zLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGl0ZW1zIHdpbGwgbm90IHdyYXAgZm9jdXMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlTGlzdFdyYXA6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS4gVXNlIGBtZW51YCB0byBwcmV2ZW50IHNlbGVjdGVkIGl0ZW1zIGZyb20gaW1wYWN0aW5nIHRoZSBpbml0aWFsIGZvY3VzXG4gICAqIGFuZCB0aGUgdmVydGljYWwgYWxpZ25tZW50IHJlbGF0aXZlIHRvIHRoZSBhbmNob3IgZWxlbWVudC5cbiAgICogQGRlZmF1bHQgJ3NlbGVjdGVkTWVudSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ21lbnUnLCAnc2VsZWN0ZWRNZW51J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTWVudUxpc3Q7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW51VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlNZW51Jywgc2xvdCk7XG59XG5jb25zdCBtZW51Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aU1lbnUnLCBbJ3Jvb3QnLCAncGFwZXInLCAnbGlzdCddKTtcbmV4cG9ydCBkZWZhdWx0IG1lbnVDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uRW50ZXJpbmdcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVBdXRvRm9jdXNJdGVtXCIsIFwiTWVudUxpc3RQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlBvcG92ZXJDbGFzc2VzXCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCIsIFwidmFyaWFudFwiLCBcInNsb3RzXCIsIFwic2xvdFByb3BzXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNGcmFnbWVudCB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCB7IHVzZVNsb3RQcm9wcyB9IGZyb20gJ0BtdWkvYmFzZS91dGlscyc7XG5pbXBvcnQgSFRNTEVsZW1lbnRUeXBlIGZyb20gJ0BtdWkvdXRpbHMvSFRNTEVsZW1lbnRUeXBlJztcbmltcG9ydCB7IHVzZVJ0bCB9IGZyb20gJ0BtdWkvc3lzdGVtL1J0bFByb3ZpZGVyJztcbmltcG9ydCBNZW51TGlzdCBmcm9tICcuLi9NZW51TGlzdCc7XG5pbXBvcnQgUG9wb3ZlciwgeyBQb3BvdmVyUGFwZXIgfSBmcm9tICcuLi9Qb3BvdmVyJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRNZW51VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9tZW51Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgUlRMX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAncmlnaHQnXG59O1xuY29uc3QgTFRSX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAnbGVmdCdcbn07XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290J10sXG4gICAgcGFwZXI6IFsncGFwZXInXSxcbiAgICBsaXN0OiBbJ2xpc3QnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldE1lbnVVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IE1lbnVSb290ID0gc3R5bGVkKFBvcG92ZXIsIHtcbiAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcm9vdFNob3VsZEZvcndhcmRQcm9wKHByb3ApIHx8IHByb3AgPT09ICdjbGFzc2VzJyxcbiAgbmFtZTogJ011aU1lbnUnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcbmV4cG9ydCBjb25zdCBNZW51UGFwZXIgPSBzdHlsZWQoUG9wb3ZlclBhcGVyLCB7XG4gIG5hbWU6ICdNdWlNZW51JyxcbiAgc2xvdDogJ1BhcGVyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucGFwZXJcbn0pKHtcbiAgLy8gc3BlY1o6IFRoZSBtYXhpbXVtIGhlaWdodCBvZiBhIHNpbXBsZSBtZW51IHNob3VsZCBiZSBvbmUgb3IgbW9yZSByb3dzIGxlc3MgdGhhbiB0aGUgdmlld1xuICAvLyBoZWlnaHQuIFRoaXMgZW5zdXJlcyBhIHRhcHBhYmxlIGFyZWEgb3V0c2lkZSBvZiB0aGUgc2ltcGxlIG1lbnUgd2l0aCB3aGljaCB0byBkaXNtaXNzXG4gIC8vIHRoZSBtZW51LlxuICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSA5NnB4KScsXG4gIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nIGZvciBpT1MgPCAxMy4wXG4gIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnXG59KTtcbmNvbnN0IE1lbnVNZW51TGlzdCA9IHN0eWxlZChNZW51TGlzdCwge1xuICBuYW1lOiAnTXVpTWVudScsXG4gIHNsb3Q6ICdMaXN0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMubGlzdFxufSkoe1xuICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICBvdXRsaW5lOiAwXG59KTtcbmNvbnN0IE1lbnUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNZW51KGluUHJvcHMsIHJlZikge1xuICB2YXIgX3Nsb3RzJHBhcGVyLCBfc2xvdFByb3BzJHBhcGVyO1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlNZW51J1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgYXV0b0ZvY3VzID0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gPSBmYWxzZSxcbiAgICAgIE1lbnVMaXN0UHJvcHMgPSB7fSxcbiAgICAgIG9uQ2xvc2UsXG4gICAgICBvcGVuLFxuICAgICAgUGFwZXJQcm9wcyA9IHt9LFxuICAgICAgUG9wb3ZlckNsYXNzZXMsXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSAnYXV0bycsXG4gICAgICBUcmFuc2l0aW9uUHJvcHM6IHtcbiAgICAgICAgb25FbnRlcmluZ1xuICAgICAgfSA9IHt9LFxuICAgICAgdmFyaWFudCA9ICdzZWxlY3RlZE1lbnUnLFxuICAgICAgc2xvdHMgPSB7fSxcbiAgICAgIHNsb3RQcm9wcyA9IHt9XG4gICAgfSA9IHByb3BzLFxuICAgIFRyYW5zaXRpb25Qcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLlRyYW5zaXRpb25Qcm9wcywgX2V4Y2x1ZGVkKSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQyKTtcbiAgY29uc3QgaXNSdGwgPSB1c2VSdGwoKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlQXV0b0ZvY3VzSXRlbSxcbiAgICBNZW51TGlzdFByb3BzLFxuICAgIG9uRW50ZXJpbmcsXG4gICAgUGFwZXJQcm9wcyxcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgVHJhbnNpdGlvblByb3BzLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgYXV0b0ZvY3VzSXRlbSA9IGF1dG9Gb2N1cyAmJiAhZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gJiYgb3BlbjtcbiAgY29uc3QgbWVudUxpc3RBY3Rpb25zUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBoYW5kbGVFbnRlcmluZyA9IChlbGVtZW50LCBpc0FwcGVhcmluZykgPT4ge1xuICAgIGlmIChtZW51TGlzdEFjdGlvbnNSZWYuY3VycmVudCkge1xuICAgICAgbWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQuYWRqdXN0U3R5bGVGb3JTY3JvbGxiYXIoZWxlbWVudCwge1xuICAgICAgICBkaXJlY3Rpb246IGlzUnRsID8gJ3J0bCcgOiAnbHRyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChvbkVudGVyaW5nKSB7XG4gICAgICBvbkVudGVyaW5nKGVsZW1lbnQsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZUxpc3RLZXlEb3duID0gZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5rZXkgPT09ICdUYWInKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG9uQ2xvc2UpIHtcbiAgICAgICAgb25DbG9zZShldmVudCwgJ3RhYktleURvd24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIHRoZSBpbmRleCBvZiB0aGUgaXRlbSBzaG91bGQgcmVjZWl2ZSBmb2N1c1xuICAgKiBpbiBhIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgIGl0J3MgdGhlIGZpcnN0IGBzZWxlY3RlZGAgaXRlbVxuICAgKiBvdGhlcndpc2UgaXQncyB0aGUgdmVyeSBmaXJzdCBpdGVtLlxuICAgKi9cbiAgbGV0IGFjdGl2ZUl0ZW1JbmRleCA9IC0xO1xuICAvLyBzaW5jZSB3ZSBpbmplY3QgZm9jdXMgcmVsYXRlZCBwcm9wcyBpbnRvIGNoaWxkcmVuIHdlIGhhdmUgdG8gZG8gYSBsb29rYWhlYWRcbiAgLy8gdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBgc2VsZWN0ZWRgIGl0ZW0uIFdlJ3JlIGxvb2tpbmcgZm9yIHRoZSBsYXN0IGBzZWxlY3RlZGBcbiAgLy8gaXRlbSBhbmQgdXNlIHRoZSBmaXJzdCB2YWxpZCBpdGVtIGFzIGEgZmFsbGJhY2tcbiAgUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgTWVudSBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gJ3NlbGVjdGVkTWVudScgJiYgY2hpbGQucHJvcHMuc2VsZWN0ZWQpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgUGFwZXJTbG90ID0gKF9zbG90cyRwYXBlciA9IHNsb3RzLnBhcGVyKSAhPSBudWxsID8gX3Nsb3RzJHBhcGVyIDogTWVudVBhcGVyO1xuICBjb25zdCBwYXBlckV4dGVybmFsU2xvdFByb3BzID0gKF9zbG90UHJvcHMkcGFwZXIgPSBzbG90UHJvcHMucGFwZXIpICE9IG51bGwgPyBfc2xvdFByb3BzJHBhcGVyIDogUGFwZXJQcm9wcztcbiAgY29uc3Qgcm9vdFNsb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IHNsb3RzLnJvb3QsXG4gICAgZXh0ZXJuYWxTbG90UHJvcHM6IHNsb3RQcm9wcy5yb290LFxuICAgIG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5yb290LCBjbGFzc05hbWVdXG4gIH0pO1xuICBjb25zdCBwYXBlclNsb3RQcm9wcyA9IHVzZVNsb3RQcm9wcyh7XG4gICAgZWxlbWVudFR5cGU6IFBhcGVyU2xvdCxcbiAgICBleHRlcm5hbFNsb3RQcm9wczogcGFwZXJFeHRlcm5hbFNsb3RQcm9wcyxcbiAgICBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5wYXBlclxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE1lbnVSb290LCBfZXh0ZW5kcyh7XG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICBhbmNob3JPcmlnaW46IHtcbiAgICAgIHZlcnRpY2FsOiAnYm90dG9tJyxcbiAgICAgIGhvcml6b250YWw6IGlzUnRsID8gJ3JpZ2h0JyA6ICdsZWZ0J1xuICAgIH0sXG4gICAgdHJhbnNmb3JtT3JpZ2luOiBpc1J0bCA/IFJUTF9PUklHSU4gOiBMVFJfT1JJR0lOLFxuICAgIHNsb3RzOiB7XG4gICAgICBwYXBlcjogUGFwZXJTbG90LFxuICAgICAgcm9vdDogc2xvdHMucm9vdFxuICAgIH0sXG4gICAgc2xvdFByb3BzOiB7XG4gICAgICByb290OiByb290U2xvdFByb3BzLFxuICAgICAgcGFwZXI6IHBhcGVyU2xvdFByb3BzXG4gICAgfSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIFRyYW5zaXRpb25Qcm9wczogX2V4dGVuZHMoe1xuICAgICAgb25FbnRlcmluZzogaGFuZGxlRW50ZXJpbmdcbiAgICB9LCBUcmFuc2l0aW9uUHJvcHMpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgfSwgb3RoZXIsIHtcbiAgICBjbGFzc2VzOiBQb3BvdmVyQ2xhc3NlcyxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goTWVudU1lbnVMaXN0LCBfZXh0ZW5kcyh7XG4gICAgICBvbktleURvd246IGhhbmRsZUxpc3RLZXlEb3duLFxuICAgICAgYWN0aW9uczogbWVudUxpc3RBY3Rpb25zUmVmLFxuICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMgJiYgKGFjdGl2ZUl0ZW1JbmRleCA9PT0gLTEgfHwgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0pLFxuICAgICAgYXV0b0ZvY3VzSXRlbTogYXV0b0ZvY3VzSXRlbSxcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5saXN0LCBNZW51TGlzdFByb3BzLmNsYXNzTmFtZSksXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNZW51LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyDilIzilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV2FybmluZyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJBcbiAgLy8g4pSCIFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucy4g4pSCXG4gIC8vIOKUgiAgICBUbyB1cGRhdGUgdGhlbSwgZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gYHBucG0gcHJvcHR5cGVzYC4gICAgIOKUglxuICAvLyDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbiAgLyoqXG4gICAqIEFuIEhUTUwgZWxlbWVudCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgb25lLlxuICAgKiBJdCdzIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVudS5cbiAgICovXG4gIGFuY2hvckVsOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCAoRGVmYXVsdCkgd2lsbCBmb2N1cyB0aGUgYFtyb2xlPVwibWVudVwiXWAgaWYgbm8gZm9jdXNhYmxlIGNoaWxkIGlzIGZvdW5kLiBEaXNhYmxlZFxuICAgKiBjaGlsZHJlbiBhcmUgbm90IGZvY3VzYWJsZS4gSWYgeW91IHNldCB0aGlzIHByb3AgdG8gYGZhbHNlYCBmb2N1cyB3aWxsIGJlIHBsYWNlZFxuICAgKiBvbiB0aGUgcGFyZW50IG1vZGFsIGNvbnRhaW5lci4gVGhpcyBoYXMgc2V2ZXJlIGFjY2Vzc2liaWxpdHkgaW1wbGljYXRpb25zXG4gICAqIGFuZCBzaG91bGQgb25seSBiZSBjb25zaWRlcmVkIGlmIHlvdSBtYW5hZ2UgZm9jdXMgb3RoZXJ3aXNlLlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTWVudSBjb250ZW50cywgbm9ybWFsbHkgYE1lbnVJdGVtYHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogV2hlbiBvcGVuaW5nIHRoZSBtZW51IHdpbGwgbm90IGZvY3VzIHRoZSBhY3RpdmUgaXRlbSBidXQgdGhlIGBbcm9sZT1cIm1lbnVcIl1gXG4gICAqIHVubGVzcyBgYXV0b0ZvY3VzYCBpcyBhbHNvIHNldCB0byBgZmFsc2VgLiBOb3QgdXNpbmcgdGhlIGRlZmF1bHQgbWVhbnMgbm90XG4gICAqIGZvbGxvd2luZyBXQUktQVJJQSBhdXRob3JpbmcgcHJhY3RpY2VzLiBQbGVhc2UgYmUgY29uc2lkZXJhdGUgYWJvdXQgcG9zc2libGVcbiAgICogYWNjZXNzaWJpbGl0eSBpbXBsaWNhdGlvbnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzSXRlbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVMaXN0YF0oL21hdGVyaWFsLXVpL2FwaS9tZW51LWxpc3QvKSBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgTWVudUxpc3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAsIGBcInRhYktleURvd25cImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogYGNsYXNzZXNgIHByb3AgYXBwbGllZCB0byB0aGUgW2BQb3BvdmVyYF0oL21hdGVyaWFsLXVpL2FwaS9wb3BvdmVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcG92ZXJDbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGV4dHJhIHByb3BzIGZvciB0aGUgc2xvdCBjb21wb25lbnRzLlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoZSBleGlzdGluZyBwcm9wcyBvciBhZGQgbmV3IG9uZXMuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90UHJvcHM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcGFwZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgcm9vdDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnRzIHVzZWQgZm9yIGVhY2ggc2xvdCBpbnNpZGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IHt9XG4gICAqL1xuICBzbG90czogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBwYXBlcjogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIHJvb3Q6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSBsZW5ndGggb2YgdGhlIHRyYW5zaXRpb24gaW4gYG1zYCwgb3IgJ2F1dG8nXG4gICAqIEBkZWZhdWx0ICdhdXRvJ1xuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSksXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSB0cmFuc2l0aW9uIGVsZW1lbnQuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBlbGVtZW50IGlzIGJhc2VkIG9uIHRoaXMgW2BUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC90cmFuc2l0aW9uLykgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCB7fVxuICAgKi9cbiAgVHJhbnNpdGlvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLiBVc2UgYG1lbnVgIHRvIHByZXZlbnQgc2VsZWN0ZWQgaXRlbXMgZnJvbSBpbXBhY3RpbmcgdGhlIGluaXRpYWwgZm9jdXMuXG4gICAqIEBkZWZhdWx0ICdzZWxlY3RlZE1lbnUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydtZW51JywgJ3NlbGVjdGVkTWVudSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE1lbnU7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXROYXRpdmVTZWxlY3RVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTmF0aXZlU2VsZWN0Jywgc2xvdCk7XG59XG5jb25zdCBuYXRpdmVTZWxlY3RDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTmF0aXZlU2VsZWN0JywgWydyb290JywgJ3NlbGVjdCcsICdtdWx0aXBsZScsICdmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnLCAnZGlzYWJsZWQnLCAnaWNvbicsICdpY29uT3BlbicsICdpY29uRmlsbGVkJywgJ2ljb25PdXRsaW5lZCcsICdpY29uU3RhbmRhcmQnLCAnbmF0aXZlSW5wdXQnLCAnZXJyb3InXSk7XG5leHBvcnQgZGVmYXVsdCBuYXRpdmVTZWxlY3RDbGFzc2VzOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJ2YXJpYW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHJlZlR5cGUgZnJvbSAnQG11aS91dGlscy9yZWZUeXBlJztcbmltcG9ydCBjb21wb3NlQ2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2NvbXBvc2VDbGFzc2VzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IG5hdGl2ZVNlbGVjdENsYXNzZXMsIHsgZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMgfSBmcm9tICcuL25hdGl2ZVNlbGVjdENsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCwgeyByb290U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGRpc2FibGVkLFxuICAgIG11bHRpcGxlLFxuICAgIG9wZW4sXG4gICAgZXJyb3JcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHNlbGVjdDogWydzZWxlY3QnLCB2YXJpYW50LCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnLCBtdWx0aXBsZSAmJiAnbXVsdGlwbGUnLCBlcnJvciAmJiAnZXJyb3InXSxcbiAgICBpY29uOiBbJ2ljb24nLCBgaWNvbiR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBvcGVuICYmICdpY29uT3BlbicsIGRpc2FibGVkICYmICdkaXNhYmxlZCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TmF0aXZlU2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcbmV4cG9ydCBjb25zdCBuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMgPSAoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBNb3pBcHBlYXJhbmNlOiAnbm9uZScsXG4gIC8vIFJlc2V0XG4gIFdlYmtpdEFwcGVhcmFuY2U6ICdub25lJyxcbiAgLy8gUmVzZXRcbiAgLy8gV2hlbiBpbnRlcmFjdGluZyBxdWlja2x5LCB0aGUgdGV4dCBjYW4gZW5kIHVwIHNlbGVjdGVkLlxuICAvLyBOYXRpdmUgc2VsZWN0IGNhbid0IGJlIHNlbGVjdGVkIGVpdGhlci5cbiAgdXNlclNlbGVjdDogJ25vbmUnLFxuICBib3JkZXJSYWRpdXM6IDAsXG4gIC8vIFJlc2V0XG4gIGN1cnNvcjogJ3BvaW50ZXInLFxuICAnJjpmb2N1cyc6IF9leHRlbmRzKHt9LCB0aGVtZS52YXJzID8ge1xuICAgIGJhY2tncm91bmRDb2xvcjogYHJnYmEoJHt0aGVtZS52YXJzLnBhbGV0dGUuY29tbW9uLm9uQmFja2dyb3VuZENoYW5uZWx9IC8gMC4wNSlgXG4gIH0gOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA1KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA1KSdcbiAgfSwge1xuICAgIGJvcmRlclJhZGl1czogMCAvLyBSZXNldCBDaHJvbWUgc3R5bGVcbiAgfSksXG4gIC8vIFJlbW92ZSBJRTExIGFycm93XG4gICcmOjotbXMtZXhwYW5kJzoge1xuICAgIGRpc3BsYXk6ICdub25lJ1xuICB9LFxuICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgfSxcbiAgJyZbbXVsdGlwbGVdJzoge1xuICAgIGhlaWdodDogJ2F1dG8nXG4gIH0sXG4gICcmOm5vdChbbXVsdGlwbGVdKSBvcHRpb24sICY6bm90KFttdWx0aXBsZV0pIG9wdGdyb3VwJzoge1xuICAgIGJhY2tncm91bmRDb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlclxuICB9LFxuICAvLyBCdW1wIHNwZWNpZmljaXR5IHRvIGFsbG93IGV4dGVuZGluZyBjdXN0b20gaW5wdXRzXG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAyNCxcbiAgICBtaW5XaWR0aDogMTYgLy8gU28gaXQgZG9lc24ndCBjb2xsYXBzZS5cbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZmlsbGVkJyAmJiB7XG4gICcmJiYnOiB7XG4gICAgcGFkZGluZ1JpZ2h0OiAzMlxuICB9XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYge1xuICBib3JkZXJSYWRpdXM6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICcmOmZvY3VzJzoge1xuICAgIGJvcmRlclJhZGl1czogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnNoYXBlLmJvcmRlclJhZGl1cyAvLyBSZXNldCB0aGUgcmVzZXQgZm9yIENocm9tZSBzdHlsZVxuICB9LFxuICAnJiYmJzoge1xuICAgIHBhZGRpbmdSaWdodDogMzJcbiAgfVxufSk7XG5jb25zdCBOYXRpdmVTZWxlY3RTZWxlY3QgPSBzdHlsZWQoJ3NlbGVjdCcsIHtcbiAgbmFtZTogJ011aU5hdGl2ZVNlbGVjdCcsXG4gIHNsb3Q6ICdTZWxlY3QnLFxuICBzaG91bGRGb3J3YXJkUHJvcDogcm9vdFNob3VsZEZvcndhcmRQcm9wLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnNlbGVjdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIG93bmVyU3RhdGUuZXJyb3IgJiYgc3R5bGVzLmVycm9yLCB7XG4gICAgICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLm11bHRpcGxlfWBdOiBzdHlsZXMubXVsdGlwbGVcbiAgICB9XTtcbiAgfVxufSkobmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzKTtcbmV4cG9ydCBjb25zdCBuYXRpdmVTZWxlY3RJY29uU3R5bGVzID0gKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgLy8gV2UgdXNlIGEgcG9zaXRpb24gYWJzb2x1dGUgb3ZlciBhIGZsZXhib3ggaW4gb3JkZXIgdG8gZm9yd2FyZCB0aGUgcG9pbnRlciBldmVudHNcbiAgLy8gdG8gdGhlIGlucHV0IGFuZCB0byBzdXBwb3J0IHdyYXBwaW5nIHRhZ3MuLlxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgcmlnaHQ6IDAsXG4gIHRvcDogJ2NhbGMoNTAlIC0gLjVlbSknLFxuICAvLyBDZW50ZXIgdmVydGljYWxseSwgaGVpZ2h0IGlzIDFlbVxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIC8vIERvbid0IGJsb2NrIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSBzZWxlY3QgdW5kZXIgdGhlIGljb24uXG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICBbYCYuJHtuYXRpdmVTZWxlY3RDbGFzc2VzLmRpc2FibGVkfWBdOiB7XG4gICAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICB9XG59LCBvd25lclN0YXRlLm9wZW4gJiYge1xuICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2ZpbGxlZCcgJiYge1xuICByaWdodDogN1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnb3V0bGluZWQnICYmIHtcbiAgcmlnaHQ6IDdcbn0pO1xuY29uc3QgTmF0aXZlU2VsZWN0SWNvbiA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnTXVpTmF0aXZlU2VsZWN0JyxcbiAgc2xvdDogJ0ljb24nLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmljb24sIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbYGljb24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5vcGVuICYmIHN0eWxlcy5pY29uT3Blbl07XG4gIH1cbn0pKG5hdGl2ZVNlbGVjdEljb25TdHlsZXMpO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmNvbnN0IE5hdGl2ZVNlbGVjdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF0aXZlU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIGVycm9yLFxuICAgICAgSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmLFxuICAgICAgdmFyaWFudCA9ICdzdGFuZGFyZCdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGRpc2FibGVkLFxuICAgIHZhcmlhbnQsXG4gICAgZXJyb3JcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qL19qc3goTmF0aXZlU2VsZWN0U2VsZWN0LCBfZXh0ZW5kcyh7XG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc2VsZWN0LCBjbGFzc05hbWUpLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgcmVmOiBpbnB1dFJlZiB8fCByZWZcbiAgICB9LCBvdGhlcikpLCBwcm9wcy5tdWx0aXBsZSA/IG51bGwgOiAvKiNfX1BVUkVfXyovX2pzeChOYXRpdmVTZWxlY3RJY29uLCB7XG4gICAgICBhczogSWNvbkNvbXBvbmVudCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICAgIH0pXVxuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTmF0aXZlU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdCBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBzZWxlY3QgaW5wdXRgIHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTmF0aXZlU2VsZWN0SW5wdXQ7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWxlY3RVdGlsaXR5Q2xhc3NlcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpU2VsZWN0Jywgc2xvdCk7XG59XG5jb25zdCBzZWxlY3RDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpU2VsZWN0JywgWydyb290JywgJ3NlbGVjdCcsICdtdWx0aXBsZScsICdmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnLCAnZGlzYWJsZWQnLCAnZm9jdXNlZCcsICdpY29uJywgJ2ljb25PcGVuJywgJ2ljb25GaWxsZWQnLCAnaWNvbk91dGxpbmVkJywgJ2ljb25TdGFuZGFyZCcsICduYXRpdmVJbnB1dCcsICdlcnJvciddKTtcbmV4cG9ydCBkZWZhdWx0IHNlbGVjdENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIkBtdWkvdXRpbHMvZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG52YXIgX3NwYW47XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwiYXJpYS1sYWJlbFwiLCBcImF1dG9Gb2N1c1wiLCBcImF1dG9XaWR0aFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdE9wZW5cIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcImVycm9yXCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlucHV0UmVmXCIsIFwibGFiZWxJZFwiLCBcIk1lbnVQcm9wc1wiLCBcIm11bHRpcGxlXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcIm9uRm9jdXNcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJWYWx1ZVwiLCBcIlNlbGVjdERpc3BsYXlQcm9wc1wiLCBcInRhYkluZGV4XCIsIFwidHlwZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlSWQgZnJvbSAnQG11aS91dGlscy91c2VJZCc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBNZW51IGZyb20gJy4uL01lbnUvTWVudSc7XG5pbXBvcnQgeyBuYXRpdmVTZWxlY3RTZWxlY3RTdHlsZXMsIG5hdGl2ZVNlbGVjdEljb25TdHlsZXMgfSBmcm9tICcuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQnO1xuaW1wb3J0IHsgaXNGaWxsZWQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IHN0eWxlZCwgeyBzbG90U2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUNvbnRyb2xsZWQgZnJvbSAnLi4vdXRpbHMvdXNlQ29udHJvbGxlZCc7XG5pbXBvcnQgc2VsZWN0Q2xhc3NlcywgeyBnZXRTZWxlY3RVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJy4vc2VsZWN0Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgU2VsZWN0U2VsZWN0ID0gc3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBzbG90OiAnU2VsZWN0JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW1xuICAgIC8vIFdpbiBzcGVjaWZpY2l0eSBvdmVyIHRoZSBpbnB1dCBiYXNlXG4gICAge1xuICAgICAgW2AmLiR7c2VsZWN0Q2xhc3Nlcy5zZWxlY3R9YF06IHN0eWxlcy5zZWxlY3RcbiAgICB9LCB7XG4gICAgICBbYCYuJHtzZWxlY3RDbGFzc2VzLnNlbGVjdH1gXTogc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1cbiAgICB9LCB7XG4gICAgICBbYCYuJHtzZWxlY3RDbGFzc2VzLmVycm9yfWBdOiBzdHlsZXMuZXJyb3JcbiAgICB9LCB7XG4gICAgICBbYCYuJHtzZWxlY3RDbGFzc2VzLm11bHRpcGxlfWBdOiBzdHlsZXMubXVsdGlwbGVcbiAgICB9XTtcbiAgfVxufSkobmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzLCB7XG4gIC8vIFdpbiBzcGVjaWZpY2l0eSBvdmVyIHRoZSBpbnB1dCBiYXNlXG4gIFtgJi4ke3NlbGVjdENsYXNzZXMuc2VsZWN0fWBdOiB7XG4gICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgLy8gUmVzZXRzIGZvciBtdWx0aXBsZSBzZWxlY3Qgd2l0aCBjaGlwc1xuICAgIG1pbkhlaWdodDogJzEuNDM3NWVtJyxcbiAgICAvLyBSZXF1aXJlZCBmb3Igc2VsZWN0XFx0ZXh0LWZpZWxkIGhlaWdodCBjb25zaXN0ZW5jeVxuICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfVxufSk7XG5jb25zdCBTZWxlY3RJY29uID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBzbG90OiAnSWNvbicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuaWNvbiwgb3duZXJTdGF0ZS52YXJpYW50ICYmIHN0eWxlc1tgaWNvbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnZhcmlhbnQpfWBdLCBvd25lclN0YXRlLm9wZW4gJiYgc3R5bGVzLmljb25PcGVuXTtcbiAgfVxufSkobmF0aXZlU2VsZWN0SWNvblN0eWxlcyk7XG5jb25zdCBTZWxlY3ROYXRpdmVJbnB1dCA9IHN0eWxlZCgnaW5wdXQnLCB7XG4gIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHNsb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3NlcycsXG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBzbG90OiAnTmF0aXZlSW5wdXQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5uYXRpdmVJbnB1dFxufSkoe1xuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBvcGFjaXR5OiAwLFxuICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG59KTtcbmZ1bmN0aW9uIGFyZUVxdWFsVmFsdWVzKGEsIGIpIHtcbiAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JyAmJiBiICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGEgPT09IGI7XG4gIH1cblxuICAvLyBUaGUgdmFsdWUgY291bGQgYmUgYSBudW1iZXIsIHRoZSBET00gd2lsbCBzdHJpbmdpZnkgaXQgYW55d2F5LlxuICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG59XG5mdW5jdGlvbiBpc0VtcHR5KGRpc3BsYXkpIHtcbiAgcmV0dXJuIGRpc3BsYXkgPT0gbnVsbCB8fCB0eXBlb2YgZGlzcGxheSA9PT0gJ3N0cmluZycgJiYgIWRpc3BsYXkudHJpbSgpO1xufVxuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBkaXNhYmxlZCxcbiAgICBtdWx0aXBsZSxcbiAgICBvcGVuLFxuICAgIGVycm9yXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICBzZWxlY3Q6IFsnc2VsZWN0JywgdmFyaWFudCwgZGlzYWJsZWQgJiYgJ2Rpc2FibGVkJywgbXVsdGlwbGUgJiYgJ211bHRpcGxlJywgZXJyb3IgJiYgJ2Vycm9yJ10sXG4gICAgaWNvbjogWydpY29uJywgYGljb24ke2NhcGl0YWxpemUodmFyaWFudCl9YCwgb3BlbiAmJiAnaWNvbk9wZW4nLCBkaXNhYmxlZCAmJiAnZGlzYWJsZWQnXSxcbiAgICBuYXRpdmVJbnB1dDogWyduYXRpdmVJbnB1dCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMsIGNsYXNzZXMpO1xufTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5jb25zdCBTZWxlY3RJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNlbGVjdElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIF9NZW51UHJvcHMkc2xvdFByb3BzO1xuICBjb25zdCB7XG4gICAgICAnYXJpYS1kZXNjcmliZWRieSc6IGFyaWFEZXNjcmliZWRieSxcbiAgICAgICdhcmlhLWxhYmVsJzogYXJpYUxhYmVsLFxuICAgICAgYXV0b0ZvY3VzLFxuICAgICAgYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBkZWZhdWx0T3BlbixcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgZGlzcGxheUVtcHR5LFxuICAgICAgZXJyb3IgPSBmYWxzZSxcbiAgICAgIEljb25Db21wb25lbnQsXG4gICAgICBpbnB1dFJlZjogaW5wdXRSZWZQcm9wLFxuICAgICAgbGFiZWxJZCxcbiAgICAgIE1lbnVQcm9wcyA9IHt9LFxuICAgICAgbXVsdGlwbGUsXG4gICAgICBuYW1lLFxuICAgICAgb25CbHVyLFxuICAgICAgb25DaGFuZ2UsXG4gICAgICBvbkNsb3NlLFxuICAgICAgb25Gb2N1cyxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9wZW46IG9wZW5Qcm9wLFxuICAgICAgcmVhZE9ubHksXG4gICAgICByZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IHt9LFxuICAgICAgdGFiSW5kZXg6IHRhYkluZGV4UHJvcFxuICAgICAgLy8gY2F0Y2hpbmcgYHR5cGVgIGZyb20gSW5wdXQgd2hpY2ggbWFrZXMgbm8gc2Vuc2UgZm9yIFNlbGVjdElucHV0XG4gICAgICAsXG5cbiAgICAgIHZhbHVlOiB2YWx1ZVByb3AsXG4gICAgICB2YXJpYW50ID0gJ3N0YW5kYXJkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlU3RhdGVdID0gdXNlQ29udHJvbGxlZCh7XG4gICAgY29udHJvbGxlZDogdmFsdWVQcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSxcbiAgICBuYW1lOiAnU2VsZWN0J1xuICB9KTtcbiAgY29uc3QgW29wZW5TdGF0ZSwgc2V0T3BlblN0YXRlXSA9IHVzZUNvbnRyb2xsZWQoe1xuICAgIGNvbnRyb2xsZWQ6IG9wZW5Qcm9wLFxuICAgIGRlZmF1bHQ6IGRlZmF1bHRPcGVuLFxuICAgIG5hbWU6ICdTZWxlY3QnXG4gIH0pO1xuICBjb25zdCBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgZGlzcGxheVJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgY29uc3QgW2Rpc3BsYXlOb2RlLCBzZXREaXNwbGF5Tm9kZV0gPSBSZWFjdC51c2VTdGF0ZShudWxsKTtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnQ6IGlzT3BlbkNvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZihvcGVuUHJvcCAhPSBudWxsKTtcbiAgY29uc3QgW21lbnVNaW5XaWR0aFN0YXRlLCBzZXRNZW51TWluV2lkdGhTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBjb25zdCBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKHJlZiwgaW5wdXRSZWZQcm9wKTtcbiAgY29uc3QgaGFuZGxlRGlzcGxheVJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGRpc3BsYXlSZWYuY3VycmVudCA9IG5vZGU7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIHNldERpc3BsYXlOb2RlKG5vZGUpO1xuICAgIH1cbiAgfSwgW10pO1xuICBjb25zdCBhbmNob3JFbGVtZW50ID0gZGlzcGxheU5vZGUgPT0gbnVsbCA/IHZvaWQgMCA6IGRpc3BsYXlOb2RlLnBhcmVudE5vZGU7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoaGFuZGxlUmVmLCAoKSA9PiAoe1xuICAgIGZvY3VzOiAoKSA9PiB7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9LFxuICAgIG5vZGU6IGlucHV0UmVmLmN1cnJlbnQsXG4gICAgdmFsdWVcbiAgfSksIFt2YWx1ZV0pO1xuXG4gIC8vIFJlc2l6ZSBtZW51IG9uIGBkZWZhdWx0T3BlbmAgYXV0b21hdGljIHRvZ2dsZS5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGVmYXVsdE9wZW4gJiYgb3BlblN0YXRlICYmIGRpc3BsYXlOb2RlICYmICFpc09wZW5Db250cm9sbGVkKSB7XG4gICAgICBzZXRNZW51TWluV2lkdGhTdGF0ZShhdXRvV2lkdGggPyBudWxsIDogYW5jaG9yRWxlbWVudC5jbGllbnRXaWR0aCk7XG4gICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbZGlzcGxheU5vZGUsIGF1dG9XaWR0aF0pO1xuICAvLyBgaXNPcGVuQ29udHJvbGxlZGAgaXMgaWdub3JlZCBiZWNhdXNlIHRoZSBjb21wb25lbnQgc2hvdWxkIG5ldmVyIHN3aXRjaCBiZXR3ZWVuIGNvbnRyb2xsZWQgYW5kIHVuY29udHJvbGxlZCBtb2Rlcy5cbiAgLy8gYGRlZmF1bHRPcGVuYCBhbmQgYG9wZW5TdGF0ZWAgYXJlIGlnbm9yZWQgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY2FsbGJhY2tzLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChhdXRvRm9jdXMpIHtcbiAgICAgIGRpc3BsYXlSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1c10pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghbGFiZWxJZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgbGFiZWwgPSBvd25lckRvY3VtZW50KGRpc3BsYXlSZWYuY3VycmVudCkuZ2V0RWxlbWVudEJ5SWQobGFiZWxJZCk7XG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoZ2V0U2VsZWN0aW9uKCkuaXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICBkaXNwbGF5UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGxhYmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlcik7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsYWJlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2xhYmVsSWRdKTtcbiAgY29uc3QgdXBkYXRlID0gKG9wZW4sIGV2ZW50KSA9PiB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGlmIChvbk9wZW4pIHtcbiAgICAgICAgb25PcGVuKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoIWlzT3BlbkNvbnRyb2xsZWQpIHtcbiAgICAgIHNldE1lbnVNaW5XaWR0aFN0YXRlKGF1dG9XaWR0aCA/IG51bGwgOiBhbmNob3JFbGVtZW50LmNsaWVudFdpZHRoKTtcbiAgICAgIHNldE9wZW5TdGF0ZShvcGVuKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IGV2ZW50ID0+IHtcbiAgICAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdC1jbGlja1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSGlqYWNrIHRoZSBkZWZhdWx0IGZvY3VzIGJlaGF2aW9yLlxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZGlzcGxheVJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgdXBkYXRlKHRydWUsIGV2ZW50KTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlQ2xvc2UgPSBldmVudCA9PiB7XG4gICAgdXBkYXRlKGZhbHNlLCBldmVudCk7XG4gIH07XG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTtcblxuICAvLyBTdXBwb3J0IGF1dG9maWxsLlxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbkFycmF5LmZpbmQoY2hpbGRJdGVtID0+IGNoaWxkSXRlbS5wcm9wcy52YWx1ZSA9PT0gZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAoY2hpbGQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZXRWYWx1ZVN0YXRlKGNoaWxkLnByb3BzLnZhbHVlKTtcbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50LCBjaGlsZCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBoYW5kbGVJdGVtQ2xpY2sgPSBjaGlsZCA9PiBldmVudCA9PiB7XG4gICAgbGV0IG5ld1ZhbHVlO1xuXG4gICAgLy8gV2UgdXNlIHRoZSB0YWJpbmRleCBhdHRyaWJ1dGUgdG8gc2lnbmFsIHRoZSBhdmFpbGFibGUgb3B0aW9ucy5cbiAgICBpZiAoIWV2ZW50LmN1cnJlbnRUYXJnZXQuaGFzQXR0cmlidXRlKCd0YWJpbmRleCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgbmV3VmFsdWUgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLnNsaWNlKCkgOiBbXTtcbiAgICAgIGNvbnN0IGl0ZW1JbmRleCA9IHZhbHVlLmluZGV4T2YoY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgaWYgKGl0ZW1JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgbmV3VmFsdWUucHVzaChjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZS5zcGxpY2UoaXRlbUluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3VmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICBzZXRWYWx1ZVN0YXRlKG5ld1ZhbHVlKTtcbiAgICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgICAvLyBSZWRlZmluZSB0YXJnZXQgdG8gYWxsb3cgbmFtZSBhbmQgdmFsdWUgdG8gYmUgcmVhZC5cbiAgICAgICAgLy8gVGhpcyBhbGxvd3Mgc2VhbWxlc3MgaW50ZWdyYXRpb24gd2l0aCB0aGUgbW9zdCBwb3B1bGFyIGZvcm0gbGlicmFyaWVzLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzQ4NSNpc3N1ZWNvbW1lbnQtNjc2MDQ4NDkyXG4gICAgICAgIC8vIENsb25lIHRoZSBldmVudCB0byBub3Qgb3ZlcnJpZGUgYHRhcmdldGAgb2YgdGhlIG9yaWdpbmFsIGV2ZW50LlxuICAgICAgICBjb25zdCBuYXRpdmVFdmVudCA9IGV2ZW50Lm5hdGl2ZUV2ZW50IHx8IGV2ZW50O1xuICAgICAgICBjb25zdCBjbG9uZWRFdmVudCA9IG5ldyBuYXRpdmVFdmVudC5jb25zdHJ1Y3RvcihuYXRpdmVFdmVudC50eXBlLCBuYXRpdmVFdmVudCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbG9uZWRFdmVudCwgJ3RhcmdldCcsIHtcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG9uQ2hhbmdlKGNsb25lZEV2ZW50LCBjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgIHVwZGF0ZShmYWxzZSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlS2V5RG93biA9IGV2ZW50ID0+IHtcbiAgICBpZiAoIXJlYWRPbmx5KSB7XG4gICAgICBjb25zdCB2YWxpZEtleXMgPSBbJyAnLCAnQXJyb3dVcCcsICdBcnJvd0Rvd24nLFxuICAgICAgLy8gVGhlIG5hdGl2ZSBzZWxlY3QgZG9lc24ndCByZXNwb25kIHRvIGVudGVyIG9uIG1hY09TLCBidXQgaXQncyByZWNvbW1lbmRlZCBieVxuICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1dBSS9BUklBL2FwZy9wYXR0ZXJucy9jb21ib2JveC9leGFtcGxlcy9jb21ib2JveC1zZWxlY3Qtb25seS9cbiAgICAgICdFbnRlciddO1xuICAgICAgaWYgKHZhbGlkS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBvcGVuID0gZGlzcGxheU5vZGUgIT09IG51bGwgJiYgb3BlblN0YXRlO1xuICBjb25zdCBoYW5kbGVCbHVyID0gZXZlbnQgPT4ge1xuICAgIC8vIGlmIG9wZW4gZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uXG4gICAgaWYgKCFvcGVuICYmIG9uQmx1cikge1xuICAgICAgLy8gUHJlYWN0IHN1cHBvcnQsIHRhcmdldCBpcyByZWFkIG9ubHkgcHJvcGVydHkgb24gYSBuYXRpdmUgZXZlbnQuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIG5hbWVcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcbiAgZGVsZXRlIG90aGVyWydhcmlhLWludmFsaWQnXTtcbiAgbGV0IGRpc3BsYXk7XG4gIGxldCBkaXNwbGF5U2luZ2xlO1xuICBjb25zdCBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgbGV0IGNvbXB1dGVEaXNwbGF5ID0gZmFsc2U7XG4gIGxldCBmb3VuZE1hdGNoID0gZmFsc2U7XG5cbiAgLy8gTm8gbmVlZCB0byBkaXNwbGF5IGFueSB2YWx1ZSBpZiB0aGUgZmllbGQgaXMgZW1wdHkuXG4gIGlmIChpc0ZpbGxlZCh7XG4gICAgdmFsdWVcbiAgfSkgfHwgZGlzcGxheUVtcHR5KSB7XG4gICAgaWYgKHJlbmRlclZhbHVlKSB7XG4gICAgICBkaXNwbGF5ID0gcmVuZGVyVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wdXRlRGlzcGxheSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGNvbnN0IGl0ZW1zID0gY2hpbGRyZW5BcnJheS5tYXAoY2hpbGQgPT4ge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTVVJOiBUaGUgU2VsZWN0IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBzZWxlY3RlZDtcbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBcXGB2YWx1ZVxcYCBwcm9wIG11c3QgYmUgYW4gYXJyYXkgd2hlbiB1c2luZyB0aGUgXFxgU2VsZWN0XFxgIGNvbXBvbmVudCB3aXRoIFxcYG11bHRpcGxlXFxgLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDIpKTtcbiAgICAgIH1cbiAgICAgIHNlbGVjdGVkID0gdmFsdWUuc29tZSh2ID0+IGFyZUVxdWFsVmFsdWVzKHYsIGNoaWxkLnByb3BzLnZhbHVlKSk7XG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheU11bHRpcGxlLnB1c2goY2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZCA9IGFyZUVxdWFsVmFsdWVzKHZhbHVlLCBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgY29tcHV0ZURpc3BsYXkpIHtcbiAgICAgICAgZGlzcGxheVNpbmdsZSA9IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBzZWxlY3RlZCA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBvbkNsaWNrOiBoYW5kbGVJdGVtQ2xpY2soY2hpbGQpLFxuICAgICAgb25LZXlVcDogZXZlbnQgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgICAgICAvLyBvdGhlcndpc2Ugb3VyIE1lbnVJdGVtcyBkaXNwYXRjaGVzIGEgY2xpY2sgZXZlbnRcbiAgICAgICAgICAvLyBpdCdzIG5vdCBiZWhhdmlvciBvZiB0aGUgbmF0aXZlIDxvcHRpb24+IGFuZCBjYXVzZXNcbiAgICAgICAgICAvLyB0aGUgc2VsZWN0IHRvIGNsb3NlIGltbWVkaWF0ZWx5IHNpbmNlIHdlIG9wZW4gb24gc3BhY2Uga2V5ZG93blxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uS2V5VXApIHtcbiAgICAgICAgICBjaGlsZC5wcm9wcy5vbktleVVwKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgc2VsZWN0ZWQsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgLy8gVGhlIHZhbHVlIGlzIG1vc3QgbGlrZWx5IG5vdCBhIHZhbGlkIEhUTUwgYXR0cmlidXRlLlxuICAgICAgJ2RhdGEtdmFsdWUnOiBjaGlsZC5wcm9wcy52YWx1ZSAvLyBJbnN0ZWFkLCB3ZSBwcm92aWRlIGl0IGFzIGEgZGF0YSBhdHRyaWJ1dGUuXG4gICAgfSk7XG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWZvdW5kTWF0Y2ggJiYgIW11bHRpcGxlICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBjaGlsZHJlbkFycmF5Lm1hcChjaGlsZCA9PiBjaGlsZC5wcm9wcy52YWx1ZSk7XG4gICAgICAgIGNvbnNvbGUud2FybihbYE1VSTogWW91IGhhdmUgcHJvdmlkZWQgYW4gb3V0LW9mLXJhbmdlIHZhbHVlIFxcYCR7dmFsdWV9XFxgIGZvciB0aGUgc2VsZWN0ICR7bmFtZSA/IGAobmFtZT1cIiR7bmFtZX1cIikgYCA6ICcnfWNvbXBvbmVudC5gLCBcIkNvbnNpZGVyIHByb3ZpZGluZyBhIHZhbHVlIHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIG9yICcnLlwiLCBgVGhlIGF2YWlsYWJsZSB2YWx1ZXMgYXJlICR7dmFsdWVzLmZpbHRlcih4ID0+IHggIT0gbnVsbCkubWFwKHggPT4gYFxcYCR7eH1cXGBgKS5qb2luKCcsICcpIHx8ICdcIlwiJ30uYF0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtmb3VuZE1hdGNoLCBjaGlsZHJlbkFycmF5LCBtdWx0aXBsZSwgbmFtZSwgdmFsdWVdKTtcbiAgfVxuICBpZiAoY29tcHV0ZURpc3BsYXkpIHtcbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIGlmIChkaXNwbGF5TXVsdGlwbGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRpc3BsYXkgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGxheSA9IGRpc3BsYXlNdWx0aXBsZS5yZWR1Y2UoKG91dHB1dCwgY2hpbGQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goY2hpbGQpO1xuICAgICAgICAgIGlmIChpbmRleCA8IGRpc3BsYXlNdWx0aXBsZS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBvdXRwdXQucHVzaCgnLCAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkaXNwbGF5ID0gZGlzcGxheVNpbmdsZTtcbiAgICB9XG4gIH1cblxuICAvLyBBdm9pZCBwZXJmb3JtaW5nIGEgbGF5b3V0IGNvbXB1dGF0aW9uIGluIHRoZSByZW5kZXIgbWV0aG9kLlxuICBsZXQgbWVudU1pbldpZHRoID0gbWVudU1pbldpZHRoU3RhdGU7XG4gIGlmICghYXV0b1dpZHRoICYmIGlzT3BlbkNvbnRyb2xsZWQgJiYgZGlzcGxheU5vZGUpIHtcbiAgICBtZW51TWluV2lkdGggPSBhbmNob3JFbGVtZW50LmNsaWVudFdpZHRoO1xuICB9XG4gIGxldCB0YWJJbmRleDtcbiAgaWYgKHR5cGVvZiB0YWJJbmRleFByb3AgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGFiSW5kZXggPSB0YWJJbmRleFByb3A7XG4gIH0gZWxzZSB7XG4gICAgdGFiSW5kZXggPSBkaXNhYmxlZCA/IG51bGwgOiAwO1xuICB9XG4gIGNvbnN0IGJ1dHRvbklkID0gU2VsZWN0RGlzcGxheVByb3BzLmlkIHx8IChuYW1lID8gYG11aS1jb21wb25lbnQtc2VsZWN0LSR7bmFtZX1gIDogdW5kZWZpbmVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIHZhcmlhbnQsXG4gICAgdmFsdWUsXG4gICAgb3BlbixcbiAgICBlcnJvclxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBwYXBlclByb3BzID0gX2V4dGVuZHMoe30sIE1lbnVQcm9wcy5QYXBlclByb3BzLCAoX01lbnVQcm9wcyRzbG90UHJvcHMgPSBNZW51UHJvcHMuc2xvdFByb3BzKSA9PSBudWxsID8gdm9pZCAwIDogX01lbnVQcm9wcyRzbG90UHJvcHMucGFwZXIpO1xuICBjb25zdCBsaXN0Ym94SWQgPSB1c2VJZCgpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKFJlYWN0LkZyYWdtZW50LCB7XG4gICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RTZWxlY3QsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlRGlzcGxheVJlZixcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleCxcbiAgICAgIHJvbGU6IFwiY29tYm9ib3hcIixcbiAgICAgIFwiYXJpYS1jb250cm9sc1wiOiBsaXN0Ym94SWQsXG4gICAgICBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICBcImFyaWEtZXhwYW5kZWRcIjogb3BlbiA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogW2xhYmVsSWQsIGJ1dHRvbklkXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpIHx8IHVuZGVmaW5lZCxcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgICBvbk1vdXNlRG93bjogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogaGFuZGxlTW91c2VEb3duLFxuICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgb25Gb2N1czogb25Gb2N1c1xuICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcywge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIGNsYXNzTmFtZTogY2xzeChTZWxlY3REaXNwbGF5UHJvcHMuY2xhc3NOYW1lLCBjbGFzc2VzLnNlbGVjdCwgY2xhc3NOYW1lKVxuICAgICAgLy8gVGhlIGlkIGlzIHJlcXVpcmVkIGZvciBwcm9wZXIgYTExeVxuICAgICAgLFxuICAgICAgaWQ6IGJ1dHRvbklkLFxuICAgICAgY2hpbGRyZW46IGlzRW1wdHkoZGlzcGxheSkgPyAvLyBub3RyYW5zbGF0ZSBuZWVkZWQgd2hpbGUgR29vZ2xlIFRyYW5zbGF0ZSB3aWxsIG5vdCBmaXggemVyby13aWR0aCBzcGFjZSBpc3N1ZVxuICAgICAgX3NwYW4gfHwgKF9zcGFuID0gLyojX19QVVJFX18qL19qc3goXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcIm5vdHJhbnNsYXRlXCIsXG4gICAgICAgIGNoaWxkcmVuOiBcIlxcdTIwMEJcIlxuICAgICAgfSkpIDogZGlzcGxheVxuICAgIH0pKSwgLyojX19QVVJFX18qL19qc3goU2VsZWN0TmF0aXZlSW5wdXQsIF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IGVycm9yLFxuICAgICAgdmFsdWU6IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWUsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgcmVmOiBpbnB1dFJlZixcbiAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICB0YWJJbmRleDogLTEsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMubmF0aXZlSW5wdXQsXG4gICAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9LCBvdGhlcikpLCAvKiNfX1BVUkVfXyovX2pzeChTZWxlY3RJY29uLCB7XG4gICAgICBhczogSWNvbkNvbXBvbmVudCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pY29uLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChNZW51LCBfZXh0ZW5kcyh7XG4gICAgICBpZDogYG1lbnUtJHtuYW1lIHx8ICcnfWAsXG4gICAgICBhbmNob3JFbDogYW5jaG9yRWxlbWVudCxcbiAgICAgIG9wZW46IG9wZW4sXG4gICAgICBvbkNsb3NlOiBoYW5kbGVDbG9zZSxcbiAgICAgIGFuY2hvck9yaWdpbjoge1xuICAgICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXG4gICAgICAgIGhvcml6b250YWw6ICdjZW50ZXInXG4gICAgICB9LFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiB7XG4gICAgICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICAgICAgaG9yaXpvbnRhbDogJ2NlbnRlcidcbiAgICAgIH1cbiAgICB9LCBNZW51UHJvcHMsIHtcbiAgICAgIE1lbnVMaXN0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxhYmVsSWQsXG4gICAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogbXVsdGlwbGUgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgICAgIGRpc2FibGVMaXN0V3JhcDogdHJ1ZSxcbiAgICAgICAgaWQ6IGxpc3Rib3hJZFxuICAgICAgfSwgTWVudVByb3BzLk1lbnVMaXN0UHJvcHMpLFxuICAgICAgc2xvdFByb3BzOiBfZXh0ZW5kcyh7fSwgTWVudVByb3BzLnNsb3RQcm9wcywge1xuICAgICAgICBwYXBlcjogX2V4dGVuZHMoe30sIHBhcGVyUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICAgICAgbWluV2lkdGg6IG1lbnVNaW5XaWR0aFxuICAgICAgICAgIH0sIHBhcGVyUHJvcHMgIT0gbnVsbCA/IHBhcGVyUHJvcHMuc3R5bGUgOiBudWxsKVxuICAgICAgICB9KVxuICAgICAgfSksXG4gICAgICBjaGlsZHJlbjogaXRlbXNcbiAgICB9KSldXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1sYWJlbCc6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqL1xuICBhdXRvV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8TWVudUl0ZW0+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHRvZ2dsZWQgb24gbW91bnQuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZC5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3QgaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCBpdGVtIGlzIGRpc3BsYXllZCBldmVuIGlmIGl0cyB2YWx1ZSBpcyBlbXB0eS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgc2VsZWN0IGlucHV0YCB3aWxsIGluZGljYXRlIGFuIGVycm9yLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIEltcGVyYXRpdmUgaGFuZGxlIGltcGxlbWVudGluZyBgeyB2YWx1ZTogVCwgbm9kZTogSFRNTEVsZW1lbnQsIGZvY3VzKCk6IHZvaWQgfWBcbiAgICogRXF1aXZhbGVudCB0byBgcmVmYFxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgYW4gZWxlbWVudCB0aGF0IGFjdHMgYXMgYW4gYWRkaXRpb25hbCBsYWJlbC4gVGhlIFNlbGVjdCB3aWxsXG4gICAqIGJlIGxhYmVsbGVkIGJ5IHRoZSBhZGRpdGlvbmFsIGxhYmVsIGFuZCB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqL1xuICBsYWJlbElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNZW51YF0oL21hdGVyaWFsLXVpL2FwaS9tZW51LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnQgbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgc2VsZWN0YCBvciBoaWRkZW4gYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIG9wZW5lZC5cbiAgICogVXNlIGluIGNvbnRyb2xsZWQgbW9kZSAoc2VlIG9wZW4pLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGNsaWNrYWJsZSBkaXYgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdERpc3BsYXlQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3RJbnB1dDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVTdmdJY29uIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVN2Z0ljb24nO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovX2pzeChcInBhdGhcIiwge1xuICBkOiBcIk03IDEwbDUgNSA1LTV6XCJcbn0pLCAnQXJyb3dEcm9wRG93bicpOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImF1dG9XaWR0aFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRPcGVuXCIsIFwiZGlzcGxheUVtcHR5XCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlkXCIsIFwiaW5wdXRcIiwgXCJpbnB1dFByb3BzXCIsIFwibGFiZWxcIiwgXCJsYWJlbElkXCIsIFwiTWVudVByb3BzXCIsIFwibXVsdGlwbGVcIiwgXCJuYXRpdmVcIiwgXCJvbkNsb3NlXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlbmRlclZhbHVlXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCIsIFwidmFyaWFudFwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcInJvb3RcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICcuL1NlbGVjdElucHV0JztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCBBcnJvd0Ryb3BEb3duSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bic7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vSW5wdXQnO1xuaW1wb3J0IE5hdGl2ZVNlbGVjdElucHV0IGZyb20gJy4uL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dCc7XG5pbXBvcnQgRmlsbGVkSW5wdXQgZnJvbSAnLi4vRmlsbGVkSW5wdXQnO1xuaW1wb3J0IE91dGxpbmVkSW5wdXQgZnJvbSAnLi4vT3V0bGluZWRJbnB1dCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBzdHlsZWQsIHsgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIHJldHVybiBjbGFzc2VzO1xufTtcbmNvbnN0IHN0eWxlZFJvb3RDb25maWcgPSB7XG4gIG5hbWU6ICdNdWlTZWxlY3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290LFxuICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiByb290U2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ3ZhcmlhbnQnLFxuICBzbG90OiAnUm9vdCdcbn07XG5jb25zdCBTdHlsZWRJbnB1dCA9IHN0eWxlZChJbnB1dCwgc3R5bGVkUm9vdENvbmZpZykoJycpO1xuY29uc3QgU3R5bGVkT3V0bGluZWRJbnB1dCA9IHN0eWxlZChPdXRsaW5lZElucHV0LCBzdHlsZWRSb290Q29uZmlnKSgnJyk7XG5jb25zdCBTdHlsZWRGaWxsZWRJbnB1dCA9IHN0eWxlZChGaWxsZWRJbnB1dCwgc3R5bGVkUm9vdENvbmZpZykoJycpO1xuY29uc3QgU2VsZWN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2VsZWN0KGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIG5hbWU6ICdNdWlTZWxlY3QnLFxuICAgIHByb3BzOiBpblByb3BzXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBhdXRvV2lkdGggPSBmYWxzZSxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY2xhc3NlczogY2xhc3Nlc1Byb3AgPSB7fSxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRPcGVuID0gZmFsc2UsXG4gICAgICBkaXNwbGF5RW1wdHkgPSBmYWxzZSxcbiAgICAgIEljb25Db21wb25lbnQgPSBBcnJvd0Ryb3BEb3duSWNvbixcbiAgICAgIGlkLFxuICAgICAgaW5wdXQsXG4gICAgICBpbnB1dFByb3BzLFxuICAgICAgbGFiZWwsXG4gICAgICBsYWJlbElkLFxuICAgICAgTWVudVByb3BzLFxuICAgICAgbXVsdGlwbGUgPSBmYWxzZSxcbiAgICAgIG5hdGl2ZSA9IGZhbHNlLFxuICAgICAgb25DbG9zZSxcbiAgICAgIG9uT3BlbixcbiAgICAgIG9wZW4sXG4gICAgICByZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICAgIHZhcmlhbnQ6IHZhcmlhbnRQcm9wID0gJ291dGxpbmVkJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBpbnB1dENvbXBvbmVudCA9IG5hdGl2ZSA/IE5hdGl2ZVNlbGVjdElucHV0IDogU2VsZWN0SW5wdXQ7XG4gIGNvbnN0IG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgY29uc3QgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnLCAnZXJyb3InXVxuICB9KTtcbiAgY29uc3QgdmFyaWFudCA9IGZjcy52YXJpYW50IHx8IHZhcmlhbnRQcm9wO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzOiBjbGFzc2VzUHJvcFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCByZXN0T2ZDbGFzc2VzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoY2xhc3NlcywgX2V4Y2x1ZGVkMik7XG4gIGNvbnN0IElucHV0Q29tcG9uZW50ID0gaW5wdXQgfHwge1xuICAgIHN0YW5kYXJkOiAvKiNfX1BVUkVfXyovX2pzeChTdHlsZWRJbnB1dCwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pLFxuICAgIG91dGxpbmVkOiAvKiNfX1BVUkVfXyovX2pzeChTdHlsZWRPdXRsaW5lZElucHV0LCB7XG4gICAgICBsYWJlbDogbGFiZWwsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSksXG4gICAgZmlsbGVkOiAvKiNfX1BVUkVfXyovX2pzeChTdHlsZWRGaWxsZWRJbnB1dCwge1xuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pXG4gIH1bdmFyaWFudF07XG4gIGNvbnN0IGlucHV0Q29tcG9uZW50UmVmID0gdXNlRm9ya1JlZihyZWYsIElucHV0Q29tcG9uZW50LnJlZik7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChSZWFjdC5GcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAvLyBNb3N0IG9mIHRoZSBsb2dpYyBpcyBpbXBsZW1lbnRlZCBpbiBgU2VsZWN0SW5wdXRgLlxuICAgICAgLy8gVGhlIGBTZWxlY3RgIGNvbXBvbmVudCBpcyBhIHNpbXBsZSBBUEkgd3JhcHBlciB0byBleHBvc2Ugc29tZXRoaW5nIGJldHRlciB0byBwbGF5IHdpdGguXG4gICAgICBpbnB1dENvbXBvbmVudCxcbiAgICAgIGlucHV0UHJvcHM6IF9leHRlbmRzKHtcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIGVycm9yOiBmY3MuZXJyb3IsXG4gICAgICAgIEljb25Db21wb25lbnQsXG4gICAgICAgIHZhcmlhbnQsXG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gV2UgcmVuZGVyIGEgc2VsZWN0LiBXZSBjYW4gaWdub3JlIHRoZSB0eXBlIHByb3ZpZGVkIGJ5IHRoZSBgSW5wdXRgLlxuICAgICAgICBtdWx0aXBsZVxuICAgICAgfSwgbmF0aXZlID8ge1xuICAgICAgICBpZFxuICAgICAgfSA6IHtcbiAgICAgICAgYXV0b1dpZHRoLFxuICAgICAgICBkZWZhdWx0T3BlbixcbiAgICAgICAgZGlzcGxheUVtcHR5LFxuICAgICAgICBsYWJlbElkLFxuICAgICAgICBNZW51UHJvcHMsXG4gICAgICAgIG9uQ2xvc2UsXG4gICAgICAgIG9uT3BlbixcbiAgICAgICAgb3BlbixcbiAgICAgICAgcmVuZGVyVmFsdWUsXG4gICAgICAgIFNlbGVjdERpc3BsYXlQcm9wczogX2V4dGVuZHMoe1xuICAgICAgICAgIGlkXG4gICAgICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcylcbiAgICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgICAgY2xhc3NlczogaW5wdXRQcm9wcyA/IGRlZXBtZXJnZShyZXN0T2ZDbGFzc2VzLCBpbnB1dFByb3BzLmNsYXNzZXMpIDogcmVzdE9mQ2xhc3Nlc1xuICAgICAgfSwgaW5wdXQgPyBpbnB1dC5wcm9wcy5pbnB1dFByb3BzIDoge30pXG4gICAgfSwgKG11bHRpcGxlICYmIG5hdGl2ZSB8fCBkaXNwbGF5RW1wdHkpICYmIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgPyB7XG4gICAgICBub3RjaGVkOiB0cnVlXG4gICAgfSA6IHt9LCB7XG4gICAgICByZWY6IGlucHV0Q29tcG9uZW50UmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KElucHV0Q29tcG9uZW50LnByb3BzLmNsYXNzTmFtZSwgY2xhc3NOYW1lLCBjbGFzc2VzLnJvb3QpXG4gICAgfSwgIWlucHV0ICYmIHtcbiAgICAgIHZhcmlhbnRcbiAgICB9LCBvdGhlcikpXG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3QucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGBNZW51SXRlbWAgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZSBhbmQgYG9wdGlvbmAgd2hlbiBgbmF0aXZlYCBpcyB0cnVlLlxuICAgKlxuICAgKiDimqDvuI9UaGUgYE1lbnVJdGVtYCBlbGVtZW50cyAqKm11c3QqKiBiZSBkaXJlY3QgZGVzY2VuZGFudHMgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQge31cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgaXMgaW5pdGlhbGx5IG9wZW4uIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgb3BlbiBzdGF0ZSBpcyBub3QgY29udHJvbGxlZCAoaS5lLiB0aGUgYG9wZW5gIHByb3AgaXMgbm90IGRlZmluZWQpLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWZhdWx0T3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB2YWx1ZSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBubyBpdGVtcyBhcmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEluIG9yZGVyIHRvIGRpc3BsYXkgYSBtZWFuaW5nZnVsIHZhbHVlLCBhIGZ1bmN0aW9uIGNhbiBiZSBwYXNzZWQgdG8gdGhlIGByZW5kZXJWYWx1ZWAgcHJvcCB3aGljaFxuICAgKiByZXR1cm5zIHRoZSB2YWx1ZSB0byBiZSBkaXNwbGF5ZWQgd2hlbiBubyBpdGVtcyBhcmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaGVuIHVzaW5nIHRoaXMgcHJvcCwgbWFrZSBzdXJlIHRoZSBsYWJlbCBkb2Vzbid0IG92ZXJsYXAgd2l0aCB0aGUgZW1wdHkgZGlzcGxheWVkIHZhbHVlLlxuICAgKiBUaGUgbGFiZWwgc2hvdWxkIGVpdGhlciBiZSBoaWRkZW4gb3IgZm9yY2VkIHRvIGEgc2hydW5rIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzcGxheUVtcHR5OiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKiBAZGVmYXVsdCBBcnJvd0Ryb3BEb3duSWNvblxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIGBpZGAgb2YgdGhlIHdyYXBwZXIgZWxlbWVudCBvciB0aGUgYHNlbGVjdGAgZWxlbWVudCB3aGVuIGBuYXRpdmVgLlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKi9cbiAgaW5wdXQ6IFByb3BUeXBlcy5lbGVtZW50LFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFdoZW4gYG5hdGl2ZWAgaXMgYHRydWVgLCB0aGUgYXR0cmlidXRlcyBhcmUgYXBwbGllZCBvbiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBTZWUgW091dGxpbmVkSW5wdXQjbGFiZWxdKC9tYXRlcmlhbC11aS9hcGkvb3V0bGluZWQtaW5wdXQvI3Byb3BzKVxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIElEIG9mIGFuIGVsZW1lbnQgdGhhdCBhY3RzIGFzIGFuIGFkZGl0aW9uYWwgbGFiZWwuIFRoZSBTZWxlY3Qgd2lsbFxuICAgKiBiZSBsYWJlbGxlZCBieSB0aGUgYWRkaXRpb25hbCBsYWJlbCBhbmQgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKi9cbiAgbGFiZWxJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgTWVudWBdKC9tYXRlcmlhbC11aS9hcGkvbWVudS8pIGVsZW1lbnQuXG4gICAqL1xuICBNZW51UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgdXNlcyBhIG5hdGl2ZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbmF0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U2VsZWN0Q2hhbmdlRXZlbnQ8VmFsdWU+fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoYW55KS5cbiAgICogKipXYXJuaW5nKio6IFRoaXMgaXMgYSBnZW5lcmljIGV2ZW50LCBub3QgYSBjaGFuZ2UgZXZlbnQsIHVubGVzcyB0aGUgY2hhbmdlIGV2ZW50IGlzIGNhdXNlZCBieSBicm93c2VyIGF1dG9maWxsLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZCB3aGVuIGBuYXRpdmVgIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVXNlIGl0IGluIGVpdGhlciBjb250cm9sbGVkIChzZWUgdGhlIGBvcGVuYCBwcm9wKSwgb3IgdW5jb250cm9sbGVkIG1vZGUgKHRvIGRldGVjdCB3aGVuIHRoZSBTZWxlY3QgY29sbGFwc2VzKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaXQgaW4gZWl0aGVyIGNvbnRyb2xsZWQgKHNlZSB0aGUgYG9wZW5gIHByb3ApLCBvciB1bmNvbnRyb2xsZWQgbW9kZSAodG8gZGV0ZWN0IHdoZW4gdGhlIFNlbGVjdCBleHBhbmRzKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpcyBzaG93bi5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgYHZhbHVlYCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICAgKi9cbiAgcmVuZGVyVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIGBpbnB1dGAgdmFsdWUuIFByb3ZpZGluZyBhbiBlbXB0eSBzdHJpbmcgd2lsbCBzZWxlY3Qgbm8gb3B0aW9ucy5cbiAgICogU2V0IHRvIGFuIGVtcHR5IHN0cmluZyBgJydgIGlmIHlvdSBkb24ndCB3YW50IGFueSBvZiB0aGUgYXZhaWxhYmxlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBhbiBvYmplY3QgaXQgbXVzdCBoYXZlIHJlZmVyZW5jZSBlcXVhbGl0eSB3aXRoIHRoZSBvcHRpb24gaW4gb3JkZXIgdG8gYmUgc2VsZWN0ZWQuXG4gICAqIElmIHRoZSB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0LCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG11c3QgbWF0Y2ggd2l0aCB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvcHRpb24gaW4gb3JkZXIgdG8gYmUgc2VsZWN0ZWQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnJ10pLCBQcm9wVHlwZXMuYW55XSksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcblNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0RmllbGRVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVRleHRGaWVsZCcsIHNsb3QpO1xufVxuY29uc3QgdGV4dEZpZWxkQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVRleHRGaWVsZCcsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IHRleHRGaWVsZENsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYXV0b0NvbXBsZXRlXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJGb3JtSGVscGVyVGV4dFByb3BzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaGVscGVyVGV4dFwiLCBcImlkXCIsIFwiSW5wdXRMYWJlbFByb3BzXCIsIFwiaW5wdXRQcm9wc1wiLCBcIklucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcImxhYmVsXCIsIFwibWF4Um93c1wiLCBcIm1pblJvd3NcIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkZvY3VzXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZXF1aXJlZFwiLCBcInJvd3NcIiwgXCJzZWxlY3RcIiwgXCJTZWxlY3RQcm9wc1wiLCBcInR5cGVcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgdXNlSWQgZnJvbSAnQG11aS91dGlscy91c2VJZCc7XG5pbXBvcnQgcmVmVHlwZSBmcm9tICdAbXVpL3V0aWxzL3JlZlR5cGUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgRmlsbGVkSW5wdXQgZnJvbSAnLi4vRmlsbGVkSW5wdXQnO1xuaW1wb3J0IE91dGxpbmVkSW5wdXQgZnJvbSAnLi4vT3V0bGluZWRJbnB1dCc7XG5pbXBvcnQgSW5wdXRMYWJlbCBmcm9tICcuLi9JbnB1dExhYmVsJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUhlbHBlclRleHQgZnJvbSAnLi4vRm9ybUhlbHBlclRleHQnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuLi9TZWxlY3QnO1xuaW1wb3J0IHsgZ2V0VGV4dEZpZWxkVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90ZXh0RmllbGRDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB2YXJpYW50Q29tcG9uZW50ID0ge1xuICBzdGFuZGFyZDogSW5wdXQsXG4gIGZpbGxlZDogRmlsbGVkSW5wdXQsXG4gIG91dGxpbmVkOiBPdXRsaW5lZElucHV0XG59O1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VGV4dEZpZWxkVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBUZXh0RmllbGRSb290ID0gc3R5bGVkKEZvcm1Db250cm9sLCB7XG4gIG5hbWU6ICdNdWlUZXh0RmllbGQnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnJvb3Rcbn0pKHt9KTtcblxuLyoqXG4gKiBUaGUgYFRleHRGaWVsZGAgaXMgYSBjb252ZW5pZW5jZSB3cmFwcGVyIGZvciB0aGUgbW9zdCBjb21tb24gY2FzZXMgKDgwJSkuXG4gKiBJdCBjYW5ub3QgYmUgYWxsIHRoaW5ncyB0byBhbGwgcGVvcGxlLCBvdGhlcndpc2UgdGhlIEFQSSB3b3VsZCBncm93IG91dCBvZiBjb250cm9sLlxuICpcbiAqICMjIEFkdmFuY2VkIENvbmZpZ3VyYXRpb25cbiAqXG4gKiBJdCdzIGltcG9ydGFudCB0byB1bmRlcnN0YW5kIHRoYXQgdGhlIHRleHQgZmllbGQgaXMgYSBzaW1wbGUgYWJzdHJhY3Rpb25cbiAqIG9uIHRvcCBvZiB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogLSBbRm9ybUNvbnRyb2xdKC9tYXRlcmlhbC11aS9hcGkvZm9ybS1jb250cm9sLylcbiAqIC0gW0lucHV0TGFiZWxdKC9tYXRlcmlhbC11aS9hcGkvaW5wdXQtbGFiZWwvKVxuICogLSBbRmlsbGVkSW5wdXRdKC9tYXRlcmlhbC11aS9hcGkvZmlsbGVkLWlucHV0LylcbiAqIC0gW091dGxpbmVkSW5wdXRdKC9tYXRlcmlhbC11aS9hcGkvb3V0bGluZWQtaW5wdXQvKVxuICogLSBbSW5wdXRdKC9tYXRlcmlhbC11aS9hcGkvaW5wdXQvKVxuICogLSBbRm9ybUhlbHBlclRleHRdKC9tYXRlcmlhbC11aS9hcGkvZm9ybS1oZWxwZXItdGV4dC8pXG4gKlxuICogSWYgeW91IHdpc2ggdG8gYWx0ZXIgdGhlIHByb3BzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCwgeW91IGNhbiBkbyBzbyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgaW5wdXRQcm9wcyA9IHtcbiAqICAgc3RlcDogMzAwLFxuICogfTtcbiAqXG4gKiByZXR1cm4gPFRleHRGaWVsZCBpZD1cInRpbWVcIiB0eXBlPVwidGltZVwiIGlucHV0UHJvcHM9e2lucHV0UHJvcHN9IC8+O1xuICogYGBgXG4gKlxuICogRm9yIGFkdmFuY2VkIGNhc2VzLCBwbGVhc2UgbG9vayBhdCB0aGUgc291cmNlIG9mIFRleHRGaWVsZCBieSBjbGlja2luZyBvbiB0aGVcbiAqIFwiRWRpdCB0aGlzIHBhZ2VcIiBidXR0b24gYWJvdmUuIENvbnNpZGVyIGVpdGhlcjpcbiAqXG4gKiAtIHVzaW5nIHRoZSB1cHBlciBjYXNlIHByb3BzIGZvciBwYXNzaW5nIHZhbHVlcyBkaXJlY3RseSB0byB0aGUgY29tcG9uZW50c1xuICogLSB1c2luZyB0aGUgdW5kZXJseWluZyBjb21wb25lbnRzIGRpcmVjdGx5IGFzIHNob3duIGluIHRoZSBkZW1vc1xuICovXG5jb25zdCBUZXh0RmllbGQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUZXh0RmllbGQoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVRleHRGaWVsZCdcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGF1dG9Db21wbGV0ZSxcbiAgICAgIGF1dG9Gb2N1cyA9IGZhbHNlLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBlcnJvciA9IGZhbHNlLFxuICAgICAgRm9ybUhlbHBlclRleHRQcm9wcyxcbiAgICAgIGZ1bGxXaWR0aCA9IGZhbHNlLFxuICAgICAgaGVscGVyVGV4dCxcbiAgICAgIGlkOiBpZE92ZXJyaWRlLFxuICAgICAgSW5wdXRMYWJlbFByb3BzLFxuICAgICAgaW5wdXRQcm9wcyxcbiAgICAgIElucHV0UHJvcHMsXG4gICAgICBpbnB1dFJlZixcbiAgICAgIGxhYmVsLFxuICAgICAgbWF4Um93cyxcbiAgICAgIG1pblJvd3MsXG4gICAgICBtdWx0aWxpbmUgPSBmYWxzZSxcbiAgICAgIG5hbWUsXG4gICAgICBvbkJsdXIsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIG9uRm9jdXMsXG4gICAgICBwbGFjZWhvbGRlcixcbiAgICAgIHJlcXVpcmVkID0gZmFsc2UsXG4gICAgICByb3dzLFxuICAgICAgc2VsZWN0ID0gZmFsc2UsXG4gICAgICBTZWxlY3RQcm9wcyxcbiAgICAgIHR5cGUsXG4gICAgICB2YWx1ZSxcbiAgICAgIHZhcmlhbnQgPSAnb3V0bGluZWQnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhdXRvRm9jdXMsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZWQsXG4gICAgZXJyb3IsXG4gICAgZnVsbFdpZHRoLFxuICAgIG11bHRpbGluZSxcbiAgICByZXF1aXJlZCxcbiAgICBzZWxlY3QsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChzZWxlY3QgJiYgIWNoaWxkcmVuKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBjaGlsZHJlbmAgbXVzdCBiZSBwYXNzZWQgd2hlbiB1c2luZyB0aGUgYFRleHRGaWVsZGAgY29tcG9uZW50IHdpdGggYHNlbGVjdGAuJyk7XG4gICAgfVxuICB9XG4gIGNvbnN0IElucHV0TW9yZSA9IHt9O1xuICBpZiAodmFyaWFudCA9PT0gJ291dGxpbmVkJykge1xuICAgIGlmIChJbnB1dExhYmVsUHJvcHMgJiYgdHlwZW9mIElucHV0TGFiZWxQcm9wcy5zaHJpbmsgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBJbnB1dE1vcmUubm90Y2hlZCA9IElucHV0TGFiZWxQcm9wcy5zaHJpbms7XG4gICAgfVxuICAgIElucHV0TW9yZS5sYWJlbCA9IGxhYmVsO1xuICB9XG4gIGlmIChzZWxlY3QpIHtcbiAgICAvLyB1bnNldCBkZWZhdWx0cyBmcm9tIHRleHRib3ggaW5wdXRzXG4gICAgaWYgKCFTZWxlY3RQcm9wcyB8fCAhU2VsZWN0UHJvcHMubmF0aXZlKSB7XG4gICAgICBJbnB1dE1vcmUuaWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIElucHV0TW9yZVsnYXJpYS1kZXNjcmliZWRieSddID0gdW5kZWZpbmVkO1xuICB9XG4gIGNvbnN0IGlkID0gdXNlSWQoaWRPdmVycmlkZSk7XG4gIGNvbnN0IGhlbHBlclRleHRJZCA9IGhlbHBlclRleHQgJiYgaWQgPyBgJHtpZH0taGVscGVyLXRleHRgIDogdW5kZWZpbmVkO1xuICBjb25zdCBpbnB1dExhYmVsSWQgPSBsYWJlbCAmJiBpZCA/IGAke2lkfS1sYWJlbGAgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IElucHV0Q29tcG9uZW50ID0gdmFyaWFudENvbXBvbmVudFt2YXJpYW50XTtcbiAgY29uc3QgSW5wdXRFbGVtZW50ID0gLyojX19QVVJFX18qL19qc3goSW5wdXRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaGVscGVyVGV4dElkLFxuICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcm93czogcm93cyxcbiAgICBtYXhSb3dzOiBtYXhSb3dzLFxuICAgIG1pblJvd3M6IG1pblJvd3MsXG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgaWQ6IGlkLFxuICAgIGlucHV0UmVmOiBpbnB1dFJlZixcbiAgICBvbkJsdXI6IG9uQmx1cixcbiAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgb25Gb2N1czogb25Gb2N1cyxcbiAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgaW5wdXRQcm9wczogaW5wdXRQcm9wc1xuICB9LCBJbnB1dE1vcmUsIElucHV0UHJvcHMpKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhUZXh0RmllbGRSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIHJlZjogcmVmLFxuICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICBjb2xvcjogY29sb3IsXG4gICAgdmFyaWFudDogdmFyaWFudCxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFtsYWJlbCAhPSBudWxsICYmIGxhYmVsICE9PSAnJyAmJiAvKiNfX1BVUkVfXyovX2pzeChJbnB1dExhYmVsLCBfZXh0ZW5kcyh7XG4gICAgICBodG1sRm9yOiBpZCxcbiAgICAgIGlkOiBpbnB1dExhYmVsSWRcbiAgICB9LCBJbnB1dExhYmVsUHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBsYWJlbFxuICAgIH0pKSwgc2VsZWN0ID8gLyojX19QVVJFX18qL19qc3goU2VsZWN0LCBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogaGVscGVyVGV4dElkLFxuICAgICAgaWQ6IGlkLFxuICAgICAgbGFiZWxJZDogaW5wdXRMYWJlbElkLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgaW5wdXQ6IElucHV0RWxlbWVudFxuICAgIH0sIFNlbGVjdFByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KSkgOiBJbnB1dEVsZW1lbnQsIGhlbHBlclRleHQgJiYgLyojX19QVVJFX18qL19qc3goRm9ybUhlbHBlclRleHQsIF9leHRlbmRzKHtcbiAgICAgIGlkOiBoZWxwZXJUZXh0SWRcbiAgICB9LCBGb3JtSGVscGVyVGV4dFByb3BzLCB7XG4gICAgICBjaGlsZHJlbjogaGVscGVyVGV4dFxuICAgIH0pKV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0RmllbGQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCBpcyBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jY3VzdG9tLWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IGlzIGRpc2FibGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BGb3JtSGVscGVyVGV4dGBdKC9tYXRlcmlhbC11aS9hcGkvZm9ybS1oZWxwZXItdGV4dC8pIGVsZW1lbnQuXG4gICAqL1xuICBGb3JtSGVscGVyVGV4dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGhlbHBlciB0ZXh0IGNvbnRlbnQuXG4gICAqL1xuICBoZWxwZXJUZXh0OiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBVc2UgdGhpcyBwcm9wIHRvIG1ha2UgYGxhYmVsYCBhbmQgYGhlbHBlclRleHRgIGFjY2Vzc2libGUgZm9yIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYElucHV0TGFiZWxgXSgvbWF0ZXJpYWwtdWkvYXBpL2lucHV0LWxhYmVsLykgZWxlbWVudC5cbiAgICogUG9pbnRlciBldmVudHMgbGlrZSBgb25DbGlja2AgYXJlIGVuYWJsZWQgaWYgYW5kIG9ubHkgaWYgYHNocmlua2AgaXMgYHRydWVgLlxuICAgKi9cbiAgSW5wdXRMYWJlbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgSW5wdXQgZWxlbWVudC5cbiAgICogSXQgd2lsbCBiZSBhIFtgRmlsbGVkSW5wdXRgXSgvbWF0ZXJpYWwtdWkvYXBpL2ZpbGxlZC1pbnB1dC8pLFxuICAgKiBbYE91dGxpbmVkSW5wdXRgXSgvbWF0ZXJpYWwtdWkvYXBpL291dGxpbmVkLWlucHV0Lykgb3IgW2BJbnB1dGBdKC9tYXRlcmlhbC11aS9hcGkvaW5wdXQvKVxuICAgKiBjb21wb25lbnQgZGVwZW5kaW5nIG9uIHRoZSBgdmFyaWFudGAgcHJvcCB2YWx1ZS5cbiAgICovXG4gIElucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBjb250ZW50LlxuICAgKi9cbiAgbGFiZWw6IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogSWYgYGRlbnNlYCBvciBgbm9ybWFsYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZyBvZiB0aGlzIGFuZCBjb250YWluZWQgY29tcG9uZW50cy5cbiAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnLCAnbm9ybWFsJ10pLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIG1heFJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICBtaW5Sb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgYHRleHRhcmVhYCBlbGVtZW50IGlzIHJlbmRlcmVkIGluc3RlYWQgb2YgYW4gaW5wdXQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGBpbnB1dGAgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBpcyBkaXNwbGF5ZWQgYXMgcmVxdWlyZWQgYW5kIHRoZSBgaW5wdXRgIGVsZW1lbnQgaXMgcmVxdWlyZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFJlbmRlciBhIFtgU2VsZWN0YF0oL21hdGVyaWFsLXVpL2FwaS9zZWxlY3QvKSBlbGVtZW50IHdoaWxlIHBhc3NpbmcgdGhlIElucHV0IGVsZW1lbnQgdG8gYFNlbGVjdGAgYXMgYGlucHV0YCBwYXJhbWV0ZXIuXG4gICAqIElmIHRoaXMgb3B0aW9uIGlzIHNldCB5b3UgbXVzdCBwYXNzIHRoZSBvcHRpb25zIG9mIHRoZSBzZWxlY3QgYXMgY2hpbGRyZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BTZWxlY3RgXSgvbWF0ZXJpYWwtdWkvYXBpL3NlbGVjdC8pIGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3RQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ21lZGl1bScsICdzbWFsbCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8uc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIEBkZWZhdWx0ICdvdXRsaW5lZCdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRleHRGaWVsZDsiLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJ0BtdWkvdXRpbHMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVR5cG9ncmFwaHknLCBzbG90KTtcbn1cbmNvbnN0IHR5cG9ncmFwaHlDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVHlwb2dyYXBoeScsIFsncm9vdCcsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2luaGVyaXQnLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnb3ZlcmxpbmUnLCAnYWxpZ25MZWZ0JywgJ2FsaWduUmlnaHQnLCAnYWxpZ25DZW50ZXInLCAnYWxpZ25KdXN0aWZ5JywgJ25vV3JhcCcsICdndXR0ZXJCb3R0b20nLCAncGFyYWdyYXBoJ10pO1xuZXhwb3J0IGRlZmF1bHQgdHlwb2dyYXBoeUNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWxpZ25cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJub1dyYXBcIiwgXCJwYXJhZ3JhcGhcIiwgXCJ2YXJpYW50XCIsIFwidmFyaWFudE1hcHBpbmdcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBleHRlbmRTeFByb3AgfSBmcm9tICdAbXVpL3N5c3RlbS9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IGNvbXBvc2VDbGFzc2VzIGZyb20gJ0BtdWkvdXRpbHMvY29tcG9zZUNsYXNzZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdHlwb2dyYXBoeUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbixcbiAgICBndXR0ZXJCb3R0b20sXG4gICAgbm9XcmFwLFxuICAgIHBhcmFncmFwaCxcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBgYWxpZ24ke2NhcGl0YWxpemUoYWxpZ24pfWAsIGd1dHRlckJvdHRvbSAmJiAnZ3V0dGVyQm90dG9tJywgbm9XcmFwICYmICdub1dyYXAnLCBwYXJhZ3JhcGggJiYgJ3BhcmFncmFwaCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGNvbnN0IFR5cG9ncmFwaHlSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLnZhcmlhbnQgJiYgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBzdHlsZXNbYGFsaWduJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuYWxpZ24pfWBdLCBvd25lclN0YXRlLm5vV3JhcCAmJiBzdHlsZXMubm9XcmFwLCBvd25lclN0YXRlLmd1dHRlckJvdHRvbSAmJiBzdHlsZXMuZ3V0dGVyQm90dG9tLCBvd25lclN0YXRlLnBhcmFncmFwaCAmJiBzdHlsZXMucGFyYWdyYXBoXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgbWFyZ2luOiAwXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmhlcml0JyAmJiB7XG4gIC8vIFNvbWUgZWxlbWVudHMsIGxpa2UgPGJ1dHRvbj4gb24gQ2hyb21lIGhhdmUgZGVmYXVsdCBmb250IHRoYXQgZG9lc24ndCBpbmhlcml0LCByZXNldCB0aGlzLlxuICBmb250OiAnaW5oZXJpdCdcbn0sIG93bmVyU3RhdGUudmFyaWFudCAhPT0gJ2luaGVyaXQnICYmIHRoZW1lLnR5cG9ncmFwaHlbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIHtcbiAgdGV4dEFsaWduOiBvd25lclN0YXRlLmFsaWduXG59LCBvd25lclN0YXRlLm5vV3JhcCAmJiB7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgb3duZXJTdGF0ZS5ndXR0ZXJCb3R0b20gJiYge1xuICBtYXJnaW5Cb3R0b206ICcwLjM1ZW0nXG59LCBvd25lclN0YXRlLnBhcmFncmFwaCAmJiB7XG4gIG1hcmdpbkJvdHRvbTogMTZcbn0pKTtcbmNvbnN0IGRlZmF1bHRWYXJpYW50TWFwcGluZyA9IHtcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgc3VidGl0bGUxOiAnaDYnLFxuICBzdWJ0aXRsZTI6ICdoNicsXG4gIGJvZHkxOiAncCcsXG4gIGJvZHkyOiAncCcsXG4gIGluaGVyaXQ6ICdwJ1xufTtcblxuLy8gVE9ETyB2NjogZGVwcmVjYXRlIHRoZXNlIGNvbG9yIHZhbHVlcyBpbiB2NS54IGFuZCByZW1vdmUgdGhlIHRyYW5zZm9ybWF0aW9uIGluIHY2XG5jb25zdCBjb2xvclRyYW5zZm9ybWF0aW9ucyA9IHtcbiAgcHJpbWFyeTogJ3ByaW1hcnkubWFpbicsXG4gIHRleHRQcmltYXJ5OiAndGV4dC5wcmltYXJ5JyxcbiAgc2Vjb25kYXJ5OiAnc2Vjb25kYXJ5Lm1haW4nLFxuICB0ZXh0U2Vjb25kYXJ5OiAndGV4dC5zZWNvbmRhcnknLFxuICBlcnJvcjogJ2Vycm9yLm1haW4nXG59O1xuY29uc3QgdHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyA9IGNvbG9yID0+IHtcbiAgcmV0dXJuIGNvbG9yVHJhbnNmb3JtYXRpb25zW2NvbG9yXSB8fCBjb2xvcjtcbn07XG5jb25zdCBUeXBvZ3JhcGh5ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVHlwb2dyYXBoeShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgdGhlbWVQcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUeXBvZ3JhcGh5J1xuICB9KTtcbiAgY29uc3QgY29sb3IgPSB0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzKHRoZW1lUHJvcHMuY29sb3IpO1xuICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcChfZXh0ZW5kcyh7fSwgdGhlbWVQcm9wcywge1xuICAgIGNvbG9yXG4gIH0pKTtcbiAgY29uc3Qge1xuICAgICAgYWxpZ24gPSAnaW5oZXJpdCcsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQsXG4gICAgICBndXR0ZXJCb3R0b20gPSBmYWxzZSxcbiAgICAgIG5vV3JhcCA9IGZhbHNlLFxuICAgICAgcGFyYWdyYXBoID0gZmFsc2UsXG4gICAgICB2YXJpYW50ID0gJ2JvZHkxJyxcbiAgICAgIHZhcmlhbnRNYXBwaW5nID0gZGVmYXVsdFZhcmlhbnRNYXBwaW5nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbGlnbixcbiAgICBjb2xvcixcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50LFxuICAgIGd1dHRlckJvdHRvbSxcbiAgICBub1dyYXAsXG4gICAgcGFyYWdyYXBoLFxuICAgIHZhcmlhbnQsXG4gICAgdmFyaWFudE1hcHBpbmdcbiAgfSk7XG4gIGNvbnN0IENvbXBvbmVudCA9IGNvbXBvbmVudCB8fCAocGFyYWdyYXBoID8gJ3AnIDogdmFyaWFudE1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdFZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHlSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IENvbXBvbmVudCxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVHlwb2dyYXBoeS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8g4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAIFdhcm5pbmcg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4gIC8vIOKUgiBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMuIOKUglxuICAvLyDilIIgICAgVG8gdXBkYXRlIHRoZW0sIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIGBwbnBtIHByb3B0eXBlc2AuICAgICDilIJcbiAgLy8g4pSU4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSYXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2luaGVyaXQnLCAnanVzdGlmeScsICdsZWZ0JywgJ3JpZ2h0J10pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGd1dHRlckJvdHRvbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgbm90IHdyYXAsIGJ1dCBpbnN0ZWFkIHdpbGwgdHJ1bmNhdGUgd2l0aCBhIHRleHQgb3ZlcmZsb3cgZWxsaXBzaXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0ZXh0IG92ZXJmbG93IGNhbiBvbmx5IGhhcHBlbiB3aXRoIGJsb2NrIG9yIGlubGluZS1ibG9jayBsZXZlbCBlbGVtZW50c1xuICAgKiAodGhlIGVsZW1lbnQgbmVlZHMgdG8gaGF2ZSBhIHdpZHRoIGluIG9yZGVyIHRvIG92ZXJmbG93KS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG5vV3JhcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBlbGVtZW50IHdpbGwgYmUgYSBwYXJhZ3JhcGggZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHBhcmFncmFwaDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICogQGRlZmF1bHQgJ2JvZHkxJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib2R5MScsICdib2R5MicsICdidXR0b24nLCAnY2FwdGlvbicsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdpbmhlcml0JywgJ292ZXJsaW5lJywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgdmFyaWFudCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IEhUTUwgZWxlbWVudCB0eXBlcy5cbiAgICogRm9yIGluc3RhbmNlLCBzdWJ0aXRsZTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgaDE6ICdoMScsXG4gICAqICAgaDI6ICdoMicsXG4gICAqICAgaDM6ICdoMycsXG4gICAqICAgaDQ6ICdoNCcsXG4gICAqICAgaDU6ICdoNScsXG4gICAqICAgaDY6ICdoNicsXG4gICAqICAgc3VidGl0bGUxOiAnaDYnLFxuICAgKiAgIHN1YnRpdGxlMjogJ2g2JyxcbiAgICogICBib2R5MTogJ3AnLFxuICAgKiAgIGJvZHkyOiAncCcsXG4gICAqICAgaW5oZXJpdDogJ3AnLFxuICAgKiB9XG4gICAqL1xuICB2YXJpYW50TWFwcGluZzogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVHlwb2dyYXBoeTsiLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksYz1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLGQ9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLGU9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLGY9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLGc9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLGg9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksaz1TeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksbT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksbj1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksdD1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpLHU7dT1TeW1ib2wuZm9yKFwicmVhY3QubW9kdWxlLnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHYoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHI9YS4kJHR5cGVvZjtzd2l0Y2gocil7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIG06Y2FzZSBuOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBoOmNhc2UgbDpjYXNlIHE6Y2FzZSBwOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiByfX1jYXNlIGM6cmV0dXJuIHJ9fX1leHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWc7ZXhwb3J0cy5FbGVtZW50PWI7ZXhwb3J0cy5Gb3J3YXJkUmVmPWw7ZXhwb3J0cy5GcmFnbWVudD1kO2V4cG9ydHMuTGF6eT1xO2V4cG9ydHMuTWVtbz1wO2V4cG9ydHMuUG9ydGFsPWM7ZXhwb3J0cy5Qcm9maWxlcj1mO2V4cG9ydHMuU3RyaWN0TW9kZT1lO2V4cG9ydHMuU3VzcGVuc2U9bTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0PW47ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1sfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXF9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cH07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1tfTtleHBvcnRzLmlzU3VzcGVuc2VMaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT1lfHxhPT09bXx8YT09PW58fGE9PT10fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1sfHxhLiQkdHlwZW9mPT09dXx8dm9pZCAwIT09YS5nZXRNb2R1bGVJZCk/ITA6ITF9O2V4cG9ydHMudHlwZU9mPXY7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBtaXhpbnMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICB0b29sYmFyOiB7XG4gICAgICBtaW5IZWlnaHQ6IDU2LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCd4cycpXToge1xuICAgICAgICAnQG1lZGlhIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc6IHtcbiAgICAgICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgICAgIG1pbkhlaWdodDogNjRcbiAgICAgIH1cbiAgICB9XG4gIH0sIG1peGlucyk7XG59IiwiY29uc3QgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY29tbW9uOyIsImNvbnN0IGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZjVmNWY1JyxcbiAgQTIwMDogJyNlZWVlZWUnLFxuICBBNDAwOiAnI2JkYmRiZCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwiY29uc3QgcHVycGxlID0ge1xuICA1MDogJyNmM2U1ZjUnLFxuICAxMDA6ICcjZTFiZWU3JyxcbiAgMjAwOiAnI2NlOTNkOCcsXG4gIDMwMDogJyNiYTY4YzgnLFxuICA0MDA6ICcjYWI0N2JjJyxcbiAgNTAwOiAnIzljMjdiMCcsXG4gIDYwMDogJyM4ZTI0YWEnLFxuICA3MDA6ICcjN2IxZmEyJyxcbiAgODAwOiAnIzZhMWI5YScsXG4gIDkwMDogJyM0YTE0OGMnLFxuICBBMTAwOiAnI2VhODBmYycsXG4gIEEyMDA6ICcjZTA0MGZiJyxcbiAgQTQwMDogJyNkNTAwZjknLFxuICBBNzAwOiAnI2FhMDBmZidcbn07XG5leHBvcnQgZGVmYXVsdCBwdXJwbGU7IiwiY29uc3QgcmVkID0ge1xuICA1MDogJyNmZmViZWUnLFxuICAxMDA6ICcjZmZjZGQyJyxcbiAgMjAwOiAnI2VmOWE5YScsXG4gIDMwMDogJyNlNTczNzMnLFxuICA0MDA6ICcjZWY1MzUwJyxcbiAgNTAwOiAnI2Y0NDMzNicsXG4gIDYwMDogJyNlNTM5MzUnLFxuICA3MDA6ICcjZDMyZjJmJyxcbiAgODAwOiAnI2M2MjgyOCcsXG4gIDkwMDogJyNiNzFjMWMnLFxuICBBMTAwOiAnI2ZmOGE4MCcsXG4gIEEyMDA6ICcjZmY1MjUyJyxcbiAgQTQwMDogJyNmZjE3NDQnLFxuICBBNzAwOiAnI2Q1MDAwMCdcbn07XG5leHBvcnQgZGVmYXVsdCByZWQ7IiwiY29uc3Qgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBvcmFuZ2U7IiwiY29uc3QgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZTsiLCJjb25zdCBsaWdodEJsdWUgPSB7XG4gIDUwOiAnI2UxZjVmZScsXG4gIDEwMDogJyNiM2U1ZmMnLFxuICAyMDA6ICcjODFkNGZhJyxcbiAgMzAwOiAnIzRmYzNmNycsXG4gIDQwMDogJyMyOWI2ZjYnLFxuICA1MDA6ICcjMDNhOWY0JyxcbiAgNjAwOiAnIzAzOWJlNScsXG4gIDcwMDogJyMwMjg4ZDEnLFxuICA4MDA6ICcjMDI3N2JkJyxcbiAgOTAwOiAnIzAxNTc5YicsXG4gIEExMDA6ICcjODBkOGZmJyxcbiAgQTIwMDogJyM0MGM0ZmYnLFxuICBBNDAwOiAnIzAwYjBmZicsXG4gIEE3MDA6ICcjMDA5MWVhJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGxpZ2h0Qmx1ZTsiLCJjb25zdCBncmVlbiA9IHtcbiAgNTA6ICcjZThmNWU5JyxcbiAgMTAwOiAnI2M4ZTZjOScsXG4gIDIwMDogJyNhNWQ2YTcnLFxuICAzMDA6ICcjODFjNzg0JyxcbiAgNDAwOiAnIzY2YmI2YScsXG4gIDUwMDogJyM0Y2FmNTAnLFxuICA2MDA6ICcjNDNhMDQ3JyxcbiAgNzAwOiAnIzM4OGUzYycsXG4gIDgwMDogJyMyZTdkMzInLFxuICA5MDA6ICcjMWI1ZTIwJyxcbiAgQTEwMDogJyNiOWY2Y2EnLFxuICBBMjAwOiAnIzY5ZjBhZScsXG4gIEE0MDA6ICcjMDBlNjc2JyxcbiAgQTcwMDogJyMwMGM4NTMnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JlZW47IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibW9kZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl07XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCB7IGRhcmtlbiwgZ2V0Q29udHJhc3RSYXRpbywgbGlnaHRlbiB9IGZyb20gJ0BtdWkvc3lzdGVtL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCBncmV5IGZyb20gJy4uL2NvbG9ycy9ncmV5JztcbmltcG9ydCBwdXJwbGUgZnJvbSAnLi4vY29sb3JzL3B1cnBsZSc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IG9yYW5nZSBmcm9tICcuLi9jb2xvcnMvb3JhbmdlJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBsaWdodEJsdWUgZnJvbSAnLi4vY29sb3JzL2xpZ2h0Qmx1ZSc7XG5pbXBvcnQgZ3JlZW4gZnJvbSAnLi4vY29sb3JzL2dyZWVuJztcbmV4cG9ydCBjb25zdCBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC42KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGNvbW1vbi53aGl0ZSxcbiAgICBkZWZhdWx0OiBjb21tb24ud2hpdGVcbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA0KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA0LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4wOCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjYpJyxcbiAgICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4xMlxuICB9XG59O1xuZXhwb3J0IGNvbnN0IGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6ICcjMTIxMjEyJyxcbiAgICBkZWZhdWx0OiAnIzEyMTIxMidcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMTYsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjI0XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgY29uc3QgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFByaW1hcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBibHVlWzIwMF0sXG4gICAgICBsaWdodDogYmx1ZVs1MF0sXG4gICAgICBkYXJrOiBibHVlWzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogYmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBibHVlWzQwMF0sXG4gICAgZGFyazogYmx1ZVs4MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcHVycGxlWzIwMF0sXG4gICAgICBsaWdodDogcHVycGxlWzUwXSxcbiAgICAgIGRhcms6IHB1cnBsZVs0MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IHB1cnBsZVs1MDBdLFxuICAgIGxpZ2h0OiBwdXJwbGVbMzAwXSxcbiAgICBkYXJrOiBwdXJwbGVbNzAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEVycm9yKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcmVkWzUwMF0sXG4gICAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgICBkYXJrOiByZWRbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiByZWRbNzAwXSxcbiAgICBsaWdodDogcmVkWzQwMF0sXG4gICAgZGFyazogcmVkWzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRJbmZvKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogbGlnaHRCbHVlWzQwMF0sXG4gICAgICBsaWdodDogbGlnaHRCbHVlWzMwMF0sXG4gICAgICBkYXJrOiBsaWdodEJsdWVbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBsaWdodEJsdWVbNzAwXSxcbiAgICBsaWdodDogbGlnaHRCbHVlWzUwMF0sXG4gICAgZGFyazogbGlnaHRCbHVlWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTdWNjZXNzKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogZ3JlZW5bNDAwXSxcbiAgICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgICAgZGFyazogZ3JlZW5bNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBncmVlbls4MDBdLFxuICAgIGxpZ2h0OiBncmVlbls1MDBdLFxuICAgIGRhcms6IGdyZWVuWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRXYXJuaW5nKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogb3JhbmdlWzQwMF0sXG4gICAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiAnI2VkNmMwMicsXG4gICAgLy8gY2xvc2VzdCB0byBvcmFuZ2VbODAwXSB0aGF0IHBhc3MgMzoxLlxuICAgIGxpZ2h0OiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbOTAwXVxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1vZGUgPSAnbGlnaHQnLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSAzLFxuICAgICAgdG9uYWxPZmZzZXQgPSAwLjJcbiAgICB9ID0gcGFsZXR0ZSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhbGV0dGUsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnkgfHwgZ2V0RGVmYXVsdFByaW1hcnkobW9kZSk7XG4gIGNvbnN0IHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5IHx8IGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSk7XG4gIGNvbnN0IGVycm9yID0gcGFsZXR0ZS5lcnJvciB8fCBnZXREZWZhdWx0RXJyb3IobW9kZSk7XG4gIGNvbnN0IGluZm8gPSBwYWxldHRlLmluZm8gfHwgZ2V0RGVmYXVsdEluZm8obW9kZSk7XG4gIGNvbnN0IHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MgfHwgZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSk7XG4gIGNvbnN0IHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcgfHwgZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSk7XG5cbiAgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIGNvbnN0IGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGNvbnRyYXN0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgJHtjb250cmFzdH06MSBmb3IgJHtjb250cmFzdFRleHR9IG9uICR7YmFja2dyb3VuZH1gLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuICBjb25zdCBhdWdtZW50Q29sb3IgPSAoe1xuICAgIGNvbG9yLFxuICAgIG5hbWUsXG4gICAgbWFpblNoYWRlID0gNTAwLFxuICAgIGxpZ2h0U2hhZGUgPSAzMDAsXG4gICAgZGFya1NoYWRlID0gNzAwXG4gIH0pID0+IHtcbiAgICBjb2xvciA9IF9leHRlbmRzKHt9LCBjb2xvcik7XG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cbiAgICBpZiAoIWNvbG9yLmhhc093blByb3BlcnR5KCdtYWluJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgXFxgbWFpblxcYCBwcm9wZXJ0eSBvciBhIFxcYCR7bWFpblNoYWRlfVxcYCBwcm9wZXJ0eS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMSwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBtYWluU2hhZGUpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xvci5tYWluICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5cXGBjb2xvci5tYWluXFxgIHNob3VsZCBiZSBhIHN0cmluZywgYnV0IFxcYCR7SlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbil9XFxgIHdhcyBwcm92aWRlZCBpbnN0ZWFkLlxuXG5EaWQgeW91IGludGVuZCB0byB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2hlcz9cblxuaW1wb3J0IHsgZ3JlZW4gfSBmcm9tIFwiQG11aS9tYXRlcmlhbC9jb2xvcnNcIjtcblxuY29uc3QgdGhlbWUxID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IGdyZWVuLFxufSB9KTtcblxuY29uc3QgdGhlbWUyID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IHsgbWFpbjogZ3JlZW5bNTAwXSB9LFxufSB9KTtgIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMiwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSkpO1xuICAgIH1cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfTtcbiAgY29uc3QgbW9kZXMgPSB7XG4gICAgZGFyayxcbiAgICBsaWdodFxuICB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghbW9kZXNbbW9kZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHBhbGV0dGUgbW9kZSBcXGAke21vZGV9XFxgIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHBhbGV0dGVPdXRwdXQgPSBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogX2V4dGVuZHMoe30sIGNvbW1vbiksXG4gICAgLy8gcHJldmVudCBtdXRhYmxlIG9iamVjdC5cbiAgICAvLyBUaGUgcGFsZXR0ZSBtb2RlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICBtb2RlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHByaW1hcnksXG4gICAgICBuYW1lOiAncHJpbWFyeSdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc2Vjb25kYXJ5LFxuICAgICAgbmFtZTogJ3NlY29uZGFyeScsXG4gICAgICBtYWluU2hhZGU6ICdBNDAwJyxcbiAgICAgIGxpZ2h0U2hhZGU6ICdBMjAwJyxcbiAgICAgIGRhcmtTaGFkZTogJ0E3MDAnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBlcnJvcixcbiAgICAgIG5hbWU6ICdlcnJvcidcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zIG9yIGltcG9ydGFudCBtZXNzYWdlcy5cbiAgICB3YXJuaW5nOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHdhcm5pbmcsXG4gICAgICBuYW1lOiAnd2FybmluZydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcHJlc2VudCBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciB0aGF0IGlzIG5ldXRyYWwgYW5kIG5vdCBuZWNlc3NhcmlseSBpbXBvcnRhbnQuXG4gICAgaW5mbzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBpbmZvLFxuICAgICAgbmFtZTogJ2luZm8nXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIGluZGljYXRlIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgYW4gYWN0aW9uIHRoYXQgdXNlciB0cmlnZ2VyZWQuXG4gICAgc3VjY2VzczogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzdWNjZXNzLFxuICAgICAgbmFtZTogJ3N1Y2Nlc3MnXG4gICAgfSksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuXG4gICAgLy8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2VzIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJucyB0aGUgdGV4dCBjb2xvciB0aGF0IG1heGltaXplcyB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldFxuICB9LCBtb2Rlc1ttb2RlXSksIG90aGVyKTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5jb25zdCBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG5jb25zdCBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuXG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIGNvbnN0IF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgIHtcbiAgICAgIGZvbnRGYW1pbHkgPSBkZWZhdWx0Rm9udEZhbWlseSxcbiAgICAgIC8vIFRoZSBkZWZhdWx0IGZvbnQgc2l6ZSBvZiB0aGUgTWF0ZXJpYWwgU3BlY2lmaWNhdGlvbi5cbiAgICAgIGZvbnRTaXplID0gMTQsXG4gICAgICAvLyBweFxuICAgICAgZm9udFdlaWdodExpZ2h0ID0gMzAwLFxuICAgICAgZm9udFdlaWdodFJlZ3VsYXIgPSA0MDAsXG4gICAgICBmb250V2VpZ2h0TWVkaXVtID0gNTAwLFxuICAgICAgZm9udFdlaWdodEJvbGQgPSA3MDAsXG4gICAgICAvLyBUZWxsIE1VSSB3aGF0J3MgdGhlIGZvbnQtc2l6ZSBvbiB0aGUgaHRtbCBlbGVtZW50LlxuICAgICAgLy8gMTZweCBpcyB0aGUgZGVmYXVsdCBmb250LXNpemUgdXNlZCBieSBicm93c2Vycy5cbiAgICAgIGh0bWxGb250U2l6ZSA9IDE2LFxuICAgICAgLy8gQXBwbHkgdGhlIENTUyBwcm9wZXJ0aWVzIHRvIGFsbCB0aGUgdmFyaWFudHMuXG4gICAgICBhbGxWYXJpYW50cyxcbiAgICAgIHB4VG9SZW06IHB4VG9SZW0yXG4gICAgfSA9IF9yZWYsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG4gIGNvbnN0IHB4VG9SZW0gPSBweFRvUmVtMiB8fCAoc2l6ZSA9PiBgJHtzaXplIC8gaHRtbEZvbnRTaXplICogY29lZn1yZW1gKTtcbiAgY29uc3QgYnVpbGRWYXJpYW50ID0gKGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykgPT4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFdlaWdodCxcbiAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICBsaW5lSGVpZ2h0XG4gIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgIGxldHRlclNwYWNpbmc6IGAke3JvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKX1lbWBcbiAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcbiAgY29uc3QgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLjE2NywgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLjIsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjE2NywgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMjM1LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMzQsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKSxcbiAgICAvLyBUT0RPIHY2OiBSZW1vdmUgaGFuZGxpbmcgb2YgJ2luaGVyaXQnIHZhcmlhbnQgZnJvbSB0aGUgdGhlbWUgYXMgaXQgaXMgYWxyZWFkeSBoYW5kbGVkIGluIE1hdGVyaWFsIFVJJ3MgVHlwb2dyYXBoeSBjb21wb25lbnQuIEFsc28sIHJlbWVtYmVyIHRvIHJlbW92ZSB0aGUgYXNzb2NpYXRlZCB0eXBlcy5cbiAgICBpbmhlcml0OiB7XG4gICAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgICBmb250V2VpZ2h0OiAnaW5oZXJpdCcsXG4gICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgbGluZUhlaWdodDogJ2luaGVyaXQnLFxuICAgICAgbGV0dGVyU3BhY2luZzogJ2luaGVyaXQnXG4gICAgfVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbSxcbiAgICBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG4gIH0pO1xufSIsImNvbnN0IHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbmNvbnN0IHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG5jb25zdCBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coLi4ucHgpIHtcbiAgcmV0dXJuIFtgJHtweFswXX1weCAke3B4WzFdfXB4ICR7cHhbMl19cHggJHtweFszXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5VW1icmFPcGFjaXR5fSlgLCBgJHtweFs0XX1weCAke3B4WzVdfXB4ICR7cHhbNl19cHggJHtweFs3XX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5UGVudW1icmFPcGFjaXR5fSlgLCBgJHtweFs4XX1weCAke3B4WzldfXB4ICR7cHhbMTBdfXB4ICR7cHhbMTFdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eX0pYF0uam9pbignLCcpO1xufVxuXG4vLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcbmNvbnN0IHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl07XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCBjb25zdCBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59O1xuXG4vLyBGb2xsb3cgaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcbmV4cG9ydCBjb25zdCBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gYCR7TWF0aC5yb3VuZChtaWxsaXNlY29uZHMpfW1zYDtcbn1cbmZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgaWYgKCFoZWlnaHQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBjb25zdGFudCA9IGhlaWdodCAvIDM2O1xuXG4gIC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogY29uc3RhbnQgKiogMC4yNSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9ucyhpbnB1dFRyYW5zaXRpb25zKSB7XG4gIGNvbnN0IG1lcmdlZEVhc2luZyA9IF9leHRlbmRzKHt9LCBlYXNpbmcsIGlucHV0VHJhbnNpdGlvbnMuZWFzaW5nKTtcbiAgY29uc3QgbWVyZ2VkRHVyYXRpb24gPSBfZXh0ZW5kcyh7fSwgZHVyYXRpb24sIGlucHV0VHJhbnNpdGlvbnMuZHVyYXRpb24pO1xuICBjb25zdCBjcmVhdGUgPSAocHJvcHMgPSBbJ2FsbCddLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgICBlYXNpbmc6IGVhc2luZ09wdGlvbiA9IG1lcmdlZEVhc2luZy5lYXNlSW5PdXQsXG4gICAgICAgIGRlbGF5ID0gMFxuICAgICAgfSA9IG9wdGlvbnMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGlzU3RyaW5nID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIC8vIElFMTEgc3VwcG9ydCwgcmVwbGFjZSB3aXRoIE51bWJlci5pc05hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogQXJndW1lbnQgXCJkdXJhdGlvblwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kICR7ZHVyYXRpb25PcHRpb259LmApO1xuICAgICAgfVxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiBTZWNvbmcgYXJndW1lbnQgb2YgdHJhbnNpdGlvbi5jcmVhdGUgbXVzdCBiZSBhbiBvYmplY3QuJywgXCJBcmd1bWVudHMgc2hvdWxkIGJlIGVpdGhlciBgY3JlYXRlKCdwcm9wMScsIG9wdGlvbnMpYCBvciBgY3JlYXRlKFsncHJvcDEnLCAncHJvcDInXSwgb3B0aW9ucylgXCJdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFske09iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyl9XS5gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGFuaW1hdGVkUHJvcCA9PiBgJHthbmltYXRlZFByb3B9ICR7dHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pfSAke2Vhc2luZ09wdGlvbn0gJHt0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSl9YCkuam9pbignLCcpO1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGdldEF1dG9IZWlnaHREdXJhdGlvbixcbiAgICBjcmVhdGVcbiAgfSwgaW5wdXRUcmFuc2l0aW9ucywge1xuICAgIGVhc2luZzogbWVyZ2VkRWFzaW5nLFxuICAgIGR1cmF0aW9uOiBtZXJnZWREdXJhdGlvblxuICB9KTtcbn0iLCIvLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbmNvbnN0IHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgZmFiOiAxMDUwLFxuICBzcGVlZERpYWw6IDEwNTAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG5leHBvcnQgZGVmYXVsdCB6SW5kZXg7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJzcGFjaW5nXCIsIFwicGFsZXR0ZVwiLCBcInRyYW5zaXRpb25zXCIsIFwidHlwb2dyYXBoeVwiLCBcInNoYXBlXCJdO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4LCB7IHVuc3RhYmxlX2RlZmF1bHRTeENvbmZpZyBhcyBkZWZhdWx0U3hDb25maWcgfSBmcm9tICdAbXVpL3N5c3RlbS9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHN5c3RlbUNyZWF0ZVRoZW1lIGZyb20gJ0BtdWkvc3lzdGVtL2NyZWF0ZVRoZW1lJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25zIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbnMnO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuL3pJbmRleCc7XG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgICAgbWl4aW5zOiBtaXhpbnNJbnB1dCA9IHt9LFxuICAgICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnNJbnB1dCA9IHt9LFxuICAgICAgdHlwb2dyYXBoeTogdHlwb2dyYXBoeUlucHV0ID0ge31cbiAgICB9ID0gb3B0aW9ucyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gIGlmIChvcHRpb25zLnZhcnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgdmFyc1xcYCBpcyBhIHByaXZhdGUgZmllbGQgdXNlZCBmb3IgQ1NTIHZhcmlhYmxlcyBzdXBwb3J0LlxuUGxlYXNlIHVzZSBhbm90aGVyIG5hbWUuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTgpKTtcbiAgfVxuICBjb25zdCBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICBjb25zdCBzeXN0ZW1UaGVtZSA9IHN5c3RlbUNyZWF0ZVRoZW1lKG9wdGlvbnMpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoc3lzdGVtVGhlbWUsIHtcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhzeXN0ZW1UaGVtZS5icmVha3BvaW50cywgbWl4aW5zSW5wdXQpLFxuICAgIHBhbGV0dGUsXG4gICAgLy8gRG9uJ3QgdXNlIFsuLi5zaGFkb3dzXSB1bnRpbCB5b3UndmUgdmVyaWZpZWQgaXRzIHRyYW5zcGlsZWQgY29kZSBpcyBub3QgaW52b2tpbmcgdGhlIGl0ZXJhdG9yIHByb3RvY29sLlxuICAgIHNoYWRvd3M6IHNoYWRvd3Muc2xpY2UoKSxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgdHJhbnNpdGlvbnM6IGNyZWF0ZVRyYW5zaXRpb25zKHRyYW5zaXRpb25zSW5wdXQpLFxuICAgIHpJbmRleDogX2V4dGVuZHMoe30sIHpJbmRleClcbiAgfSk7XG4gIG11aVRoZW1lID0gZGVlcG1lcmdlKG11aVRoZW1lLCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRPRE8gdjY6IFJlZmFjdG9yIHRvIHVzZSBnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nIGZyb20gQG11aS91dGlscyBvbmNlIGByZWFkT25seWAgc3RhdGUgY2xhc3MgaXMgdXNlZCBpbiBSYXRpbmcgY29tcG9uZW50LlxuICAgIGNvbnN0IHN0YXRlQ2xhc3NlcyA9IFsnYWN0aXZlJywgJ2NoZWNrZWQnLCAnY29tcGxldGVkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2V4cGFuZGVkJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ3NlbGVjdGVkJ107XG4gICAgY29uc3QgdHJhdmVyc2UgPSAobm9kZSwgY29tcG9uZW50KSA9PiB7XG4gICAgICBsZXQga2V5O1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVba2V5XTtcbiAgICAgICAgaWYgKHN0YXRlQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlQ2xhc3MgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnJywga2V5KTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGAke2NvbXBvbmVudH1cXGAgY29tcG9uZW50IGluY3JlYXNlcyBgICsgYHRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIFxcYCR7a2V5fVxcYCBpbnRlcm5hbCBzdGF0ZS5gLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsIGBJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICcmLiR7c3RhdGVDbGFzc30nIHN5bnRheDpgLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICAgICAgICBbYCYuJHtzdGF0ZUNsYXNzfWBdOiBjaGlsZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBudWxsLCAyKSwgJycsICdodHRwczovL211aS5jb20vci9zdGF0ZS1jbGFzc2VzLWd1aWRlJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cbiAgICAgICAgICBub2RlW2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmtleXMobXVpVGhlbWUuY29tcG9uZW50cykuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBtdWlUaGVtZS5jb21wb25lbnRzW2NvbXBvbmVudF0uc3R5bGVPdmVycmlkZXM7XG4gICAgICBpZiAoc3R5bGVPdmVycmlkZXMgJiYgY29tcG9uZW50LmluZGV4T2YoJ011aScpID09PSAwKSB7XG4gICAgICAgIHRyYXZlcnNlKHN0eWxlT3ZlcnJpZGVzLCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnID0gX2V4dGVuZHMoe30sIGRlZmF1bHRTeENvbmZpZywgb3RoZXIgPT0gbnVsbCA/IHZvaWQgMCA6IG90aGVyLnVuc3RhYmxlX3N4Q29uZmlnKTtcbiAgbXVpVGhlbWUudW5zdGFibGVfc3ggPSBmdW5jdGlvbiBzeChwcm9wcykge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgc3g6IHByb3BzLFxuICAgICAgdGhlbWU6IHRoaXNcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIG11aVRoZW1lO1xufVxubGV0IHdhcm5lZE9uY2UgPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSguLi5hcmdzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCF3YXJuZWRPbmNlKSB7XG4gICAgICB3YXJuZWRPbmNlID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IHRoZSBjcmVhdGVNdWlUaGVtZSBmdW5jdGlvbiB3YXMgcmVuYW1lZCB0byBjcmVhdGVUaGVtZS4nLCAnJywgXCJZb3Ugc2hvdWxkIHVzZSBgaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICdAbXVpL21hdGVyaWFsL3N0eWxlcydgXCJdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVRoZW1lKC4uLmFyZ3MpO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFRoZW1lOyIsImV4cG9ydCBkZWZhdWx0ICckJG1hdGVyaWFsJzsiLCJpbXBvcnQgc2xvdFNob3VsZEZvcndhcmRQcm9wIGZyb20gJy4vc2xvdFNob3VsZEZvcndhcmRQcm9wJztcbmNvbnN0IHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHByb3AgPT4gc2xvdFNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdjbGFzc2VzJztcbmV4cG9ydCBkZWZhdWx0IHJvb3RTaG91bGRGb3J3YXJkUHJvcDsiLCIvLyBjb3BpZWQgZnJvbSBAbXVpL3N5c3RlbS9jcmVhdGVTdHlsZWRcbmZ1bmN0aW9uIHNsb3RTaG91bGRGb3J3YXJkUHJvcChwcm9wKSB7XG4gIHJldHVybiBwcm9wICE9PSAnb3duZXJTdGF0ZScgJiYgcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcyc7XG59XG5leHBvcnQgZGVmYXVsdCBzbG90U2hvdWxkRm9yd2FyZFByb3A7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJ0BtdWkvc3lzdGVtL2NyZWF0ZVN0eWxlZCc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuL2lkZW50aWZpZXInO1xuaW1wb3J0IHJvb3RTaG91bGRGb3J3YXJkUHJvcCBmcm9tICcuL3Jvb3RTaG91bGRGb3J3YXJkUHJvcCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHNsb3RTaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJy4vc2xvdFNob3VsZEZvcndhcmRQcm9wJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcm9vdFNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnLi9yb290U2hvdWxkRm9yd2FyZFByb3AnO1xuY29uc3Qgc3R5bGVkID0gY3JlYXRlU3R5bGVkKHtcbiAgdGhlbWVJZDogVEhFTUVfSUQsXG4gIGRlZmF1bHRUaGVtZSxcbiAgcm9vdFNob3VsZEZvcndhcmRQcm9wXG59KTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRoZW1lIGFzIHVzZVRoZW1lU3lzdGVtIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5pbXBvcnQgVEhFTUVfSUQgZnJvbSAnLi9pZGVudGlmaWVyJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lU3lzdGVtKGRlZmF1bHRUaGVtZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cbiAgcmV0dXJuIHRoZW1lW1RIRU1FX0lEXSB8fCB0aGVtZTtcbn0iLCJpbXBvcnQgcmVzb2x2ZVByb3BzIGZyb20gJ0BtdWkvdXRpbHMvcmVzb2x2ZVByb3BzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0gPSBwYXJhbXM7XG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLmNvbXBvbmVudHMgfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0gfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG4gIHJldHVybiByZXNvbHZlUHJvcHModGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMsIHByb3BzKTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gJy4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lLFxuICBkZWZhdWx0VGhlbWUsXG4gIHRoZW1lSWRcbn0pIHtcbiAgbGV0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgaWYgKHRoZW1lSWQpIHtcbiAgICB0aGVtZSA9IHRoZW1lW3RoZW1lSWRdIHx8IHRoZW1lO1xuICB9XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9KTtcbiAgcmV0dXJuIG1lcmdlZFByb3BzO1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHN5c3RlbVVzZVRoZW1lUHJvcHMgZnJvbSAnQG11aS9zeXN0ZW0vdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmltcG9ydCBUSEVNRV9JRCBmcm9tICcuL2lkZW50aWZpZXInO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lXG59KSB7XG4gIHJldHVybiBzeXN0ZW1Vc2VUaGVtZVByb3BzKHtcbiAgICBwcm9wcyxcbiAgICBuYW1lLFxuICAgIGRlZmF1bHRUaGVtZSxcbiAgICB0aGVtZUlkOiBUSEVNRV9JRFxuICB9KTtcbn0iLCJleHBvcnQgY29uc3QgcmVmbG93ID0gbm9kZSA9PiBub2RlLnNjcm9sbFRvcDtcbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcHMocHJvcHMsIG9wdGlvbnMpIHtcbiAgdmFyIF9zdHlsZSR0cmFuc2l0aW9uRHVyYSwgX3N0eWxlJHRyYW5zaXRpb25UaW1pO1xuICBjb25zdCB7XG4gICAgdGltZW91dCxcbiAgICBlYXNpbmcsXG4gICAgc3R5bGUgPSB7fVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiB7XG4gICAgZHVyYXRpb246IChfc3R5bGUkdHJhbnNpdGlvbkR1cmEgPSBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24pICE9IG51bGwgPyBfc3R5bGUkdHJhbnNpdGlvbkR1cmEgOiB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogdGltZW91dFtvcHRpb25zLm1vZGVdIHx8IDAsXG4gICAgZWFzaW5nOiAoX3N0eWxlJHRyYW5zaXRpb25UaW1pID0gc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uKSAhPSBudWxsID8gX3N0eWxlJHRyYW5zaXRpb25UaW1pIDogdHlwZW9mIGVhc2luZyA9PT0gJ29iamVjdCcgPyBlYXNpbmdbb3B0aW9ucy5tb2RlXSA6IGVhc2luZyxcbiAgICBkZWxheTogc3R5bGUudHJhbnNpdGlvbkRlbGF5XG4gIH07XG59IiwiaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnQG11aS91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCBkZWZhdWx0IGNhcGl0YWxpemU7IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICdAbXVpL3V0aWxzL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdmdJY29uVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlTdmdJY29uJywgc2xvdCk7XG59XG5jb25zdCBzdmdJY29uQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVN2Z0ljb24nLCBbJ3Jvb3QnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2NvbG9yQWN0aW9uJywgJ2NvbG9yRXJyb3InLCAnY29sb3JEaXNhYmxlZCcsICdmb250U2l6ZUluaGVyaXQnLCAnZm9udFNpemVTbWFsbCcsICdmb250U2l6ZU1lZGl1bScsICdmb250U2l6ZUxhcmdlJ10pO1xuZXhwb3J0IGRlZmF1bHQgc3ZnSWNvbkNsYXNzZXM7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCIsIFwiaHRtbENvbG9yXCIsIFwiaW5oZXJpdFZpZXdCb3hcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY29tcG9zZUNsYXNzZXMgZnJvbSAnQG11aS91dGlscy9jb21wb3NlQ2xhc3Nlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRTdmdJY29uVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9zdmdJY29uQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbG9yLFxuICAgIGZvbnRTaXplLFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGNvbG9yICE9PSAnaW5oZXJpdCcgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCBgZm9udFNpemUke2NhcGl0YWxpemUoZm9udFNpemUpfWBdXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgU3ZnSWNvblJvb3QgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tgZm9udFNpemUke2NhcGl0YWxpemUob3duZXJTdGF0ZS5mb250U2l6ZSl9YF1dO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICB2YXIgX3RoZW1lJHRyYW5zaXRpb25zLCBfdGhlbWUkdHJhbnNpdGlvbnMkY3IsIF90aGVtZSR0cmFuc2l0aW9uczIsIF90aGVtZSR0eXBvZ3JhcGh5LCBfdGhlbWUkdHlwb2dyYXBoeSRweFQsIF90aGVtZSR0eXBvZ3JhcGh5MiwgX3RoZW1lJHR5cG9ncmFwaHkyJHB4LCBfdGhlbWUkdHlwb2dyYXBoeTMsIF90aGVtZSR0eXBvZ3JhcGh5MyRweCwgX3BhbGV0dGUkb3duZXJTdGF0ZSRjLCBfcGFsZXR0ZSwgX3BhbGV0dGUyLCBfcGFsZXR0ZTM7XG4gIHJldHVybiB7XG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHdpZHRoOiAnMWVtJyxcbiAgICBoZWlnaHQ6ICcxZW0nLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIC8vIHRoZSA8c3ZnPiB3aWxsIGRlZmluZSB0aGUgcHJvcGVydHkgdGhhdCBoYXMgYGN1cnJlbnRDb2xvcmBcbiAgICAvLyBmb3IgZXhhbXBsZSBoZXJvaWNvbnMgdXNlcyBmaWxsPVwibm9uZVwiIGFuZCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgIGZpbGw6IG93bmVyU3RhdGUuaGFzU3ZnQXNDaGlsZCA/IHVuZGVmaW5lZCA6ICdjdXJyZW50Q29sb3InLFxuICAgIGZsZXhTaHJpbms6IDAsXG4gICAgdHJhbnNpdGlvbjogKF90aGVtZSR0cmFuc2l0aW9ucyA9IHRoZW1lLnRyYW5zaXRpb25zKSA9PSBudWxsIHx8IChfdGhlbWUkdHJhbnNpdGlvbnMkY3IgPSBfdGhlbWUkdHJhbnNpdGlvbnMuY3JlYXRlKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJHRyYW5zaXRpb25zJGNyLmNhbGwoX3RoZW1lJHRyYW5zaXRpb25zLCAnZmlsbCcsIHtcbiAgICAgIGR1cmF0aW9uOiAoX3RoZW1lJHRyYW5zaXRpb25zMiA9IHRoZW1lLnRyYW5zaXRpb25zKSA9PSBudWxsIHx8IChfdGhlbWUkdHJhbnNpdGlvbnMyID0gX3RoZW1lJHRyYW5zaXRpb25zMi5kdXJhdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0cmFuc2l0aW9uczIuc2hvcnRlclxuICAgIH0pLFxuICAgIGZvbnRTaXplOiB7XG4gICAgICBpbmhlcml0OiAnaW5oZXJpdCcsXG4gICAgICBzbWFsbDogKChfdGhlbWUkdHlwb2dyYXBoeSA9IHRoZW1lLnR5cG9ncmFwaHkpID09IG51bGwgfHwgKF90aGVtZSR0eXBvZ3JhcGh5JHB4VCA9IF90aGVtZSR0eXBvZ3JhcGh5LnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeSRweFQuY2FsbChfdGhlbWUkdHlwb2dyYXBoeSwgMjApKSB8fCAnMS4yNXJlbScsXG4gICAgICBtZWRpdW06ICgoX3RoZW1lJHR5cG9ncmFwaHkyID0gdGhlbWUudHlwb2dyYXBoeSkgPT0gbnVsbCB8fCAoX3RoZW1lJHR5cG9ncmFwaHkyJHB4ID0gX3RoZW1lJHR5cG9ncmFwaHkyLnB4VG9SZW0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkdHlwb2dyYXBoeTIkcHguY2FsbChfdGhlbWUkdHlwb2dyYXBoeTIsIDI0KSkgfHwgJzEuNXJlbScsXG4gICAgICBsYXJnZTogKChfdGhlbWUkdHlwb2dyYXBoeTMgPSB0aGVtZS50eXBvZ3JhcGh5KSA9PSBudWxsIHx8IChfdGhlbWUkdHlwb2dyYXBoeTMkcHggPSBfdGhlbWUkdHlwb2dyYXBoeTMucHhUb1JlbSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSR0eXBvZ3JhcGh5MyRweC5jYWxsKF90aGVtZSR0eXBvZ3JhcGh5MywgMzUpKSB8fCAnMi4xODc1cmVtJ1xuICAgIH1bb3duZXJTdGF0ZS5mb250U2l6ZV0sXG4gICAgLy8gVE9ETyB2NSBkZXByZWNhdGUsIHY2IHJlbW92ZSBmb3Igc3hcbiAgICBjb2xvcjogKF9wYWxldHRlJG93bmVyU3RhdGUkYyA9IChfcGFsZXR0ZSA9ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlKSA9PSBudWxsIHx8IChfcGFsZXR0ZSA9IF9wYWxldHRlW293bmVyU3RhdGUuY29sb3JdKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUubWFpbikgIT0gbnVsbCA/IF9wYWxldHRlJG93bmVyU3RhdGUkYyA6IHtcbiAgICAgIGFjdGlvbjogKF9wYWxldHRlMiA9ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlKSA9PSBudWxsIHx8IChfcGFsZXR0ZTIgPSBfcGFsZXR0ZTIuYWN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3BhbGV0dGUyLmFjdGl2ZSxcbiAgICAgIGRpc2FibGVkOiAoX3BhbGV0dGUzID0gKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGUpID09IG51bGwgfHwgKF9wYWxldHRlMyA9IF9wYWxldHRlMy5hY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfcGFsZXR0ZTMuZGlzYWJsZWQsXG4gICAgICBpbmhlcml0OiB1bmRlZmluZWRcbiAgICB9W293bmVyU3RhdGUuY29sb3JdXG4gIH07XG59KTtcbmNvbnN0IFN2Z0ljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlTdmdJY29uJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdpbmhlcml0JyxcbiAgICAgIGNvbXBvbmVudCA9ICdzdmcnLFxuICAgICAgZm9udFNpemUgPSAnbWVkaXVtJyxcbiAgICAgIGh0bWxDb2xvcixcbiAgICAgIGluaGVyaXRWaWV3Qm94ID0gZmFsc2UsXG4gICAgICB0aXRsZUFjY2VzcyxcbiAgICAgIHZpZXdCb3ggPSAnMCAwIDI0IDI0J1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBoYXNTdmdBc0NoaWxkID0gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi50eXBlID09PSAnc3ZnJztcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGNvbXBvbmVudCxcbiAgICBmb250U2l6ZSxcbiAgICBpbnN0YW5jZUZvbnRTaXplOiBpblByb3BzLmZvbnRTaXplLFxuICAgIGluaGVyaXRWaWV3Qm94LFxuICAgIHZpZXdCb3gsXG4gICAgaGFzU3ZnQXNDaGlsZFxuICB9KTtcbiAgY29uc3QgbW9yZSA9IHt9O1xuICBpZiAoIWluaGVyaXRWaWV3Qm94KSB7XG4gICAgbW9yZS52aWV3Qm94ID0gdmlld0JveDtcbiAgfVxuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoU3ZnSWNvblJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogY29tcG9uZW50LFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG1vcmUsIG90aGVyLCBoYXNTdmdBc0NoaWxkICYmIGNoaWxkcmVuLnByb3BzLCB7XG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjaGlsZHJlbjogW2hhc1N2Z0FzQ2hpbGQgPyBjaGlsZHJlbi5wcm9wcy5jaGlsZHJlbiA6IGNoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IC8qI19fUFVSRV9fKi9fanN4KFwidGl0bGVcIiwge1xuICAgICAgY2hpbGRyZW46IHRpdGxlQWNjZXNzXG4gICAgfSkgOiBudWxsXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN2Z0ljb24ucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBXYXJuaW5nIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuICAvLyDilIIgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zLiDilIJcbiAgLy8g4pSCICAgIFRvIHVwZGF0ZSB0aGVtLCBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBgcG5wbSBwcm9wdHlwZXNgLiAgICAg4pSCXG4gIC8vIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuICAvKipcbiAgICogTm9kZSBwYXNzZWQgaW50byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNjdXN0b20tY29sb3JzKS5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCAnaW5oZXJpdCdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnYWN0aW9uJywgJ2Rpc2FibGVkJywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJvb3Qgbm9kZSB3aWxsIGluaGVyaXQgdGhlIGN1c3RvbSBgY29tcG9uZW50YCdzIHZpZXdCb3ggYW5kIHRoZSBgdmlld0JveGBcbiAgICogcHJvcCB3aWxsIGJlIGlnbm9yZWQuXG4gICAqIFVzZWZ1bCB3aGVuIHlvdSB3YW50IHRvIHJlZmVyZW5jZSBhIGN1c3RvbSBgY29tcG9uZW50YCBhbmQgaGF2ZSBgU3ZnSWNvbmAgcGFzcyB0aGF0XG4gICAqIGBjb21wb25lbnRgJ3Mgdmlld0JveCB0byB0aGUgcm9vdCBub2RlLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgaW5oZXJpdFZpZXdCb3g6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHNoYXBlLXJlbmRlcmluZyBhdHRyaWJ1dGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkIG9uIHRoZVxuICAgKiBbTUROIFdlYiBEb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3NoYXBlLXJlbmRlcmluZykuXG4gICAqIElmIHlvdSBhcmUgaGF2aW5nIGlzc3VlcyB3aXRoIGJsdXJyeSBpY29ucyB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHRoaXMgcHJvcC5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogUHJvdmlkZXMgYSBodW1hbi1yZWFkYWJsZSB0aXRsZSBmb3IgdGhlIGVsZW1lbnQgdGhhdCBjb250YWlucyBpdC5cbiAgICogaHR0cHM6Ly93d3cudzMub3JnL1RSL1NWRy1hY2Nlc3MvI0VxdWl2YWxlbnRcbiAgICovXG4gIHRpdGxlQWNjZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICogQGRlZmF1bHQgJzAgMCAyNCAyNCdcbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCBTdmdJY29uOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuLi9TdmdJY29uJztcblxuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG11aSBwYWNrYWdlcy5cbiAqL1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN2Z0ljb24ocGF0aCwgZGlzcGxheU5hbWUpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgICAgXCJkYXRhLXRlc3RpZFwiOiBgJHtkaXNwbGF5TmFtZX1JY29uYCxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMsIHtcbiAgICAgIGNoaWxkcmVuOiBwYXRoXG4gICAgfSkpO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gTmVlZCB0byBzZXQgYGRpc3BsYXlOYW1lYCBvbiB0aGUgaW5uZXIgY29tcG9uZW50IGZvciBSZWFjdC5tZW1vLlxuICAgIC8vIFJlYWN0IHByaW9yIHRvIDE2LjE0IGlnbm9yZXMgYGRpc3BsYXlOYW1lYCBvbiB0aGUgd3JhcHBlci5cbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBgJHtkaXNwbGF5TmFtZX1JY29uYDtcbiAgfVxuICBDb21wb25lbnQubXVpTmFtZSA9IFN2Z0ljb24ubXVpTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKCAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihDb21wb25lbnQpKTtcbn0iLCJpbXBvcnQgZGVib3VuY2UgZnJvbSAnQG11aS91dGlscy9kZWJvdW5jZSc7XG5leHBvcnQgZGVmYXVsdCBkZWJvdW5jZTsiLCJpbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJ0BtdWkvdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbjsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXByZWNhdGVkUHJvcFR5cGUodmFsaWRhdG9yLCByZWFzb24pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfVxuICByZXR1cm4gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSAke2xvY2F0aW9ufSBcXGAke3Byb3BGdWxsTmFtZVNhZmV9XFxgIG9mIGAgKyBgXFxgJHtjb21wb25lbnROYW1lU2FmZX1cXGAgaXMgZGVwcmVjYXRlZC4gJHtyZWFzb259YCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xufSIsImltcG9ydCBkZXByZWNhdGVkUHJvcFR5cGUgZnJvbSAnQG11aS91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUnO1xuZXhwb3J0IGRlZmF1bHQgZGVwcmVjYXRlZFByb3BUeXBlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZVByb3BGYWN0b3J5KGNvbXBvbmVudE5hbWVJbkVycm9yLCBDb21wb25lbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzXG4gIGNvbnN0IHByZXZQcm9wVHlwZXMgPSBDb21wb25lbnQgPyBfZXh0ZW5kcyh7fSwgQ29tcG9uZW50LnByb3BUeXBlcykgOiBudWxsO1xuICBjb25zdCByZXF1aXJlUHJvcCA9IHJlcXVpcmVkUHJvcCA9PiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCAuLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICBjb25zdCBkZWZhdWx0VHlwZUNoZWNrZXIgPSBwcmV2UHJvcFR5cGVzID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UHJvcFR5cGVzW3Byb3BGdWxsTmFtZVNhZmVdO1xuICAgIGlmIChkZWZhdWx0VHlwZUNoZWNrZXIpIHtcbiAgICAgIGNvbnN0IHR5cGVDaGVja2VyUmVzdWx0ID0gZGVmYXVsdFR5cGVDaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgLi4uYXJncyk7XG4gICAgICBpZiAodHlwZUNoZWNrZXJSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVDaGVja2VyUmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXByb3BzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSBwcm9wIFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgb2YgYCArIGBcXGAke2NvbXBvbmVudE5hbWVJbkVycm9yfVxcYCBjYW4gb25seSBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggdGhlIFxcYCR7cmVxdWlyZWRQcm9wfVxcYCBwcm9wLmApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHJlcXVpcmVQcm9wO1xufSIsImltcG9ydCByZXF1aXJlUHJvcEZhY3RvcnkgZnJvbSAnQG11aS91dGlscy9yZXF1aXJlUHJvcEZhY3RvcnknO1xuZXhwb3J0IGRlZmF1bHQgcmVxdWlyZVByb3BGYWN0b3J5OyIsImltcG9ydCBzZXRSZWYgZnJvbSAnQG11aS91dGlscy9zZXRSZWYnO1xuZXhwb3J0IGRlZmF1bHQgc2V0UmVmOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHVzZUlkIGZyb20gJ0BtdWkvdXRpbHMvdXNlSWQnO1xuZXhwb3J0IGRlZmF1bHQgdXNlSWQ7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5zdXBwb3J0ZWRQcm9wKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSBwcm9wIFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHJlbW92ZSBpdC5gKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn0iLCJpbXBvcnQgdW5zdXBwb3J0ZWRQcm9wIGZyb20gJ0BtdWkvdXRpbHMvdW5zdXBwb3J0ZWRQcm9wJztcbmV4cG9ydCBkZWZhdWx0IHVuc3VwcG9ydGVkUHJvcDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVuc3RhYmxlX0NsYXNzTmFtZUdlbmVyYXRvciBhcyBDbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICdAbXVpL2Jhc2UvQ2xhc3NOYW1lR2VuZXJhdG9yJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJy4vY2FwaXRhbGl6ZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiB9IGZyb20gJy4vY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3JlYXRlU3ZnSWNvbiB9IGZyb20gJy4vY3JlYXRlU3ZnSWNvbic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlYm91bmNlIH0gZnJvbSAnLi9kZWJvdW5jZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlcHJlY2F0ZWRQcm9wVHlwZSB9IGZyb20gJy4vZGVwcmVjYXRlZFByb3BUeXBlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgaXNNdWlFbGVtZW50IH0gZnJvbSAnLi9pc011aUVsZW1lbnQnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBvd25lckRvY3VtZW50IH0gZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgb3duZXJXaW5kb3cgfSBmcm9tICcuL293bmVyV2luZG93JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgcmVxdWlyZVByb3BGYWN0b3J5IH0gZnJvbSAnLi9yZXF1aXJlUHJvcEZhY3RvcnknO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBzZXRSZWYgfSBmcm9tICcuL3NldFJlZic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc3RhYmxlX3VzZUVuaGFuY2VkRWZmZWN0IH0gZnJvbSAnLi91c2VFbmhhbmNlZEVmZmVjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc3RhYmxlX3VzZUlkIH0gZnJvbSAnLi91c2VJZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVuc3VwcG9ydGVkUHJvcCB9IGZyb20gJy4vdW5zdXBwb3J0ZWRQcm9wJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlQ29udHJvbGxlZCB9IGZyb20gJy4vdXNlQ29udHJvbGxlZCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHVzZUV2ZW50Q2FsbGJhY2sgfSBmcm9tICcuL3VzZUV2ZW50Q2FsbGJhY2snO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB1c2VGb3JrUmVmIH0gZnJvbSAnLi91c2VGb3JrUmVmJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdXNlSXNGb2N1c1Zpc2libGUgfSBmcm9tICcuL3VzZUlzRm9jdXNWaXNpYmxlJztcbi8vIFRPRE86IHJlbW92ZSB0aGlzIGV4cG9ydCBvbmNlIENsYXNzTmFtZUdlbmVyYXRvciBpcyBzdGFibGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgPSB7XG4gIGNvbmZpZ3VyZTogZ2VuZXJhdG9yID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKFsnTVVJOiBgQ2xhc3NOYW1lR2VuZXJhdG9yYCBpbXBvcnQgZnJvbSBgQG11aS9tYXRlcmlhbC91dGlsc2AgaXMgb3V0ZGF0ZWQgYW5kIG1pZ2h0IGNhdXNlIHVuZXhwZWN0ZWQgaXNzdWVzLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICdAbXVpL21hdGVyaWFsL2NsYXNzTmFtZSdgIGluc3RlYWRcIiwgJycsICdUaGUgZGV0YWlsIG9mIHRoZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMzAwMTEjaXNzdWVjb21tZW50LTEwMjQ5OTM0MDEnLCAnJywgJ1RoZSB1cGRhdGVkIGRvY3VtZW50YXRpb246IGh0dHBzOi8vbXVpLmNvbS9ndWlkZXMvY2xhc3NuYW1lLWdlbmVyYXRvci8nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICAgIENsYXNzTmFtZUdlbmVyYXRvci5jb25maWd1cmUoZ2VuZXJhdG9yKTtcbiAgfVxufTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc011aUVsZW1lbnQoZWxlbWVudCwgbXVpTmFtZXMpIHtcbiAgdmFyIF9tdWlOYW1lLCBfZWxlbWVudCR0eXBlO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoIC8vIEZvciBzZXJ2ZXIgY29tcG9uZW50cyBgbXVpTmFtZWAgaXMgYXZhaWFsYmxlIGluIGVsZW1lbnQudHlwZS5fcGF5bG9hZC52YWx1ZS5tdWlOYW1lXG4gIC8vIHJlbGV2YW50IGluZm8gLSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yODA3ZDc4MWEwOGRiOGU5ODczNjg3ZmNjYzI1YzBmMTJiNGZiM2Q0L3BhY2thZ2VzL3JlYWN0L3NyYy9SZWFjdExhenkuanMjTDQ1XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICAoX211aU5hbWUgPSBlbGVtZW50LnR5cGUubXVpTmFtZSkgIT0gbnVsbCA/IF9tdWlOYW1lIDogKF9lbGVtZW50JHR5cGUgPSBlbGVtZW50LnR5cGUpID09IG51bGwgfHwgKF9lbGVtZW50JHR5cGUgPSBfZWxlbWVudCR0eXBlLl9wYXlsb2FkKSA9PSBudWxsIHx8IChfZWxlbWVudCR0eXBlID0gX2VsZW1lbnQkdHlwZS52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JHR5cGUubXVpTmFtZSkgIT09IC0xO1xufSIsImltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnQG11aS91dGlscy9pc011aUVsZW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgaXNNdWlFbGVtZW50OyIsImltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJ0BtdWkvdXRpbHMvb3duZXJEb2N1bWVudCc7XG5leHBvcnQgZGVmYXVsdCBvd25lckRvY3VtZW50OyIsImltcG9ydCBvd25lcldpbmRvdyBmcm9tICdAbXVpL3V0aWxzL293bmVyV2luZG93JztcbmV4cG9ydCBkZWZhdWx0IG93bmVyV2luZG93OyIsIid1c2UgY2xpZW50JztcblxuLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MsIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ29udHJvbGxlZCh7XG4gIGNvbnRyb2xsZWQsXG4gIGRlZmF1bHQ6IGRlZmF1bHRQcm9wLFxuICBuYW1lLFxuICBzdGF0ZSA9ICd2YWx1ZSdcbn0pIHtcbiAgLy8gaXNDb250cm9sbGVkIGlzIGlnbm9yZWQgaW4gdGhlIGhvb2sgZGVwZW5kZW5jeSBsaXN0cyBhcyBpdCBzaG91bGQgbmV2ZXIgY2hhbmdlLlxuICBjb25zdCB7XG4gICAgY3VycmVudDogaXNDb250cm9sbGVkXG4gIH0gPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKTtcbiAgY29uc3QgW3ZhbHVlU3RhdGUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKGRlZmF1bHRQcm9wKTtcbiAgY29uc3QgdmFsdWUgPSBpc0NvbnRyb2xsZWQgPyBjb250cm9sbGVkIDogdmFsdWVTdGF0ZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGlzQ29udHJvbGxlZCAhPT0gKGNvbnRyb2xsZWQgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlICR7aXNDb250cm9sbGVkID8gJycgOiAndW4nfWNvbnRyb2xsZWQgJHtzdGF0ZX0gc3RhdGUgb2YgJHtuYW1lfSB0byBiZSAke2lzQ29udHJvbGxlZCA/ICd1bicgOiAnJ31jb250cm9sbGVkLmAsICdFbGVtZW50cyBzaG91bGQgbm90IHN3aXRjaCBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4nLCBgRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAke25hbWV9IGAgKyAnZWxlbWVudCBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBjb21wb25lbnQuJywgXCJUaGUgbmF0dXJlIG9mIHRoZSBzdGF0ZSBpcyBkZXRlcm1pbmVkIGR1cmluZyB0aGUgZmlyc3QgcmVuZGVyLiBJdCdzIGNvbnNpZGVyZWQgY29udHJvbGxlZCBpZiB0aGUgdmFsdWUgaXMgbm90IGB1bmRlZmluZWRgLlwiLCAnTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cyddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbc3RhdGUsIG5hbWUsIGNvbnRyb2xsZWRdKTtcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50OiBkZWZhdWx0VmFsdWVcbiAgICB9ID0gUmVhY3QudXNlUmVmKGRlZmF1bHRQcm9wKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKCFpc0NvbnRyb2xsZWQgJiYgZGVmYXVsdFZhbHVlICE9PSBkZWZhdWx0UHJvcCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgZGVmYXVsdCAke3N0YXRlfSBzdGF0ZSBvZiBhbiB1bmNvbnRyb2xsZWQgJHtuYW1lfSBhZnRlciBiZWluZyBpbml0aWFsaXplZC4gYCArIGBUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgb3B0IHRvIHVzZSBhIGNvbnRyb2xsZWQgJHtuYW1lfS5gXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW0pTT04uc3RyaW5naWZ5KGRlZmF1bHRQcm9wKV0pO1xuICB9XG4gIGNvbnN0IHNldFZhbHVlSWZVbmNvbnRyb2xsZWQgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdWYWx1ZSA9PiB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVJZlVuY29udHJvbGxlZF07XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgdXNlQ29udHJvbGxlZCBmcm9tICdAbXVpL3V0aWxzL3VzZUNvbnRyb2xsZWQnO1xuZXhwb3J0IGRlZmF1bHQgdXNlQ29udHJvbGxlZDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICdAbXVpL3V0aWxzL3VzZUVuaGFuY2VkRWZmZWN0JztcbmV4cG9ydCBkZWZhdWx0IHVzZUVuaGFuY2VkRWZmZWN0OyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnQG11aS91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmV4cG9ydCBkZWZhdWx0IHVzZUV2ZW50Q2FsbGJhY2s7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICdAbXVpL3V0aWxzL3VzZUZvcmtSZWYnO1xuZXhwb3J0IGRlZmF1bHQgdXNlRm9ya1JlZjsiLCIndXNlIGNsaWVudCc7XG5cbi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi92NC4xLjUvc3JjL2ZvY3VzLXZpc2libGUuanNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRpbWVvdXQgfSBmcm9tICcuLi91c2VUaW1lb3V0L3VzZVRpbWVvdXQnO1xubGV0IGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xubGV0IGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG5jb25zdCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSBuZXcgVGltZW91dCgpO1xuY29uc3QgaW5wdXRUeXBlc1doaXRlbGlzdCA9IHtcbiAgdGV4dDogdHJ1ZSxcbiAgc2VhcmNoOiB0cnVlLFxuICB1cmw6IHRydWUsXG4gIHRlbDogdHJ1ZSxcbiAgZW1haWw6IHRydWUsXG4gIHBhc3N3b3JkOiB0cnVlLFxuICBudW1iZXI6IHRydWUsXG4gIGRhdGU6IHRydWUsXG4gIG1vbnRoOiB0cnVlLFxuICB3ZWVrOiB0cnVlLFxuICB0aW1lOiB0cnVlLFxuICBkYXRldGltZTogdHJ1ZSxcbiAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZVxufTtcblxuLyoqXG4gKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KG5vZGUpIHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgdGFnTmFtZVxuICB9ID0gbm9kZTtcbiAgaWYgKHRhZ05hbWUgPT09ICdJTlBVVCcgJiYgaW5wdXRUeXBlc1doaXRlbGlzdFt0eXBlXSAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh0YWdOYW1lID09PSAnVEVYVEFSRUEnICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG5vZGUuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogS2VlcCB0cmFjayBvZiBvdXIga2V5Ym9hcmQgbW9kYWxpdHkgc3RhdGUgd2l0aCBgaGFkS2V5Ym9hcmRFdmVudGAuXG4gKiBJZiB0aGUgbW9zdCByZWNlbnQgdXNlciBpbnRlcmFjdGlvbiB3YXMgdmlhIHRoZSBrZXlib2FyZDtcbiAqIGFuZCB0aGUga2V5IHByZXNzIGRpZCBub3QgaW5jbHVkZSBhIG1ldGEsIGFsdC9vcHRpb24sIG9yIGNvbnRyb2wga2V5O1xuICogdGhlbiB0aGUgbW9kYWxpdHkgaXMga2V5Ym9hcmQuIE90aGVyd2lzZSwgdGhlIG1vZGFsaXR5IGlzIG5vdCBrZXlib2FyZC5cbiAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAqL1xuZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICBpZiAoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSkge1xuICAgIHJldHVybjtcbiAgfVxuICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBJZiBhdCBhbnkgcG9pbnQgYSB1c2VyIGNsaWNrcyB3aXRoIGEgcG9pbnRpbmcgZGV2aWNlLCBlbnN1cmUgdGhhdCB3ZSBjaGFuZ2VcbiAqIHRoZSBtb2RhbGl0eSBhd2F5IGZyb20ga2V5Ym9hcmQuXG4gKiBUaGlzIGF2b2lkcyB0aGUgc2l0dWF0aW9uIHdoZXJlIGEgdXNlciBwcmVzc2VzIGEga2V5IG9uIGFuIGFscmVhZHkgZm9jdXNlZFxuICogZWxlbWVudCwgYW5kIHRoZW4gY2xpY2tzIG9uIGEgZGlmZmVyZW50IGVsZW1lbnQsIGZvY3VzaW5nIGl0IHdpdGggYVxuICogcG9pbnRpbmcgZGV2aWNlLCB3aGlsZSB3ZSBzdGlsbCB0aGluayB3ZSdyZSBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUG9pbnRlckRvd24oKSB7XG4gIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gIGlmICh0aGlzLnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgLy8gb24gdGhlIGVsZW1lbnQgKFNhZmFyaSBhY3R1YWxseSBjYWxscyBpdCB0d2ljZSkuXG4gICAgLy8gSWYgdGhpcyB0YWIgY2hhbmdlIGNhdXNlZCBhIGJsdXIgb24gYW4gZWxlbWVudCB3aXRoIGZvY3VzLXZpc2libGUsXG4gICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgIGlmIChoYWRGb2N1c1Zpc2libGVSZWNlbnRseSkge1xuICAgICAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwcmVwYXJlKGRvYykge1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRlYXJkb3duKGRvYykge1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuZnVuY3Rpb24gaXNGb2N1c1Zpc2libGUoZXZlbnQpIHtcbiAgY29uc3Qge1xuICAgIHRhcmdldFxuICB9ID0gZXZlbnQ7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHRhcmdldC5tYXRjaGVzKCc6Zm9jdXMtdmlzaWJsZScpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIEJyb3dzZXJzIG5vdCBpbXBsZW1lbnRpbmcgOmZvY3VzLXZpc2libGUgd2lsbCB0aHJvdyBhIFN5bnRheEVycm9yLlxuICAgIC8vIFdlIHVzZSBvdXIgb3duIGhldXJpc3RpYyBmb3IgdGhvc2UgYnJvd3NlcnMuXG4gICAgLy8gUmV0aHJvdyBtaWdodCBiZSBiZXR0ZXIgaWYgaXQncyBub3QgdGhlIGV4cGVjdGVkIGVycm9yIGJ1dCBkbyB3ZSByZWFsbHlcbiAgICAvLyB3YW50IHRvIGNyYXNoIGlmIGZvY3VzLXZpc2libGUgbWFsZnVuY3Rpb25lZD9cbiAgfVxuXG4gIC8vIE5vIG5lZWQgZm9yIHZhbGlkRm9jdXNUYXJnZXQgY2hlY2suIFRoZSB1c2VyIGRvZXMgdGhhdCBieSBhdHRhY2hpbmcgaXQgdG9cbiAgLy8gZm9jdXNhYmxlIGV2ZW50cyBvbmx5LlxuICByZXR1cm4gaGFkS2V5Ym9hcmRFdmVudCB8fCBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSh0YXJnZXQpO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSXNGb2N1c1Zpc2libGUoKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKG5vZGUgPT4ge1xuICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgIHByZXBhcmUobm9kZS5vd25lckRvY3VtZW50KTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgY29uc3QgaXNGb2N1c1Zpc2libGVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZFxuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlQmx1clZpc2libGUoKSB7XG4gICAgLy8gY2hlY2tpbmcgYWdhaW5zdCBwb3RlbnRpYWwgc3RhdGUgdmFyaWFibGUgZG9lcyBub3Qgc3VmZmljZSBpZiB3ZSBmb2N1cyBhbmQgYmx1ciBzeW5jaHJvbm91c2x5LlxuICAgIC8vIFJlYWN0IHdvdWxkbid0IGhhdmUgdGltZSB0byB0cmlnZ2VyIGEgcmUtcmVuZGVyIHNvIGBmb2N1c1Zpc2libGVgIHdvdWxkIGJlIHN0YWxlLlxuICAgIC8vIElkZWFsbHkgd2Ugd291bGQgYWRqdXN0IGBpc0ZvY3VzVmlzaWJsZShldmVudClgIHRvIGxvb2sgYXQgYHJlbGF0ZWRUYXJnZXRgIGZvciBibHVyIGV2ZW50cy5cbiAgICAvLyBUaGlzIGRvZXNuJ3Qgd29yayBpbiBJRTExIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzM3NTFcbiAgICAvLyBUT0RPOiBjaGVjayBhZ2FpbiBpZiBSZWFjdCByZWxlYXNlcyB0aGVpciBpbnRlcm5hbCBjaGFuZ2VzIHRvIGZvY3VzIGV2ZW50IGhhbmRsaW5nIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8xOTE4NikuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlUmVmLmN1cnJlbnQpIHtcbiAgICAgIC8vIFRvIGRldGVjdCBhIHRhYi93aW5kb3cgc3dpdGNoLCB3ZSBsb29rIGZvciBhIGJsdXIgZXZlbnQgZm9sbG93ZWRcbiAgICAgIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgICAgIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gICAgICAvLyByZWd1bGFyIGZvY3VzIGNoYW5nZS5cbiAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dC5zdGFydCgxMDAsICgpID0+IHtcbiAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZFxuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmXG4gIH07XG59IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgdXNlSXNGb2N1c1Zpc2libGUgZnJvbSAnQG11aS91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5leHBvcnQgZGVmYXVsdCB1c2VJc0ZvY3VzVmlzaWJsZTsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbCB8fCBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdsb2JhbFN0eWxlcyhwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3R5bGVzLFxuICAgIGRlZmF1bHRUaGVtZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgY29uc3QgZ2xvYmFsU3R5bGVzID0gdHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoZW1lSW5wdXQgPT4gc3R5bGVzKGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0KSA6IHN0eWxlcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEdsb2JhbCwge1xuICAgIHN0eWxlczogZ2xvYmFsU3R5bGVzXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyA9IHtcbiAgZGVmYXVsdFRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheSwgUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKVxufSA6IHZvaWQgMDsiLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIHJlYWN0UHJvcHNSZWdleCA9IC9eKChjaGlsZHJlbnxkYW5nZXJvdXNseVNldElubmVySFRNTHxrZXl8cmVmfGF1dG9Gb2N1c3xkZWZhdWx0VmFsdWV8ZGVmYXVsdENoZWNrZWR8aW5uZXJIVE1MfHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ3xzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmd8dmFsdWVMaW5rfGFiYnJ8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZGlzYWJsZVJlbW90ZVBsYXliYWNrfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGVudGVyS2V5SGludHxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHRyYW5zbGF0ZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGluY3JlbWVudGFsfGZhbGxiYWNrfGluZXJ0fGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxvbnxvcHRpb258cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzfGF1dG9mb2N1cyl8KChbRGRdW0FhXVtUdF1bQWFdfFtBYV1bUnJdW0lpXVtBYV18eCktLiopKSQvOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViZmVlNjhhNGNkN2U2MDA5ZWY2MWQyM1xuXG52YXIgaXNQcm9wVmFsaWQgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiByZWFjdFByb3BzUmVnZXgudGVzdChwcm9wKSB8fCBwcm9wLmNoYXJDb2RlQXQoMCkgPT09IDExMVxuICAvKiBvICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgxKSA9PT0gMTEwXG4gIC8qIG4gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDIpIDwgOTE7XG59XG4vKiBaKzEgKi9cbik7XG5cbmV4cG9ydCB7IGlzUHJvcFZhbGlkIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc1Byb3BWYWxpZCBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCB7IHdpdGhFbW90aW9uQ2FjaGUsIFRoZW1lQ29udGV4dCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA9IGlzUHJvcFZhbGlkO1xuXG52YXIgdGVzdE9taXRQcm9wc09uQ29tcG9uZW50ID0gZnVuY3Rpb24gdGVzdE9taXRQcm9wc09uQ29tcG9uZW50KGtleSkge1xuICByZXR1cm4ga2V5ICE9PSAndGhlbWUnO1xufTtcblxudmFyIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IGZ1bmN0aW9uIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCh0YWcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnICYmIC8vIDk2IGlzIG9uZSBsZXNzIHRoYW4gdGhlIGNoYXIgY29kZVxuICAvLyBmb3IgXCJhXCIgc28gdGhpcyBpcyBjaGVja2luZyB0aGF0XG4gIC8vIGl0J3MgYSBsb3dlcmNhc2UgY2hhcmFjdGVyXG4gIHRhZy5jaGFyQ29kZUF0KDApID4gOTYgPyB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgOiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQ7XG59O1xudmFyIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMgPSBmdW5jdGlvbiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKSB7XG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcDtcblxuICBpZiAob3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPSBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wO1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPyBmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgIHJldHVybiB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wKHByb3BOYW1lKSAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AocHJvcE5hbWUpO1xuICAgIH0gOiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3A7XG4gIH1cblxuICBpZiAodHlwZW9mIHNob3VsZEZvcndhcmRQcm9wICE9PSAnZnVuY3Rpb24nICYmIGlzUmVhbCkge1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcDtcbiAgfVxuXG4gIHJldHVybiBzaG91bGRGb3J3YXJkUHJvcDtcbn07XG5cbnZhciBJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiA9IFwiWW91IGhhdmUgaWxsZWdhbCBlc2NhcGUgc2VxdWVuY2UgaW4geW91ciB0ZW1wbGF0ZSBsaXRlcmFsLCBtb3N0IGxpa2VseSBpbnNpZGUgY29udGVudCdzIHByb3BlcnR5IHZhbHVlLlxcbkJlY2F1c2UgeW91IHdyaXRlIHlvdXIgQ1NTIGluc2lkZSBhIEphdmFTY3JpcHQgc3RyaW5nIHlvdSBhY3R1YWxseSBoYXZlIHRvIGRvIGRvdWJsZSBlc2NhcGluZywgc28gZm9yIGV4YW1wbGUgXFxcImNvbnRlbnQ6ICdcXFxcMDBkNyc7XFxcIiBzaG91bGQgYmVjb21lIFxcXCJjb250ZW50OiAnXFxcXFxcXFwwMGQ3JztcXFwiLlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoaXMgaGVyZTpcXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9UZW1wbGF0ZV9saXRlcmFscyNFUzIwMThfcmV2aXNpb25fb2ZfaWxsZWdhbF9lc2NhcGVfc2VxdWVuY2VzXCI7XG5cbnZhciBJbnNlcnRpb24gPSBmdW5jdGlvbiBJbnNlcnRpb24oX3JlZikge1xuICB2YXIgY2FjaGUgPSBfcmVmLmNhY2hlLFxuICAgICAgc2VyaWFsaXplZCA9IF9yZWYuc2VyaWFsaXplZCxcbiAgICAgIGlzU3RyaW5nVGFnID0gX3JlZi5pc1N0cmluZ1RhZztcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBjcmVhdGVTdHlsZWQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZWQodGFnLCBvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgdHJ5aW5nIHRvIGNyZWF0ZSBhIHN0eWxlZCBlbGVtZW50IHdpdGggYW4gdW5kZWZpbmVkIGNvbXBvbmVudC5cXG5Zb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNSZWFsID0gdGFnLl9fZW1vdGlvbl9yZWFsID09PSB0YWc7XG4gIHZhciBiYXNlVGFnID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fYmFzZSB8fCB0YWc7XG4gIHZhciBpZGVudGlmaWVyTmFtZTtcbiAgdmFyIHRhcmdldENsYXNzTmFtZTtcblxuICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWRlbnRpZmllck5hbWUgPSBvcHRpb25zLmxhYmVsO1xuICAgIHRhcmdldENsYXNzTmFtZSA9IG9wdGlvbnMudGFyZ2V0O1xuICB9XG5cbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wID0gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCk7XG4gIHZhciBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcCB8fCBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoYmFzZVRhZyk7XG4gIHZhciBzaG91bGRVc2VBcyA9ICFkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoJ2FzJyk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHN0eWxlcyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkID8gdGFnLl9fZW1vdGlvbl9zdHlsZXMuc2xpY2UoMCkgOiBbXTtcblxuICAgIGlmIChpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMucHVzaChcImxhYmVsOlwiICsgaWRlbnRpZmllck5hbWUgKyBcIjtcIik7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3NbMF0gPT0gbnVsbCB8fCBhcmdzWzBdLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMucHVzaC5hcHBseShzdHlsZXMsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbMF1bMF0pO1xuICAgICAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGkgPSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1baV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzLnB1c2goYXJnc1tpXSwgYXJnc1swXVtpXSk7XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lOiB3ZSBuZWVkIHRvIGNhc3QgU3RhdGVsZXNzRnVuY3Rpb25hbENvbXBvbmVudCB0byBvdXIgUHJpdmF0ZVN0eWxlZENvbXBvbmVudCBjbGFzc1xuXG5cbiAgICB2YXIgU3R5bGVkID0gd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgICAgIHZhciBGaW5hbFRhZyA9IHNob3VsZFVzZUFzICYmIHByb3BzLmFzIHx8IGJhc2VUYWc7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gJyc7XG4gICAgICB2YXIgY2xhc3NJbnRlcnBvbGF0aW9ucyA9IFtdO1xuICAgICAgdmFyIG1lcmdlZFByb3BzID0gcHJvcHM7XG5cbiAgICAgIGlmIChwcm9wcy50aGVtZSA9PSBudWxsKSB7XG4gICAgICAgIG1lcmdlZFByb3BzID0ge307XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgbWVyZ2VkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICBtZXJnZWRQcm9wcy50aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgY2xhc3NJbnRlcnBvbGF0aW9ucywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHN0eWxlcy5jb25jYXQoY2xhc3NJbnRlcnBvbGF0aW9ucyksIGNhY2hlLnJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKTtcbiAgICAgIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZSArPSBcIiBcIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRVc2VBcyAmJiBzaG91bGRGb3J3YXJkUHJvcCA9PT0gdW5kZWZpbmVkID8gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKEZpbmFsVGFnKSA6IGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcDtcbiAgICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBfa2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRVc2VBcyAmJiBfa2V5ID09PSAnYXMnKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoIC8vICRGbG93Rml4TWVcbiAgICAgICAgZmluYWxTaG91bGRGb3J3YXJkUHJvcChfa2V5KSkge1xuICAgICAgICAgIG5ld1Byb3BzW19rZXldID0gcHJvcHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgbmV3UHJvcHMucmVmID0gcmVmO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICAgICAgY2FjaGU6IGNhY2hlLFxuICAgICAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgICAgICBpc1N0cmluZ1RhZzogdHlwZW9mIEZpbmFsVGFnID09PSAnc3RyaW5nJ1xuICAgICAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpbmFsVGFnLCBuZXdQcm9wcykpO1xuICAgIH0pO1xuICAgIFN0eWxlZC5kaXNwbGF5TmFtZSA9IGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQgPyBpZGVudGlmaWVyTmFtZSA6IFwiU3R5bGVkKFwiICsgKHR5cGVvZiBiYXNlVGFnID09PSAnc3RyaW5nJyA/IGJhc2VUYWcgOiBiYXNlVGFnLmRpc3BsYXlOYW1lIHx8IGJhc2VUYWcubmFtZSB8fCAnQ29tcG9uZW50JykgKyBcIilcIjtcbiAgICBTdHlsZWQuZGVmYXVsdFByb3BzID0gdGFnLmRlZmF1bHRQcm9wcztcbiAgICBTdHlsZWQuX19lbW90aW9uX3JlYWwgPSBTdHlsZWQ7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9iYXNlID0gYmFzZVRhZztcbiAgICBTdHlsZWQuX19lbW90aW9uX3N0eWxlcyA9IHN0eWxlcztcbiAgICBTdHlsZWQuX19lbW90aW9uX2ZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0eWxlZCwgJ3RvU3RyaW5nJywge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lID09PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHJldHVybiAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJztcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lOiBjb2VyY2UgdW5kZWZpbmVkIHRvIHN0cmluZ1xuXG5cbiAgICAgICAgcmV0dXJuIFwiLlwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgU3R5bGVkLndpdGhDb21wb25lbnQgPSBmdW5jdGlvbiAobmV4dFRhZywgbmV4dE9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVTdHlsZWQobmV4dFRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIG5leHRPcHRpb25zLCB7XG4gICAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKFN0eWxlZCwgbmV4dE9wdGlvbnMsIHRydWUpXG4gICAgICB9KSkuYXBwbHkodm9pZCAwLCBzdHlsZXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3R5bGVkO1xuICB9O1xufTtcblxuZXhwb3J0IHsgY3JlYXRlU3R5bGVkIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCBjcmVhdGVTdHlsZWQgZnJvbSAnLi4vYmFzZS9kaXN0L2Vtb3Rpb24tc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdyZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0ICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgdGFncyA9IFsnYScsICdhYmJyJywgJ2FkZHJlc3MnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2F1ZGlvJywgJ2InLCAnYmFzZScsICdiZGknLCAnYmRvJywgJ2JpZycsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhbnZhcycsICdjYXB0aW9uJywgJ2NpdGUnLCAnY29kZScsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGF0YScsICdkYXRhbGlzdCcsICdkZCcsICdkZWwnLCAnZGV0YWlscycsICdkZm4nLCAnZGlhbG9nJywgJ2RpdicsICdkbCcsICdkdCcsICdlbScsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaW5zJywgJ2tiZCcsICdrZXlnZW4nLCAnbGFiZWwnLCAnbGVnZW5kJywgJ2xpJywgJ2xpbmsnLCAnbWFpbicsICdtYXAnLCAnbWFyaycsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICdtZXRlcicsICduYXYnLCAnbm9zY3JpcHQnLCAnb2JqZWN0JywgJ29sJywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdvdXRwdXQnLCAncCcsICdwYXJhbScsICdwaWN0dXJlJywgJ3ByZScsICdwcm9ncmVzcycsICdxJywgJ3JwJywgJ3J0JywgJ3J1YnknLCAncycsICdzYW1wJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzbWFsbCcsICdzb3VyY2UnLCAnc3BhbicsICdzdHJvbmcnLCAnc3R5bGUnLCAnc3ViJywgJ3N1bW1hcnknLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpbWUnLCAndGl0bGUnLCAndHInLCAndHJhY2snLCAndScsICd1bCcsICd2YXInLCAndmlkZW8nLCAnd2JyJywgLy8gU1ZHXG4nY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2RlZnMnLCAnZWxsaXBzZScsICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICdzdmcnLCAndGV4dCcsICd0c3BhbiddO1xuXG52YXIgbmV3U3R5bGVkID0gY3JlYXRlU3R5bGVkLmJpbmQoKTtcbnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnTmFtZSkge1xuICAvLyAkRmxvd0ZpeE1lOiB3ZSBjYW4gaWdub3JlIHRoaXMgYmVjYXVzZSBpdHMgZXhwb3NlZCB0eXBlIGlzIGRlZmluZWQgYnkgdGhlIENyZWF0ZVN0eWxlZCB0eXBlXG4gIG5ld1N0eWxlZFt0YWdOYW1lXSA9IG5ld1N0eWxlZCh0YWdOYW1lKTtcbn0pO1xuXG5leHBvcnQgeyBuZXdTdHlsZWQgYXMgZGVmYXVsdCB9O1xuIiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgQ2FjaGVQcm92aWRlciB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBjcmVhdGVDYWNoZSBmcm9tICdAZW1vdGlvbi9jYWNoZSc7XG5cbi8vIHByZXBlbmQ6IHRydWUgbW92ZXMgTVVJIHN0eWxlcyB0byB0aGUgdG9wIG9mIHRoZSA8aGVhZD4gc28gdGhleSdyZSBsb2FkZWQgZmlyc3QuXG4vLyBJdCBhbGxvd3MgZGV2ZWxvcGVycyB0byBlYXNpbHkgb3ZlcnJpZGUgTVVJIHN0eWxlcyB3aXRoIG90aGVyIHN0eWxpbmcgc29sdXRpb25zLCBsaWtlIENTUyBtb2R1bGVzLlxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmxldCBjYWNoZTtcbmlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnKSB7XG4gIGNhY2hlID0gY3JlYXRlQ2FjaGUoe1xuICAgIGtleTogJ2NzcycsXG4gICAgcHJlcGVuZDogdHJ1ZVxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0eWxlZEVuZ2luZVByb3ZpZGVyKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBpbmplY3RGaXJzdCxcbiAgICBjaGlsZHJlblxuICB9ID0gcHJvcHM7XG4gIHJldHVybiBpbmplY3RGaXJzdCAmJiBjYWNoZSA/IC8qI19fUFVSRV9fKi9fanN4KENhY2hlUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2FjaGUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH0pIDogY2hpbGRyZW47XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZWRFbmdpbmVQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgbGFzdCBpbiB0aGUgPGhlYWQ+IGVsZW1lbnQgb2YgdGhlIHBhZ2UuXG4gICAqIEFzIGEgcmVzdWx0LCB0aGV5IGdhaW4gbW9yZSBzcGVjaWZpY2l0eSB0aGFuIGFueSBvdGhlciBzdHlsZSBzaGVldC5cbiAgICogSWYgeW91IHdhbnQgdG8gb3ZlcnJpZGUgTVVJJ3Mgc3R5bGVzLCBzZXQgdGhpcyBwcm9wLlxuICAgKi9cbiAgaW5qZWN0Rmlyc3Q6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwOyIsIi8qKlxuICogQG11aS9zdHlsZWQtZW5naW5lIHY1LjE1LjE0XG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBjbGllbnQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IGVtU3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHlsZWQodGFnLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0eWxlc0ZhY3RvcnkgPSBlbVN0eWxlZCh0YWcsIG9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoLi4uc3R5bGVzKSA9PiB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyA/IGBcIiR7dGFnfVwiYCA6ICdjb21wb25lbnQnO1xuICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogU2VlbXMgbGlrZSB5b3UgY2FsbGVkIFxcYHN0eWxlZCgke2NvbXBvbmVudH0pKClcXGAgd2l0aG91dCBhIFxcYHN0eWxlXFxgIGFyZ3VtZW50LmAsICdZb3UgbXVzdCBwcm92aWRlIGEgYHN0eWxlc2AgYXJndW1lbnQ6IGBzdHlsZWQoXCJkaXZcIikoc3R5bGVZb3VGb3Jnb3RUb1Bhc3MpYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcy5zb21lKHN0eWxlID0+IHN0eWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogdGhlIHN0eWxlZCgke2NvbXBvbmVudH0pKC4uLmFyZ3MpIEFQSSByZXF1aXJlcyBhbGwgaXRzIGFyZ3MgdG8gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXNGYWN0b3J5KC4uLnN0eWxlcyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gc3R5bGVzRmFjdG9yeTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IGludGVybmFsX3Byb2Nlc3NTdHlsZXMgPSAodGFnLCBwcm9jZXNzb3IpID0+IHtcbiAgLy8gRW1vdGlvbiBhdHRhY2hlcyBhbGwgdGhlIHN0eWxlcyBhcyBgX19lbW90aW9uX3N0eWxlc2AuXG4gIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzE2ZDk3MWQwZGEyMjk1OTZkNmJjYzM5ZDI4MmJhOTc1M2M5ZWU3Y2YvcGFja2FnZXMvc3R5bGVkL3NyYy9iYXNlLmpzI0wxODZcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFnLl9fZW1vdGlvbl9zdHlsZXMpKSB7XG4gICAgdGFnLl9fZW1vdGlvbl9zdHlsZXMgPSBwcm9jZXNzb3IodGFnLl9fZW1vdGlvbl9zdHlsZXMpO1xuICB9XG59O1xuZXhwb3J0IHsgVGhlbWVDb250ZXh0LCBrZXlmcmFtZXMsIGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3R5bGVkRW5naW5lUHJvdmlkZXIgfSBmcm9tICcuL1N0eWxlZEVuZ2luZVByb3ZpZGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi9HbG9iYWxTdHlsZXMnOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFscGhhID0gYWxwaGE7XG5leHBvcnRzLmJsZW5kID0gYmxlbmQ7XG5leHBvcnRzLmNvbG9yQ2hhbm5lbCA9IHZvaWQgMDtcbmV4cG9ydHMuZGFya2VuID0gZGFya2VuO1xuZXhwb3J0cy5kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yO1xuZXhwb3J0cy5lbXBoYXNpemUgPSBlbXBoYXNpemU7XG5leHBvcnRzLmdldENvbnRyYXN0UmF0aW8gPSBnZXRDb250cmFzdFJhdGlvO1xuZXhwb3J0cy5nZXRMdW1pbmFuY2UgPSBnZXRMdW1pbmFuY2U7XG5leHBvcnRzLmhleFRvUmdiID0gaGV4VG9SZ2I7XG5leHBvcnRzLmhzbFRvUmdiID0gaHNsVG9SZ2I7XG5leHBvcnRzLmxpZ2h0ZW4gPSBsaWdodGVuO1xuZXhwb3J0cy5wcml2YXRlX3NhZmVBbHBoYSA9IHByaXZhdGVfc2FmZUFscGhhO1xuZXhwb3J0cy5wcml2YXRlX3NhZmVDb2xvckNoYW5uZWwgPSB2b2lkIDA7XG5leHBvcnRzLnByaXZhdGVfc2FmZURhcmtlbiA9IHByaXZhdGVfc2FmZURhcmtlbjtcbmV4cG9ydHMucHJpdmF0ZV9zYWZlRW1waGFzaXplID0gcHJpdmF0ZV9zYWZlRW1waGFzaXplO1xuZXhwb3J0cy5wcml2YXRlX3NhZmVMaWdodGVuID0gcHJpdmF0ZV9zYWZlTGlnaHRlbjtcbmV4cG9ydHMucmVjb21wb3NlQ29sb3IgPSByZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMucmdiVG9IZXggPSByZ2JUb0hleDtcbnZhciBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBtdWkvdXRpbHMvZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCIpKTtcbnZhciBfY2xhbXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAbXVpL3V0aWxzL2NsYW1wXCIpKTtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wV3JhcHBlcih2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgJHt2YWx1ZX0gaXMgb3V0IG9mIHJhbmdlIFske21pbn0sICR7bWF4fV0uYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiAoMCwgX2NsYW1wLmRlZmF1bHQpKHZhbHVlLCBtaW4sIG1heCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5mdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnNsaWNlKDEpO1xuICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYC57MSwke2NvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDF9fWAsICdnJyk7XG4gIGxldCBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAobiA9PiBuICsgbik7XG4gIH1cbiAgcmV0dXJuIGNvbG9ycyA/IGByZ2Ike2NvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJ30oJHtjb2xvcnMubWFwKChuLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKX0pYCA6ICcnO1xufVxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGNvbnN0IGhleCA9IGludC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gYDAke2hleH1gIDogaGV4O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cbmZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cbiAgY29uc3QgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICBjb25zdCB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG4gIGlmIChbJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJywgJ2NvbG9yJ10uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVW5zdXBwb3J0ZWQgXFxgJHtjb2xvcn1cXGAgY29sb3IuXG5UaGUgZm9sbG93aW5nIGZvcm1hdHMgYXJlIHN1cHBvcnRlZDogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKS5gIDogKDAsIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UyLmRlZmF1bHQpKDksIGNvbG9yKSk7XG4gIH1cbiAgbGV0IHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKTtcbiAgbGV0IGNvbG9yU3BhY2U7XG4gIGlmICh0eXBlID09PSAnY29sb3InKSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcgJyk7XG4gICAgY29sb3JTcGFjZSA9IHZhbHVlcy5zaGlmdCgpO1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSA0ICYmIHZhbHVlc1szXS5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgdmFsdWVzWzNdID0gdmFsdWVzWzNdLnNsaWNlKDEpO1xuICAgIH1cbiAgICBpZiAoWydzcmdiJywgJ2Rpc3BsYXktcDMnLCAnYTk4LXJnYicsICdwcm9waG90by1yZ2InLCAncmVjLTIwMjAnXS5pbmRleE9mKGNvbG9yU3BhY2UpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IHVuc3VwcG9ydGVkIFxcYCR7Y29sb3JTcGFjZX1cXGAgY29sb3Igc3BhY2UuXG5UaGUgZm9sbG93aW5nIGNvbG9yIHNwYWNlcyBhcmUgc3VwcG9ydGVkOiBzcmdiLCBkaXNwbGF5LXAzLCBhOTgtcmdiLCBwcm9waG90by1yZ2IsIHJlYy0yMDIwLmAgOiAoMCwgX2Zvcm1hdE11aUVycm9yTWVzc2FnZTIuZGVmYXVsdCkoMTAsIGNvbG9yU3BhY2UpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcsJyk7XG4gIH1cbiAgdmFsdWVzID0gdmFsdWVzLm1hcCh2YWx1ZSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXMsXG4gICAgY29sb3JTcGFjZVxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBjaGFubmVsIGNyZWF0ZWQgZnJvbSB0aGUgaW5wdXQgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgY2hhbm5lbCBmb3IgdGhlIGNvbG9yLCB0aGF0IGNhbiBiZSB1c2VkIGluIHJnYmEgb3IgaHNsYSBjb2xvcnNcbiAqL1xuY29uc3QgY29sb3JDaGFubmVsID0gY29sb3IgPT4ge1xuICBjb25zdCBkZWNvbXBvc2VkQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBkZWNvbXBvc2VkQ29sb3IudmFsdWVzLnNsaWNlKDAsIDMpLm1hcCgodmFsLCBpZHgpID0+IGRlY29tcG9zZWRDb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSAmJiBpZHggIT09IDAgPyBgJHt2YWx9JWAgOiB2YWwpLmpvaW4oJyAnKTtcbn07XG5leHBvcnRzLmNvbG9yQ2hhbm5lbCA9IGNvbG9yQ2hhbm5lbDtcbmNvbnN0IHByaXZhdGVfc2FmZUNvbG9yQ2hhbm5lbCA9IChjb2xvciwgd2FybmluZykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBjb2xvckNoYW5uZWwoY29sb3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvcidcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuZXhwb3J0cy5wcml2YXRlX3NhZmVDb2xvckNoYW5uZWwgPSBwcml2YXRlX3NhZmVDb2xvckNoYW5uZWw7XG5mdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBjb2xvclNwYWNlXG4gIH0gPSBjb2xvcjtcbiAgbGV0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcCgobiwgaSkgPT4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuKTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IGAke3ZhbHVlc1sxXX0lYDtcbiAgICB2YWx1ZXNbMl0gPSBgJHt2YWx1ZXNbMl19JWA7XG4gIH1cbiAgaWYgKHR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXMgPSBgJHtjb2xvclNwYWNlfSAke3ZhbHVlcy5qb2luKCcgJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSBgJHt2YWx1ZXMuam9pbignLCAnKX1gO1xuICB9XG4gIHJldHVybiBgJHt0eXBlfSgke3ZhbHVlc30pYDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgcmV0dXJuIGAjJHt2YWx1ZXMubWFwKChuLCBpKSA9PiBpbnRUb0hleChpID09PSAzID8gTWF0aC5yb3VuZCgyNTUgKiBuKSA6IG4pKS5qb2luKCcnKX1gO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIGhzbFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcbiAgY29uc3QgaCA9IHZhbHVlc1swXTtcbiAgY29uc3QgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgY29uc3QgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDMwKSAlIDEyKSA9PiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgbGV0IHR5cGUgPSAncmdiJztcbiAgY29uc3QgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3Ioe1xuICAgIHR5cGUsXG4gICAgdmFsdWVzOiByZ2JcbiAgfSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5mdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGxldCByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyB8fCBjb2xvci50eXBlID09PSAnaHNsYScgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcCh2YWwgPT4ge1xuICAgIGlmIChjb2xvci50eXBlICE9PSAnY29sb3InKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG4gICAgfVxuICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogKCh2YWwgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40O1xuICB9KTtcblxuICAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIGNvbnN0IGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIGNvbnN0IGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5mdW5jdGlvbiBhbHBoYShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXBXcmFwcGVyKHZhbHVlKTtcbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdjb2xvcicpIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSBgLyR7dmFsdWV9YDtcbiAgfSBlbHNlIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuZnVuY3Rpb24gcHJpdmF0ZV9zYWZlQWxwaGEoY29sb3IsIHZhbHVlLCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGFscGhhKGNvbG9yLCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcFdyYXBwZXIoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xIHx8IGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmZ1bmN0aW9uIHByaXZhdGVfc2FmZURhcmtlbihjb2xvciwgY29lZmZpY2llbnQsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wV3JhcHBlcihjb2VmZmljaWVudCk7XG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmZ1bmN0aW9uIHByaXZhdGVfc2FmZUxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQgPSAwLjE1KSB7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG5mdW5jdGlvbiBwcml2YXRlX3NhZmVFbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogQmxlbmQgYSB0cmFuc3BhcmVudCBvdmVybGF5IGNvbG9yIHdpdGggYSBiYWNrZ3JvdW5kIGNvbG9yLCByZXN1bHRpbmcgaW4gYSBzaW5nbGVcbiAqIFJHQiBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gb3ZlcmxheSAtIENTUyBjb2xvclxuICogQHBhcmFtIHtudW1iZXJ9IG9wYWNpdHkgLSBPcGFjaXR5IG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcGFyYW0ge251bWJlcn0gW2dhbW1hPTEuMF0gLSBHYW1tYSBjb3JyZWN0aW9uIGZhY3Rvci4gRm9yIGdhbW1hLWNvcnJlY3QgYmxlbmRpbmcsIDIuMiBpcyB1c3VhbC5cbiAqL1xuZnVuY3Rpb24gYmxlbmQoYmFja2dyb3VuZCwgb3ZlcmxheSwgb3BhY2l0eSwgZ2FtbWEgPSAxLjApIHtcbiAgY29uc3QgYmxlbmRDaGFubmVsID0gKGIsIG8pID0+IE1hdGgucm91bmQoKGIgKiogKDEgLyBnYW1tYSkgKiAoMSAtIG9wYWNpdHkpICsgbyAqKiAoMSAvIGdhbW1hKSAqIG9wYWNpdHkpICoqIGdhbW1hKTtcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gZGVjb21wb3NlQ29sb3IoYmFja2dyb3VuZCk7XG4gIGNvbnN0IG92ZXJsYXlDb2xvciA9IGRlY29tcG9zZUNvbG9yKG92ZXJsYXkpO1xuICBjb25zdCByZ2IgPSBbYmxlbmRDaGFubmVsKGJhY2tncm91bmRDb2xvci52YWx1ZXNbMF0sIG92ZXJsYXlDb2xvci52YWx1ZXNbMF0pLCBibGVuZENoYW5uZWwoYmFja2dyb3VuZENvbG9yLnZhbHVlc1sxXSwgb3ZlcmxheUNvbG9yLnZhbHVlc1sxXSksIGJsZW5kQ2hhbm5lbChiYWNrZ3JvdW5kQ29sb3IudmFsdWVzWzJdLCBvdmVybGF5Q29sb3IudmFsdWVzWzJdKV07XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZTogJ3JnYicsXG4gICAgdmFsdWVzOiByZ2JcbiAgfSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVN0eWxlZDtcbmV4cG9ydHMuc2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbmV4cG9ydHMuc3lzdGVtRGVmYXVsdFRoZW1lID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcbnZhciBfc3R5bGVkRW5naW5lID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIkBtdWkvc3R5bGVkLWVuZ2luZVwiKSk7XG52YXIgX2RlZXBtZXJnZSA9IHJlcXVpcmUoXCJAbXVpL3V0aWxzL2RlZXBtZXJnZVwiKTtcbnZhciBfY2FwaXRhbGl6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBtdWkvdXRpbHMvY2FwaXRhbGl6ZVwiKSk7XG52YXIgX2dldERpc3BsYXlOYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQG11aS91dGlscy9nZXREaXNwbGF5TmFtZVwiKSk7XG52YXIgX2NyZWF0ZVRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVUaGVtZVwiKSk7XG52YXIgX3N0eWxlRnVuY3Rpb25TeCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3R5bGVGdW5jdGlvblN4XCIpKTtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm93bmVyU3RhdGVcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJ2YXJpYW50c1wiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcIm5hbWVcIiwgXCJzbG90XCIsIFwic2tpcFZhcmlhbnRzUmVzb2x2ZXJcIiwgXCJza2lwU3hcIiwgXCJvdmVycmlkZXNSZXNvbHZlclwiXTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKSByZXR1cm4gbnVsbDsgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCB0ID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA/IHQgOiByOyB9KShlKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgcikgeyBpZiAoIXIgJiYgZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBlICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCB1KSkgeyB2YXIgaSA9IGEgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHUpIDogbnVsbDsgaSAmJiAoaS5nZXQgfHwgaS5zZXQpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHUsIGkpIDogblt1XSA9IGVbdV07IH0gcmV0dXJuIG4uZGVmYXVsdCA9IGUsIHQgJiYgdC5zZXQoZSwgbiksIG47IH1cbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzI2ZGVkNjEwOWZjZDhjYTk4NzVjYzJjZTQ1NjRmZWU2NzhhM2YzYzUvcGFja2FnZXMvc3R5bGVkL3NyYy91dGlscy5qcyNMNDBcbmZ1bmN0aW9uIGlzU3RyaW5nVGFnKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiZcbiAgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5Njtcbn1cblxuLy8gVXBkYXRlIC9zeXN0ZW0vc3R5bGVkLyNhcGkgaW4gY2FzZSBpZiB0aGlzIGNoYW5nZXNcbmZ1bmN0aW9uIHNob3VsZEZvcndhcmRQcm9wKHByb3ApIHtcbiAgcmV0dXJuIHByb3AgIT09ICdvd25lclN0YXRlJyAmJiBwcm9wICE9PSAndGhlbWUnICYmIHByb3AgIT09ICdzeCcgJiYgcHJvcCAhPT0gJ2FzJztcbn1cbmNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGV4cG9ydHMuc3lzdGVtRGVmYXVsdFRoZW1lID0gKDAsIF9jcmVhdGVUaGVtZS5kZWZhdWx0KSgpO1xuY29uc3QgbG93ZXJjYXNlRmlyc3RMZXR0ZXIgPSBzdHJpbmcgPT4ge1xuICBpZiAoIXN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn07XG5mdW5jdGlvbiByZXNvbHZlVGhlbWUoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHRoZW1lLFxuICB0aGVtZUlkXG59KSB7XG4gIHJldHVybiBpc0VtcHR5KHRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lW3RoZW1lSWRdIHx8IHRoZW1lO1xufVxuZnVuY3Rpb24gZGVmYXVsdE92ZXJyaWRlc1Jlc29sdmVyKHNsb3QpIHtcbiAgaWYgKCFzbG90KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXNbc2xvdF07XG59XG5mdW5jdGlvbiBwcm9jZXNzU3R5bGVBcmcoY2FsbGFibGVTdHlsZSwgX3JlZikge1xuICBsZXQge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBfcmVmLFxuICAgIHByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfcmVmLCBfZXhjbHVkZWQpO1xuICBjb25zdCByZXNvbHZlZFN0eWxlc0FyZyA9IHR5cGVvZiBjYWxsYWJsZVN0eWxlID09PSAnZnVuY3Rpb24nID8gY2FsbGFibGVTdHlsZSgoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBvd25lclN0YXRlXG4gIH0sIHByb3BzKSkgOiBjYWxsYWJsZVN0eWxlO1xuICBpZiAoQXJyYXkuaXNBcnJheShyZXNvbHZlZFN0eWxlc0FyZykpIHtcbiAgICByZXR1cm4gcmVzb2x2ZWRTdHlsZXNBcmcuZmxhdE1hcChyZXNvbHZlZFN0eWxlID0+IHByb2Nlc3NTdHlsZUFyZyhyZXNvbHZlZFN0eWxlLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9LCBwcm9wcykpKTtcbiAgfVxuICBpZiAoISFyZXNvbHZlZFN0eWxlc0FyZyAmJiB0eXBlb2YgcmVzb2x2ZWRTdHlsZXNBcmcgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkocmVzb2x2ZWRTdHlsZXNBcmcudmFyaWFudHMpKSB7XG4gICAgY29uc3Qge1xuICAgICAgICB2YXJpYW50cyA9IFtdXG4gICAgICB9ID0gcmVzb2x2ZWRTdHlsZXNBcmcsXG4gICAgICBvdGhlclN0eWxlcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocmVzb2x2ZWRTdHlsZXNBcmcsIF9leGNsdWRlZDIpO1xuICAgIGxldCByZXN1bHQgPSBvdGhlclN0eWxlcztcbiAgICB2YXJpYW50cy5mb3JFYWNoKHZhcmlhbnQgPT4ge1xuICAgICAgbGV0IGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgaWYgKHR5cGVvZiB2YXJpYW50LnByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlzTWF0Y2ggPSB2YXJpYW50LnByb3BzKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICAgIG93bmVyU3RhdGVcbiAgICAgICAgfSwgcHJvcHMsIG93bmVyU3RhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHZhcmlhbnQucHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICBpZiAoKG93bmVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG93bmVyU3RhdGVba2V5XSkgIT09IHZhcmlhbnQucHJvcHNba2V5XSAmJiBwcm9wc1trZXldICE9PSB2YXJpYW50LnByb3BzW2tleV0pIHtcbiAgICAgICAgICAgIGlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzTWF0Y2gpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSBbcmVzdWx0XTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQucHVzaCh0eXBlb2YgdmFyaWFudC5zdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhcmlhbnQuc3R5bGUoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgb3duZXJTdGF0ZVxuICAgICAgICB9LCBwcm9wcywgb3duZXJTdGF0ZSkpIDogdmFyaWFudC5zdHlsZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZWRTdHlsZXNBcmc7XG59XG5mdW5jdGlvbiBjcmVhdGVTdHlsZWQoaW5wdXQgPSB7fSkge1xuICBjb25zdCB7XG4gICAgdGhlbWVJZCxcbiAgICBkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUsXG4gICAgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AsXG4gICAgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3BcbiAgfSA9IGlucHV0O1xuICBjb25zdCBzeXN0ZW1TeCA9IHByb3BzID0+IHtcbiAgICByZXR1cm4gKDAsIF9zdHlsZUZ1bmN0aW9uU3guZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgIHRoZW1lOiByZXNvbHZlVGhlbWUoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICB0aGVtZUlkXG4gICAgICB9KSlcbiAgICB9KSk7XG4gIH07XG4gIHN5c3RlbVN4Ll9fbXVpX3N5c3RlbVN4ID0gdHJ1ZTtcbiAgcmV0dXJuICh0YWcsIGlucHV0T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gRmlsdGVyIG91dCB0aGUgYHN4YCBzdHlsZSBmdW5jdGlvbiBmcm9tIHRoZSBwcmV2aW91cyBzdHlsZWQgY29tcG9uZW50IHRvIHByZXZlbnQgdW5uZWNlc3Nhcnkgc3R5bGVzIGdlbmVyYXRlZCBieSB0aGUgY29tcG9zaXRlIGNvbXBvbmVudHMuXG4gICAgKDAsIF9zdHlsZWRFbmdpbmUuaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcykodGFnLCBzdHlsZXMgPT4gc3R5bGVzLmZpbHRlcihzdHlsZSA9PiAhKHN0eWxlICE9IG51bGwgJiYgc3R5bGUuX19tdWlfc3lzdGVtU3gpKSk7XG4gICAgY29uc3Qge1xuICAgICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgICAgICBzbG90OiBjb21wb25lbnRTbG90LFxuICAgICAgICBza2lwVmFyaWFudHNSZXNvbHZlcjogaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlcixcbiAgICAgICAgc2tpcFN4OiBpbnB1dFNraXBTeCxcbiAgICAgICAgLy8gVE9ETyB2NjogcmVtb3ZlIGBsb3dlcmNhc2VGaXJzdExldHRlcigpYCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG4gICAgICAgIC8vIEZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zNzkwOFxuICAgICAgICBvdmVycmlkZXNSZXNvbHZlciA9IGRlZmF1bHRPdmVycmlkZXNSZXNvbHZlcihsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90KSlcbiAgICAgIH0gPSBpbnB1dE9wdGlvbnMsXG4gICAgICBvcHRpb25zID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShpbnB1dE9wdGlvbnMsIF9leGNsdWRlZDMpO1xuXG4gICAgLy8gaWYgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgb3B0aW9uIGlzIGRlZmluZWQsIHRha2UgdGhlIHZhbHVlLCBvdGhlcndpc2UsIHRydWUgZm9yIHJvb3QgYW5kIGZhbHNlIGZvciBvdGhlciBzbG90cy5cbiAgICBjb25zdCBza2lwVmFyaWFudHNSZXNvbHZlciA9IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgIT09IHVuZGVmaW5lZCA/IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgOlxuICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgUm9vdGAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgIC8vIEZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zNzkwOFxuICAgIGNvbXBvbmVudFNsb3QgJiYgY29tcG9uZW50U2xvdCAhPT0gJ1Jvb3QnICYmIGNvbXBvbmVudFNsb3QgIT09ICdyb290JyB8fCBmYWxzZTtcbiAgICBjb25zdCBza2lwU3ggPSBpbnB1dFNraXBTeCB8fCBmYWxzZTtcbiAgICBsZXQgbGFiZWw7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgbG93ZXJjYXNlRmlyc3RMZXR0ZXIoKWAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgICAgICAvLyBGb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL3B1bGwvMzc5MDhcbiAgICAgICAgbGFiZWwgPSBgJHtjb21wb25lbnROYW1lfS0ke2xvd2VyY2FzZUZpcnN0TGV0dGVyKGNvbXBvbmVudFNsb3QgfHwgJ1Jvb3QnKX1gO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzaG91bGRGb3J3YXJkUHJvcDtcblxuICAgIC8vIFRPRE8gdjY6IHJlbW92ZSBgUm9vdGAgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxuICAgIC8vIEZvciBtb3JlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tdWkvbWF0ZXJpYWwtdWkvcHVsbC8zNzkwOFxuICAgIGlmIChjb21wb25lbnRTbG90ID09PSAnUm9vdCcgfHwgY29tcG9uZW50U2xvdCA9PT0gJ3Jvb3QnKSB7XG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHJvb3RTaG91bGRGb3J3YXJkUHJvcDtcbiAgICB9IGVsc2UgaWYgKGNvbXBvbmVudFNsb3QpIHtcbiAgICAgIC8vIGFueSBvdGhlciBzbG90IHNwZWNpZmllZFxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzbG90U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChpc1N0cmluZ1RhZyh0YWcpKSB7XG4gICAgICAvLyBmb3Igc3RyaW5nIChodG1sKSB0YWcsIHByZXNlcnZlIHRoZSBiZWhhdmlvciBpbiBlbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMuXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgZGVmYXVsdFN0eWxlZFJlc29sdmVyID0gKDAsIF9zdHlsZWRFbmdpbmUuZGVmYXVsdCkodGFnLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGNvbnN0IHRyYW5zZm9ybVN0eWxlQXJnID0gc3R5bGVzQXJnID0+IHtcbiAgICAgIC8vIE9uIHRoZSBzZXJ2ZXIgRW1vdGlvbiBkb2Vzbid0IHVzZSBSZWFjdC5mb3J3YXJkUmVmIGZvciBjcmVhdGluZyBjb21wb25lbnRzLCBzbyB0aGUgY3JlYXRlZFxuICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgIGlmICh0eXBlb2Ygc3R5bGVzQXJnID09PSAnZnVuY3Rpb24nICYmIHN0eWxlc0FyZy5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGVzQXJnIHx8ICgwLCBfZGVlcG1lcmdlLmlzUGxhaW5PYmplY3QpKHN0eWxlc0FyZykpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzID0+IHByb2Nlc3NTdHlsZUFyZyhzdHlsZXNBcmcsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHByb3BzLCB7XG4gICAgICAgICAgdGhlbWU6IHJlc29sdmVUaGVtZSh7XG4gICAgICAgICAgICB0aGVtZTogcHJvcHMudGhlbWUsXG4gICAgICAgICAgICBkZWZhdWx0VGhlbWUsXG4gICAgICAgICAgICB0aGVtZUlkXG4gICAgICAgICAgfSlcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlc0FyZztcbiAgICB9O1xuICAgIGNvbnN0IG11aVN0eWxlZFJlc29sdmVyID0gKHN0eWxlQXJnLCAuLi5leHByZXNzaW9ucykgPT4ge1xuICAgICAgbGV0IHRyYW5zZm9ybWVkU3R5bGVBcmcgPSB0cmFuc2Zvcm1TdHlsZUFyZyhzdHlsZUFyZyk7XG4gICAgICBjb25zdCBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUgPSBleHByZXNzaW9ucyA/IGV4cHJlc3Npb25zLm1hcCh0cmFuc2Zvcm1TdHlsZUFyZykgOiBbXTtcbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmIG92ZXJyaWRlc1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IHJlc29sdmVUaGVtZSgoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgZGVmYXVsdFRoZW1lLFxuICAgICAgICAgICAgdGhlbWVJZFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBpZiAoIXRoZW1lLmNvbXBvbmVudHMgfHwgIXRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0gfHwgIXRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0uc3R5bGVPdmVycmlkZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IHRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0uc3R5bGVPdmVycmlkZXM7XG4gICAgICAgICAgY29uc3QgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyA9IHt9O1xuICAgICAgICAgIC8vIFRPRE86IHY3IHJlbW92ZSBpdGVyYXRpb24gYW5kIHVzZSBgcmVzb2x2ZVN0eWxlQXJnKHN0eWxlT3ZlcnJpZGVzW3Nsb3RdKWAgZGlyZWN0bHlcbiAgICAgICAgICBPYmplY3QuZW50cmllcyhzdHlsZU92ZXJyaWRlcykuZm9yRWFjaCgoW3Nsb3RLZXksIHNsb3RTdHlsZV0pID0+IHtcbiAgICAgICAgICAgIHJlc29sdmVkU3R5bGVPdmVycmlkZXNbc2xvdEtleV0gPSBwcm9jZXNzU3R5bGVBcmcoc2xvdFN0eWxlLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBvdmVycmlkZXNSZXNvbHZlcihwcm9wcywgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgIXNraXBWYXJpYW50c1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICB2YXIgX3RoZW1lJGNvbXBvbmVudHM7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSByZXNvbHZlVGhlbWUoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgIGRlZmF1bHRUaGVtZSxcbiAgICAgICAgICAgIHRoZW1lSWRcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgY29uc3QgdGhlbWVWYXJpYW50cyA9IHRoZW1lID09IG51bGwgfHwgKF90aGVtZSRjb21wb25lbnRzID0gdGhlbWUuY29tcG9uZW50cykgPT0gbnVsbCB8fCAoX3RoZW1lJGNvbXBvbmVudHMgPSBfdGhlbWUkY29tcG9uZW50c1tjb21wb25lbnROYW1lXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRjb21wb25lbnRzLnZhcmlhbnRzO1xuICAgICAgICAgIHJldHVybiBwcm9jZXNzU3R5bGVBcmcoe1xuICAgICAgICAgICAgdmFyaWFudHM6IHRoZW1lVmFyaWFudHNcbiAgICAgICAgICB9LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFza2lwU3gpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2goc3lzdGVtU3gpO1xuICAgICAgfVxuICAgICAgY29uc3QgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID0gZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLmxlbmd0aCAtIGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlQXJnKSAmJiBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPiAwKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IG5ldyBBcnJheShudW1PZkN1c3RvbUZuc0FwcGxpZWQpLmZpbGwoJycpO1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBhcnJheSwgdGhhbiB3ZSBuZWVkIHRvIGFkZCBwbGFjZWhvbGRlcnMgaW4gdGhlIHRlbXBsYXRlIGZvciB0aGUgb3ZlcnJpZGVzLCB2YXJpYW50cyBhbmQgdGhlIHN4IHN0eWxlcy5cbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IFsuLi5zdHlsZUFyZywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZy5yYXcgPSBbLi4uc3R5bGVBcmcucmF3LCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgfVxuICAgICAgY29uc3QgQ29tcG9uZW50ID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyKHRyYW5zZm9ybWVkU3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBsZXQgZGlzcGxheU5hbWU7XG4gICAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgJHtjb21wb25lbnROYW1lfSR7KDAsIF9jYXBpdGFsaXplLmRlZmF1bHQpKGNvbXBvbmVudFNsb3QgfHwgJycpfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZSA9IGBTdHlsZWQoJHsoMCwgX2dldERpc3BsYXlOYW1lLmRlZmF1bHQpKHRhZyl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG4gICAgICBpZiAodGFnLm11aU5hbWUpIHtcbiAgICAgICAgQ29tcG9uZW50Lm11aU5hbWUgPSB0YWcubXVpTmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcbiAgICBpZiAoZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWcpIHtcbiAgICAgIG11aVN0eWxlZFJlc29sdmVyLndpdGhDb25maWcgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIG11aVN0eWxlZFJlc29sdmVyO1xuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuXG4vLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbi8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtWy5cbmV4cG9ydCBjb25zdCB2YWx1ZXMgPSB7XG4gIHhzOiAwLFxuICAvLyBwaG9uZVxuICBzbTogNjAwLFxuICAvLyB0YWJsZXRcbiAgbWQ6IDkwMCxcbiAgLy8gc21hbGwgbGFwdG9wXG4gIGxnOiAxMjAwLFxuICAvLyBkZXNrdG9wXG4gIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlblxufTtcbmNvbnN0IGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGtleSA9PiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZXNba2V5XX1weClgXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gcHJvcFZhbHVlLnJlZHVjZSgoYWNjLCBpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAodGhlbWVCcmVha3BvaW50cy5rZXlzW2luZGV4XSldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVtpbmRleF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcFZhbHVlKS5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgLy8ga2V5IGlzIGJyZWFrcG9pbnRcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGVtZUJyZWFrcG9pbnRzLnZhbHVlcyB8fCB2YWx1ZXMpLmluZGV4T2YoYnJlYWtwb2ludCkgIT09IC0xKSB7XG4gICAgICAgIGNvbnN0IG1lZGlhS2V5ID0gdGhlbWVCcmVha3BvaW50cy51cChicmVha3BvaW50KTtcbiAgICAgICAgYWNjW21lZGlhS2V5XSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbYnJlYWtwb2ludF0sIGJyZWFrcG9pbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY3NzS2V5ID0gYnJlYWtwb2ludDtcbiAgICAgICAgYWNjW2Nzc0tleV0gPSBwcm9wVmFsdWVbY3NzS2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG4gIGNvbnN0IG91dHB1dCA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWUpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuZnVuY3Rpb24gYnJlYWtwb2ludHMoc3R5bGVGdW5jdGlvbikge1xuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgbmV3U3R5bGVGdW5jdGlvbiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICAgIGNvbnN0IGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIGNvbnN0IGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBtZXJnZShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9leHRlbmRzKHt9LCBzdHlsZUZ1bmN0aW9uLnByb3BUeXBlcywge1xuICAgIHhzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNtOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1kOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxnOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHhsOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgLi4uc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wc107XG4gIHJldHVybiBuZXdTdHlsZUZ1bmN0aW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0ID0ge30pIHtcbiAgdmFyIF9icmVha3BvaW50c0lucHV0JGtleTtcbiAgY29uc3QgYnJlYWtwb2ludHNJbk9yZGVyID0gKF9icmVha3BvaW50c0lucHV0JGtleSA9IGJyZWFrcG9pbnRzSW5wdXQua2V5cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9icmVha3BvaW50c0lucHV0JGtleS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludFN0eWxlS2V5ID0gYnJlYWtwb2ludHNJbnB1dC51cChrZXkpO1xuICAgIGFjY1ticmVha3BvaW50U3R5bGVLZXldID0ge307XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gYnJlYWtwb2ludHNJbk9yZGVyIHx8IHt9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRLZXlzLCBzdHlsZSkge1xuICByZXR1cm4gYnJlYWtwb2ludEtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRPdXRwdXQgPSBhY2Nba2V5XTtcbiAgICBjb25zdCBpc0JyZWFrcG9pbnRVbnVzZWQgPSAhYnJlYWtwb2ludE91dHB1dCB8fCBPYmplY3Qua2V5cyhicmVha3BvaW50T3V0cHV0KS5sZW5ndGggPT09IDA7XG4gICAgaWYgKGlzQnJlYWtwb2ludFVudXNlZCkge1xuICAgICAgZGVsZXRlIGFjY1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCBzdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VCcmVha3BvaW50c0luT3JkZXIoYnJlYWtwb2ludHNJbnB1dCwgLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IG1lcmdlZE91dHB1dCA9IFtlbXB0eUJyZWFrcG9pbnRzLCAuLi5zdHlsZXNdLnJlZHVjZSgocHJldiwgbmV4dCkgPT4gZGVlcG1lcmdlKHByZXYsIG5leHQpLCB7fSk7XG4gIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKSwgbWVyZ2VkT3V0cHV0KTtcbn1cblxuLy8gY29tcHV0ZSBiYXNlIGZvciByZXNwb25zaXZlIHZhbHVlczsgZS5nLixcbi8vIFsxLDIsM10gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG4vLyB7eHM6IDEsIHNtOiAyLCBtZDogM30gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKSB7XG4gIC8vIGZpeGVkIHZhbHVlXG4gIGlmICh0eXBlb2YgYnJlYWtwb2ludFZhbHVlcyAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgYmFzZSA9IHt9O1xuICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyh0aGVtZUJyZWFrcG9pbnRzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaCgoYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgICAgaWYgKGkgPCBicmVha3BvaW50VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICAgIGlmIChicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGJhc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICB2YWx1ZXM6IGJyZWFrcG9pbnRWYWx1ZXMsXG4gIGJyZWFrcG9pbnRzOiB0aGVtZUJyZWFrcG9pbnRzLFxuICBiYXNlOiBjdXN0b21CYXNlXG59KSB7XG4gIGNvbnN0IGJhc2UgPSBjdXN0b21CYXNlIHx8IGNvbXB1dGVCcmVha3BvaW50c0Jhc2UoYnJlYWtwb2ludFZhbHVlcywgdGhlbWVCcmVha3BvaW50cyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhiYXNlKTtcbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRWYWx1ZXM7XG4gIH1cbiAgbGV0IHByZXZpb3VzO1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2ldICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2ldIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYnJlYWtwb2ludFZhbHVlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXTtcbiAgICAgIHByZXZpb3VzID0gYnJlYWtwb2ludDtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlcztcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZXhwb3J0IGRlZmF1bHQgYnJlYWtwb2ludHM7IiwiLyoqXG4gKiBBIHVuaXZlcnNhbCB1dGlsaXR5IHRvIHN0eWxlIGNvbXBvbmVudHMgd2l0aCBtdWx0aXBsZSBjb2xvciBtb2Rlcy4gQWx3YXlzIHVzZSBpdCBmcm9tIHRoZSB0aGVtZSBvYmplY3QuXG4gKiBJdCB3b3JrcyB3aXRoOlxuICogIC0gW0Jhc2ljIHRoZW1lXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9kYXJrLW1vZGUvKVxuICogIC0gW0NTUyB0aGVtZSB2YXJpYWJsZXNdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9leHBlcmltZW50YWwtYXBpL2Nzcy10aGVtZS12YXJpYWJsZXMvb3ZlcnZpZXcvKVxuICogIC0gWmVyby1ydW50aW1lIGVuZ2luZVxuICpcbiAqIFRpcHM6IFVzZSBhbiBhcnJheSBvdmVyIG9iamVjdCBzcHJlYWQgYW5kIHBsYWNlIGB0aGVtZS5hcHBseVN0eWxlcygpYCBsYXN0LlxuICpcbiAqIOKchSBbeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScgfSwgdGhlbWUuYXBwbHlTdHlsZXMoJ2RhcmsnLCB7IGJhY2tncm91bmQ6ICcjMWMxYzFjJyB9KV1cbiAqXG4gKiDwn5qrIHsgYmFja2dyb3VuZDogJyNlNWU1ZTUnLCAuLi50aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHsgYmFja2dyb3VuZDogJyMxYzFjMWMnIH0pfVxuICpcbiAqIEBleGFtcGxlXG4gKiAxLiB1c2luZyB3aXRoIGBzdHlsZWRgOlxuICogYGBganN4XG4gKiAgIGNvbnN0IENvbXBvbmVudCA9IHN0eWxlZCgnZGl2JykoKHsgdGhlbWUgfSkgPT4gW1xuICogICAgIHsgYmFja2dyb3VuZDogJyNlNWU1ZTUnIH0sXG4gKiAgICAgdGhlbWUuYXBwbHlTdHlsZXMoJ2RhcmsnLCB7XG4gKiAgICAgICBiYWNrZ3JvdW5kOiAnIzFjMWMxYycsXG4gKiAgICAgICBjb2xvcjogJyNmZmYnLFxuICogICAgIH0pLFxuICogICBdKTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiAyLiB1c2luZyB3aXRoIGBzeGAgcHJvcDpcbiAqIGBgYGpzeFxuICogICA8Qm94IHN4PXt0aGVtZSA9PiBbXG4gKiAgICAgeyBiYWNrZ3JvdW5kOiAnI2U1ZTVlNScgfSxcbiAqICAgICB0aGVtZS5hcHBseVN0eWxlcygnZGFyaycsIHtcbiAqICAgICAgICBiYWNrZ3JvdW5kOiAnIzFjMWMxYycsXG4gKiAgICAgICAgY29sb3I6ICcjZmZmJyxcbiAqICAgICAgfSksXG4gKiAgICAgXX1cbiAqICAgLz5cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiAzLiB0aGVtaW5nIGEgY29tcG9uZW50OlxuICogYGBganN4XG4gKiAgIGV4dGVuZFRoZW1lKHtcbiAqICAgICBjb21wb25lbnRzOiB7XG4gKiAgICAgICBNdWlCdXR0b246IHtcbiAqICAgICAgICAgc3R5bGVPdmVycmlkZXM6IHtcbiAqICAgICAgICAgICByb290OiAoeyB0aGVtZSB9KSA9PiBbXG4gKiAgICAgICAgICAgICB7IGJhY2tncm91bmQ6ICcjZTVlNWU1JyB9LFxuICogICAgICAgICAgICAgdGhlbWUuYXBwbHlTdHlsZXMoJ2RhcmsnLCB7XG4gKiAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjMWMxYzFjJyxcbiAqICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmJyxcbiAqICAgICAgICAgICAgIH0pLFxuICogICAgICAgICAgIF0sXG4gKiAgICAgICAgIH0sXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9KVxuICpgYGBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwbHlTdHlsZXMoa2V5LCBzdHlsZXMpIHtcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciB0aGlzIGlzICdhbnknIHR5cGVcbiAgY29uc3QgdGhlbWUgPSB0aGlzO1xuICBpZiAodGhlbWUudmFycyAmJiB0eXBlb2YgdGhlbWUuZ2V0Q29sb3JTY2hlbWVTZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIElmIENzc1ZhcnNQcm92aWRlciBpcyB1c2VkIGFzIGEgcHJvdmlkZXIsXG4gICAgLy8gcmV0dXJucyAnKiA6d2hlcmUoW2RhdGEtbXVpLWNvbG9yLXNjaGVtZT1cImxpZ2h0fGRhcmtcIl0pICYnXG4gICAgY29uc3Qgc2VsZWN0b3IgPSB0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yKGtleSkucmVwbGFjZSgvKFxcW1teXFxdXStcXF0pLywgJyo6d2hlcmUoJDEpJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtzZWxlY3Rvcl06IHN0eWxlc1xuICAgIH07XG4gIH1cbiAgaWYgKHRoZW1lLnBhbGV0dGUubW9kZSA9PT0ga2V5KSB7XG4gICAgcmV0dXJuIHN0eWxlcztcbiAgfVxuICByZXR1cm4ge307XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IGNvbnN0IGJyZWFrcG9pbnRLZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddO1xuY29uc3Qgc29ydEJyZWFrcG9pbnRzVmFsdWVzID0gdmFsdWVzID0+IHtcbiAgY29uc3QgYnJlYWtwb2ludHNBc0FycmF5ID0gT2JqZWN0LmtleXModmFsdWVzKS5tYXAoa2V5ID0+ICh7XG4gICAga2V5LFxuICAgIHZhbDogdmFsdWVzW2tleV1cbiAgfSkpIHx8IFtdO1xuICAvLyBTb3J0IGluIGFzY2VuZGluZyBvcmRlclxuICBicmVha3BvaW50c0FzQXJyYXkuc29ydCgoYnJlYWtwb2ludDEsIGJyZWFrcG9pbnQyKSA9PiBicmVha3BvaW50MS52YWwgLSBicmVha3BvaW50Mi52YWwpO1xuICByZXR1cm4gYnJlYWtwb2ludHNBc0FycmF5LnJlZHVjZSgoYWNjLCBvYmopID0+IHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFjYywge1xuICAgICAgW29iai5rZXldOiBvYmoudmFsXG4gICAgfSk7XG4gIH0sIHt9KTtcbn07XG5cbi8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgY29uc3Qge1xuICAgICAgLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4gICAgICAvLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbSkuXG4gICAgICB2YWx1ZXMgPSB7XG4gICAgICAgIHhzOiAwLFxuICAgICAgICAvLyBwaG9uZVxuICAgICAgICBzbTogNjAwLFxuICAgICAgICAvLyB0YWJsZXRcbiAgICAgICAgbWQ6IDkwMCxcbiAgICAgICAgLy8gc21hbGwgbGFwdG9wXG4gICAgICAgIGxnOiAxMjAwLFxuICAgICAgICAvLyBkZXNrdG9wXG4gICAgICAgIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlblxuICAgICAgfSxcbiAgICAgIHVuaXQgPSAncHgnLFxuICAgICAgc3RlcCA9IDVcbiAgICB9ID0gYnJlYWtwb2ludHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShicmVha3BvaW50cywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgc29ydGVkVmFsdWVzID0gc29ydEJyZWFrcG9pbnRzVmFsdWVzKHZhbHVlcyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3J0ZWRWYWx1ZXMpO1xuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dmFsdWV9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1heC13aWR0aDoke3ZhbHVlIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0fSR7dW5pdH0pIGFuZCBgICsgYChtYXgtd2lkdGg6JHsoZW5kSW5kZXggIT09IC0xICYmIHR5cGVvZiB2YWx1ZXNba2V5c1tlbmRJbmRleF1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4XV0gOiBlbmQpIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgKyAxIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHVwKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbm90KGtleSkge1xuICAgIC8vIGhhbmRsZSBmaXJzdCBhbmQgbGFzdCBrZXkgc2VwYXJhdGVseSwgZm9yIGJldHRlciByZWFkYWJpbGl0eVxuICAgIGNvbnN0IGtleUluZGV4ID0ga2V5cy5pbmRleE9mKGtleSk7XG4gICAgaWYgKGtleUluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gdXAoa2V5c1sxXSk7XG4gICAgfVxuICAgIGlmIChrZXlJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gZG93bihrZXlzW2tleUluZGV4XSk7XG4gICAgfVxuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKS5yZXBsYWNlKCdAbWVkaWEnLCAnQG1lZGlhIG5vdCBhbGwgYW5kJyk7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzLFxuICAgIHZhbHVlczogc29ydGVkVmFsdWVzLFxuICAgIHVwLFxuICAgIGRvd24sXG4gICAgYmV0d2VlbixcbiAgICBvbmx5LFxuICAgIG5vdCxcbiAgICB1bml0XG4gIH0sIG90aGVyKTtcbn0iLCJjb25zdCBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnLi4vc3BhY2luZyc7XG5cbi8vIFRoZSBkaWZmZXJlbnQgc2lnbmF0dXJlcyBpbXBseSBkaWZmZXJlbnQgbWVhbmluZyBmb3IgdGhlaXIgYXJndW1lbnRzIHRoYXQgY2FuJ3QgYmUgZXhwcmVzc2VkIHN0cnVjdHVyYWxseS5cbi8vIFdlIGV4cHJlc3MgdGhlIGRpZmZlcmVuY2Ugd2l0aCB2YXJpYWJsZSBuYW1lcy5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQgPSA4KSB7XG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfVxuXG4gIC8vIE1hdGVyaWFsIERlc2lnbiBsYXlvdXRzIGFyZSB2aXN1YWxseSBiYWxhbmNlZC4gTW9zdCBtZWFzdXJlbWVudHMgYWxpZ24gdG8gYW4gOGRwIGdyaWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWxcbiAgY29uc3QgdHJhbnNmb3JtID0gY3JlYXRlVW5hcnlTcGFjaW5nKHtcbiAgICBzcGFjaW5nOiBzcGFjaW5nSW5wdXRcbiAgfSk7XG4gIGNvbnN0IHNwYWNpbmcgPSAoLi4uYXJnc0lucHV0KSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKGFyZ3NJbnB1dC5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290ICR7YXJnc0lucHV0Lmxlbmd0aH1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYXJncyA9IGFyZ3NJbnB1dC5sZW5ndGggPT09IDAgPyBbMV0gOiBhcmdzSW5wdXQ7XG4gICAgcmV0dXJuIGFyZ3MubWFwKGFyZ3VtZW50ID0+IHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IHRyYW5zZm9ybShhcmd1bWVudCk7XG4gICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ251bWJlcicgPyBgJHtvdXRwdXR9cHhgIDogb3V0cHV0O1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTtcbiAgc3BhY2luZy5tdWkgPSB0cnVlO1xuICByZXR1cm4gc3BhY2luZztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInNoYXBlXCJdO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdAbXVpL3V0aWxzL2RlZXBtZXJnZSc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCBmcm9tICcuLi9zdHlsZUZ1bmN0aW9uU3gvc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4L2RlZmF1bHRTeENvbmZpZyc7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSAnLi9hcHBseVN0eWxlcyc7XG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzSW5wdXQgPSB7fSxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgICAgc2hhcGU6IHNoYXBlSW5wdXQgPSB7fVxuICAgIH0gPSBvcHRpb25zLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3Qgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHtcbiAgICBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIC8vIEluamVjdCBjb21wb25lbnQgZGVmaW5pdGlvbnMuXG4gICAgcGFsZXR0ZTogX2V4dGVuZHMoe1xuICAgICAgbW9kZTogJ2xpZ2h0J1xuICAgIH0sIHBhbGV0dGVJbnB1dCksXG4gICAgc3BhY2luZyxcbiAgICBzaGFwZTogX2V4dGVuZHMoe30sIHNoYXBlLCBzaGFwZUlucHV0KVxuICB9LCBvdGhlcik7XG4gIG11aVRoZW1lLmFwcGx5U3R5bGVzID0gYXBwbHlTdHlsZXM7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3hDb25maWcsIG90aGVyID09IG51bGwgPyB2b2lkIDAgOiBvdGhlci51bnN0YWJsZV9zeENvbmZpZyk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4ID0gZnVuY3Rpb24gc3gocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnQG11aS91dGlscy9kZWVwbWVyZ2UnO1xuZnVuY3Rpb24gbWVyZ2UoYWNjLCBpdGVtKSB7XG4gIGlmICghaXRlbSkge1xuICAgIHJldHVybiBhY2M7XG4gIH1cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG4gIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gYXJnID0+IHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgZ2V0UGF0aCB9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplJztcbmNvbnN0IHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG5jb25zdCBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59O1xuY29uc3QgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59O1xuXG4vLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuY29uc3QgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUocHJvcCA9PiB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuICBjb25zdCBbYSwgYl0gPSBwcm9wLnNwbGl0KCcnKTtcbiAgY29uc3QgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2FdO1xuICBjb25zdCBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2JdIHx8ICcnO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkaXJlY3Rpb24pID8gZGlyZWN0aW9uLm1hcChkaXIgPT4gcHJvcGVydHkgKyBkaXIpIDogW3Byb3BlcnR5ICsgZGlyZWN0aW9uXTtcbn0pO1xuZXhwb3J0IGNvbnN0IG1hcmdpbktleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAnbWFyZ2luSW5saW5lJywgJ21hcmdpbklubGluZVN0YXJ0JywgJ21hcmdpbklubGluZUVuZCcsICdtYXJnaW5CbG9jaycsICdtYXJnaW5CbG9ja1N0YXJ0JywgJ21hcmdpbkJsb2NrRW5kJ107XG5leHBvcnQgY29uc3QgcGFkZGluZ0tleXMgPSBbJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJywgJ3BhZGRpbmdJbmxpbmUnLCAncGFkZGluZ0lubGluZVN0YXJ0JywgJ3BhZGRpbmdJbmxpbmVFbmQnLCAncGFkZGluZ0Jsb2NrJywgJ3BhZGRpbmdCbG9ja1N0YXJ0JywgJ3BhZGRpbmdCbG9ja0VuZCddO1xuY29uc3Qgc3BhY2luZ0tleXMgPSBbLi4ubWFyZ2luS2V5cywgLi4ucGFkZGluZ0tleXNdO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgdGhlbWVLZXksIGRlZmF1bHRWYWx1ZSwgcHJvcE5hbWUpIHtcbiAgdmFyIF9nZXRQYXRoO1xuICBjb25zdCB0aGVtZVNwYWNpbmcgPSAoX2dldFBhdGggPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSwgZmFsc2UpKSAhPSBudWxsID8gX2dldFBhdGggOiBkZWZhdWx0VmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEV4cGVjdGVkICR7cHJvcE5hbWV9IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLCBnb3QgJHthYnN9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYWJzKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcnJheSB0eXBlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG5vbiBpbnRlZ2VyIHZhbHVlcy5gICsgYFlvdSBzaG91bGQgZWl0aGVyIHVzZSBhbiBpbnRlZ2VyIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgaW5kZXgsIG9yIGRlZmluZSB0aGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXMgYSBudW1iZXIuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2UgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICgke2Fic30pIG92ZXJmbG93cy5gLCBgVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyl9LmAsIGAke2Fic30gPiAke3RoZW1lU3BhY2luZy5sZW5ndGggLSAxfSwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCB2YWx1ZSAoJHt0aGVtZVNwYWNpbmd9KSBpcyBpbnZhbGlkLmAsICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG4gIHJldHVybiAoKSA9PiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKSB7XG4gIHJldHVybiBjcmVhdGVVbmFyeVVuaXQodGhlbWUsICdzcGFjaW5nJywgOCwgJ3NwYWNpbmcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJyB8fCBwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBwcm9wVmFsdWU7XG4gIH1cbiAgY29uc3QgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICB9XG4gIHJldHVybiBgLSR7dHJhbnNmb3JtZWR9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIHByb3BWYWx1ZSA9PiBjc3NQcm9wZXJ0aWVzLnJlZHVjZSgoYWNjLCBjc3NQcm9wZXJ0eSkgPT4ge1xuICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSB7XG4gIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gIGlmIChrZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgY3NzUHJvcGVydGllcyA9IGdldENzc1Byb3BlcnRpZXMocHJvcCk7XG4gIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcik7XG4gIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbn1cbmZ1bmN0aW9uIHN0eWxlKHByb3BzLCBrZXlzKSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHByb3BzLnRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcCA9PiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFyZ2luKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgbWFyZ2luS2V5cyk7XG59XG5tYXJnaW4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IG1hcmdpbktleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xubWFyZ2luLmZpbHRlclByb3BzID0gbWFyZ2luS2V5cztcbmV4cG9ydCBmdW5jdGlvbiBwYWRkaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgcGFkZGluZ0tleXMpO1xufVxucGFkZGluZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcGFkZGluZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xucGFkZGluZy5maWx0ZXJQcm9wcyA9IHBhZGRpbmdLZXlzO1xuZnVuY3Rpb24gc3BhY2luZyhwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIHNwYWNpbmdLZXlzKTtcbn1cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnQG11aS91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoKG9iaiwgcGF0aCwgY2hlY2tWYXJzID0gdHJ1ZSkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBDaGVjayBpZiBDU1MgdmFyaWFibGVzIGFyZSB1c2VkXG4gIGlmIChvYmogJiYgb2JqLnZhcnMgJiYgY2hlY2tWYXJzKSB7XG4gICAgY29uc3QgdmFsID0gYHZhcnMuJHtwYXRofWAuc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gYWNjICYmIGFjY1tpdGVtXSA/IGFjY1tpdGVtXSA6IG51bGwsIG9iaik7XG4gICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XG4gICAgaWYgKGFjYyAmJiBhY2NbaXRlbV0gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjY1tpdGVtXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sIG9iaik7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwsIHVzZXJWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsKSB7XG4gIGxldCB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB0aGVtZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZyhwcm9wVmFsdWVGaW5hbCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmdbcHJvcFZhbHVlRmluYWxdIHx8IHVzZXJWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGdldFBhdGgodGhlbWVNYXBwaW5nLCBwcm9wVmFsdWVGaW5hbCkgfHwgdXNlclZhbHVlO1xuICB9XG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICB2YWx1ZSA9IHRyYW5zZm9ybSh2YWx1ZSwgdXNlclZhbHVlLCB0aGVtZU1hcHBpbmcpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHN0eWxlKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHByb3AsXG4gICAgY3NzUHJvcGVydHkgPSBvcHRpb25zLnByb3AsXG4gICAgdGhlbWVLZXksXG4gICAgdHJhbnNmb3JtXG4gIH0gPSBvcHRpb25zO1xuXG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgY29uc3QgdGhlbWVNYXBwaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IHt9O1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIGlmIChwcm9wVmFsdWVGaW5hbCA9PT0gdmFsdWUgJiYgdHlwZW9mIHByb3BWYWx1ZUZpbmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBIYXZlbid0IGZvdW5kIHZhbHVlXG4gICAgICAgIHZhbHVlID0gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfTtcbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgICBbcHJvcF06IHJlc3BvbnNpdmVQcm9wVHlwZVxuICB9IDoge307XG4gIGZuLmZpbHRlclByb3BzID0gW3Byb3BdO1xuICByZXR1cm4gZm47XG59XG5leHBvcnQgZGVmYXVsdCBzdHlsZTsiLCJpbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5mdW5jdGlvbiBjb21wb3NlKC4uLnN0eWxlcykge1xuICBjb25zdCBoYW5kbGVycyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IHtcbiAgICBzdHlsZS5maWx0ZXJQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgYWNjW3Byb3BdID0gc3R5bGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gICAgICBpZiAoaGFuZGxlcnNbcHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGFjYywgaGFuZGxlcnNbcHJvcF0ocHJvcHMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHN0eWxlLnByb3BUeXBlcyksIHt9KSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IGFjYy5jb25jYXQoc3R5bGUuZmlsdGVyUHJvcHMpLCBbXSk7XG4gIHJldHVybiBmbjtcbn1cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2U7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGJvcmRlclRyYW5zZm9ybSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gYCR7dmFsdWV9cHggc29saWRgO1xufVxuZnVuY3Rpb24gY3JlYXRlQm9yZGVyU3R5bGUocHJvcCwgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBzdHlsZSh7XG4gICAgcHJvcCxcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybVxuICB9KTtcbn1cbmV4cG9ydCBjb25zdCBib3JkZXIgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3AgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyVG9wJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodCA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJSaWdodCcsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlckJvdHRvbScsIGJvcmRlclRyYW5zZm9ybSk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdCA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJMZWZ0JywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJDb2xvcicpO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcENvbG9yID0gY3JlYXRlQm9yZGVyU3R5bGUoJ2JvcmRlclRvcENvbG9yJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHRDb2xvciA9IGNyZWF0ZUJvcmRlclN0eWxlKCdib3JkZXJSaWdodENvbG9yJyk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tQ29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyQm90dG9tQ29sb3InKTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0Q29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnYm9yZGVyTGVmdENvbG9yJyk7XG5leHBvcnQgY29uc3Qgb3V0bGluZSA9IGNyZWF0ZUJvcmRlclN0eWxlKCdvdXRsaW5lJywgYm9yZGVyVHJhbnNmb3JtKTtcbmV4cG9ydCBjb25zdCBvdXRsaW5lQ29sb3IgPSBjcmVhdGVCb3JkZXJTdHlsZSgnb3V0bGluZUNvbG9yJyk7XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5ib3JkZXJSYWRpdXMgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5ib3JkZXJSYWRpdXMgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NoYXBlLmJvcmRlclJhZGl1cycsIDQsICdib3JkZXJSYWRpdXMnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGJvcmRlclJhZGl1czogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmJvcmRlclJhZGl1cywgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5ib3JkZXJSYWRpdXMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgYm9yZGVyUmFkaXVzOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmJvcmRlclJhZGl1cy5maWx0ZXJQcm9wcyA9IFsnYm9yZGVyUmFkaXVzJ107XG5jb25zdCBib3JkZXJzID0gY29tcG9zZShib3JkZXIsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCwgYm9yZGVyQ29sb3IsIGJvcmRlclRvcENvbG9yLCBib3JkZXJSaWdodENvbG9yLCBib3JkZXJCb3R0b21Db2xvciwgYm9yZGVyTGVmdENvbG9yLCBib3JkZXJSYWRpdXMsIG91dGxpbmUsIG91dGxpbmVDb2xvcik7XG5leHBvcnQgZGVmYXVsdCBib3JkZXJzOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVVuaXQsIGdldFZhbHVlIH0gZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdnYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5nYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgZ2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmdhcC5maWx0ZXJQcm9wcyA9IFsnZ2FwJ107XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBjb2x1bW5HYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5jb2x1bW5HYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5jb2x1bW5HYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnY29sdW1uR2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBjb2x1bW5HYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5jb2x1bW5HYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuY29sdW1uR2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGNvbHVtbkdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5jb2x1bW5HYXAuZmlsdGVyUHJvcHMgPSBbJ2NvbHVtbkdhcCddO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3Qgcm93R2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMucm93R2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMucm93R2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ3Jvd0dhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgcm93R2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMucm93R2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbnJvd0dhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICByb3dHYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xucm93R2FwLmZpbHRlclByb3BzID0gWydyb3dHYXAnXTtcbmV4cG9ydCBjb25zdCBncmlkQ29sdW1uID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZENvbHVtbidcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRSb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkUm93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9GbG93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9GbG93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Db2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Db2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Sb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Sb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUNvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVSb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUFyZWFzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQXJlYXMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXJlYSA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBcmVhJ1xufSk7XG5jb25zdCBncmlkID0gY29tcG9zZShnYXAsIGNvbHVtbkdhcCwgcm93R2FwLCBncmlkQ29sdW1uLCBncmlkUm93LCBncmlkQXV0b0Zsb3csIGdyaWRBdXRvQ29sdW1ucywgZ3JpZEF1dG9Sb3dzLCBncmlkVGVtcGxhdGVDb2x1bW5zLCBncmlkVGVtcGxhdGVSb3dzLCBncmlkVGVtcGxhdGVBcmVhcywgZ3JpZEFyZWEpO1xuZXhwb3J0IGRlZmF1bHQgZ3JpZDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHBhbGV0dGVUcmFuc2Zvcm0odmFsdWUsIHVzZXJWYWx1ZSkge1xuICBpZiAodXNlclZhbHVlID09PSAnZ3JleScpIHtcbiAgICByZXR1cm4gdXNlclZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCBjb25zdCBjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2NvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBiZ2NvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmdjb2xvcicsXG4gIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuY29uc3QgcGFsZXR0ZSA9IGNvbXBvc2UoY29sb3IsIGJnY29sb3IsIGJhY2tncm91bmRDb2xvcik7XG5leHBvcnQgZGVmYXVsdCBwYWxldHRlOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgdmFsdWVzIGFzIGJyZWFrcG9pbnRzVmFsdWVzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gc2l6aW5nVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8PSAxICYmIHZhbHVlICE9PSAwID8gYCR7dmFsdWUgKiAxMDB9JWAgOiB2YWx1ZTtcbn1cbmV4cG9ydCBjb25zdCB3aWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heFdpZHRoID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMubWF4V2lkdGggIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5tYXhXaWR0aCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiB7XG4gICAgICB2YXIgX3Byb3BzJHRoZW1lLCBfcHJvcHMkdGhlbWUyO1xuICAgICAgY29uc3QgYnJlYWtwb2ludCA9ICgoX3Byb3BzJHRoZW1lID0gcHJvcHMudGhlbWUpID09IG51bGwgfHwgKF9wcm9wcyR0aGVtZSA9IF9wcm9wcyR0aGVtZS5icmVha3BvaW50cykgPT0gbnVsbCB8fCAoX3Byb3BzJHRoZW1lID0gX3Byb3BzJHRoZW1lLnZhbHVlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZVtwcm9wVmFsdWVdKSB8fCBicmVha3BvaW50c1ZhbHVlc1twcm9wVmFsdWVdO1xuICAgICAgaWYgKCFicmVha3BvaW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF4V2lkdGg6IHNpemluZ1RyYW5zZm9ybShwcm9wVmFsdWUpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoKChfcHJvcHMkdGhlbWUyID0gcHJvcHMudGhlbWUpID09IG51bGwgfHwgKF9wcm9wcyR0aGVtZTIgPSBfcHJvcHMkdGhlbWUyLmJyZWFrcG9pbnRzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lMi51bml0KSAhPT0gJ3B4Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1heFdpZHRoOiBgJHticmVha3BvaW50fSR7cHJvcHMudGhlbWUuYnJlYWtwb2ludHMudW5pdH1gXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXhXaWR0aDogYnJlYWtwb2ludFxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMubWF4V2lkdGgsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xubWF4V2lkdGguZmlsdGVyUHJvcHMgPSBbJ21heFdpZHRoJ107XG5leHBvcnQgY29uc3QgbWluV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBoZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4SGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWF4SGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1pbkhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJveFNpemluZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNpemluZydcbn0pO1xuY29uc3Qgc2l6aW5nID0gY29tcG9zZSh3aWR0aCwgbWF4V2lkdGgsIG1pbldpZHRoLCBoZWlnaHQsIG1heEhlaWdodCwgbWluSGVpZ2h0LCBib3hTaXppbmcpO1xuZXhwb3J0IGRlZmF1bHQgc2l6aW5nOyIsImltcG9ydCB7IHBhZGRpbmcsIG1hcmdpbiB9IGZyb20gJy4uL3NwYWNpbmcnO1xuaW1wb3J0IHsgYm9yZGVyUmFkaXVzLCBib3JkZXJUcmFuc2Zvcm0gfSBmcm9tICcuLi9ib3JkZXJzJztcbmltcG9ydCB7IGdhcCwgcm93R2FwLCBjb2x1bW5HYXAgfSBmcm9tICcuLi9jc3NHcmlkJztcbmltcG9ydCB7IHBhbGV0dGVUcmFuc2Zvcm0gfSBmcm9tICcuLi9wYWxldHRlJztcbmltcG9ydCB7IG1heFdpZHRoLCBzaXppbmdUcmFuc2Zvcm0gfSBmcm9tICcuLi9zaXppbmcnO1xuY29uc3QgZGVmYXVsdFN4Q29uZmlnID0ge1xuICAvLyBib3JkZXJzXG4gIGJvcmRlcjoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJSaWdodDoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyVG9wQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlclJpZ2h0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlckJvdHRvbUNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJMZWZ0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIG91dGxpbmU6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIG91dGxpbmVDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyUmFkaXVzOiB7XG4gICAgdGhlbWVLZXk6ICdzaGFwZS5ib3JkZXJSYWRpdXMnLFxuICAgIHN0eWxlOiBib3JkZXJSYWRpdXNcbiAgfSxcbiAgLy8gcGFsZXR0ZVxuICBjb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG4gIH0sXG4gIGJnY29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgYmFja2dyb3VuZENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgLy8gc3BhY2luZ1xuICBwOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwcjoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBiOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGw6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBweDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB5OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZzoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdUb3A6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nUmlnaHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQm90dG9tOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0xlZnQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nWDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdZOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZToge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2s6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2tTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9ja0VuZDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIG06IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG10OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtcjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWI6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1sOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBteDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXk6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luVG9wOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5SaWdodDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQm90dG9tOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5MZWZ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5YOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5ZOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmU6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZVN0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja1N0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja0VuZDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgLy8gZGlzcGxheVxuICBkaXNwbGF5UHJpbnQ6IHtcbiAgICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gICAgdHJhbnNmb3JtOiB2YWx1ZSA9PiAoe1xuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgZGlzcGxheTogdmFsdWVcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICBkaXNwbGF5OiB7fSxcbiAgb3ZlcmZsb3c6IHt9LFxuICB0ZXh0T3ZlcmZsb3c6IHt9LFxuICB2aXNpYmlsaXR5OiB7fSxcbiAgd2hpdGVTcGFjZToge30sXG4gIC8vIGZsZXhib3hcbiAgZmxleEJhc2lzOiB7fSxcbiAgZmxleERpcmVjdGlvbjoge30sXG4gIGZsZXhXcmFwOiB7fSxcbiAganVzdGlmeUNvbnRlbnQ6IHt9LFxuICBhbGlnbkl0ZW1zOiB7fSxcbiAgYWxpZ25Db250ZW50OiB7fSxcbiAgb3JkZXI6IHt9LFxuICBmbGV4OiB7fSxcbiAgZmxleEdyb3c6IHt9LFxuICBmbGV4U2hyaW5rOiB7fSxcbiAgYWxpZ25TZWxmOiB7fSxcbiAganVzdGlmeUl0ZW1zOiB7fSxcbiAganVzdGlmeVNlbGY6IHt9LFxuICAvLyBncmlkXG4gIGdhcDoge1xuICAgIHN0eWxlOiBnYXBcbiAgfSxcbiAgcm93R2FwOiB7XG4gICAgc3R5bGU6IHJvd0dhcFxuICB9LFxuICBjb2x1bW5HYXA6IHtcbiAgICBzdHlsZTogY29sdW1uR2FwXG4gIH0sXG4gIGdyaWRDb2x1bW46IHt9LFxuICBncmlkUm93OiB7fSxcbiAgZ3JpZEF1dG9GbG93OiB7fSxcbiAgZ3JpZEF1dG9Db2x1bW5zOiB7fSxcbiAgZ3JpZEF1dG9Sb3dzOiB7fSxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczoge30sXG4gIGdyaWRUZW1wbGF0ZVJvd3M6IHt9LFxuICBncmlkVGVtcGxhdGVBcmVhczoge30sXG4gIGdyaWRBcmVhOiB7fSxcbiAgLy8gcG9zaXRpb25zXG4gIHBvc2l0aW9uOiB7fSxcbiAgekluZGV4OiB7XG4gICAgdGhlbWVLZXk6ICd6SW5kZXgnXG4gIH0sXG4gIHRvcDoge30sXG4gIHJpZ2h0OiB7fSxcbiAgYm90dG9tOiB7fSxcbiAgbGVmdDoge30sXG4gIC8vIHNoYWRvd3NcbiAgYm94U2hhZG93OiB7XG4gICAgdGhlbWVLZXk6ICdzaGFkb3dzJ1xuICB9LFxuICAvLyBzaXppbmdcbiAgd2lkdGg6IHtcbiAgICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxuICB9LFxuICBtYXhXaWR0aDoge1xuICAgIHN0eWxlOiBtYXhXaWR0aFxuICB9LFxuICBtaW5XaWR0aDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1heEhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1pbkhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGJveFNpemluZzoge30sXG4gIC8vIHR5cG9ncmFwaHlcbiAgZm9udEZhbWlseToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFNpemU6IHtcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH0sXG4gIGZvbnRTdHlsZToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFdlaWdodDoge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgbGV0dGVyU3BhY2luZzoge30sXG4gIHRleHRUcmFuc2Zvcm06IHt9LFxuICBsaW5lSGVpZ2h0OiB7fSxcbiAgdGV4dEFsaWduOiB7fSxcbiAgdHlwb2dyYXBoeToge1xuICAgIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0U3hDb25maWc7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInN4XCJdO1xuaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gJ0BtdWkvdXRpbHMvZGVlcG1lcmdlJztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi9kZWZhdWx0U3hDb25maWcnO1xuY29uc3Qgc3BsaXRQcm9wcyA9IHByb3BzID0+IHtcbiAgdmFyIF9wcm9wcyR0aGVtZSR1bnN0YWJsZSwgX3Byb3BzJHRoZW1lO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgc3lzdGVtUHJvcHM6IHt9LFxuICAgIG90aGVyUHJvcHM6IHt9XG4gIH07XG4gIGNvbnN0IGNvbmZpZyA9IChfcHJvcHMkdGhlbWUkdW5zdGFibGUgPSBwcm9wcyA9PSBudWxsIHx8IChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF9wcm9wcyR0aGVtZSR1bnN0YWJsZSA6IGRlZmF1bHRTeENvbmZpZztcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKGNvbmZpZ1twcm9wXSkge1xuICAgICAgcmVzdWx0LnN5c3RlbVByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5vdGhlclByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRTeFByb3AocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgc3g6IGluU3hcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIHN5c3RlbVByb3BzLFxuICAgIG90aGVyUHJvcHNcbiAgfSA9IHNwbGl0UHJvcHMob3RoZXIpO1xuICBsZXQgZmluYWxTeDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5TeCkpIHtcbiAgICBmaW5hbFN4ID0gW3N5c3RlbVByb3BzLCAuLi5pblN4XTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgaW5TeCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZpbmFsU3ggPSAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaW5TeCguLi5hcmdzKTtcbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzeXN0ZW1Qcm9wcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIHJlc3VsdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbFN4ID0gX2V4dGVuZHMoe30sIHN5c3RlbVByb3BzLCBpblN4KTtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBzeDogZmluYWxTeFxuICB9KTtcbn0iLCJpbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICdAbXVpL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4uL21lcmdlJztcbmltcG9ydCB7IGdldFBhdGgsIGdldFN0eWxlVmFsdWUgYXMgZ2V0VmFsdWUgfSBmcm9tICcuLi9zdHlsZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0LCByZW1vdmVVbnVzZWRCcmVha3BvaW50cyB9IGZyb20gJy4uL2JyZWFrcG9pbnRzJztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi9kZWZhdWx0U3hDb25maWcnO1xuZnVuY3Rpb24gb2JqZWN0c0hhdmVTYW1lS2V5cyguLi5vYmplY3RzKSB7XG4gIGNvbnN0IGFsbEtleXMgPSBvYmplY3RzLnJlZHVjZSgoa2V5cywgb2JqZWN0KSA9PiBrZXlzLmNvbmNhdChPYmplY3Qua2V5cyhvYmplY3QpKSwgW10pO1xuICBjb25zdCB1bmlvbiA9IG5ldyBTZXQoYWxsS2V5cyk7XG4gIHJldHVybiBvYmplY3RzLmV2ZXJ5KG9iamVjdCA9PiB1bmlvbi5zaXplID09PSBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCk7XG59XG5mdW5jdGlvbiBjYWxsSWZGbihtYXliZUZuLCBhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXliZUZuID09PSAnZnVuY3Rpb24nID8gbWF5YmVGbihhcmcpIDogbWF5YmVGbjtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCgpIHtcbiAgZnVuY3Rpb24gZ2V0VGhlbWVWYWx1ZShwcm9wLCB2YWwsIHRoZW1lLCBjb25maWcpIHtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIFtwcm9wXTogdmFsLFxuICAgICAgdGhlbWVcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWdbcHJvcF07XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbcHJvcF06IHZhbFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgY3NzUHJvcGVydHkgPSBwcm9wLFxuICAgICAgdGhlbWVLZXksXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBzdHlsZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8gVE9ETyB2NjogcmVtb3ZlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9wdWxsLzM4MTIzXG4gICAgaWYgKHRoZW1lS2V5ID09PSAndHlwb2dyYXBoeScgJiYgdmFsID09PSAnaW5oZXJpdCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtwcm9wXTogdmFsXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICByZXR1cm4gc3R5bGUocHJvcHMpO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHZhbCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uU3gocHJvcHMpIHtcbiAgICB2YXIgX3RoZW1lJHVuc3RhYmxlX3N4Q29uO1xuICAgIGNvbnN0IHtcbiAgICAgIHN4LFxuICAgICAgdGhlbWUgPSB7fVxuICAgIH0gPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoIXN4KSB7XG4gICAgICByZXR1cm4gbnVsbDsgLy8gRW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzIHdpbGwgbmVnbGVjdCBudWxsXG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IChfdGhlbWUkdW5zdGFibGVfc3hDb24gPSB0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF90aGVtZSR1bnN0YWJsZV9zeENvbiA6IGRlZmF1bHRTeENvbmZpZztcblxuICAgIC8qXG4gICAgICogUmVjZWl2ZSBgc3hJbnB1dGAgYXMgb2JqZWN0IG9yIGNhbGxiYWNrXG4gICAgICogYW5kIHRoZW4gcmVjdXJzaXZlbHkgY2hlY2sga2V5cyAmIHZhbHVlcyB0byBjcmVhdGUgbWVkaWEgcXVlcnkgb2JqZWN0IHN0eWxlcy5cbiAgICAgKiAodGhlIHJlc3VsdCB3aWxsIGJlIHVzZWQgaW4gYHN0eWxlZGApXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhdmVyc2Uoc3hJbnB1dCkge1xuICAgICAgbGV0IHN4T2JqZWN0ID0gc3hJbnB1dDtcbiAgICAgIGlmICh0eXBlb2Ygc3hJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzeE9iamVjdCA9IHN4SW5wdXQodGhlbWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3hJbnB1dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gdmFsdWVcbiAgICAgICAgcmV0dXJuIHN4SW5wdXQ7XG4gICAgICB9XG4gICAgICBpZiAoIXN4T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCh0aGVtZS5icmVha3BvaW50cyk7XG4gICAgICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKTtcbiAgICAgIGxldCBjc3MgPSBlbXB0eUJyZWFrcG9pbnRzO1xuICAgICAgT2JqZWN0LmtleXMoc3hPYmplY3QpLmZvckVhY2goc3R5bGVLZXkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGNhbGxJZkZuKHN4T2JqZWN0W3N0eWxlS2V5XSwgdGhlbWUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnW3N0eWxlS2V5XSkge1xuICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSwgY29uZmlnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBicmVha3BvaW50c1ZhbHVlcyA9IGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9LCB2YWx1ZSwgeCA9PiAoe1xuICAgICAgICAgICAgICAgIFtzdHlsZUtleV06IHhcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBpZiAob2JqZWN0c0hhdmVTYW1lS2V5cyhicmVha3BvaW50c1ZhbHVlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY3NzW3N0eWxlS2V5XSA9IHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICAgICAgICAgICAgICBzeDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgYnJlYWtwb2ludHNWYWx1ZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lLCBjb25maWcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzS2V5cywgY3NzKTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3gpID8gc3gubWFwKHRyYXZlcnNlKSA6IHRyYXZlcnNlKHN4KTtcbiAgfVxuICByZXR1cm4gc3R5bGVGdW5jdGlvblN4O1xufVxuY29uc3Qgc3R5bGVGdW5jdGlvblN4ID0gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KCk7XG5zdHlsZUZ1bmN0aW9uU3guZmlsdGVyUHJvcHMgPSBbJ3N4J107XG5leHBvcnQgZGVmYXVsdCBzdHlsZUZ1bmN0aW9uU3g7IiwiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUaGVtZUNvbnRleHQgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gbnVsbCkge1xuICBjb25zdCBjb250ZXh0VGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gIHJldHVybiAhY29udGV4dFRoZW1lIHx8IGlzT2JqZWN0RW1wdHkoY29udGV4dFRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IGNvbnRleHRUaGVtZTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSAnLi91c2VUaGVtZVdpdGhvdXREZWZhdWx0JztcbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lKSB7XG4gIHJldHVybiB1c2VUaGVtZVdpdGhvdXREZWZhdWx0KGRlZmF1bHRUaGVtZSk7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VUaGVtZTsiLCJjb25zdCBkZWZhdWx0R2VuZXJhdG9yID0gY29tcG9uZW50TmFtZSA9PiBjb21wb25lbnROYW1lO1xuY29uc3QgY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yID0gKCkgPT4ge1xuICBsZXQgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyZShnZW5lcmF0b3IpIHtcbiAgICAgIGdlbmVyYXRlID0gZ2VuZXJhdG9yO1xuICAgIH0sXG4gICAgZ2VuZXJhdGUoY29tcG9uZW50TmFtZSkge1xuICAgICAgcmV0dXJuIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpO1xuICAgIH0sXG4gICAgcmVzZXQoKSB7XG4gICAgICBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gICAgfVxuICB9O1xufTtcbmNvbnN0IENsYXNzTmFtZUdlbmVyYXRvciA9IGNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvcigpO1xuZXhwb3J0IGRlZmF1bHQgQ2xhc3NOYW1lR2VuZXJhdG9yOyIsImltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCJAbXVpL3V0aWxzL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBpbiB0aGUgc2VudGVuY2UuXG4vLyBXZSBvbmx5IGhhbmRsZSB0aGUgZmlyc3Qgd29yZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGBjYXBpdGFsaXplKHN0cmluZylcXGAgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg3KSk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn0iLCJmdW5jdGlvbiBjbGFtcCh2YWwsIG1pbiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLCBtYXggPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbih2YWwsIG1heCkpO1xufVxuZXhwb3J0IGRlZmF1bHQgY2xhbXA7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFV0aWxpdHlDbGFzcywgY2xhc3NlcyA9IHVuZGVmaW5lZCkge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoc2xvdHMpLmZvckVhY2goXG4gIC8vIGBPYmplY3Qua2V5cyhzbG90cylgIGNhbid0IGJlIHdpZGVyIHRoYW4gYFRgIGJlY2F1c2Ugd2UgaW5mZXIgYFRgIGZyb20gYHNsb3RzYC5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC8xMjI1MyNpc3N1ZWNvbW1lbnQtMjYzMTMyMjA4XG4gIHNsb3QgPT4ge1xuICAgIG91dHB1dFtzbG90XSA9IHNsb3RzW3Nsb3RdLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdXRpbGl0eUNsYXNzID0gZ2V0VXRpbGl0eUNsYXNzKGtleSk7XG4gICAgICAgIGlmICh1dGlsaXR5Q2xhc3MgIT09ICcnKSB7XG4gICAgICAgICAgYWNjLnB1c2godXRpbGl0eUNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xhc3NlcyAmJiBjbGFzc2VzW2tleV0pIHtcbiAgICAgICAgICBhY2MucHVzaChjbGFzc2VzW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKS5qb2luKCcgJyk7XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uLlxuICpcbiAqIFdpbGwgb25seSBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgbmVlZGVkLFxuICogb3RoZXJ3aXNlIHdpbGwgcGFzcyBiYWNrIGV4aXN0aW5nIGZ1bmN0aW9ucyBvciBudWxsLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oLi4uZnVuY3MpIHtcbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZSgoYWNjLCBmdW5jKSA9PiB7XG4gICAgaWYgKGZ1bmMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sICgpID0+IHt9KTtcbn0iLCIvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4vLyBBIGZldyBieXRlcyBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzIH4zIGtCIGFuZCBkZWJvdW5jZSB+MzAwIEIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0ID0gMTY2KSB7XG4gIGxldCB0aW1lb3V0O1xuICBmdW5jdGlvbiBkZWJvdW5jZWQoLi4uYXJncykge1xuICAgIGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gIH1cbiAgZGVib3VuY2VkLmNsZWFyID0gKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgfTtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvaXMtcGxhaW4tb2JqL2Jsb2IvbWFpbi9pbmRleC5qc1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICBpZiAodHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnIHx8IGl0ZW0gPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGl0ZW0pO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIGl0ZW0pICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIGl0ZW0pO1xufVxuZnVuY3Rpb24gZGVlcENsb25lKHNvdXJjZSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgIG91dHB1dFtrZXldID0gZGVlcENsb25lKHNvdXJjZVtrZXldKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMgPSB7XG4gIGNsb25lOiB0cnVlXG59KSB7XG4gIGNvbnN0IG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJiBrZXkgaW4gdGFyZ2V0ICYmIGlzUGxhaW5PYmplY3QodGFyZ2V0W2tleV0pKSB7XG4gICAgICAgIC8vIFNpbmNlIGBvdXRwdXRgIGlzIGEgY2xvbmUgb2YgYHRhcmdldGAgYW5kIHdlIGhhdmUgbmFycm93ZWQgYHRhcmdldGAgaW4gdGhpcyBibG9jayB3ZSBjYW4gY2FzdCB0byB0aGUgc2FtZSB0eXBlLlxuICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmNsb25lKSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgPyBkZWVwQ2xvbmUoc291cmNlW2tleV0pIDogc291cmNlW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiLyoqXG4gKiBXQVJOSU5HOiBEb24ndCBpbXBvcnQgdGhpcyBkaXJlY3RseS5cbiAqIFVzZSBgTXVpRXJyb3JgIGZyb20gYEBtdWkvaW50ZXJuYWwtYmFiZWwtbWFjcm9zL011aUVycm9yLm1hY3JvYCBpbnN0ZWFkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TXVpRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgLy8gQXBwbHkgYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyBpbiBsb29zZSBtb2RlXG4gIC8vIGxvb3NlIG1vZGUgaXMgc2FmZSBpZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcbiAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXRlbXBsYXRlICovXG4gIGxldCB1cmwgPSAnaHR0cHM6Ly9tdWkuY29tL3Byb2R1Y3Rpb24tZXJyb3IvP2NvZGU9JyArIGNvZGU7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gcmVzdCBwYXJhbXMgb3Zlci10cmFuc3BpbGUgZm9yIHRoaXMgY2FzZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB1cmwgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAnTWluaWZpZWQgTVVJIGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyB1cmwgKyAnIGZvciB0aGUgZnVsbCBtZXNzYWdlLic7XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXRlbXBsYXRlICovXG59IiwiaW1wb3J0IENsYXNzTmFtZUdlbmVyYXRvciBmcm9tICcuLi9DbGFzc05hbWVHZW5lcmF0b3InO1xuZXhwb3J0IGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3NlcyA9IHtcbiAgYWN0aXZlOiAnYWN0aXZlJyxcbiAgY2hlY2tlZDogJ2NoZWNrZWQnLFxuICBjb21wbGV0ZWQ6ICdjb21wbGV0ZWQnLFxuICBkaXNhYmxlZDogJ2Rpc2FibGVkJyxcbiAgZXJyb3I6ICdlcnJvcicsXG4gIGV4cGFuZGVkOiAnZXhwYW5kZWQnLFxuICBmb2N1c2VkOiAnZm9jdXNlZCcsXG4gIGZvY3VzVmlzaWJsZTogJ2ZvY3VzVmlzaWJsZScsXG4gIG9wZW46ICdvcGVuJyxcbiAgcmVhZE9ubHk6ICdyZWFkT25seScsXG4gIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICBzZWxlY3RlZDogJ3NlbGVjdGVkJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgZ2xvYmFsU3RhdGVDbGFzcyA9IGdsb2JhbFN0YXRlQ2xhc3Nlc1tzbG90XTtcbiAgcmV0dXJuIGdsb2JhbFN0YXRlQ2xhc3MgPyBgJHtnbG9iYWxTdGF0ZVByZWZpeH0tJHtnbG9iYWxTdGF0ZUNsYXNzfWAgOiBgJHtDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGUoY29tcG9uZW50TmFtZSl9LSR7c2xvdH1gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzR2xvYmFsU3RhdGUoc2xvdCkge1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzc2VzW3Nsb3RdICE9PSB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoY29tcG9uZW50TmFtZSwgc2xvdHMsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHNsb3RzLmZvckVhY2goc2xvdCA9PiB7XG4gICAgcmVzdWx0W3Nsb3RdID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCwgZ2xvYmFsU3RhdGVQcmVmaXgpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgeyBGb3J3YXJkUmVmLCBNZW1vIH0gZnJvbSAncmVhY3QtaXMnO1xuXG4vLyBTaW1wbGlmaWVkIHBvbHlmaWxsIGZvciBJRTExIHN1cHBvcnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9KYW1lc01HcmVlbmUvRnVuY3Rpb24ubmFtZS9ibG9iLzU4YjMxNGQ0YTk4MzExMGMzNjgyZjEyMjhmODQ1ZDM5Y2NjYTE4MTcvRnVuY3Rpb24ubmFtZS5qcyNMM1xuY29uc3QgZm5OYW1lTWF0Y2hSZWdleCA9IC9eXFxzKmZ1bmN0aW9uKD86XFxzfFxccypcXC9cXCouKlxcKlxcL1xccyopKyhbXihcXHMvXSopXFxzKi87XG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGZuKSB7XG4gIGNvbnN0IG1hdGNoID0gYCR7Zm59YC5tYXRjaChmbk5hbWVNYXRjaFJlZ2V4KTtcbiAgY29uc3QgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICByZXR1cm4gbmFtZSB8fCAnJztcbn1cbmZ1bmN0aW9uIGdldEZ1bmN0aW9uQ29tcG9uZW50TmFtZShDb21wb25lbnQsIGZhbGxiYWNrID0gJycpIHtcbiAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCBnZXRGdW5jdGlvbk5hbWUoQ29tcG9uZW50KSB8fCBmYWxsYmFjaztcbn1cbmZ1bmN0aW9uIGdldFdyYXBwZWROYW1lKG91dGVyVHlwZSwgaW5uZXJUeXBlLCB3cmFwcGVyTmFtZSkge1xuICBjb25zdCBmdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbkNvbXBvbmVudE5hbWUoaW5uZXJUeXBlKTtcbiAgcmV0dXJuIG91dGVyVHlwZS5kaXNwbGF5TmFtZSB8fCAoZnVuY3Rpb25OYW1lICE9PSAnJyA/IGAke3dyYXBwZXJOYW1lfSgke2Z1bmN0aW9uTmFtZX0pYCA6IHdyYXBwZXJOYW1lKTtcbn1cblxuLyoqXG4gKiBjaGVycnktcGljayBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi83NjliMWYyNzBlMTI1MWQ5ZGJkY2UwZmNiZDllOTJlNTAyZDA1OWI4L3BhY2thZ2VzL3NoYXJlZC9nZXRDb21wb25lbnROYW1lLmpzXG4gKiBvcmlnaW5hbGx5IGZvcmtlZCBmcm9tIHJlY29tcG9zZS9nZXREaXNwbGF5TmFtZSB3aXRoIGFkZGVkIElFMTEgc3VwcG9ydFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpIHtcbiAgaWYgKENvbXBvbmVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdldEZ1bmN0aW9uQ29tcG9uZW50TmFtZShDb21wb25lbnQsICdDb21wb25lbnQnKTtcbiAgfVxuXG4gIC8vIFR5cGVTY3JpcHQgY2FuJ3QgaGF2ZSBjb21wb25lbnRzIGFzIG9iamVjdHMgYnV0IHRoZXkgZXhpc3QgaW4gdGhlIGZvcm0gb2YgYG1lbW9gIG9yIGBTdXNwZW5zZWBcbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICdvYmplY3QnKSB7XG4gICAgc3dpdGNoIChDb21wb25lbnQuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICAgICAgcmV0dXJuIGdldFdyYXBwZWROYW1lKENvbXBvbmVudCwgQ29tcG9uZW50LnJlbmRlciwgJ0ZvcndhcmRSZWYnKTtcbiAgICAgIGNhc2UgTWVtbzpcbiAgICAgICAgcmV0dXJuIGdldFdyYXBwZWROYW1lKENvbXBvbmVudCwgQ29tcG9uZW50LnR5cGUsICdtZW1vJyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsIi8vIEEgY2hhbmdlIG9mIHRoZSBicm93c2VyIHpvb20gY2hhbmdlIHRoZSBzY3JvbGxiYXIgc2l6ZS5cbi8vIENyZWRpdCBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi80ODhmZDhhZmM1MzVjYTNhNmFkNGRjNTgxZjVlODkyMTdiNmEzNmFjL2pzL3NyYy91dGlsL3Njcm9sbGJhci5qcyNMMTQtTDE4XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplKGRvYykge1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2lubmVyV2lkdGgjdXNhZ2Vfbm90ZXNcbiAgY29uc3QgZG9jdW1lbnRXaWR0aCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJldHVybiBNYXRoLmFicyh3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50V2lkdGgpO1xufSIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxjPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksZD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksZT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksZj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksZz1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksaD1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5zZXJ2ZXJfY29udGV4dFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxtPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLHA9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikscT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIiksdTt1PVN5bWJvbC5mb3IoXCJyZWFjdC5tb2R1bGUucmVmZXJlbmNlXCIpO1xuZnVuY3Rpb24gdihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgcj1hLiQkdHlwZW9mO3N3aXRjaChyKXtjYXNlIGI6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgZDpjYXNlIGY6Y2FzZSBlOmNhc2UgbTpjYXNlIG46cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIGg6Y2FzZSBsOmNhc2UgcTpjYXNlIHA6Y2FzZSBnOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHJ9fWNhc2UgYzpyZXR1cm4gcn19fWV4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ZztleHBvcnRzLkVsZW1lbnQ9YjtleHBvcnRzLkZvcndhcmRSZWY9bDtleHBvcnRzLkZyYWdtZW50PWQ7ZXhwb3J0cy5MYXp5PXE7ZXhwb3J0cy5NZW1vPXA7ZXhwb3J0cy5Qb3J0YWw9YztleHBvcnRzLlByb2ZpbGVyPWY7ZXhwb3J0cy5TdHJpY3RNb2RlPWU7ZXhwb3J0cy5TdXNwZW5zZT1tO1xuZXhwb3J0cy5TdXNwZW5zZUxpc3Q9bjtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09aH07ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWd9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ifTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWx9O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWR9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cX07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1wfTtcbmV4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1jfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1mfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWV9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PW19O2V4cG9ydHMuaXNTdXNwZW5zZUxpc3Q9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1ufTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1kfHxhPT09Znx8YT09PWV8fGE9PT1tfHxhPT09bnx8YT09PXR8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cXx8YS4kJHR5cGVvZj09PXB8fGEuJCR0eXBlb2Y9PT1nfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWx8fGEuJCR0eXBlb2Y9PT11fHx2b2lkIDAhPT1hLmdldE1vZHVsZUlkKT8hMDohMX07ZXhwb3J0cy50eXBlT2Y9djtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn0iLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgY29uc3QgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG4vKipcbiAqIEFkZCBrZXlzLCB2YWx1ZXMgb2YgYGRlZmF1bHRQcm9wc2AgdGhhdCBkb2VzIG5vdCBleGlzdCBpbiBgcHJvcHNgXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdFByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHJlc29sdmVkIHByb3BzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG4gIGNvbnN0IG91dHB1dCA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gIE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcykuZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgaWYgKHByb3BOYW1lLnRvU3RyaW5nKCkubWF0Y2goL14oY29tcG9uZW50c3xzbG90cykkLykpIHtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFByb3BzW3Byb3BOYW1lXSwgb3V0cHV0W3Byb3BOYW1lXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wTmFtZS50b1N0cmluZygpLm1hdGNoKC9eKGNvbXBvbmVudHNQcm9wc3xzbG90UHJvcHMpJC8pKSB7XG4gICAgICBjb25zdCBkZWZhdWx0U2xvdFByb3BzID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXSB8fCB7fTtcbiAgICAgIGNvbnN0IHNsb3RQcm9wcyA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSB7fTtcbiAgICAgIGlmICghc2xvdFByb3BzIHx8ICFPYmplY3Qua2V5cyhzbG90UHJvcHMpKSB7XG4gICAgICAgIC8vIFJlZHVjZSB0aGUgaXRlcmF0aW9uIGlmIHRoZSBzbG90IHByb3BzIGlzIGVtcHR5XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0U2xvdFByb3BzO1xuICAgICAgfSBlbHNlIGlmICghZGVmYXVsdFNsb3RQcm9wcyB8fCAhT2JqZWN0LmtleXMoZGVmYXVsdFNsb3RQcm9wcykpIHtcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBpdGVyYXRpb24gaWYgdGhlIGRlZmF1bHQgc2xvdCBwcm9wcyBpcyBlbXB0eVxuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gc2xvdFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IF9leHRlbmRzKHt9LCBzbG90UHJvcHMpO1xuICAgICAgICBPYmplY3Qua2V5cyhkZWZhdWx0U2xvdFByb3BzKS5mb3JFYWNoKHNsb3RQcm9wTmFtZSA9PiB7XG4gICAgICAgICAgb3V0cHV0W3Byb3BOYW1lXVtzbG90UHJvcE5hbWVdID0gcmVzb2x2ZVByb3BzKGRlZmF1bHRTbG90UHJvcHNbc2xvdFByb3BOYW1lXSwgc2xvdFByb3BzW3Nsb3RQcm9wTmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG91dHB1dFtwcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCIvKipcbiAqIFRPRE8gdjU6IGNvbnNpZGVyIG1ha2luZyBpdCBwcml2YXRlXG4gKlxuICogcGFzc2VzIHt2YWx1ZX0gdG8ge3JlZn1cbiAqXG4gKiBXQVJOSU5HOiBCZSBzdXJlIHRvIG9ubHkgY2FsbCB0aGlzIGluc2lkZSBhIGNhbGxiYWNrIHRoYXQgaXMgcGFzc2VkIGFzIGEgcmVmLlxuICogT3RoZXJ3aXNlLCBtYWtlIHN1cmUgdG8gY2xlYW51cCB0aGUgcHJldmlvdXMge3JlZn0gaWYgaXQgY2hhbmdlcy4gU2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXVpL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzUzOVxuICpcbiAqIFVzZWZ1bCBpZiB5b3Ugd2FudCB0byBleHBvc2UgdGhlIHJlZiBvZiBhbiBpbm5lciBjb21wb25lbnQgdG8gdGhlIHB1YmxpYyBBUElcbiAqIHdoaWxlIHN0aWxsIHVzaW5nIGl0IGluc2lkZSB0aGUgY29tcG9uZW50LlxuICogQHBhcmFtIHJlZiBBIHJlZiBjYWxsYmFjayBvciByZWYgb2JqZWN0LiBJZiBhbnl0aGluZyBmYWxzeSwgdGhpcyBpcyBhIG5vLW9wLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEEgdmVyc2lvbiBvZiBgUmVhY3QudXNlTGF5b3V0RWZmZWN0YCB0aGF0IGRvZXMgbm90IHNob3cgYSB3YXJuaW5nIHdoZW4gc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGVmZmVjdHMgdGhhdCBhcmUgb25seSBuZWVkZWQgZm9yIGNsaWVudC1zaWRlIHJlbmRlcmluZyBidXQgbm90IGZvciBTU1IuXG4gKlxuICogQmVmb3JlIHlvdSB1c2UgdGhpcyBob29rLCBtYWtlIHN1cmUgdG8gcmVhZCBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nYWVhcm9uL2U3ZDk3Y2RmMzhhMjkwNzkyNGVhMTJlNGViZGYzYzg1XG4gKiBhbmQgY29uZmlybSBpdCBkb2Vzbid0IGFwcGx5IHRvIHlvdXIgdXNlLWNhc2UuXG4gKi9cbmNvbnN0IHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG5leHBvcnQgZGVmYXVsdCB1c2VFbmhhbmNlZEVmZmVjdDsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VFbmhhbmNlZEVmZmVjdCBmcm9tICcuLi91c2VFbmhhbmNlZEVmZmVjdCc7XG5cbi8qKlxuICogSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDA5OSNpc3N1ZWNvbW1lbnQtNDQwMDEzODkyXG4gKiBTZWUgUkZDIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JmY3MvcHVsbC8yMjBcbiAqL1xuXG5mdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihmbik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IGZuO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZVJlZigoLi4uYXJncykgPT5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBoaWRlIGB0aGlzYFxuICAoMCwgcmVmLmN1cnJlbnQpKC4uLmFyZ3MpKS5jdXJyZW50O1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlRXZlbnRDYWxsYmFjazsiLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi4vc2V0UmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcmtSZWYoLi4ucmVmcykge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmcyBwYXNzZWQgdG8gdGhpcyBob29rIGNoYW5nZSBhbmQgYXJlIGFsbCBkZWZpbmVkLlxuICAgKiBUaGlzIG1lYW5zIHJlYWN0IHdpbGwgY2FsbCB0aGUgb2xkIGZvcmtSZWYgd2l0aCBgbnVsbGAgYW5kIHRoZSBuZXcgZm9ya1JlZlxuICAgKiB3aXRoIHRoZSByZWYuIENsZWFudXAgbmF0dXJhbGx5IGVtZXJnZXMgZnJvbSB0aGlzIGJlaGF2aW9yLlxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyZWZzLmV2ZXJ5KHJlZiA9PiByZWYgPT0gbnVsbCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2UgPT4ge1xuICAgICAgcmVmcy5mb3JFYWNoKHJlZiA9PiB7XG4gICAgICAgIHNldFJlZihyZWYsIGluc3RhbmNlKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCByZWZzKTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCBnbG9iYWxJZCA9IDA7XG5mdW5jdGlvbiB1c2VHbG9iYWxJZChpZE92ZXJyaWRlKSB7XG4gIGNvbnN0IFtkZWZhdWx0SWQsIHNldERlZmF1bHRJZF0gPSBSZWFjdC51c2VTdGF0ZShpZE92ZXJyaWRlKTtcbiAgY29uc3QgaWQgPSBpZE92ZXJyaWRlIHx8IGRlZmF1bHRJZDtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGVmYXVsdElkID09IG51bGwpIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIHRoaXMgZGVmYXVsdCBpZCB3aGVuIHBvc3NpYmxlLlxuICAgICAgLy8gVXNlIHRoZSBpbmNyZW1lbnRpbmcgdmFsdWUgZm9yIGNsaWVudC1zaWRlIHJlbmRlcmluZyBvbmx5LlxuICAgICAgLy8gV2UgY2FuJ3QgdXNlIGl0IHNlcnZlci1zaWRlLlxuICAgICAgLy8gSWYgeW91IHdhbnQgdG8gdXNlIHJhbmRvbSB2YWx1ZXMgcGxlYXNlIGNvbnNpZGVyIHRoZSBCaXJ0aGRheSBQcm9ibGVtOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CaXJ0aGRheV9wcm9ibGVtXG4gICAgICBnbG9iYWxJZCArPSAxO1xuICAgICAgc2V0RGVmYXVsdElkKGBtdWktJHtnbG9iYWxJZH1gKTtcbiAgICB9XG4gIH0sIFtkZWZhdWx0SWRdKTtcbiAgcmV0dXJuIGlkO1xufVxuXG4vLyBkb3duc3RyZWFtIGJ1bmRsZXJzIG1heSByZW1vdmUgdW5uZWNlc3NhcnkgY29uY2F0ZW5hdGlvbiwgYnV0IHdvbid0IHJlbW92ZSB0b1N0cmluZyBjYWxsIC0tIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2svaXNzdWVzLzE0ODE0XG5jb25zdCBtYXliZVJlYWN0VXNlSWQgPSBSZWFjdFsndXNlSWQnLnRvU3RyaW5nKCldO1xuLyoqXG4gKlxuICogQGV4YW1wbGUgPGRpdiBpZD17dXNlSWQoKX0gLz5cbiAqIEBwYXJhbSBpZE92ZXJyaWRlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VJZChpZE92ZXJyaWRlKSB7XG4gIGlmIChtYXliZVJlYWN0VXNlSWQgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHJlYWN0SWQgPSBtYXliZVJlYWN0VXNlSWQoKTtcbiAgICByZXR1cm4gaWRPdmVycmlkZSAhPSBudWxsID8gaWRPdmVycmlkZSA6IHJlYWN0SWQ7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzIC0tIGBSZWFjdC51c2VJZGAgaXMgaW52YXJpYW50IGF0IHJ1bnRpbWUuXG4gIHJldHVybiB1c2VHbG9iYWxJZChpZE92ZXJyaWRlKTtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IFVOSU5JVElBTElaRUQgPSB7fTtcblxuLyoqXG4gKiBBIFJlYWN0LnVzZVJlZigpIHRoYXQgaXMgaW5pdGlhbGl6ZWQgbGF6aWx5IHdpdGggYSBmdW5jdGlvbi4gTm90ZSB0aGF0IGl0IGFjY2VwdHMgYW4gb3B0aW9uYWxcbiAqIGluaXRpYWxpemF0aW9uIGFyZ3VtZW50LCBzbyB0aGUgaW5pdGlhbGl6YXRpb24gZnVuY3Rpb24gZG9lc24ndCBuZWVkIHRvIGJlIGFuIGlubGluZSBjbG9zdXJlLlxuICpcbiAqIEB1c2FnZVxuICogICBjb25zdCByZWYgPSB1c2VMYXp5UmVmKHNvcnRDb2x1bW5zLCBjb2x1bW5zKVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VMYXp5UmVmKGluaXQsIGluaXRBcmcpIHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKFVOSU5JVElBTElaRUQpO1xuICBpZiAocmVmLmN1cnJlbnQgPT09IFVOSU5JVElBTElaRUQpIHtcbiAgICByZWYuY3VycmVudCA9IGluaXQoaW5pdEFyZyk7XG4gIH1cbiAgcmV0dXJuIHJlZjtcbn0iLCIndXNlIGNsaWVudCc7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IEVNUFRZID0gW107XG5cbi8qKlxuICogQSBSZWFjdC51c2VFZmZlY3QgZXF1aXZhbGVudCB0aGF0IHJ1bnMgb25jZSwgd2hlbiB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZU9uTW91bnQoZm4pIHtcbiAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG4gIFJlYWN0LnVzZUVmZmVjdChmbiwgRU1QVFkpO1xuICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xufSIsIid1c2UgY2xpZW50JztcblxuaW1wb3J0IHVzZUxhenlSZWYgZnJvbSAnLi4vdXNlTGF6eVJlZi91c2VMYXp5UmVmJztcbmltcG9ydCB1c2VPbk1vdW50IGZyb20gJy4uL3VzZU9uTW91bnQvdXNlT25Nb3VudCc7XG5leHBvcnQgY2xhc3MgVGltZW91dCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY3VycmVudElkID0gbnVsbDtcbiAgICB0aGlzLmNsZWFyID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY3VycmVudElkICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmN1cnJlbnRJZCk7XG4gICAgICAgIHRoaXMuY3VycmVudElkID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZGlzcG9zZUVmZmVjdCA9ICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyO1xuICAgIH07XG4gIH1cbiAgc3RhdGljIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVvdXQoKTtcbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZXMgYGZuYCBhZnRlciBgZGVsYXlgLCBjbGVhcmluZyBhbnkgcHJldmlvdXNseSBzY2hlZHVsZWQgY2FsbC5cbiAgICovXG4gIHN0YXJ0KGRlbGF5LCBmbikge1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgICB0aGlzLmN1cnJlbnRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jdXJyZW50SWQgPSBudWxsO1xuICAgICAgZm4oKTtcbiAgICB9LCBkZWxheSk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRpbWVvdXQoKSB7XG4gIGNvbnN0IHRpbWVvdXQgPSB1c2VMYXp5UmVmKFRpbWVvdXQuY3JlYXRlKS5jdXJyZW50O1xuICB1c2VPbk1vdW50KHRpbWVvdXQuZGlzcG9zZUVmZmVjdCk7XG4gIHJldHVybiB0aW1lb3V0O1xufSIsIi8qKlxuICogQHJlbWl4LXJ1bi9yb3V0ZXIgdjEuMTYuMVxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBUeXBlcyBhbmQgQ29uc3RhbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBBY3Rpb25zIHJlcHJlc2VudCB0aGUgdHlwZSBvZiBjaGFuZ2UgdG8gYSBsb2NhdGlvbiB2YWx1ZS5cbiAqL1xudmFyIEFjdGlvbjtcbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxuICAgKiBBIFJFUExBQ0UgaW5kaWNhdGVzIHRoZSBlbnRyeSBhdCB0aGUgY3VycmVudCBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFja1xuICAgKiBiZWluZyByZXBsYWNlZCBieSBhIG5ldyBvbmUuXG4gICAqL1xuICBBY3Rpb25bXCJSZXBsYWNlXCJdID0gXCJSRVBMQUNFXCI7XG59KShBY3Rpb24gfHwgKEFjdGlvbiA9IHt9KSk7XG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgbGV0IHtcbiAgICBpbml0aWFsRW50cmllcyA9IFtcIi9cIl0sXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIHY1Q29tcGF0ID0gZmFsc2VcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBlbnRyaWVzOyAvLyBEZWNsYXJlIHNvIHdlIGNhbiBhY2Nlc3MgZnJvbSBjcmVhdGVNZW1vcnlMb2NhdGlvblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuICBmdW5jdGlvbiBjbGFtcEluZGV4KG4pIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgMCksIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uKCkge1xuICAgIHJldHVybiBlbnRyaWVzW2luZGV4XTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGVudHJpZXMgPyBnZXRDdXJyZW50TG9jYXRpb24oKS5wYXRobmFtZSA6IFwiL1wiLCB0bywgc3RhdGUsIGtleSk7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeTogXCIgKyBKU09OLnN0cmluZ2lmeSh0bykpO1xuICAgIHJldHVybiBsb2NhdGlvbjtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmLFxuICAgIGNyZWF0ZVVSTCh0bykge1xuICAgICAgcmV0dXJuIG5ldyBVUkwoY3JlYXRlSHJlZih0byksIFwiaHR0cDovL2xvY2FsaG9zdFwiKTtcbiAgICB9LFxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLnBhdGhuYW1lIHx8IFwiXCIsXG4gICAgICAgIHNlYXJjaDogcGF0aC5zZWFyY2ggfHwgXCJcIixcbiAgICAgICAgaGFzaDogcGF0aC5oYXNoIHx8IFwiXCJcbiAgICAgIH07XG4gICAgfSxcbiAgICBwdXNoKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGluZGV4ICs9IDE7XG4gICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgZW50cmllcy5sZW5ndGgsIG5leHRMb2NhdGlvbik7XG4gICAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhOiAxXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSk7XG4gICAgICBlbnRyaWVzW2luZGV4XSA9IG5leHRMb2NhdGlvbjtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnbyhkZWx0YSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICAgIGxldCBuZXh0SW5kZXggPSBjbGFtcEluZGV4KGluZGV4ICsgZGVsdGEpO1xuICAgICAgbGV0IG5leHRMb2NhdGlvbiA9IGVudHJpZXNbbmV4dEluZGV4XTtcbiAgICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxpc3Rlbihmbikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxuICogQnJvd3NlciBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gcmVndWxhciBVUkxzLiBUaGlzIGlzIHRoZSBzdGFuZGFyZCBmb3JcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XG4gKiBzZXJ2ZSB0aGUgc2FtZSBhcHAgYXQgbXVsdGlwbGUgVVJMcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sXG4gICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3csIHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVCcm93c2VyTG9jYXRpb24sIGNyZWF0ZUJyb3dzZXJIcmVmLCBudWxsLCBvcHRpb25zKTtcbn1cbi8qKlxuICogSGFzaCBoaXN0b3J5IHN0b3JlcyB0aGUgbG9jYXRpb24gaW4gd2luZG93LmxvY2F0aW9uLmhhc2guIFRoaXMgbWFrZXMgaXQgaWRlYWxcbiAqIGZvciBzaXR1YXRpb25zIHdoZXJlIHlvdSBkb24ndCB3YW50IHRvIHNlbmQgdGhlIGxvY2F0aW9uIHRvIHRoZSBzZXJ2ZXIgZm9yXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xuICogcmVzZXJ2ZWQgZm9yIHNvbWV0aGluZyBlbHNlLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgICBoYXNoID0gXCJcIlxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcbiAgICAvLyBIYXNoIFVSTCBzaG91bGQgYWx3YXlzIGhhdmUgYSBsZWFkaW5nIC8ganVzdCBsaWtlIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZVxuICAgIC8vIGRvZXMsIHNvIGlmIGFuIGFwcCBlbmRzIHVwIGF0IGEgcm91dGUgbGlrZSAvI3NvbWV0aGluZyB0aGVuIHdlIGFkZCBhXG4gICAgLy8gbGVhZGluZyBzbGFzaCBzbyBhbGwgb2Ygb3VyIHBhdGgtbWF0Y2hpbmcgYmVoYXZlcyB0aGUgc2FtZSBhcyBpZiBpdCB3b3VsZFxuICAgIC8vIGluIGEgYnJvd3NlciByb3V0ZXIuICBUaGlzIGlzIHBhcnRpY3VsYXJseSBpbXBvcnRhbnQgd2hlbiB0aGVyZSBleGlzdHMgYVxuICAgIC8vIHJvb3Qgc3BsYXQgcm91dGUgKDxSb3V0ZSBwYXRoPVwiKlwiPikgc2luY2UgdGhhdCBtYXRjaGVzIGludGVybmFsbHkgYWdhaW5zdFxuICAgIC8vIFwiLypcIiBhbmQgd2UnZCBleHBlY3QgLyNzb21ldGhpbmcgdG8gNDA0IGluIGEgaGFzaCByb3V0ZXIgYXBwLlxuICAgIGlmICghcGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIikgJiYgIXBhdGhuYW1lLnN0YXJ0c1dpdGgoXCIuXCIpKSB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiICsgcGF0aG5hbWU7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihcIlwiLCB7XG4gICAgICBwYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2hcbiAgICB9LFxuICAgIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaEhyZWYod2luZG93LCB0bykge1xuICAgIGxldCBiYXNlID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJiYXNlXCIpO1xuICAgIGxldCBocmVmID0gXCJcIjtcbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gaHJlZiArIFwiI1wiICsgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0bykpO1xuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlSGFzaExvY2F0aW9uKGxvY2F0aW9uLCB0bykge1xuICAgIHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIik7XG4gIH1cbiAgcmV0dXJuIGdldFVybEJhc2VkSGlzdG9yeShjcmVhdGVIYXNoTG9jYXRpb24sIGNyZWF0ZUhhc2hIcmVmLCB2YWxpZGF0ZUhhc2hMb2NhdGlvbiwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbnZhcmlhbnQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2UsIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpO1xufVxuLyoqXG4gKiBGb3IgYnJvd3Nlci1iYXNlZCBoaXN0b3JpZXMsIHdlIGNvbWJpbmUgdGhlIHN0YXRlIGFuZCBrZXkgaW50byBhbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCkge1xuICByZXR1cm4ge1xuICAgIHVzcjogbG9jYXRpb24uc3RhdGUsXG4gICAga2V5OiBsb2NhdGlvbi5rZXksXG4gICAgaWR4OiBpbmRleFxuICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgTG9jYXRpb24gb2JqZWN0IHdpdGggYSB1bmlxdWUga2V5IGZyb20gdGhlIGdpdmVuIFBhdGhcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oY3VycmVudCwgdG8sIHN0YXRlLCBrZXkpIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IG51bGw7XG4gIH1cbiAgbGV0IGxvY2F0aW9uID0gX2V4dGVuZHMoe1xuICAgIHBhdGhuYW1lOiB0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIiA/IGN1cnJlbnQgOiBjdXJyZW50LnBhdGhuYW1lLFxuICAgIHNlYXJjaDogXCJcIixcbiAgICBoYXNoOiBcIlwiXG4gIH0sIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bywge1xuICAgIHN0YXRlLFxuICAgIC8vIFRPRE86IFRoaXMgY291bGQgYmUgY2xlYW5lZCB1cC4gIHB1c2gvcmVwbGFjZSBzaG91bGQgcHJvYmFibHkganVzdCB0YWtlXG4gICAgLy8gZnVsbCBMb2NhdGlvbnMgbm93IGFuZCBhdm9pZCB0aGUgbmVlZCB0byBydW4gdGhyb3VnaCB0aGlzIGZsb3cgYXQgYWxsXG4gICAgLy8gQnV0IHRoYXQncyBhIHByZXR0eSBiaWcgcmVmYWN0b3IgdG8gdGhlIGN1cnJlbnQgdGVzdCBzdWl0ZSBzbyBnb2luZyB0b1xuICAgIC8vIGtlZXAgYXMgaXMgZm9yIHRoZSB0aW1lIGJlaW5nIGFuZCBqdXN0IGxldCBhbnkgaW5jb21pbmcga2V5cyB0YWtlIHByZWNlZGVuY2VcbiAgICBrZXk6IHRvICYmIHRvLmtleSB8fCBrZXkgfHwgY3JlYXRlS2V5KClcbiAgfSk7XG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVQYXRoKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IF9yZWY7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSBcIj9cIikgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gXCI/XCIgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gXCIjXCIpIHBhdGhuYW1lICs9IGhhc2guY2hhckF0KDApID09PSBcIiNcIiA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRobmFtZTtcbn1cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0ge307XG4gIGlmIChwYXRoKSB7XG4gICAgbGV0IGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZihcIiNcIik7XG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIGxldCBzZWFyY2hJbmRleCA9IHBhdGguaW5kZXhPZihcIj9cIik7XG4gICAgaWYgKHNlYXJjaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguc2VhcmNoID0gcGF0aC5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHBhcnNlZFBhdGgucGF0aG5hbWUgPSBwYXRoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cbmZ1bmN0aW9uIGdldFVybEJhc2VkSGlzdG9yeShnZXRMb2NhdGlvbiwgY3JlYXRlSHJlZiwgdmFsaWRhdGVMb2NhdGlvbiwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGxldCBpbmRleCA9IGdldEluZGV4KCk7XG4gIC8vIEluZGV4IHNob3VsZCBvbmx5IGJlIG51bGwgd2hlbiB3ZSBpbml0aWFsaXplLiBJZiBub3QsIGl0J3MgYmVjYXVzZSB0aGVcbiAgLy8gdXNlciBjYWxsZWQgaGlzdG9yeS5wdXNoU3RhdGUgb3IgaGlzdG9yeS5yZXBsYWNlU3RhdGUgZGlyZWN0bHksIGluIHdoaWNoXG4gIC8vIGNhc2Ugd2Ugc2hvdWxkIGxvZyBhIHdhcm5pbmcgYXMgaXQgd2lsbCByZXN1bHQgaW4gYnVncy5cbiAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICBpbmRleCA9IDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoX2V4dGVuZHMoe30sIGdsb2JhbEhpc3Rvcnkuc3RhdGUsIHtcbiAgICAgIGlkeDogaW5kZXhcbiAgICB9KSwgXCJcIik7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0SW5kZXgoKSB7XG4gICAgbGV0IHN0YXRlID0gZ2xvYmFsSGlzdG9yeS5zdGF0ZSB8fCB7XG4gICAgICBpZHg6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBzdGF0ZS5pZHg7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgbGV0IG5leHRJbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGRlbHRhID0gbmV4dEluZGV4ID09IG51bGwgPyBudWxsIDogbmV4dEluZGV4IC0gaW5kZXg7XG4gICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcih7XG4gICAgICAgIGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgaW5kZXggPSBnZXRJbmRleCgpICsgMTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJZiB0aGUgZXhjZXB0aW9uIGlzIGJlY2F1c2UgYHN0YXRlYCBjYW4ndCBiZSBzZXJpYWxpemVkLCBsZXQgdGhhdCB0aHJvd1xuICAgICAgLy8gb3V0d2FyZHMganVzdCBsaWtlIGEgcmVwbGFjZSBjYWxsIHdvdWxkIHNvIHRoZSBkZXYga25vd3MgdGhlIGNhdXNlXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9uYXYtaGlzdG9yeS1hcGlzLmh0bWwjc2hhcmVkLWhpc3RvcnktcHVzaC9yZXBsYWNlLXN0YXRlLXN0ZXBzXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zdHJ1Y3R1cmVkLWRhdGEuaHRtbCNzdHJ1Y3R1cmVkc2VyaWFsaXplaW50ZXJuYWxcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiBlcnJvci5uYW1lID09PSBcIkRhdGFDbG9uZUVycm9yXCIpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBpbmRleCA9IGdldEluZGV4KCk7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpO1xuICAgIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGE6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVVUkwodG8pIHtcbiAgICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBcIm51bGxcIiA/IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gOiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgaHJlZiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gICAgLy8gVHJlYXRpbmcgdGhpcyBhcyBhIGZ1bGwgVVJMIHdpbGwgc3RyaXAgYW55IHRyYWlsaW5nIHNwYWNlcyBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gcHJlLWVuY29kZSB0aGVtIHNpbmNlIHRoZXkgbWlnaHQgYmUgcGFydCBvZiBhIG1hdGNoaW5nIHNwbGF0IHBhcmFtIGZyb21cbiAgICAvLyBhbiBhbmNlc3RvciByb3V0ZVxuICAgIGhyZWYgPSBocmVmLnJlcGxhY2UoLyAkLywgXCIlMjBcIik7XG4gICAgaW52YXJpYW50KGJhc2UsIFwiTm8gd2luZG93LmxvY2F0aW9uLihvcmlnaW58aHJlZikgYXZhaWxhYmxlIHRvIGNyZWF0ZSBVUkwgZm9yIGhyZWY6IFwiICsgaHJlZik7XG4gICAgcmV0dXJuIG5ldyBVUkwoaHJlZiwgYmFzZSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0TG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KTtcbiAgICB9LFxuICAgIGxpc3Rlbihmbikge1xuICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgaGlzdG9yeSBvbmx5IGFjY2VwdHMgb25lIGFjdGl2ZSBsaXN0ZW5lclwiKTtcbiAgICAgIH1cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlSHJlZih0bykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUhyZWYod2luZG93LCB0byk7XG4gICAgfSxcbiAgICBjcmVhdGVVUkwsXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIC8vIEVuY29kZSBhIExvY2F0aW9uIHRoZSBzYW1lIHdheSB3aW5kb3cubG9jYXRpb24gd291bGRcbiAgICAgIGxldCB1cmwgPSBjcmVhdGVVUkwodG8pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHVybC5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoOiB1cmwuc2VhcmNoLFxuICAgICAgICBoYXNoOiB1cmwuaGFzaFxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2gsXG4gICAgcmVwbGFjZSxcbiAgICBnbyhuKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLy8jZW5kcmVnaW9uXG5cbnZhciBSZXN1bHRUeXBlO1xuKGZ1bmN0aW9uIChSZXN1bHRUeXBlKSB7XG4gIFJlc3VsdFR5cGVbXCJkYXRhXCJdID0gXCJkYXRhXCI7XG4gIFJlc3VsdFR5cGVbXCJkZWZlcnJlZFwiXSA9IFwiZGVmZXJyZWRcIjtcbiAgUmVzdWx0VHlwZVtcInJlZGlyZWN0XCJdID0gXCJyZWRpcmVjdFwiO1xuICBSZXN1bHRUeXBlW1wiZXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShSZXN1bHRUeXBlIHx8IChSZXN1bHRUeXBlID0ge30pKTtcbmNvbnN0IGltbXV0YWJsZVJvdXRlS2V5cyA9IG5ldyBTZXQoW1wibGF6eVwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJwYXRoXCIsIFwiaWRcIiwgXCJpbmRleFwiLCBcImNoaWxkcmVuXCJdKTtcbmZ1bmN0aW9uIGlzSW5kZXhSb3V0ZShyb3V0ZSkge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59XG4vLyBXYWxrIHRoZSByb3V0ZSB0cmVlIGdlbmVyYXRpbmcgdW5pcXVlIElEcyB3aGVyZSBuZWNlc3NhcnksIHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5mdW5jdGlvbiBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKHJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCBwYXJlbnRQYXRoLCBtYW5pZmVzdCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGlmIChtYW5pZmVzdCA9PT0gdm9pZCAwKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgfVxuICByZXR1cm4gcm91dGVzLm1hcCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcbiAgICBsZXQgaWQgPSB0eXBlb2Ygcm91dGUuaWQgPT09IFwic3RyaW5nXCIgPyByb3V0ZS5pZCA6IHRyZWVQYXRoLmpvaW4oXCItXCIpO1xuICAgIGludmFyaWFudChyb3V0ZS5pbmRleCAhPT0gdHJ1ZSB8fCAhcm91dGUuY2hpbGRyZW4sIFwiQ2Fubm90IHNwZWNpZnkgY2hpbGRyZW4gb24gYW4gaW5kZXggcm91dGVcIik7XG4gICAgaW52YXJpYW50KCFtYW5pZmVzdFtpZF0sIFwiRm91bmQgYSByb3V0ZSBpZCBjb2xsaXNpb24gb24gaWQgXFxcIlwiICsgaWQgKyBcIlxcXCIuICBSb3V0ZSBcIiArIFwiaWQncyBtdXN0IGJlIGdsb2JhbGx5IHVuaXF1ZSB3aXRoaW4gRGF0YSBSb3V0ZXIgdXNhZ2VzXCIpO1xuICAgIGlmIChpc0luZGV4Um91dGUocm91dGUpKSB7XG4gICAgICBsZXQgaW5kZXhSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSwge1xuICAgICAgICBpZFxuICAgICAgfSk7XG4gICAgICBtYW5pZmVzdFtpZF0gPSBpbmRleFJvdXRlO1xuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwgbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSwge1xuICAgICAgICBpZCxcbiAgICAgICAgY2hpbGRyZW46IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBtYW5pZmVzdFtpZF0gPSBwYXRoT3JMYXlvdXRSb3V0ZTtcbiAgICAgIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgICAgICBwYXRoT3JMYXlvdXRSb3V0ZS5jaGlsZHJlbiA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGUuY2hpbGRyZW4sIG1hcFJvdXRlUHJvcGVydGllcywgdHJlZVBhdGgsIG1hbmlmZXN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRoT3JMYXlvdXRSb3V0ZTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBNYXRjaGVzIHRoZSBnaXZlbiByb3V0ZXMgdG8gYSBsb2NhdGlvbiBhbmQgcmV0dXJucyB0aGUgbWF0Y2ggZGF0YS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXJvdXRlc1xuICovXG5mdW5jdGlvbiBtYXRjaFJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cbiAgbGV0IGxvY2F0aW9uID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICBsZXQgcGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiLCBiYXNlbmFtZSk7XG4gIGlmIChwYXRobmFtZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG4gIGxldCBtYXRjaGVzID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgIC8vIG9yIGZyb20gcm91dGVyLm5hdmlnYXRlLCBidXQgd2Ugd2FudCB0byBtYXRjaCBhZ2FpbnN0IHRoZSB1bmVuY29kZWRcbiAgICAvLyBwYXRocyBpbiB0aGUgcm91dGUgZGVmaW5pdGlvbnMuICBNZW1vcnkgcm91dGVyIGxvY2F0aW9ucyB3b24ndCBiZVxuICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAvLyBzaG91bGQgYmUgYSBzYWZlIG9wZXJhdGlvbi4gIFRoaXMgYXZvaWRzIG5lZWRpbmcgbWF0Y2hSb3V0ZXMgdG8gYmVcbiAgICAvLyBoaXN0b3J5LWF3YXJlLlxuICAgIGxldCBkZWNvZGVkID0gZGVjb2RlUGF0aChwYXRobmFtZSk7XG4gICAgbWF0Y2hlcyA9IG1hdGNoUm91dGVCcmFuY2goYnJhbmNoZXNbaV0sIGRlY29kZWQpO1xuICB9XG4gIHJldHVybiBtYXRjaGVzO1xufVxuZnVuY3Rpb24gY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gobWF0Y2gsIGxvYWRlckRhdGEpIHtcbiAgbGV0IHtcbiAgICByb3V0ZSxcbiAgICBwYXRobmFtZSxcbiAgICBwYXJhbXNcbiAgfSA9IG1hdGNoO1xuICByZXR1cm4ge1xuICAgIGlkOiByb3V0ZS5pZCxcbiAgICBwYXRobmFtZSxcbiAgICBwYXJhbXMsXG4gICAgZGF0YTogbG9hZGVyRGF0YVtyb3V0ZS5pZF0sXG4gICAgaGFuZGxlOiByb3V0ZS5oYW5kbGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG4gIGlmIChwYXJlbnRzTWV0YSA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50c01ldGEgPSBbXTtcbiAgfVxuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFwiXCI7XG4gIH1cbiAgbGV0IGZsYXR0ZW5Sb3V0ZSA9IChyb3V0ZSwgaW5kZXgsIHJlbGF0aXZlUGF0aCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByZWxhdGl2ZVBhdGggPT09IHVuZGVmaW5lZCA/IHJvdXRlLnBhdGggfHwgXCJcIiA6IHJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcbiAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgIGludmFyaWFudChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpLCBcIkFic29sdXRlIHJvdXRlIHBhdGggXFxcIlwiICsgbWV0YS5yZWxhdGl2ZVBhdGggKyBcIlxcXCIgbmVzdGVkIHVuZGVyIHBhdGggXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBcIikgKyBcIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuXCIpO1xuICAgICAgbWV0YS5yZWxhdGl2ZVBhdGggPSBtZXRhLnJlbGF0aXZlUGF0aC5zbGljZShwYXJlbnRQYXRoLmxlbmd0aCk7XG4gICAgfVxuICAgIGxldCBwYXRoID0gam9pblBhdGhzKFtwYXJlbnRQYXRoLCBtZXRhLnJlbGF0aXZlUGF0aF0pO1xuICAgIGxldCByb3V0ZXNNZXRhID0gcGFyZW50c01ldGEuY29uY2F0KG1ldGEpO1xuICAgIC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSwgc28gd2UgdHJhdmVyc2UgdGhlXG4gICAgLy8gcm91dGUgdHJlZSBkZXB0aC1maXJzdCBhbmQgY2hpbGQgcm91dGVzIGFwcGVhciBiZWZvcmUgdGhlaXIgcGFyZW50cyBpblxuICAgIC8vIHRoZSBcImZsYXR0ZW5lZFwiIHZlcnNpb24uXG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgIC8vIE91ciB0eXBlcyBrbm93IGJldHRlciwgYnV0IHJ1bnRpbWUgSlMgbWF5IG5vdCFcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgIHJvdXRlLmluZGV4ICE9PSB0cnVlLCBcIkluZGV4IHJvdXRlcyBtdXN0IG5vdCBoYXZlIGNoaWxkIHJvdXRlcy4gUGxlYXNlIHJlbW92ZSBcIiArIChcImFsbCBjaGlsZCByb3V0ZXMgZnJvbSByb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIuXCIpKTtcbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9XG4gICAgLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlXG4gICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy5cbiAgICBpZiAocm91dGUucGF0aCA9PSBudWxsICYmICFyb3V0ZS5pbmRleCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGFcbiAgICB9KTtcbiAgfTtcbiAgcm91dGVzLmZvckVhY2goKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIHZhciBfcm91dGUkcGF0aDtcbiAgICAvLyBjb2Fyc2UtZ3JhaW4gY2hlY2sgZm9yIG9wdGlvbmFsIHBhcmFtc1xuICAgIGlmIChyb3V0ZS5wYXRoID09PSBcIlwiIHx8ICEoKF9yb3V0ZSRwYXRoID0gcm91dGUucGF0aCkgIT0gbnVsbCAmJiBfcm91dGUkcGF0aC5pbmNsdWRlcyhcIj9cIikpKSB7XG4gICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgZXhwbG9kZWQgb2YgZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocm91dGUucGF0aCkpIHtcbiAgICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCwgZXhwbG9kZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBicmFuY2hlcztcbn1cbi8qKlxuICogQ29tcHV0ZXMgYWxsIGNvbWJpbmF0aW9ucyBvZiBvcHRpb25hbCBwYXRoIHNlZ21lbnRzIGZvciBhIGdpdmVuIHBhdGgsXG4gKiBleGNsdWRpbmcgY29tYmluYXRpb25zIHRoYXQgYXJlIGFtYmlndW91cyBhbmQgb2YgbG93ZXIgcHJpb3JpdHkuXG4gKlxuICogRm9yIGV4YW1wbGUsIGAvb25lLzp0d28/L3RocmVlLzpmb3VyPy86Zml2ZT9gIGV4cGxvZGVzIHRvOlxuICogLSBgL29uZS90aHJlZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXJgXG4gKiAtIGAvb25lL3RocmVlLzpmaXZlYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmaXZlYFxuICogLSBgL29uZS90aHJlZS86Zm91ci86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91ci86Zml2ZWBcbiAqL1xuZnVuY3Rpb24gZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocGF0aCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuICBsZXQgW2ZpcnN0LCAuLi5yZXN0XSA9IHNlZ21lbnRzO1xuICAvLyBPcHRpb25hbCBwYXRoIHNlZ21lbnRzIGFyZSBkZW5vdGVkIGJ5IGEgdHJhaWxpbmcgYD9gXG4gIGxldCBpc09wdGlvbmFsID0gZmlyc3QuZW5kc1dpdGgoXCI/XCIpO1xuICAvLyBDb21wdXRlIHRoZSBjb3JyZXNwb25kaW5nIHJlcXVpcmVkIHNlZ21lbnQ6IGBmb28/YCAtPiBgZm9vYFxuICBsZXQgcmVxdWlyZWQgPSBmaXJzdC5yZXBsYWNlKC9cXD8kLywgXCJcIik7XG4gIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIEludGVwcmV0IGVtcHR5IHN0cmluZyBhcyBvbWl0dGluZyBhbiBvcHRpb25hbCBzZWdtZW50XG4gICAgLy8gYFtcIm9uZVwiLCBcIlwiLCBcInRocmVlXCJdYCBjb3JyZXNwb25kcyB0byBvbWl0dGluZyBgOnR3b2AgZnJvbSBgL29uZS86dHdvPy90aHJlZWAgLT4gYC9vbmUvdGhyZWVgXG4gICAgcmV0dXJuIGlzT3B0aW9uYWwgPyBbcmVxdWlyZWQsIFwiXCJdIDogW3JlcXVpcmVkXTtcbiAgfVxuICBsZXQgcmVzdEV4cGxvZGVkID0gZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocmVzdC5qb2luKFwiL1wiKSk7XG4gIGxldCByZXN1bHQgPSBbXTtcbiAgLy8gQWxsIGNoaWxkIHBhdGhzIHdpdGggdGhlIHByZWZpeC4gIERvIHRoaXMgZm9yIGFsbCBjaGlsZHJlbiBiZWZvcmUgdGhlXG4gIC8vIG9wdGlvbmFsIHZlcnNpb24gZm9yIGFsbCBjaGlsZHJlbiwgc28gd2UgZ2V0IGNvbnNpc3RlbnQgb3JkZXJpbmcgd2hlcmUgdGhlXG4gIC8vIHBhcmVudCBvcHRpb25hbCBhc3BlY3QgaXMgcHJlZmVycmVkIGFzIHJlcXVpcmVkLiAgT3RoZXJ3aXNlLCB3ZSBjYW4gZ2V0XG4gIC8vIGNoaWxkIHNlY3Rpb25zIGludGVyc3BlcnNlZCB3aGVyZSBkZWVwZXIgb3B0aW9uYWwgc2VnbWVudHMgYXJlIGhpZ2hlciB0aGFuXG4gIC8vIHBhcmVudCBvcHRpb25hbCBzZWdtZW50cywgd2hlcmUgZm9yIGV4YW1wbGUsIC86dHdvIHdvdWxkIGV4cGxvZGUgX2VhcmxpZXJfXG4gIC8vIHRoZW4gLzpvbmUuICBCeSBhbHdheXMgaW5jbHVkaW5nIHRoZSBwYXJlbnQgYXMgcmVxdWlyZWQgX2ZvciBhbGwgY2hpbGRyZW5fXG4gIC8vIGZpcnN0LCB3ZSBhdm9pZCB0aGlzIGlzc3VlXG4gIHJlc3VsdC5wdXNoKC4uLnJlc3RFeHBsb2RlZC5tYXAoc3VicGF0aCA9PiBzdWJwYXRoID09PSBcIlwiID8gcmVxdWlyZWQgOiBbcmVxdWlyZWQsIHN1YnBhdGhdLmpvaW4oXCIvXCIpKSk7XG4gIC8vIFRoZW4sIGlmIHRoaXMgaXMgYW4gb3B0aW9uYWwgdmFsdWUsIGFkZCBhbGwgY2hpbGQgdmVyc2lvbnMgd2l0aG91dFxuICBpZiAoaXNPcHRpb25hbCkge1xuICAgIHJlc3VsdC5wdXNoKC4uLnJlc3RFeHBsb2RlZCk7XG4gIH1cbiAgLy8gZm9yIGFic29sdXRlIHBhdGhzLCBlbnN1cmUgYC9gIGluc3RlYWQgb2YgZW1wdHkgc2VnbWVudFxuICByZXR1cm4gcmVzdWx0Lm1hcChleHBsb2RlZCA9PiBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpICYmIGV4cGxvZGVkID09PSBcIlwiID8gXCIvXCIgOiBleHBsb2RlZCk7XG59XG5mdW5jdGlvbiByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcykge1xuICBicmFuY2hlcy5zb3J0KChhLCBiKSA9PiBhLnNjb3JlICE9PSBiLnNjb3JlID8gYi5zY29yZSAtIGEuc2NvcmUgLy8gSGlnaGVyIHNjb3JlIGZpcnN0XG4gIDogY29tcGFyZUluZGV4ZXMoYS5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCksIGIucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpKSk7XG59XG5jb25zdCBwYXJhbVJlID0gL146W1xcdy1dKyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuZnVuY3Rpb24gY29tcHV0ZVNjb3JlKHBhdGgsIGluZGV4KSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBsZXQgaW5pdGlhbFNjb3JlID0gc2VnbWVudHMubGVuZ3RoO1xuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuICByZXR1cm4gc2VnbWVudHMuZmlsdGVyKHMgPT4gIWlzU3BsYXQocykpLnJlZHVjZSgoc2NvcmUsIHNlZ21lbnQpID0+IHNjb3JlICsgKHBhcmFtUmUudGVzdChzZWdtZW50KSA/IGR5bmFtaWNTZWdtZW50VmFsdWUgOiBzZWdtZW50ID09PSBcIlwiID8gZW1wdHlTZWdtZW50VmFsdWUgOiBzdGF0aWNTZWdtZW50VmFsdWUpLCBpbml0aWFsU2NvcmUpO1xufVxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgP1xuICAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOlxuICAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzTWV0YS5sZW5ndGg7ICsraSkge1xuICAgIGxldCBtZXRhID0gcm91dGVzTWV0YVtpXTtcbiAgICBsZXQgZW5kID0gaSA9PT0gcm91dGVzTWV0YS5sZW5ndGggLSAxO1xuICAgIGxldCByZW1haW5pbmdQYXRobmFtZSA9IG1hdGNoZWRQYXRobmFtZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKG1hdGNoZWRQYXRobmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoUGF0aCh7XG4gICAgICBwYXRoOiBtZXRhLnJlbGF0aXZlUGF0aCxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IG1ldGEuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVuZFxuICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICBPYmplY3QuYXNzaWduKG1hdGNoZWRQYXJhbXMsIG1hdGNoLnBhcmFtcyk7XG4gICAgbGV0IHJvdXRlID0gbWV0YS5yb3V0ZTtcbiAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgLy8gVE9ETzogQ2FuIHRoaXMgYXMgYmUgYXZvaWRlZD9cbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogbm9ybWFsaXplUGF0aG5hbWUoam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pKSxcbiAgICAgIHJvdXRlXG4gICAgfSk7XG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2dlbmVyYXRlLXBhdGhcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG4gIGxldCBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikgJiYgcGF0aCAhPT0gXCIqXCIgJiYgIXBhdGguZW5kc1dpdGgoXCIvKlwiKSkge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKTtcbiAgfVxuICAvLyBlbnN1cmUgYC9gIGlzIGFkZGVkIGF0IHRoZSBiZWdpbm5pbmcgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGVcbiAgY29uc3QgcHJlZml4ID0gcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiL1wiIDogXCJcIjtcbiAgY29uc3Qgc3RyaW5naWZ5ID0gcCA9PiBwID09IG51bGwgPyBcIlwiIDogdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyBwIDogU3RyaW5nKHApO1xuICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoL1xcLysvKS5tYXAoKHNlZ21lbnQsIGluZGV4LCBhcnJheSkgPT4ge1xuICAgIGNvbnN0IGlzTGFzdFNlZ21lbnQgPSBpbmRleCA9PT0gYXJyYXkubGVuZ3RoIC0gMTtcbiAgICAvLyBvbmx5IGFwcGx5IHRoZSBzcGxhdCBpZiBpdCdzIHRoZSBsYXN0IHNlZ21lbnRcbiAgICBpZiAoaXNMYXN0U2VnbWVudCAmJiBzZWdtZW50ID09PSBcIipcIikge1xuICAgICAgY29uc3Qgc3RhciA9IFwiKlwiO1xuICAgICAgLy8gQXBwbHkgdGhlIHNwbGF0XG4gICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtc1tzdGFyXSk7XG4gICAgfVxuICAgIGNvbnN0IGtleU1hdGNoID0gc2VnbWVudC5tYXRjaCgvXjooW1xcdy1dKykoXFw/PykkLyk7XG4gICAgaWYgKGtleU1hdGNoKSB7XG4gICAgICBjb25zdCBbLCBrZXksIG9wdGlvbmFsXSA9IGtleU1hdGNoO1xuICAgICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG4gICAgICBpbnZhcmlhbnQob3B0aW9uYWwgPT09IFwiP1wiIHx8IHBhcmFtICE9IG51bGwsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeShwYXJhbSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhbnkgb3B0aW9uYWwgbWFya2VycyBmcm9tIG9wdGlvbmFsIHN0YXRpYyBzZWdtZW50c1xuICAgIHJldHVybiBzZWdtZW50LnJlcGxhY2UoL1xcPyQvZywgXCJcIik7XG4gIH0pXG4gIC8vIFJlbW92ZSBlbXB0eSBzZWdtZW50c1xuICAuZmlsdGVyKHNlZ21lbnQgPT4gISFzZWdtZW50KTtcbiAgcmV0dXJuIHByZWZpeCArIHNlZ21lbnRzLmpvaW4oXCIvXCIpO1xufVxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1wYXRoXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuICBsZXQgW21hdGNoZXIsIGNvbXBpbGVkUGFyYW1zXSA9IGNvbXBpbGVQYXRoKHBhdHRlcm4ucGF0aCwgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLCBwYXR0ZXJuLmVuZCk7XG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IG1hdGNoWzBdO1xuICBsZXQgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgbGV0IGNhcHR1cmVHcm91cHMgPSBtYXRjaC5zbGljZSgxKTtcbiAgbGV0IHBhcmFtcyA9IGNvbXBpbGVkUGFyYW1zLnJlZHVjZSgobWVtbywgX3JlZiwgaW5kZXgpID0+IHtcbiAgICBsZXQge1xuICAgICAgcGFyYW1OYW1lLFxuICAgICAgaXNPcHRpb25hbFxuICAgIH0gPSBfcmVmO1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XTtcbiAgICBpZiAoaXNPcHRpb25hbCAmJiAhdmFsdWUpIHtcbiAgICAgIG1lbW9bcGFyYW1OYW1lXSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVtb1twYXJhbU5hbWVdID0gKHZhbHVlIHx8IFwiXCIpLnJlcGxhY2UoLyUyRi9nLCBcIi9cIik7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9LCB7fSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhdGhuYW1lOiBtYXRjaGVkUGF0aG5hbWUsXG4gICAgcGF0aG5hbWVCYXNlLFxuICAgIHBhdHRlcm5cbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG4gIGlmIChlbmQgPT09IHZvaWQgMCkge1xuICAgIGVuZCA9IHRydWU7XG4gIH1cbiAgd2FybmluZyhwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLCBcIlJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBcIiArIChcIlxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIgYmVjYXVzZSB0aGUgYCpgIGNoYXJhY3RlciBtdXN0IFwiKSArIFwiYWx3YXlzIGZvbGxvdyBhIGAvYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIFwiICsgKFwicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiLlwiKSk7XG4gIGxldCBwYXJhbXMgPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9IFwiXlwiICsgcGF0aC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAucmVwbGFjZSgvXlxcLyovLCBcIi9cIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgL1xuICAucmVwbGFjZSgvW1xcXFwuKiteJHt9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoL1xcLzooW1xcdy1dKykoXFw/KT8vZywgKF8sIHBhcmFtTmFtZSwgaXNPcHRpb25hbCkgPT4ge1xuICAgIHBhcmFtcy5wdXNoKHtcbiAgICAgIHBhcmFtTmFtZSxcbiAgICAgIGlzT3B0aW9uYWw6IGlzT3B0aW9uYWwgIT0gbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiBpc09wdGlvbmFsID8gXCIvPyhbXlxcXFwvXSspP1wiIDogXCIvKFteXFxcXC9dKylcIjtcbiAgfSk7XG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSkge1xuICAgIHBhcmFtcy5wdXNoKHtcbiAgICAgIHBhcmFtTmFtZTogXCIqXCJcbiAgICB9KTtcbiAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gXCIqXCIgfHwgcGF0aCA9PT0gXCIvKlwiID8gXCIoLiopJFwiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0XG4gICAgOiBcIig/OlxcXFwvKC4rKXxcXFxcLyopJFwiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1tcIipcIl1cbiAgfSBlbHNlIGlmIChlbmQpIHtcbiAgICAvLyBXaGVuIG1hdGNoaW5nIHRvIHRoZSBlbmQsIGlnbm9yZSB0cmFpbGluZyBzbGFzaGVzXG4gICAgcmVnZXhwU291cmNlICs9IFwiXFxcXC8qJFwiO1xuICB9IGVsc2UgaWYgKHBhdGggIT09IFwiXCIgJiYgcGF0aCAhPT0gXCIvXCIpIHtcbiAgICAvLyBJZiBvdXIgcGF0aCBpcyBub24tZW1wdHkgYW5kIGNvbnRhaW5zIGFueXRoaW5nIGJleW9uZCBhbiBpbml0aWFsIHNsYXNoLFxuICAgIC8vIHRoZW4gd2UgaGF2ZSBfc29tZV8gZm9ybSBvZiBwYXRoIGluIG91ciByZWdleCwgc28gd2Ugc2hvdWxkIGV4cGVjdCB0b1xuICAgIC8vIG1hdGNoIG9ubHkgaWYgd2UgZmluZCB0aGUgZW5kIG9mIHRoaXMgcGF0aCBzZWdtZW50LiAgTG9vayBmb3IgYW4gb3B0aW9uYWxcbiAgICAvLyBub24tY2FwdHVyZWQgdHJhaWxpbmcgc2xhc2ggKHRvIG1hdGNoIGEgcG9ydGlvbiBvZiB0aGUgVVJMKSBvciB0aGUgZW5kXG4gICAgLy8gb2YgdGhlIHBhdGggKGlmIHdlJ3ZlIG1hdGNoZWQgdG8gdGhlIGVuZCkuICBXZSB1c2VkIHRvIGRvIHRoaXMgd2l0aCBhXG4gICAgLy8gd29yZCBib3VuZGFyeSBidXQgdGhhdCBnaXZlcyBmYWxzZSBwb3NpdGl2ZXMgb24gcm91dGVzIGxpa2VcbiAgICAvLyAvdXNlci1wcmVmZXJlbmNlcyBzaW5jZSBgLWAgY291bnRzIGFzIGEgd29yZCBib3VuZGFyeS5cbiAgICByZWdleHBTb3VyY2UgKz0gXCIoPzooPz1cXFxcL3wkKSlcIjtcbiAgfSBlbHNlIDtcbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcbiAgcmV0dXJuIFttYXRjaGVyLCBwYXJhbXNdO1xufVxuZnVuY3Rpb24gZGVjb2RlUGF0aCh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiB2YWx1ZS5zcGxpdChcIi9cIikubWFwKHYgPT4gZGVjb2RlVVJJQ29tcG9uZW50KHYpLnJlcGxhY2UoL1xcLy9nLCBcIiUyRlwiKSkuam9pbihcIi9cIik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgVVJMIHBhdGggXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhIFwiICsgXCJtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHkgZHVlIHRvIGEgYmFkIHBlcmNlbnQgXCIgKyAoXCJlbmNvZGluZyAoXCIgKyBlcnJvciArIFwiKS5cIikpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gV2Ugd2FudCB0byBsZWF2ZSB0cmFpbGluZyBzbGFzaCBiZWhhdmlvciBpbiB0aGUgdXNlcidzIGNvbnRyb2wsIHNvIGlmIHRoZXlcbiAgLy8gc3BlY2lmeSBhIGJhc2VuYW1lIHdpdGggYSB0cmFpbGluZyBzbGFzaCwgd2Ugc2hvdWxkIHN1cHBvcnQgaXRcbiAgbGV0IHN0YXJ0SW5kZXggPSBiYXNlbmFtZS5lbmRzV2l0aChcIi9cIikgPyBiYXNlbmFtZS5sZW5ndGggLSAxIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBwYXRobmFtZS5zbGljZShzdGFydEluZGV4KSB8fCBcIi9cIjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL3Jlc29sdmUtcGF0aFxuICovXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUgOiByZXNvbHZlUGF0aG5hbWUodG9QYXRobmFtZSwgZnJvbVBhdGhuYW1lKSA6IGZyb21QYXRobmFtZTtcbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZShyZWxhdGl2ZVBhdGgsIGZyb21QYXRobmFtZSkge1xuICBsZXQgc2VnbWVudHMgPSBmcm9tUGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIGxldCByZWxhdGl2ZVNlZ21lbnRzID0gcmVsYXRpdmVQYXRoLnNwbGl0KFwiL1wiKTtcbiAgcmVsYXRpdmVTZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xuICAgIGlmIChzZWdtZW50ID09PSBcIi4uXCIpIHtcbiAgICAgIC8vIEtlZXAgdGhlIHJvb3QgXCJcIiBzZWdtZW50IHNvIHRoZSBwYXRobmFtZSBzdGFydHMgYXQgL1xuICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHNlZ21lbnRzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gXCIuXCIpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA+IDEgPyBzZWdtZW50cy5qb2luKFwiL1wiKSA6IFwiL1wiO1xufVxuZnVuY3Rpb24gZ2V0SW52YWxpZFBhdGhFcnJvcihjaGFyLCBmaWVsZCwgZGVzdCwgcGF0aCkge1xuICByZXR1cm4gXCJDYW5ub3QgaW5jbHVkZSBhICdcIiArIGNoYXIgKyBcIicgY2hhcmFjdGVyIGluIGEgbWFudWFsbHkgc3BlY2lmaWVkIFwiICsgKFwiYHRvLlwiICsgZmllbGQgKyBcImAgZmllbGQgW1wiICsgSlNPTi5zdHJpbmdpZnkocGF0aCkgKyBcIl0uICBQbGVhc2Ugc2VwYXJhdGUgaXQgb3V0IHRvIHRoZSBcIikgKyAoXCJgdG8uXCIgKyBkZXN0ICsgXCJgIGZpZWxkLiBBbHRlcm5hdGl2ZWx5IHlvdSBtYXkgcHJvdmlkZSB0aGUgZnVsbCBwYXRoIGFzIFwiKSArIFwiYSBzdHJpbmcgaW4gPExpbmsgdG89XFxcIi4uLlxcXCI+IGFuZCB0aGUgcm91dGVyIHdpbGwgcGFyc2UgaXQgZm9yIHlvdS5cIjtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqXG4gKiBXaGVuIHByb2Nlc3NpbmcgcmVsYXRpdmUgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIGlnbm9yZSBhbmNlc3RvciByb3V0ZXMgdGhhdFxuICogZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIHBhdGgsIHN1Y2ggdGhhdCBpbmRleC9wYXRobGVzcyBsYXlvdXQgcm91dGVzIGRvbid0XG4gKiBpbnRlcmZlcmUuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gbW92aW5nIGEgcm91dGUgZWxlbWVudCBpbnRvIGFuIGluZGV4IHJvdXRlIGFuZC9vciBhXG4gKiBwYXRobGVzcyBsYXlvdXQgcm91dGUsIHJlbGF0aXZlIGxpbmsgYmVoYXZpb3IgY29udGFpbmVkIHdpdGhpbiBzaG91bGQgc3RheVxuICogdGhlIHNhbWUuICBCb3RoIG9mIHRoZSBmb2xsb3dpbmcgZXhhbXBsZXMgc2hvdWxkIGxpbmsgYmFjayB0byB0aGUgcm9vdDpcbiAqXG4gKiAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICogICAgIDxSb3V0ZSBwYXRoPVwiYWNjb3VudHNcIiBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9PlxuICogICA8L1JvdXRlPlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiPlxuICogICAgICAgPFJvdXRlIGVsZW1lbnQ9ezxBY2NvdW50c0xheW91dCAvPn0+ICAgICAgIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICAgIDxSb3V0ZSBpbmRleCBlbGVtZW50PXs8TGluayB0bz1cIi4uXCJ9IC8+ICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZVxuICogICAgICAgPC9Sb3V0ZVxuICogICAgIDwvUm91dGU+XG4gKiAgIDwvUm91dGU+XG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIG1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IGluZGV4ID09PSAwIHx8IG1hdGNoLnJvdXRlLnBhdGggJiYgbWF0Y2gucm91dGUucGF0aC5sZW5ndGggPiAwKTtcbn1cbi8vIFJldHVybiB0aGUgYXJyYXkgb2YgcGF0aG5hbWVzIGZvciB0aGUgY3VycmVudCByb3V0ZSBtYXRjaGVzIC0gdXNlZCB0b1xuLy8gZ2VuZXJhdGUgdGhlIHJvdXRlUGF0aG5hbWVzIGlucHV0IGZvciByZXNvbHZlVG8oKVxuZnVuY3Rpb24gZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgLy8gV2hlbiB2N19yZWxhdGl2ZVNwbGF0UGF0aCBpcyBlbmFibGVkLCB1c2UgdGhlIGZ1bGwgcGF0aG5hbWUgZm9yIHRoZSBsZWFmXG4gIC8vIG1hdGNoIHNvIHdlIGluY2x1ZGUgc3BsYXQgdmFsdWVzIGZvciBcIi5cIiBsaW5rcy4gIFNlZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzExMDUyI2lzc3VlY29tbWVudC0xODM2NTg5MzI5XG4gIGlmICh2N19yZWxhdGl2ZVNwbGF0UGF0aCkge1xuICAgIHJldHVybiBwYXRoTWF0Y2hlcy5tYXAoKG1hdGNoLCBpZHgpID0+IGlkeCA9PT0gbWF0Y2hlcy5sZW5ndGggLSAxID8gbWF0Y2gucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZUJhc2UpO1xuICB9XG4gIHJldHVybiBwYXRoTWF0Y2hlcy5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSwgaXNQYXRoUmVsYXRpdmUpIHtcbiAgaWYgKGlzUGF0aFJlbGF0aXZlID09PSB2b2lkIDApIHtcbiAgICBpc1BhdGhSZWxhdGl2ZSA9IGZhbHNlO1xuICB9XG4gIGxldCB0bztcbiAgaWYgKHR5cGVvZiB0b0FyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRvID0gcGFyc2VQYXRoKHRvQXJnKTtcbiAgfSBlbHNlIHtcbiAgICB0byA9IF9leHRlbmRzKHt9LCB0b0FyZyk7XG4gICAgaW52YXJpYW50KCF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCI/XCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiP1wiLCBcInBhdGhuYW1lXCIsIFwic2VhcmNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCIjXCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInBhdGhuYW1lXCIsIFwiaGFzaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8uc2VhcmNoIHx8ICF0by5zZWFyY2guaW5jbHVkZXMoXCIjXCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInNlYXJjaFwiLCBcImhhc2hcIiwgdG8pKTtcbiAgfVxuICBsZXQgaXNFbXB0eVBhdGggPSB0b0FyZyA9PT0gXCJcIiB8fCB0by5wYXRobmFtZSA9PT0gXCJcIjtcbiAgbGV0IHRvUGF0aG5hbWUgPSBpc0VtcHR5UGF0aCA/IFwiL1wiIDogdG8ucGF0aG5hbWU7XG4gIGxldCBmcm9tO1xuICAvLyBSb3V0aW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHBhdGhuYW1lIGlmIGV4cGxpY2l0bHkgcmVxdWVzdGVkLlxuICAvL1xuICAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG4gIGlmICh0b1BhdGhuYW1lID09IG51bGwpIHtcbiAgICBmcm9tID0gbG9jYXRpb25QYXRobmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcm91dGVQYXRobmFtZUluZGV4ID0gcm91dGVQYXRobmFtZXMubGVuZ3RoIC0gMTtcbiAgICAvLyBXaXRoIHJlbGF0aXZlPVwicm91dGVcIiAodGhlIGRlZmF1bHQpLCBlYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFuc1xuICAgIC8vIFwiZ28gdXAgb25lIHJvdXRlXCIgaW5zdGVhZCBvZiBcImdvIHVwIG9uZSBVUkwgc2VnbWVudFwiLiAgVGhpcyBpcyBhIGtleVxuICAgIC8vIGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGEgbWFqb3IgcmVhc29uIHdlIGNhbGwgdGhpcyBhXG4gICAgLy8gXCJ0b1wiIHZhbHVlIGluc3RlYWQgb2YgYSBcImhyZWZcIi5cbiAgICBpZiAoIWlzUGF0aFJlbGF0aXZlICYmIHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuICAgICAgdG8ucGF0aG5hbWUgPSB0b1NlZ21lbnRzLmpvaW4oXCIvXCIpO1xuICAgIH1cbiAgICBmcm9tID0gcm91dGVQYXRobmFtZUluZGV4ID49IDAgPyByb3V0ZVBhdGhuYW1lc1tyb3V0ZVBhdGhuYW1lSW5kZXhdIDogXCIvXCI7XG4gIH1cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7XG4gIC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIFwidG9cIiBoYWQgb25lXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPSB0b1BhdGhuYW1lICYmIHRvUGF0aG5hbWUgIT09IFwiL1wiICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICAvLyBPciBpZiB0aGlzIHdhcyBhIGxpbmsgdG8gdGhlIGN1cnJlbnQgcGF0aCB3aGljaCBoYXMgYSB0cmFpbGluZyBzbGFzaFxuICBsZXQgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2ggPSAoaXNFbXB0eVBhdGggfHwgdG9QYXRobmFtZSA9PT0gXCIuXCIpICYmIGxvY2F0aW9uUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICBpZiAoIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpICYmIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lIDogdG8ucGF0aG5hbWU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGpvaW5QYXRocyA9IHBhdGhzID0+IHBhdGhzLmpvaW4oXCIvXCIpLnJlcGxhY2UoL1xcL1xcLysvZywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5jb25zdCBub3JtYWxpemVQYXRobmFtZSA9IHBhdGhuYW1lID0+IHBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZVNlYXJjaCA9IHNlYXJjaCA9PiAhc2VhcmNoIHx8IHNlYXJjaCA9PT0gXCI/XCIgPyBcIlwiIDogc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZUhhc2ggPSBoYXNoID0+ICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuLyoqXG4gKiBUaGlzIGlzIGEgc2hvcnRjdXQgZm9yIGNyZWF0aW5nIGBhcHBsaWNhdGlvbi9qc29uYCByZXNwb25zZXMuIENvbnZlcnRzIGBkYXRhYFxuICogdG8gSlNPTiBhbmQgc2V0cyB0aGUgYENvbnRlbnQtVHlwZWAgaGVhZGVyLlxuICovXG5jb25zdCBqc29uID0gZnVuY3Rpb24ganNvbihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGlmICghaGVhZGVycy5oYXMoXCJDb250ZW50LVR5cGVcIikpIHtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbmNsYXNzIEFib3J0ZWREZWZlcnJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige31cbmNsYXNzIERlZmVycmVkRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIHJlc3BvbnNlSW5pdCkge1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQgPSBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLmRlZmVycmVkS2V5cyA9IFtdO1xuICAgIGludmFyaWFudChkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCBcImRlZmVyKCkgb25seSBhY2NlcHRzIHBsYWluIG9iamVjdHNcIik7XG4gICAgLy8gU2V0IHVwIGFuIEFib3J0Q29udHJvbGxlciArIFByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCB0byBleGl0IGVhcmx5XG4gICAgLy8gY2FuY2VsbGF0aW9uXG4gICAgbGV0IHJlamVjdDtcbiAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IG9uQWJvcnQgPSAoKSA9PiByZWplY3QobmV3IEFib3J0ZWREZWZlcnJlZEVycm9yKFwiRGVmZXJyZWQgZGF0YSBhYm9ydGVkXCIpKTtcbiAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwgPSAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmRhdGEgPSBPYmplY3QuZW50cmllcyhkYXRhKS5yZWR1Y2UoKGFjYywgX3JlZjIpID0+IHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMjtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICBba2V5XTogdGhpcy50cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBBbGwgaW5jb21pbmcgdmFsdWVzIHdlcmUgcmVzb2x2ZWRcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cbiAgICB0aGlzLmluaXQgPSByZXNwb25zZUluaXQ7XG4gIH1cbiAgdHJhY2tQcm9taXNlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHRoaXMuZGVmZXJyZWRLZXlzLnB1c2goa2V5KTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmFkZChrZXkpO1xuICAgIC8vIFdlIHN0b3JlIGEgbGl0dGxlIHdyYXBwZXIgcHJvbWlzZSB0aGF0IHdpbGwgYmUgZXh0ZW5kZWQgd2l0aFxuICAgIC8vIF9kYXRhL19lcnJvciBwcm9wcyB1cG9uIHJlc29sdmUvcmVqZWN0XG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJhY2UoW3ZhbHVlLCB0aGlzLmFib3J0UHJvbWlzZV0pLnRoZW4oZGF0YSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgdW5kZWZpbmVkLCBkYXRhKSwgZXJyb3IgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yKSk7XG4gICAgLy8gUmVnaXN0ZXIgcmVqZWN0aW9uIGxpc3RlbmVycyB0byBhdm9pZCB1bmNhdWdodCBwcm9taXNlIHJlamVjdGlvbnMgb25cbiAgICAvLyBlcnJvcnMgb3IgYWJvcnRlZCBkZWZlcnJlZCB2YWx1ZXNcbiAgICBwcm9taXNlLmNhdGNoKCgpID0+IHt9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuICBvblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoa2V5KTtcbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBOb3RoaW5nIGxlZnQgdG8gYWJvcnQhXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG4gICAgLy8gSWYgdGhlIHByb21pc2Ugd2FzIHJlc29sdmVkL3JlamVjdGVkIHdpdGggdW5kZWZpbmVkLCB3ZSdsbCB0aHJvdyBhbiBlcnJvciBhcyB5b3VcbiAgICAvLyBzaG91bGQgYWx3YXlzIHJlc29sdmUgd2l0aCBhIHZhbHVlIG9yIG51bGxcbiAgICBpZiAoZXJyb3IgPT09IHVuZGVmaW5lZCAmJiBkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCB1bmRlZmluZWRFcnJvciA9IG5ldyBFcnJvcihcIkRlZmVycmVkIGRhdGEgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmVzb2x2ZWQvcmVqZWN0ZWQgd2l0aCBgdW5kZWZpbmVkYCwgXCIgKyBcInlvdSBtdXN0IHJlc29sdmUvcmVqZWN0IHdpdGggYSB2YWx1ZSBvciBgbnVsbGAuXCIpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB1bmRlZmluZWRFcnJvclxuICAgICAgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodW5kZWZpbmVkRXJyb3IpO1xuICAgIH1cbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgIH0pO1xuICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICBlbWl0KGFib3J0ZWQsIHNldHRsZWRLZXkpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKGFib3J0ZWQsIHNldHRsZWRLZXkpKTtcbiAgfVxuICBzdWJzY3JpYmUoZm4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldC5mb3JFYWNoKCh2LCBrKSA9PiB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrKSk7XG4gICAgdGhpcy5lbWl0KHRydWUpO1xuICB9XG4gIGFzeW5jIHJlc29sdmVEYXRhKHNpZ25hbCkge1xuICAgIGxldCBhYm9ydGVkID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcbiAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICBhYm9ydGVkID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0ZWQgPT4ge1xuICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICAgICAgaWYgKGFib3J0ZWQgfHwgdGhpcy5kb25lKSB7XG4gICAgICAgICAgICByZXNvbHZlKGFib3J0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cbiAgZ2V0IGRvbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ0tleXNTZXQuc2l6ZSA9PT0gMDtcbiAgfVxuICBnZXQgdW53cmFwcGVkRGF0YSgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5kYXRhICE9PSBudWxsICYmIHRoaXMuZG9uZSwgXCJDYW4gb25seSB1bndyYXAgZGF0YSBvbiBpbml0aWFsaXplZCBhbmQgc2V0dGxlZCBkZWZlcnJlZHNcIik7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMuZGF0YSkucmVkdWNlKChhY2MsIF9yZWYzKSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjM7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW2tleV06IHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKVxuICAgICAgfSk7XG4gICAgfSwge30pO1xuICB9XG4gIGdldCBwZW5kaW5nS2V5cygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnBlbmRpbmdLZXlzU2V0KTtcbiAgfVxufVxuZnVuY3Rpb24gaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlICYmIHZhbHVlLl90cmFja2VkID09PSB0cnVlO1xufVxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgaWYgKCFpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUuX2Vycm9yKSB7XG4gICAgdGhyb3cgdmFsdWUuX2Vycm9yO1xuICB9XG4gIHJldHVybiB2YWx1ZS5fZGF0YTtcbn1cbmNvbnN0IGRlZmVyID0gZnVuY3Rpb24gZGVmZXIoZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBzdGF0dXM6IGluaXRcbiAgfSA6IGluaXQ7XG4gIHJldHVybiBuZXcgRGVmZXJyZWREYXRhKGRhdGEsIHJlc3BvbnNlSW5pdCk7XG59O1xuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlLiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuY29uc3QgcmVkaXJlY3QgPSBmdW5jdGlvbiByZWRpcmVjdCh1cmwsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSAzMDI7XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG4gIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmVzcG9uc2VJbml0ID0ge1xuICAgICAgc3RhdHVzOiByZXNwb25zZUluaXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiByZXNwb25zZUluaXQuc3RhdHVzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmVzcG9uc2VJbml0LnN0YXR1cyA9IDMwMjtcbiAgfVxuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcbiAgaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCB1cmwpO1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIF9leHRlbmRzKHt9LCByZXNwb25zZUluaXQsIHtcbiAgICBoZWFkZXJzXG4gIH0pKTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UgdGhhdCB3aWxsIGZvcmNlIGEgZG9jdW1lbnQgcmVsb2FkIHRvIHRoZSBuZXcgbG9jYXRpb24uXG4gKiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuY29uc3QgcmVkaXJlY3REb2N1bWVudCA9ICh1cmwsIGluaXQpID0+IHtcbiAgbGV0IHJlc3BvbnNlID0gcmVkaXJlY3QodXJsLCBpbml0KTtcbiAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXCJYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFwiLCBcInRydWVcIik7XG4gIHJldHVybiByZXNwb25zZTtcbn07XG4vKipcbiAqIEBwcml2YXRlXG4gKiBVdGlsaXR5IGNsYXNzIHdlIHVzZSB0byBob2xkIGF1dG8tdW53cmFwcGVkIDR4eC81eHggUmVzcG9uc2UgYm9kaWVzXG4gKlxuICogV2UgZG9uJ3QgZXhwb3J0IHRoZSBjbGFzcyBmb3IgcHVibGljIHVzZSBzaW5jZSBpdCdzIGFuIGltcGxlbWVudGF0aW9uXG4gKiBkZXRhaWwsIGJ1dCB3ZSBleHBvcnQgdGhlIGludGVyZmFjZSBhYm92ZSBzbyBmb2xrcyBjYW4gYnVpbGQgdGhlaXIgb3duXG4gKiBhYnN0cmFjdGlvbnMgYXJvdW5kIGluc3RhbmNlcyB2aWEgaXNSb3V0ZUVycm9yUmVzcG9uc2UoKVxuICovXG5jbGFzcyBFcnJvclJlc3BvbnNlSW1wbCB7XG4gIGNvbnN0cnVjdG9yKHN0YXR1cywgc3RhdHVzVGV4dCwgZGF0YSwgaW50ZXJuYWwpIHtcbiAgICBpZiAoaW50ZXJuYWwgPT09IHZvaWQgMCkge1xuICAgICAgaW50ZXJuYWwgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLmVycm9yID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVycm9yIGlzIGFuIEVycm9yUmVzcG9uc2UgZ2VuZXJhdGVkIGZyb20gYSA0eHgvNXh4XG4gKiBSZXNwb25zZSB0aHJvd24gZnJvbSBhbiBhY3Rpb24vbG9hZGVyXG4gKi9cbmZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSB7XG4gIHJldHVybiBlcnJvciAhPSBudWxsICYmIHR5cGVvZiBlcnJvci5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVycm9yLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIGVycm9yLmludGVybmFsID09PSBcImJvb2xlYW5cIiAmJiBcImRhdGFcIiBpbiBlcnJvcjtcbn1cblxuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIgPSBbXCJwb3N0XCIsIFwicHV0XCIsIFwicGF0Y2hcIiwgXCJkZWxldGVcIl07XG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kcyA9IG5ldyBTZXQodmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIpO1xuY29uc3QgdmFsaWRSZXF1ZXN0TWV0aG9kc0FyciA9IFtcImdldFwiLCAuLi52YWxpZE11dGF0aW9uTWV0aG9kc0Fycl07XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzID0gbmV3IFNldCh2YWxpZFJlcXVlc3RNZXRob2RzQXJyKTtcbmNvbnN0IHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuY29uc3QgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzA3LCAzMDhdKTtcbmNvbnN0IElETEVfTkFWSUdBVElPTiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBsb2NhdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0ZFVENIRVIgPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAganNvbjogdW5kZWZpbmVkLFxuICB0ZXh0OiB1bmRlZmluZWRcbn07XG5jb25zdCBJRExFX0JMT0NLRVIgPSB7XG4gIHN0YXRlOiBcInVuYmxvY2tlZFwiLFxuICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gIHJlc2V0OiB1bmRlZmluZWQsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWRcbn07XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG5jb25zdCBkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgaGFzRXJyb3JCb3VuZGFyeTogQm9vbGVhbihyb3V0ZS5oYXNFcnJvckJvdW5kYXJ5KVxufSk7XG5jb25zdCBUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSA9IFwicmVtaXgtcm91dGVyLXRyYW5zaXRpb25zXCI7XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlUm91dGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBDcmVhdGUgYSByb3V0ZXIgYW5kIGxpc3RlbiB0byBoaXN0b3J5IFBPUCBuYXZpZ2F0aW9uc1xuICovXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXIoaW5pdCkge1xuICBjb25zdCByb3V0ZXJXaW5kb3cgPSBpbml0LndpbmRvdyA/IGluaXQud2luZG93IDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbiAgY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHJvdXRlcldpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygcm91dGVyV2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgY29uc3QgaXNTZXJ2ZXIgPSAhaXNCcm93c2VyO1xuICBpbnZhcmlhbnQoaW5pdC5yb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVSb3V0ZXJcIik7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM7XG4gIGlmIChpbml0Lm1hcFJvdXRlUHJvcGVydGllcykge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGluaXQubWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9IGVsc2UgaWYgKGluaXQuZGV0ZWN0RXJyb3JCb3VuZGFyeSkge1xuICAgIC8vIElmIHRoZXkgYXJlIHN0aWxsIHVzaW5nIHRoZSBkZXByZWNhdGVkIHZlcnNpb24sIHdyYXAgaXQgd2l0aCB0aGUgbmV3IEFQSVxuICAgIGxldCBkZXRlY3RFcnJvckJvdW5kYXJ5ID0gaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5O1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IHJvdXRlID0+ICh7XG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBkZXRlY3RFcnJvckJvdW5kYXJ5KHJvdXRlKVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH1cbiAgLy8gUm91dGVzIGtleWVkIGJ5IElEXG4gIGxldCBtYW5pZmVzdCA9IHt9O1xuICAvLyBSb3V0ZXMgaW4gdHJlZSBmb3JtYXQgZm9yIG1hdGNoaW5nXG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhpbml0LnJvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgbGV0IGluRmxpZ2h0RGF0YVJvdXRlcztcbiAgbGV0IGJhc2VuYW1lID0gaW5pdC5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgbGV0IGRhdGFTdHJhdGVneUltcGwgPSBpbml0LnVuc3RhYmxlX2RhdGFTdHJhdGVneSB8fCBkZWZhdWx0RGF0YVN0cmF0ZWd5O1xuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfZmV0Y2hlclBlcnNpc3Q6IGZhbHNlLFxuICAgIHY3X25vcm1hbGl6ZUZvcm1NZXRob2Q6IGZhbHNlLFxuICAgIHY3X3BhcnRpYWxIeWRyYXRpb246IGZhbHNlLFxuICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogZmFsc2UsXG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlLFxuICAgIHVuc3RhYmxlX3NraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbjogZmFsc2VcbiAgfSwgaW5pdC5mdXR1cmUpO1xuICAvLyBDbGVhbnVwIGZ1bmN0aW9uIGZvciBoaXN0b3J5XG4gIGxldCB1bmxpc3Rlbkhpc3RvcnkgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9ucyB0byBjYWxsIG9uIGFsbCBzdGF0ZSBjaGFuZ2VzXG4gIGxldCBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBvYmplY3QgdG8gaG9sZCBzY3JvbGwgcmVzdG9yYXRpb24gbG9jYXRpb25zIGR1cmluZyByb3V0aW5nXG4gIGxldCBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IHNjcm9sbCByZXN0b3JhdGlvbiBrZXlzXG4gIGxldCBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG4gIGxldCBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gIC8vIE9uZS10aW1lIGZsYWcgdG8gY29udHJvbCB0aGUgaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLiAgQmVjYXVzZVxuICAvLyB3ZSBkb24ndCBnZXQgdGhlIHNhdmVkIHBvc2l0aW9ucyBmcm9tIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB1bnRpbCBfYWZ0ZXJfXG4gIC8vIHRoZSBpbml0aWFsIHJlbmRlciwgd2UgbmVlZCB0byBtYW51YWxseSB0cmlnZ2VyIGEgc2VwYXJhdGUgdXBkYXRlU3RhdGUgdG9cbiAgLy8gc2VuZCBhbG9uZyB0aGUgcmVzdG9yZVNjcm9sbFBvc2l0aW9uXG4gIC8vIFNldCB0byB0cnVlIGlmIHdlIGhhdmUgYGh5ZHJhdGlvbkRhdGFgIHNpbmNlIHdlIGFzc3VtZSB3ZSB3ZXJlIFNTUidkIGFuZCB0aGF0XG4gIC8vIFNTUiBkaWQgdGhlIGluaXRpYWwgc2Nyb2xsIHJlc3RvcmF0aW9uLlxuICBsZXQgaW5pdGlhbFNjcm9sbFJlc3RvcmVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIGxldCBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGluaXQuaGlzdG9yeS5sb2NhdGlvbiwgYmFzZW5hbWUpO1xuICBsZXQgaW5pdGlhbEVycm9ycyA9IG51bGw7XG4gIGlmIChpbml0aWFsTWF0Y2hlcyA9PSBudWxsKSB7XG4gICAgLy8gSWYgd2UgZG8gbm90IG1hdGNoIGEgdXNlci1wcm92aWRlZC1yb3V0ZSwgZmFsbCBiYWNrIHRvIHRoZSByb290XG4gICAgLy8gdG8gYWxsb3cgdGhlIGVycm9yIGJvdW5kYXJ5IHRvIHRha2Ugb3ZlclxuICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICBwYXRobmFtZTogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgfSk7XG4gICAgbGV0IHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICByb3V0ZVxuICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgIGluaXRpYWxNYXRjaGVzID0gbWF0Y2hlcztcbiAgICBpbml0aWFsRXJyb3JzID0ge1xuICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICB9O1xuICB9XG4gIGxldCBpbml0aWFsaXplZDtcbiAgbGV0IGhhc0xhenlSb3V0ZXMgPSBpbml0aWFsTWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5sYXp5KTtcbiAgbGV0IGhhc0xvYWRlcnMgPSBpbml0aWFsTWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5sb2FkZXIpO1xuICBpZiAoaGFzTGF6eVJvdXRlcykge1xuICAgIC8vIEFsbCBpbml0aWFsTWF0Y2hlcyBuZWVkIHRvIGJlIGxvYWRlZCBiZWZvcmUgd2UncmUgcmVhZHkuICBJZiB3ZSBoYXZlIGxhenlcbiAgICAvLyBmdW5jdGlvbnMgYXJvdW5kIHN0aWxsIHRoZW4gd2UnbGwgbmVlZCB0byBydW4gdGhlbSBpbiBpbml0aWFsaXplKClcbiAgICBpbml0aWFsaXplZCA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKCFoYXNMb2FkZXJzKSB7XG4gICAgLy8gSWYgd2UndmUgZ290IG5vIGxvYWRlcnMgdG8gcnVuLCB0aGVuIHdlJ3JlIGdvb2QgdG8gZ29cbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gIH0gZWxzZSBpZiAoZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24pIHtcbiAgICAvLyBJZiBwYXJ0aWFsIGh5ZHJhdGlvbiBpcyBlbmFibGVkLCB3ZSdyZSBpbml0aWFsaXplZCBzbyBsb25nIGFzIHdlIHdlcmVcbiAgICAvLyBwcm92aWRlZCB3aXRoIGh5ZHJhdGlvbkRhdGEgZm9yIGV2ZXJ5IHJvdXRlIHdpdGggYSBsb2FkZXIsIGFuZCBubyBsb2FkZXJzXG4gICAgLy8gd2VyZSBtYXJrZWQgZm9yIGV4cGxpY2l0IGh5ZHJhdGlvblxuICAgIGxldCBsb2FkZXJEYXRhID0gaW5pdC5oeWRyYXRpb25EYXRhID8gaW5pdC5oeWRyYXRpb25EYXRhLmxvYWRlckRhdGEgOiBudWxsO1xuICAgIGxldCBlcnJvcnMgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgPyBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIDogbnVsbDtcbiAgICBsZXQgaXNSb3V0ZUluaXRpYWxpemVkID0gbSA9PiB7XG4gICAgICAvLyBObyBsb2FkZXIsIG5vdGhpbmcgdG8gaW5pdGlhbGl6ZVxuICAgICAgaWYgKCFtLnJvdXRlLmxvYWRlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIEV4cGxpY2l0bHkgb3B0aW5nLWluIHRvIHJ1bm5pbmcgb24gaHlkcmF0aW9uXG4gICAgICBpZiAodHlwZW9mIG0ucm91dGUubG9hZGVyID09PSBcImZ1bmN0aW9uXCIgJiYgbS5yb3V0ZS5sb2FkZXIuaHlkcmF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBPdGhlcndpc2UsIGluaXRpYWxpemVkIGlmIGh5ZHJhdGVkIHdpdGggZGF0YSBvciBhbiBlcnJvclxuICAgICAgcmV0dXJuIGxvYWRlckRhdGEgJiYgbG9hZGVyRGF0YVttLnJvdXRlLmlkXSAhPT0gdW5kZWZpbmVkIHx8IGVycm9ycyAmJiBlcnJvcnNbbS5yb3V0ZS5pZF0gIT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIC8vIElmIGVycm9ycyBleGlzdCwgZG9uJ3QgY29uc2lkZXIgcm91dGVzIGJlbG93IHRoZSBib3VuZGFyeVxuICAgIGlmIChlcnJvcnMpIHtcbiAgICAgIGxldCBpZHggPSBpbml0aWFsTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBlcnJvcnNbbS5yb3V0ZS5pZF0gIT09IHVuZGVmaW5lZCk7XG4gICAgICBpbml0aWFsaXplZCA9IGluaXRpYWxNYXRjaGVzLnNsaWNlKDAsIGlkeCArIDEpLmV2ZXJ5KGlzUm91dGVJbml0aWFsaXplZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXRpYWxpemVkID0gaW5pdGlhbE1hdGNoZXMuZXZlcnkoaXNSb3V0ZUluaXRpYWxpemVkKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2l0aG91dCBwYXJ0aWFsIGh5ZHJhdGlvbiAtIHdlJ3JlIGluaXRpYWxpemVkIGlmIHdlIHdlcmUgcHJvdmlkZWQgYW55XG4gICAgLy8gaHlkcmF0aW9uRGF0YSAtIHdoaWNoIGlzIGV4cGVjdGVkIHRvIGJlIGNvbXBsZXRlXG4gICAgaW5pdGlhbGl6ZWQgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcbiAgfVxuICBsZXQgcm91dGVyO1xuICBsZXQgc3RhdGUgPSB7XG4gICAgaGlzdG9yeUFjdGlvbjogaW5pdC5oaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLFxuICAgIG1hdGNoZXM6IGluaXRpYWxNYXRjaGVzLFxuICAgIGluaXRpYWxpemVkLFxuICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAvLyBEb24ndCByZXN0b3JlIG9uIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBpZiB3ZSB3ZXJlIFNTUidkXG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbCA/IGZhbHNlIDogbnVsbCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IGZhbHNlLFxuICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgbG9hZGVyRGF0YTogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5sb2FkZXJEYXRhIHx8IHt9LFxuICAgIGFjdGlvbkRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuYWN0aW9uRGF0YSB8fCBudWxsLFxuICAgIGVycm9yczogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5lcnJvcnMgfHwgaW5pdGlhbEVycm9ycyxcbiAgICBmZXRjaGVyczogbmV3IE1hcCgpLFxuICAgIGJsb2NrZXJzOiBuZXcgTWFwKClcbiAgfTtcbiAgLy8gLS0gU3RhdGVmdWwgaW50ZXJuYWwgdmFyaWFibGVzIHRvIG1hbmFnZSBuYXZpZ2F0aW9ucyAtLVxuICAvLyBDdXJyZW50IG5hdmlnYXRpb24gaW4gcHJvZ3Jlc3MgKHRvIGJlIGNvbW1pdHRlZCBpbiBjb21wbGV0ZU5hdmlnYXRpb24pXG4gIGxldCBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gcHJldmVudCB0aGUgc2Nyb2xsIHJlc2V0IGlmIHNjcm9sbCBjYW5ub3RcbiAgLy8gYmUgcmVzdG9yZWQ/XG4gIGxldCBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG4gIC8vIEFib3J0Q29udHJvbGxlciBmb3IgdGhlIGFjdGl2ZSBuYXZpZ2F0aW9uXG4gIGxldCBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXI7XG4gIC8vIFNob3VsZCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGVuYWJsZSBkb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uP1xuICBsZXQgcGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCA9IGZhbHNlO1xuICAvLyBTdG9yZSBhcHBsaWVkIHZpZXcgdHJhbnNpdGlvbnMgc28gd2UgY2FuIGFwcGx5IHRoZW0gb24gUE9QXG4gIGxldCBhcHBsaWVkVmlld1RyYW5zaXRpb25zID0gbmV3IE1hcCgpO1xuICAvLyBDbGVhbnVwIGZ1bmN0aW9uIGZvciBwZXJzaXN0aW5nIGFwcGxpZWQgdHJhbnNpdGlvbnMgdG8gc2Vzc2lvblN0b3JhZ2VcbiAgbGV0IHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lciA9IG51bGw7XG4gIC8vIFdlIHVzZSB0aGlzIHRvIGF2b2lkIHRvdWNoaW5nIGhpc3RvcnkgaW4gY29tcGxldGVOYXZpZ2F0aW9uIGlmIGFcbiAgLy8gcmV2YWxpZGF0aW9uIGlzIGVudGlyZWx5IHVuaW50ZXJydXB0ZWRcbiAgbGV0IGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlO1xuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBmbGFnIHRvIGZvcmNlIHJldmFsaWRhdGlvbiBvZiBhbGwgbG9hZGVyczpcbiAgLy8gIC0gc3VibWlzc2lvbnMgKGNvbXBsZXRlZCBvciBpbnRlcnJ1cHRlZClcbiAgLy8gIC0gdXNlUmV2YWxpZGF0b3IoKVxuICAvLyAgLSBYLVJlbWl4LVJldmFsaWRhdGUgKGZyb20gcmVkaXJlY3QpXG4gIGxldCBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGFycmF5IHRvIGNhcHR1cmUgcm91dGVzIHRoYXQgcmVxdWlyZSByZXZhbGlkYXRpb24gZHVlXG4gIC8vIHRvIGEgY2FuY2VsbGVkIGRlZmVycmVkIG9uIGFjdGlvbiBzdWJtaXNzaW9uXG4gIGxldCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdO1xuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIGZldGNoZXIgbG9hZHMgdGhhdCB3ZXJlIGNhbmNlbGxlZCBieSBhblxuICAvLyBhY3Rpb24gbmF2aWdhdGlvbiBhbmQgcmVxdWlyZSByZXZhbGlkYXRpb25cbiAgbGV0IGNhbmNlbGxlZEZldGNoZXJMb2FkcyA9IFtdO1xuICAvLyBBYm9ydENvbnRyb2xsZXJzIGZvciBhbnkgaW4tZmxpZ2h0IGZldGNoZXJzXG4gIGxldCBmZXRjaENvbnRyb2xsZXJzID0gbmV3IE1hcCgpO1xuICAvLyBUcmFjayBsb2FkcyBiYXNlZCBvbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBzdGFydGVkXG4gIGxldCBpbmNyZW1lbnRpbmdMb2FkSWQgPSAwO1xuICAvLyBUcmFjayB0aGUgb3V0c3RhbmRpbmcgcGVuZGluZyBuYXZpZ2F0aW9uIGRhdGEgbG9hZCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0XG4gIC8vIHRoZSBnbG9iYWxseSBpbmNyZW1lbnRpbmcgbG9hZCB3aGVuIGEgZmV0Y2hlciBsb2FkIGxhbmRzIGFmdGVyIGEgY29tcGxldGVkXG4gIC8vIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gLTE7XG4gIC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIGRhdGEgcmVsb2FkcyBhcyBhIHJlc3VsdCBvZiB0aGVpciBhY3Rpb25zXG4gIGxldCBmZXRjaFJlbG9hZElkcyA9IG5ldyBNYXAoKTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgcmVkaXJlY3QgbmF2aWdhdGlvbnNcbiAgbGV0IGZldGNoUmVkaXJlY3RJZHMgPSBuZXcgU2V0KCk7XG4gIC8vIE1vc3QgcmVjZW50IGhyZWYvbWF0Y2ggZm9yIGZldGNoZXIubG9hZCBjYWxscyBmb3IgZmV0Y2hlcnNcbiAgbGV0IGZldGNoTG9hZE1hdGNoZXMgPSBuZXcgTWFwKCk7XG4gIC8vIFJlZi1jb3VudCBtb3VudGVkIGZldGNoZXJzIHNvIHdlIGtub3cgd2hlbiBpdCdzIG9rIHRvIGNsZWFuIHRoZW0gdXBcbiAgbGV0IGFjdGl2ZUZldGNoZXJzID0gbmV3IE1hcCgpO1xuICAvLyBGZXRjaGVycyB0aGF0IGhhdmUgcmVxdWVzdGVkIGEgZGVsZXRlIHdoZW4gdXNpbmcgdjdfZmV0Y2hlclBlcnNpc3QsXG4gIC8vIHRoZXknbGwgYmUgb2ZmaWNpYWxseSByZW1vdmVkIGFmdGVyIHRoZXkgcmV0dXJuIHRvIGlkbGVcbiAgbGV0IGRlbGV0ZWRGZXRjaGVycyA9IG5ldyBTZXQoKTtcbiAgLy8gU3RvcmUgRGVmZXJyZWREYXRhIGluc3RhbmNlcyBmb3IgYWN0aXZlIHJvdXRlIG1hdGNoZXMuICBXaGVuIGFcbiAgLy8gcm91dGUgbG9hZGVyIHJldHVybnMgZGVmZXIoKSB3ZSBzdGljayBvbmUgaW4gaGVyZS4gIFRoZW4sIHdoZW4gYSBuZXN0ZWRcbiAgLy8gcHJvbWlzZSByZXNvbHZlcyB3ZSB1cGRhdGUgbG9hZGVyRGF0YS4gIElmIGEgbmV3IG5hdmlnYXRpb24gc3RhcnRzIHdlXG4gIC8vIGNhbmNlbCBhY3RpdmUgZGVmZXJyZWRzIGZvciBlbGltaW5hdGVkIHJvdXRlcy5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTtcbiAgLy8gU3RvcmUgYmxvY2tlciBmdW5jdGlvbnMgaW4gYSBzZXBhcmF0ZSBNYXAgb3V0c2lkZSBvZiByb3V0ZXIgc3RhdGUgc2luY2VcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0byB1cGRhdGUgVUkgc3RhdGUgaWYgdGhleSBjaGFuZ2VcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbnMgPSBuZXcgTWFwKCk7XG4gIC8vIEZsYWcgdG8gaWdub3JlIHRoZSBuZXh0IGhpc3RvcnkgdXBkYXRlLCBzbyB3ZSBjYW4gcmV2ZXJ0IHRoZSBVUkwgY2hhbmdlIG9uXG4gIC8vIGEgUE9QIG5hdmlnYXRpb24gdGhhdCB3YXMgYmxvY2tlZCBieSB0aGUgdXNlciB3aXRob3V0IHRvdWNoaW5nIHJvdXRlciBzdGF0ZVxuICBsZXQgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSBmYWxzZTtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgcm91dGVyLCBhbGwgc2lkZSBlZmZlY3RzIHNob3VsZCBiZSBraWNrZWQgb2ZmIGZyb20gaGVyZS5cbiAgLy8gSW1wbGVtZW50ZWQgYXMgYSBGbHVlbnQgQVBJIGZvciBlYXNlIG9mOlxuICAvLyAgIGxldCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoaW5pdCkuaW5pdGlhbGl6ZSgpO1xuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIC8vIElmIGhpc3RvcnkgaW5mb3JtcyB1cyBvZiBhIFBPUCBuYXZpZ2F0aW9uLCBzdGFydCB0aGUgbmF2aWdhdGlvbiBidXQgZG8gbm90IHVwZGF0ZVxuICAgIC8vIHN0YXRlLiAgV2UnbGwgdXBkYXRlIG91ciBvd24gc3RhdGUgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICB1bmxpc3Rlbkhpc3RvcnkgPSBpbml0Lmhpc3RvcnkubGlzdGVuKF9yZWYgPT4ge1xuICAgICAgbGV0IHtcbiAgICAgICAgYWN0aW9uOiBoaXN0b3J5QWN0aW9uLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0gPSBfcmVmO1xuICAgICAgLy8gSWdub3JlIHRoaXMgZXZlbnQgaWYgaXQgd2FzIGp1c3QgdXMgcmVzZXR0aW5nIHRoZSBVUkwgZnJvbSBhXG4gICAgICAvLyBibG9ja2VkIFBPUCBuYXZpZ2F0aW9uXG4gICAgICBpZiAoaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUpIHtcbiAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2FybmluZyhibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDAgfHwgZGVsdGEgIT0gbnVsbCwgXCJZb3UgYXJlIHRyeWluZyB0byB1c2UgYSBibG9ja2VyIG9uIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiBcIiArIFwidGhhdCB3YXMgbm90IGNyZWF0ZWQgYnkgQHJlbWl4LXJ1bi9yb3V0ZXIuIFRoaXMgd2lsbCBmYWlsIHNpbGVudGx5IGluIFwiICsgXCJwcm9kdWN0aW9uLiBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgdGhlIHJvdXRlciBcIiArIFwidmlhIGB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGVgL2B3aW5kb3cubG9jYXRpb24uaGFzaGAgaW5zdGVhZCBvZiB1c2luZyBcIiArIFwicm91dGVyIG5hdmlnYXRpb24gQVBJcy4gIFRoaXMgY2FuIGFsc28gaGFwcGVuIGlmIHlvdSBhcmUgdXNpbmcgXCIgKyBcImNyZWF0ZUhhc2hSb3V0ZXIgYW5kIHRoZSB1c2VyIG1hbnVhbGx5IGNoYW5nZXMgdGhlIFVSTC5cIik7XG4gICAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICAgIH0pO1xuICAgICAgaWYgKGJsb2NrZXJLZXkgJiYgZGVsdGEgIT0gbnVsbCkge1xuICAgICAgICAvLyBSZXN0b3JlIHRoZSBVUkwgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgVUksIGJ1dCBkb24ndCB1cGRhdGUgcm91dGVyIHN0YXRlXG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgaW5pdC5oaXN0b3J5LmdvKGRlbHRhICogLTEpO1xuICAgICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIGxvY2F0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFJlLWRvIHRoZSBzYW1lIFBPUCBuYXZpZ2F0aW9uIHdlIGp1c3QgYmxvY2tlZFxuICAgICAgICAgICAgaW5pdC5oaXN0b3J5LmdvKGRlbHRhKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgICBibG9ja2Vycy5zZXQoYmxvY2tlcktleSwgSURMRV9CTE9DS0VSKTtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgICAgYmxvY2tlcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24pO1xuICAgIH0pO1xuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIC8vIEZJWE1FOiBUaGlzIGZlZWxzIGdyb3NzLiAgSG93IGNhbiB3ZSBjbGVhbnVwIHRoZSBsaW5lcyBiZXR3ZWVuXG4gICAgICAvLyBzY3JvbGxSZXN0b3JhdGlvbi9hcHBsaWVkVHJhbnNpdGlvbnMgcGVyc2lzdGFuY2U/XG4gICAgICByZXN0b3JlQXBwbGllZFRyYW5zaXRpb25zKHJvdXRlcldpbmRvdywgYXBwbGllZFZpZXdUcmFuc2l0aW9ucyk7XG4gICAgICBsZXQgX3NhdmVBcHBsaWVkVHJhbnNpdGlvbnMgPSAoKSA9PiBwZXJzaXN0QXBwbGllZFRyYW5zaXRpb25zKHJvdXRlcldpbmRvdywgYXBwbGllZFZpZXdUcmFuc2l0aW9ucyk7XG4gICAgICByb3V0ZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9zYXZlQXBwbGllZFRyYW5zaXRpb25zKTtcbiAgICAgIHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lciA9ICgpID0+IHJvdXRlcldpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX3NhdmVBcHBsaWVkVHJhbnNpdGlvbnMpO1xuICAgIH1cbiAgICAvLyBLaWNrIG9mZiBpbml0aWFsIGRhdGEgbG9hZCBpZiBuZWVkZWQuICBVc2UgUG9wIHRvIGF2b2lkIG1vZGlmeWluZyBoaXN0b3J5XG4gICAgLy8gTm90ZSB3ZSBkb24ndCBkbyBhbnkgaGFuZGxpbmcgb2YgbGF6eSBoZXJlLiAgRm9yIFNQQSdzIGl0J2xsIGdldCBoYW5kbGVkXG4gICAgLy8gaW4gdGhlIG5vcm1hbCBuYXZpZ2F0aW9uIGZsb3cuICBGb3IgU1NSIGl0J3MgZXhwZWN0ZWQgdGhhdCBsYXp5IG1vZHVsZXMgYXJlXG4gICAgLy8gcmVzb2x2ZWQgcHJpb3IgdG8gcm91dGVyIGNyZWF0aW9uIHNpbmNlIHdlIGNhbid0IGdvIGludG8gYSBmYWxsYmFja0VsZW1lbnRcbiAgICAvLyBVSSBmb3IgU1NSJ2QgYXBwc1xuICAgIGlmICghc3RhdGUuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihBY3Rpb24uUG9wLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBpbml0aWFsSHlkcmF0aW9uOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlcjtcbiAgfVxuICAvLyBDbGVhbiB1cCBhIHJvdXRlciBhbmQgaXQncyBzaWRlIGVmZmVjdHNcbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG4gICAgaWYgKHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgcmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyKCk7XG4gICAgfVxuICAgIHN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlRmV0Y2hlcihrZXkpKTtcbiAgICBzdGF0ZS5ibG9ja2Vycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUJsb2NrZXIoa2V5KSk7XG4gIH1cbiAgLy8gU3Vic2NyaWJlIHRvIHN0YXRlIHVwZGF0ZXMgZm9yIHRoZSByb3V0ZXJcbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGZuKSB7XG4gICAgc3Vic2NyaWJlcnMuYWRkKGZuKTtcbiAgICByZXR1cm4gKCkgPT4gc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuICAvLyBVcGRhdGUgb3VyIHN0YXRlIGFuZCBub3RpZnkgdGhlIGNhbGxpbmcgY29udGV4dCBvZiB0aGUgY2hhbmdlXG4gIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKG5ld1N0YXRlLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwgbmV3U3RhdGUpO1xuICAgIC8vIFByZXAgZmV0Y2hlciBjbGVhbnVwIHNvIHdlIGNhbiB0ZWxsIHRoZSBVSSB3aGljaCBmZXRjaGVyIGRhdGEgZW50cmllc1xuICAgIC8vIGNhbiBiZSByZW1vdmVkXG4gICAgbGV0IGNvbXBsZXRlZEZldGNoZXJzID0gW107XG4gICAgbGV0IGRlbGV0ZWRGZXRjaGVyc0tleXMgPSBbXTtcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChmZXRjaGVyLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICAgICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgLy8gVW5tb3VudGVkIGZyb20gdGhlIFVJIGFuZCBjYW4gYmUgdG90YWxseSByZW1vdmVkXG4gICAgICAgICAgICBkZWxldGVkRmV0Y2hlcnNLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUmV0dXJuZWQgdG8gaWRsZSBidXQgc3RpbGwgbW91bnRlZCBpbiB0aGUgVUksIHNvIHNlbWktcmVtYWlucyBmb3JcbiAgICAgICAgICAgIC8vIHJldmFsaWRhdGlvbnMgYW5kIHN1Y2hcbiAgICAgICAgICAgIGNvbXBsZXRlZEZldGNoZXJzLnB1c2goa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBJdGVyYXRlIG92ZXIgYSBsb2NhbCBjb3B5IHNvIHRoYXQgaWYgZmx1c2hTeW5jIGlzIHVzZWQgYW5kIHdlIGVuZCB1cFxuICAgIC8vIHJlbW92aW5nIGFuZCBhZGRpbmcgYSBuZXcgc3Vic2NyaWJlciBkdWUgdG8gdGhlIHVzZUNhbGxiYWNrIGRlcGVuZGVuY2llcyxcbiAgICAvLyB3ZSBkb24ndCBnZXQgb3Vyc2VsdmVzIGludG8gYSBsb29wIGNhbGxpbmcgdGhlIG5ldyBzdWJzY3JpYmVyIGltbWVkaWF0ZWx5XG4gICAgWy4uLnN1YnNjcmliZXJzXS5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihzdGF0ZSwge1xuICAgICAgZGVsZXRlZEZldGNoZXJzOiBkZWxldGVkRmV0Y2hlcnNLZXlzLFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzOiBvcHRzLnZpZXdUcmFuc2l0aW9uT3B0cyxcbiAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogb3B0cy5mbHVzaFN5bmMgPT09IHRydWVcbiAgICB9KSk7XG4gICAgLy8gUmVtb3ZlIGlkbGUgZmV0Y2hlcnMgZnJvbSBzdGF0ZSBzaW5jZSB3ZSBvbmx5IGNhcmUgYWJvdXQgaW4tZmxpZ2h0IGZldGNoZXJzLlxuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGNvbXBsZXRlZEZldGNoZXJzLmZvckVhY2goa2V5ID0+IHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpKTtcbiAgICAgIGRlbGV0ZWRGZXRjaGVyc0tleXMuZm9yRWFjaChrZXkgPT4gZGVsZXRlRmV0Y2hlcihrZXkpKTtcbiAgICB9XG4gIH1cbiAgLy8gQ29tcGxldGUgYSBuYXZpZ2F0aW9uIHJldHVybmluZyB0aGUgc3RhdGUubmF2aWdhdGlvbiBiYWNrIHRvIHRoZSBJRExFX05BVklHQVRJT05cbiAgLy8gYW5kIHNldHRpbmcgc3RhdGUuW2hpc3RvcnlBY3Rpb24vbG9jYXRpb24vbWF0Y2hlc10gdG8gdGhlIG5ldyByb3V0ZS5cbiAgLy8gLSBMb2NhdGlvbiBpcyBhIHJlcXVpcmVkIHBhcmFtXG4gIC8vIC0gTmF2aWdhdGlvbiB3aWxsIGFsd2F5cyBiZSBzZXQgdG8gSURMRV9OQVZJR0FUSU9OXG4gIC8vIC0gQ2FuIHBhc3MgYW55IG90aGVyIHN0YXRlIGluIG5ld1N0YXRlXG4gIGZ1bmN0aW9uIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUsIF90ZW1wKSB7XG4gICAgdmFyIF9sb2NhdGlvbiRzdGF0ZSwgX2xvY2F0aW9uJHN0YXRlMjtcbiAgICBsZXQge1xuICAgICAgZmx1c2hTeW5jXG4gICAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAgIC8vIERlZHVjZSBpZiB3ZSdyZSBpbiBhIGxvYWRpbmcvYWN0aW9uUmVsb2FkIHN0YXRlOlxuICAgIC8vIC0gV2UgaGF2ZSBjb21taXR0ZWQgYWN0aW9uRGF0YSBpbiB0aGUgc3RvcmVcbiAgICAvLyAtIFRoZSBjdXJyZW50IG5hdmlnYXRpb24gd2FzIGEgbXV0YXRpb24gc3VibWlzc2lvblxuICAgIC8vIC0gV2UncmUgcGFzdCB0aGUgc3VibWl0dGluZyBzdGF0ZSBhbmQgaW50byB0aGUgbG9hZGluZyBzdGF0ZVxuICAgIC8vIC0gVGhlIGxvY2F0aW9uIGJlaW5nIGxvYWRlZCBpcyBub3QgdGhlIHJlc3VsdCBvZiBhIHJlZGlyZWN0XG4gICAgbGV0IGlzQWN0aW9uUmVsb2FkID0gc3RhdGUuYWN0aW9uRGF0YSAhPSBudWxsICYmIHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiAoKF9sb2NhdGlvbiRzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICBsZXQgYWN0aW9uRGF0YTtcbiAgICBpZiAobmV3U3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWN0aW9uRGF0YSA9IG5ld1N0YXRlLmFjdGlvbkRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbXB0eSBhY3Rpb25EYXRhIC0+IGNsZWFyIHByaW9yIGFjdGlvbkRhdGEgZHVlIHRvIGFuIGFjdGlvbiBlcnJvclxuICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQWN0aW9uUmVsb2FkKSB7XG4gICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGEgaWYgd2UncmUgd3JhcHBpbmcgdXAgdGhlIGFjdGlvbiByZWxvYWRcbiAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDbGVhciBhY3Rpb25EYXRhIG9uIGFueSBvdGhlciBjb21wbGV0ZWQgbmF2aWdhdGlvbnNcbiAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgIH1cbiAgICAvLyBBbHdheXMgcHJlc2VydmUgYW55IGV4aXN0aW5nIGxvYWRlckRhdGEgZnJvbSByZS11c2VkIHJvdXRlc1xuICAgIGxldCBsb2FkZXJEYXRhID0gbmV3U3RhdGUubG9hZGVyRGF0YSA/IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IFtdLCBuZXdTdGF0ZS5lcnJvcnMpIDogc3RhdGUubG9hZGVyRGF0YTtcbiAgICAvLyBPbiBhIHN1Y2Nlc3NmdWwgbmF2aWdhdGlvbiB3ZSBjYW4gYXNzdW1lIHdlIGdvdCB0aHJvdWdoIGFsbCBibG9ja2Vyc1xuICAgIC8vIHNvIHdlIGNhbiBzdGFydCBmcmVzaFxuICAgIGxldCBibG9ja2VycyA9IHN0YXRlLmJsb2NrZXJzO1xuICAgIGlmIChibG9ja2Vycy5zaXplID4gMCkge1xuICAgICAgYmxvY2tlcnMgPSBuZXcgTWFwKGJsb2NrZXJzKTtcbiAgICAgIGJsb2NrZXJzLmZvckVhY2goKF8sIGspID0+IGJsb2NrZXJzLnNldChrLCBJRExFX0JMT0NLRVIpKTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHJlc3BlY3QgdGhlIHVzZXIgZmxhZy4gIE90aGVyd2lzZSBkb24ndCByZXNldCBvbiBtdXRhdGlvblxuICAgIC8vIHN1Ym1pc3Npb24gbmF2aWdhdGlvbnMgdW5sZXNzIHRoZXkgcmVkaXJlY3RcbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSB8fCBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgKChfbG9jYXRpb24kc3RhdGUyID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUyLl9pc1JlZGlyZWN0KSAhPT0gdHJ1ZTtcbiAgICBpZiAoaW5GbGlnaHREYXRhUm91dGVzKSB7XG4gICAgICBkYXRhUm91dGVzID0gaW5GbGlnaHREYXRhUm91dGVzO1xuICAgICAgaW5GbGlnaHREYXRhUm91dGVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlB1c2gpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUmVwbGFjZSkge1xuICAgICAgaW5pdC5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9XG4gICAgbGV0IHZpZXdUcmFuc2l0aW9uT3B0cztcbiAgICAvLyBPbiBQT1AsIGVuYWJsZSB0cmFuc2l0aW9ucyBpZiB0aGV5IHdlcmUgZW5hYmxlZCBvbiB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvblxuICAgIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUG9wKSB7XG4gICAgICAvLyBGb3J3YXJkIHRha2VzIHByZWNlZGVuY2Ugc28gdGhleSBiZWhhdmUgbGlrZSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvblxuICAgICAgbGV0IHByaW9yUGF0aHMgPSBhcHBsaWVkVmlld1RyYW5zaXRpb25zLmdldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICBpZiAocHJpb3JQYXRocyAmJiBwcmlvclBhdGhzLmhhcyhsb2NhdGlvbi5wYXRobmFtZSkpIHtcbiAgICAgICAgdmlld1RyYW5zaXRpb25PcHRzID0ge1xuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChhcHBsaWVkVmlld1RyYW5zaXRpb25zLmhhcyhsb2NhdGlvbi5wYXRobmFtZSkpIHtcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIHByZXZpb3VzIGZvcndhcmQgbmF2LCBhc3N1bWUgd2UncmUgcG9wcGluZyBiYWNrIHRvXG4gICAgICAgIC8vIHRoZSBuZXcgbG9jYXRpb24gYW5kIGVuYWJsZSBpZiB0aGF0IGxvY2F0aW9uIHByZXZpb3VzbHkgZW5hYmxlZFxuICAgICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkKSB7XG4gICAgICAvLyBTdG9yZSB0aGUgYXBwbGllZCB0cmFuc2l0aW9uIG9uIFBVU0gvUkVQTEFDRVxuICAgICAgbGV0IHRvUGF0aHMgPSBhcHBsaWVkVmlld1RyYW5zaXRpb25zLmdldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICBpZiAodG9QYXRocykge1xuICAgICAgICB0b1BhdGhzLmFkZChsb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b1BhdGhzID0gbmV3IFNldChbbG9jYXRpb24ucGF0aG5hbWVdKTtcbiAgICAgICAgYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5zZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUsIHRvUGF0aHMpO1xuICAgICAgfVxuICAgICAgdmlld1RyYW5zaXRpb25PcHRzID0ge1xuICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7fSwgbmV3U3RhdGUsIHtcbiAgICAgIGFjdGlvbkRhdGEsXG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgaGlzdG9yeUFjdGlvbjogcGVuZGluZ0FjdGlvbixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgaW5pdGlhbGl6ZWQ6IHRydWUsXG4gICAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IHN0YXRlLm1hdGNoZXMpLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgYmxvY2tlcnNcbiAgICB9KSwge1xuICAgICAgdmlld1RyYW5zaXRpb25PcHRzLFxuICAgICAgZmx1c2hTeW5jOiBmbHVzaFN5bmMgPT09IHRydWVcbiAgICB9KTtcbiAgICAvLyBSZXNldCBzdGF0ZWZ1bCBuYXZpZ2F0aW9uIHZhcnNcbiAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG4gICAgcGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCA9IGZhbHNlO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlO1xuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdO1xuICAgIGNhbmNlbGxlZEZldGNoZXJMb2FkcyA9IFtdO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBuYXZpZ2F0aW9uIGV2ZW50LCB3aGljaCBjYW4gZWl0aGVyIGJlIGEgbnVtZXJpY2FsIFBPUCBvciBhIFBVU0hcbiAgLy8gcmVwbGFjZSB3aXRoIGFuIG9wdGlvbmFsIHN1Ym1pc3Npb25cbiAgYXN5bmMgZnVuY3Rpb24gbmF2aWdhdGUodG8sIG9wdHMpIHtcbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpbml0Lmhpc3RvcnkuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVUbyhzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcywgYmFzZW5hbWUsIGZ1dHVyZS52N19wcmVwZW5kQmFzZW5hbWUsIHRvLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnJvbVJvdXRlSWQsIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucmVsYXRpdmUpO1xuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGVycm9yXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhmdXR1cmUudjdfbm9ybWFsaXplRm9ybU1ldGhvZCwgZmFsc2UsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gc3RhdGUubG9jYXRpb247XG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCBwYXRoLCBvcHRzICYmIG9wdHMuc3RhdGUpO1xuICAgIC8vIFdoZW4gdXNpbmcgbmF2aWdhdGUgYXMgYSBQVVNIL1JFUExBQ0Ugd2UgYXJlbid0IHJlYWRpbmcgYW4gYWxyZWFkeS1lbmNvZGVkXG4gICAgLy8gVVJMIGZyb20gd2luZG93LmxvY2F0aW9uLCBzbyB3ZSBuZWVkIHRvIGVuY29kZSBpdCBoZXJlIHNvIHRoZSBiZWhhdmlvclxuICAgIC8vIHJlbWFpbnMgdGhlIHNhbWUgYXMgUE9QIGFuZCBub24tZGF0YS1yb3V0ZXIgdXNhZ2VzLiAgbmV3IFVSTCgpIGRvZXMgYWxsXG4gICAgLy8gdGhlIHNhbWUgZW5jb2Rpbmcgd2UnZCBnZXQgZnJvbSBhIGhpc3RvcnkucHVzaFN0YXRlL3dpbmRvdy5sb2NhdGlvbiByZWFkXG4gICAgLy8gd2l0aG91dCBoYXZpbmcgdG8gdG91Y2ggaGlzdG9yeVxuICAgIG5leHRMb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBuZXh0TG9jYXRpb24sIGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbihuZXh0TG9jYXRpb24pKTtcbiAgICBsZXQgdXNlclJlcGxhY2UgPSBvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsID8gb3B0cy5yZXBsYWNlIDogdW5kZWZpbmVkO1xuICAgIGxldCBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgaWYgKHVzZXJSZXBsYWNlID09PSB0cnVlKSB7XG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfSBlbHNlIGlmICh1c2VyUmVwbGFjZSA9PT0gZmFsc2UpIDsgZWxzZSBpZiAoc3VibWlzc2lvbiAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSAmJiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICAvLyBCeSBkZWZhdWx0IG9uIHN1Ym1pc3Npb25zIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uIHdlIFJFUExBQ0Ugc28gdGhhdFxuICAgICAgLy8gdXNlcnMgZG9uJ3QgaGF2ZSB0byBkb3VibGUtY2xpY2sgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCB0byB0aGUgcHJpb3JcbiAgICAgIC8vIGxvY2F0aW9uLiAgSWYgdGhlIHVzZXIgcmVkaXJlY3RzIHRvIGEgZGlmZmVyZW50IGxvY2F0aW9uIGZyb20gdGhlXG4gICAgICAvLyBhY3Rpb24vbG9hZGVyIHRoaXMgd2lsbCBiZSBpZ25vcmVkIGFuZCB0aGUgcmVkaXJlY3Qgd2lsbCBiZSBhIFBVU0hcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IG9wdHMgJiYgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiBpbiBvcHRzID8gb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGZsdXNoU3luYyA9IChvcHRzICYmIG9wdHMudW5zdGFibGVfZmx1c2hTeW5jKSA9PT0gdHJ1ZTtcbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gICAgaWYgKGJsb2NrZXJLZXkpIHtcbiAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHJlc2V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gU2VuZCB0aGUgc2FtZSBuYXZpZ2F0aW9uIHRocm91Z2hcbiAgICAgICAgICBuYXZpZ2F0ZSh0bywgb3B0cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgIGJsb2NrZXJzLnNldChibG9ja2VyS2V5LCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIG5leHRMb2NhdGlvbiwge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIC8vIFNlbmQgdGhyb3VnaCB0aGUgZm9ybURhdGEgc2VyaWFsaXphdGlvbiBlcnJvciBpZiB3ZSBoYXZlIG9uZSBzbyB3ZSBjYW5cbiAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzXG4gICAgICBwZW5kaW5nRXJyb3I6IGVycm9yLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVwbGFjZTogb3B0cyAmJiBvcHRzLnJlcGxhY2UsXG4gICAgICBlbmFibGVWaWV3VHJhbnNpdGlvbjogb3B0cyAmJiBvcHRzLnVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uLFxuICAgICAgZmx1c2hTeW5jXG4gICAgfSk7XG4gIH1cbiAgLy8gUmV2YWxpZGF0ZSBhbGwgY3VycmVudCBsb2FkZXJzLiAgSWYgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzIG9yIGlmIHRoaXNcbiAgLy8gaXMgaW50ZXJydXB0ZWQgYnkgYSBuYXZpZ2F0aW9uLCBhbGxvdyB0aGlzIHRvIFwic3VjY2VlZFwiIGJ5IGNhbGxpbmcgYWxsXG4gIC8vIGxvYWRlcnMgZHVyaW5nIHRoZSBuZXh0IGxvYWRlciByb3VuZFxuICBmdW5jdGlvbiByZXZhbGlkYXRlKCkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgcmV2YWxpZGF0aW9uOiBcImxvYWRpbmdcIlxuICAgIH0pO1xuICAgIC8vIElmIHdlJ3JlIGN1cnJlbnRseSBzdWJtaXR0aW5nIGFuIGFjdGlvbiwgd2UgZG9uJ3QgbmVlZCB0byBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24sIHdlJ2xsIGp1c3QgbGV0IHRoZSBmb2xsb3cgdXAgbG9hZGVyIGV4ZWN1dGlvbiBjYWxsIGFsbCBsb2FkZXJzXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwic3VibWl0dGluZ1wiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHdlJ3JlIGN1cnJlbnRseSBpbiBhbiBpZGxlIHN0YXRlLCBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uIGZvciB0aGUgY3VycmVudFxuICAgIC8vIGFjdGlvbi9sb2NhdGlvbiBhbmQgbWFyayBpdCBhcyB1bmludGVycnVwdGVkLCB3aGljaCB3aWxsIHNraXAgdGhlIGhpc3RvcnlcbiAgICAvLyB1cGRhdGUgaW4gY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gT3RoZXJ3aXNlLCBpZiB3ZSdyZSBjdXJyZW50bHkgaW4gYSBsb2FkaW5nIHN0YXRlLCBqdXN0IHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiB0byB0aGUgbmF2aWdhdGlvbi5sb2NhdGlvbiBidXQgZG8gbm90IHRyaWdnZXIgYW4gdW5pbnRlcnJ1cHRlZFxuICAgIC8vIHJldmFsaWRhdGlvbiBzbyB0aGF0IGhpc3RvcnkgY29ycmVjdGx5IHVwZGF0ZXMgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICBzdGFydE5hdmlnYXRpb24ocGVuZGluZ0FjdGlvbiB8fCBzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICBvdmVycmlkZU5hdmlnYXRpb246IHN0YXRlLm5hdmlnYXRpb25cbiAgICB9KTtcbiAgfVxuICAvLyBTdGFydCBhIG5hdmlnYXRpb24gdG8gdGhlIGdpdmVuIGFjdGlvbi9sb2NhdGlvbi4gIENhbiBvcHRpb25hbGx5IHByb3ZpZGUgYVxuICAvLyBvdmVycmlkZU5hdmlnYXRpb24gd2hpY2ggd2lsbCBvdmVycmlkZSB0aGUgbm9ybWFsTG9hZCBpbiB0aGUgY2FzZSBvZiBhIHJlZGlyZWN0XG4gIC8vIG5hdmlnYXRpb25cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uLCBvcHRzKSB7XG4gICAgLy8gQWJvcnQgYW55IGluLXByb2dyZXNzIG5hdmlnYXRpb25zIGFuZCBzdGFydCBhIG5ldyBvbmUuIFVuc2V0IGFueSBvbmdvaW5nXG4gICAgLy8gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb25zIHVubGVzcyB0b2xkIG90aGVyd2lzZSwgc2luY2Ugd2Ugd2FudCB0aGlzXG4gICAgLy8gbmV3IG5hdmlnYXRpb24gdG8gdXBkYXRlIGhpc3Rvcnkgbm9ybWFsbHlcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBwZW5kaW5nQWN0aW9uID0gaGlzdG9yeUFjdGlvbjtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSAob3B0cyAmJiBvcHRzLnN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgPT09IHRydWU7XG4gICAgLy8gU2F2ZSB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gZXZlcnkgdGltZSB3ZSBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uLFxuICAgIC8vIGFuZCB0cmFjayB3aGV0aGVyIHdlIHNob3VsZCByZXNldCBzY3JvbGwgb24gY29tcGxldGlvblxuICAgIHNhdmVTY3JvbGxQb3NpdGlvbihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlcyk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gKG9wdHMgJiYgb3B0cy5lbmFibGVWaWV3VHJhbnNpdGlvbikgPT09IHRydWU7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3B0cyAmJiBvcHRzLm92ZXJyaWRlTmF2aWdhdGlvbjtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWU7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCB3aXRoIGEgNDA0IG9uIHRoZSByb290IGVycm9yIGJvdW5kYXJ5IGlmIHdlIG1hdGNoIG5vdGhpbmdcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXNUb1VzZSk7XG4gICAgICAvLyBDYW5jZWwgYWxsIHBlbmRpbmcgZGVmZXJyZWQgb24gNDA0cyBzaW5jZSB3ZSBkb24ndCBrZWVwIGFueSByb3V0ZXNcbiAgICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcygpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiBpdCdzIG9ubHkgYSBoYXNoIGNoYW5nZSBhbmQgbm90IGEgcmV2YWxpZGF0aW9uIG9yXG4gICAgLy8gbXV0YXRpb24gc3VibWlzc2lvbi5cbiAgICAvL1xuICAgIC8vIElnbm9yZSBvbiBpbml0aWFsIHBhZ2UgbG9hZHMgYmVjYXVzZSBzaW5jZSB0aGUgaW5pdGlhbCBsb2FkIHdpbGwgYWx3YXlzXG4gICAgLy8gYmUgXCJzYW1lIGhhc2hcIi4gIEZvciBleGFtcGxlLCBvbiAvcGFnZSNoYXNoIGFuZCBzdWJtaXQgYSA8Rm9ybSBtZXRob2Q9XCJwb3N0XCI+XG4gICAgLy8gd2hpY2ggd2lsbCBkZWZhdWx0IHRvIGEgbmF2aWdhdGlvbiB0byAvcGFnZVxuICAgIGlmIChzdGF0ZS5pbml0aWFsaXplZCAmJiAhaXNSZXZhbGlkYXRpb25SZXF1aXJlZCAmJiBpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikgJiYgIShvcHRzICYmIG9wdHMuc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKG9wdHMuc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkpIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9LCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCByZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBsb2NhdGlvbiwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbCwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24pO1xuICAgIGxldCBwZW5kaW5nQWN0aW9uUmVzdWx0O1xuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0ID0gW2ZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcykucm91dGUuaWQsIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IG9wdHMucGVuZGluZ0Vycm9yXG4gICAgICB9XTtcbiAgICB9IGVsc2UgaWYgKG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qob3B0cy5zdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICAvLyBDYWxsIGFjdGlvbiBpZiB3ZSByZWNlaXZlZCBhbiBhY3Rpb24gc3VibWlzc2lvblxuICAgICAgbGV0IGFjdGlvblJlc3VsdCA9IGF3YWl0IGhhbmRsZUFjdGlvbihyZXF1ZXN0LCBsb2NhdGlvbiwgb3B0cy5zdWJtaXNzaW9uLCBtYXRjaGVzLCB7XG4gICAgICAgIHJlcGxhY2U6IG9wdHMucmVwbGFjZSxcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIGlmIChhY3Rpb25SZXN1bHQuc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdCA9IGFjdGlvblJlc3VsdC5wZW5kaW5nQWN0aW9uUmVzdWx0O1xuICAgICAgbG9hZGluZ05hdmlnYXRpb24gPSBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICAgIGZsdXNoU3luYyA9IGZhbHNlO1xuICAgICAgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG4gICAgICByZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCByZXF1ZXN0LnVybCwgcmVxdWVzdC5zaWduYWwpO1xuICAgIH1cbiAgICAvLyBDYWxsIGxvYWRlcnNcbiAgICBsZXQge1xuICAgICAgc2hvcnRDaXJjdWl0ZWQsXG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IGF3YWl0IGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIGxvYWRpbmdOYXZpZ2F0aW9uLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLmZldGNoZXJTdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMucmVwbGFjZSwgb3B0cyAmJiBvcHRzLmluaXRpYWxIeWRyYXRpb24gPT09IHRydWUsIGZsdXNoU3luYywgcGVuZGluZ0FjdGlvblJlc3VsdCk7XG4gICAgaWYgKHNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIENsZWFuIHVwIG5vdyB0aGF0IHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmXG4gICAgLy8gd2Ugc2hvcnQgY2lyY3VpdGVkIGJlY2F1c2UgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIHdpbGwgaGF2ZSBhbHJlYWR5XG4gICAgLy8gYmVlbiBhc3NpZ25lZCB0byBhIG5ldyBjb250cm9sbGVyIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHtcbiAgICAgIG1hdGNoZXNcbiAgICB9LCBnZXRBY3Rpb25EYXRhRm9yQ29tbWl0KHBlbmRpbmdBY3Rpb25SZXN1bHQpLCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSkpO1xuICB9XG4gIC8vIENhbGwgdGhlIGFjdGlvbiBtYXRjaGVkIGJ5IHRoZSBsZWFmIHJvdXRlIGZvciB0aGlzIG5hdmlnYXRpb24gYW5kIGhhbmRsZVxuICAvLyByZWRpcmVjdHMvZXJyb3JzXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUFjdGlvbihyZXF1ZXN0LCBsb2NhdGlvbiwgc3VibWlzc2lvbiwgbWF0Y2hlcywgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICAvLyBQdXQgdXMgaW4gYSBzdWJtaXR0aW5nIHN0YXRlXG4gICAgbGV0IG5hdmlnYXRpb24gPSBnZXRTdWJtaXR0aW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgbmF2aWdhdGlvblxuICAgIH0sIHtcbiAgICAgIGZsdXNoU3luYzogb3B0cy5mbHVzaFN5bmMgPT09IHRydWVcbiAgICB9KTtcbiAgICAvLyBDYWxsIG91ciBhY3Rpb24gYW5kIGdldCB0aGUgcmVzdWx0XG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgYWN0aW9uTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIWFjdGlvbk1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWRcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCByZXN1bHRzID0gYXdhaXQgY2FsbERhdGFTdHJhdGVneShcImFjdGlvblwiLCByZXF1ZXN0LCBbYWN0aW9uTWF0Y2hdLCBtYXRjaGVzKTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdHNbMF07XG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCByZXBsYWNlO1xuICAgICAgaWYgKG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwpIHtcbiAgICAgICAgcmVwbGFjZSA9IG9wdHMucmVwbGFjZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGRpZG4ndCBleHBsaWNpdHkgaW5kaWNhdGUgcmVwbGFjZSBiZWhhdmlvciwgcmVwbGFjZSBpZlxuICAgICAgICAvLyB3ZSByZWRpcmVjdGVkIHRvIHRoZSBleGFjdCBzYW1lIGxvY2F0aW9uIHdlJ3JlIGN1cnJlbnRseSBhdCB0byBhdm9pZFxuICAgICAgICAvLyBkb3VibGUgYmFjay1idXR0b25zXG4gICAgICAgIGxldCBsb2NhdGlvbiA9IG5vcm1hbGl6ZVJlZGlyZWN0TG9jYXRpb24ocmVzdWx0LnJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIiksIG5ldyBVUkwocmVxdWVzdC51cmwpLCBiYXNlbmFtZSk7XG4gICAgICAgIHJlcGxhY2UgPSBsb2NhdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2g7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihyZXF1ZXN0LCByZXN1bHQsIHtcbiAgICAgICAgc3VibWlzc2lvbixcbiAgICAgICAgcmVwbGFjZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIGFsbCBzdWJtaXNzaW9ucyBhcmUgUkVQTEFDRSBuYXZpZ2F0aW9ucywgYnV0IGlmIHRoZVxuICAgICAgLy8gYWN0aW9uIHRocmV3IGFuIGVycm9yIHRoYXQnbGwgYmUgcmVuZGVyZWQgaW4gYW4gZXJyb3JFbGVtZW50LCB3ZSBmYWxsXG4gICAgICAvLyBiYWNrIHRvIFBVU0ggc28gdGhhdCB0aGUgdXNlciBjYW4gdXNlIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgYmFjayB0b1xuICAgICAgLy8gdGhlIHByZS1zdWJtaXNzaW9uIGZvcm0gbG9jYXRpb24gdG8gdHJ5IGFnYWluXG4gICAgICBpZiAoKG9wdHMgJiYgb3B0cy5yZXBsYWNlKSAhPT0gdHJ1ZSkge1xuICAgICAgICBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0OiBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZCwgcmVzdWx0XVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQ6IFthY3Rpb25NYXRjaC5yb3V0ZS5pZCwgcmVzdWx0XVxuICAgIH07XG4gIH1cbiAgLy8gQ2FsbCBhbGwgYXBwbGljYWJsZSBsb2FkZXJzIGZvciB0aGUgZ2l2ZW4gbWF0Y2hlcywgaGFuZGxpbmcgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgb3ZlcnJpZGVOYXZpZ2F0aW9uLCBzdWJtaXNzaW9uLCBmZXRjaGVyU3VibWlzc2lvbiwgcmVwbGFjZSwgaW5pdGlhbEh5ZHJhdGlvbiwgZmx1c2hTeW5jLCBwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gICAgLy8gRmlndXJlIG91dCB0aGUgcmlnaHQgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIHVzZSBmb3IgZGF0YSBsb2FkaW5nXG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3ZlcnJpZGVOYXZpZ2F0aW9uIHx8IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICAvLyBJZiB0aGlzIHdhcyBhIHJlZGlyZWN0IGZyb20gYW4gYWN0aW9uIHdlIGRvbid0IGhhdmUgYSBcInN1Ym1pc3Npb25cIiBidXRcbiAgICAvLyB3ZSBoYXZlIGl0IG9uIHRoZSBsb2FkaW5nIG5hdmlnYXRpb24gc28gdXNlIHRoYXQgaWYgYXZhaWxhYmxlXG4gICAgbGV0IGFjdGl2ZVN1Ym1pc3Npb24gPSBzdWJtaXNzaW9uIHx8IGZldGNoZXJTdWJtaXNzaW9uIHx8IGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihsb2FkaW5nTmF2aWdhdGlvbik7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIGFjdGl2ZVN1Ym1pc3Npb24sIGxvY2F0aW9uLCBmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiAmJiBpbml0aWFsSHlkcmF0aW9uID09PSB0cnVlLCBmdXR1cmUudW5zdGFibGVfc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBkZWxldGVkRmV0Y2hlcnMsIGZldGNoTG9hZE1hdGNoZXMsIGZldGNoUmVkaXJlY3RJZHMsIHJvdXRlc1RvVXNlLCBiYXNlbmFtZSwgcGVuZGluZ0FjdGlvblJlc3VsdCk7XG4gICAgLy8gQ2FuY2VsIHBlbmRpbmcgZGVmZXJyZWRzIGZvciBuby1sb25nZXItbWF0Y2hlZCByb3V0ZXMgb3Igcm91dGVzIHdlJ3JlXG4gICAgLy8gYWJvdXQgdG8gcmVsb2FkLiAgTm90ZSB0aGF0IGlmIHRoaXMgaXMgYW4gYWN0aW9uIHJlbG9hZCB3ZSB3b3VsZCBoYXZlXG4gICAgLy8gYWxyZWFkeSBjYW5jZWxsZWQgYWxsIHBlbmRpbmcgZGVmZXJyZWRzIHNvIHRoaXMgd291bGQgYmUgYSBuby1vcFxuICAgIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhyb3V0ZUlkID0+ICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSkgfHwgbWF0Y2hlc1RvTG9hZCAmJiBtYXRjaGVzVG9Mb2FkLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW5cbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDAgJiYgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICAvLyBDb21taXQgcGVuZGluZyBlcnJvciBpZiB3ZSdyZSBzaG9ydCBjaXJjdWl0aW5nXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8ge1xuICAgICAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvclxuICAgICAgICB9IDogbnVsbFxuICAgICAgfSwgZ2V0QWN0aW9uRGF0YUZvckNvbW1pdChwZW5kaW5nQWN0aW9uUmVzdWx0KSwgdXBkYXRlZEZldGNoZXJzID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSksIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIGlzIGFuIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9uLCB3ZSByZW1haW4gaW4gb3VyIGN1cnJlbnQgaWRsZVxuICAgIC8vIHN0YXRlLiAgSWYgbm90LCB3ZSBuZWVkIHRvIHN3aXRjaCB0byBvdXIgbG9hZGluZyBzdGF0ZSBhbmQgbG9hZCBkYXRhLFxuICAgIC8vIHByZXNlcnZpbmcgYW55IG5ldyBhY3Rpb24gZGF0YSBvciBleGlzdGluZyBhY3Rpb24gZGF0YSAoaW4gdGhlIGNhc2Ugb2ZcbiAgICAvLyBhIHJldmFsaWRhdGlvbiBpbnRlcnJ1cHRpbmcgYW4gYWN0aW9uUmVsb2FkKVxuICAgIC8vIElmIHdlIGhhdmUgcGFydGlhbEh5ZHJhdGlvbiBlbmFibGVkLCB0aGVuIGRvbid0IHVwZGF0ZSB0aGUgc3RhdGUgZm9yIHRoZVxuICAgIC8vIGluaXRpYWwgZGF0YSBsb2FkIHNpbmNlIGl0J3Mgbm90IGEgXCJuYXZpZ2F0aW9uXCJcbiAgICBpZiAoIWlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiAmJiAoIWZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uIHx8ICFpbml0aWFsSHlkcmF0aW9uKSkge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHJmLmtleSk7XG4gICAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIodW5kZWZpbmVkLCBmZXRjaGVyID8gZmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KHJmLmtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICB9KTtcbiAgICAgIGxldCBhY3Rpb25EYXRhO1xuICAgICAgaWYgKHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgIWlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBjYXN0IHRvIGBhbnlgIGN1cnJlbnRseSBiZWNhdXNlIGBSb3V0ZURhdGFgdXNlcyBhbnkgYW5kIGl0XG4gICAgICAgIC8vIHdvdWxkIGJlIGEgYnJlYWtpbmcgY2hhbmdlIHRvIHVzZSBhbnkuXG4gICAgICAgIC8vIFRPRE86IHY3IC0gY2hhbmdlIGBSb3V0ZURhdGFgIHRvIHVzZSBgdW5rbm93bmAgaW5zdGVhZCBvZiBgYW55YFxuICAgICAgICBhY3Rpb25EYXRhID0ge1xuICAgICAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5kYXRhXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmFjdGlvbkRhdGEpIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIG5hdmlnYXRpb246IGxvYWRpbmdOYXZpZ2F0aW9uXG4gICAgICB9LCBhY3Rpb25EYXRhICE9PSB1bmRlZmluZWQgPyB7XG4gICAgICAgIGFjdGlvbkRhdGFcbiAgICAgIH0gOiB7fSwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMCA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4ge1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKHJmLmtleSkpIHtcbiAgICAgICAgYWJvcnRGZXRjaGVyKHJmLmtleSk7XG4gICAgICB9XG4gICAgICBpZiAocmYuY29udHJvbGxlcikge1xuICAgICAgICAvLyBGZXRjaGVycyB1c2UgYW4gaW5kZXBlbmRlbnQgQWJvcnRDb250cm9sbGVyIHNvIHRoYXQgYWJvcnRpbmcgYSBmZXRjaGVyXG4gICAgICAgIC8vICh2aWEgZGVsZXRlRmV0Y2hlcikgZG9lcyBub3QgYWJvcnQgdGhlIHRyaWdnZXJpbmcgbmF2aWdhdGlvbiB0aGF0XG4gICAgICAgIC8vIHRyaWdnZXJlZCB0aGUgcmV2YWxpZGF0aW9uXG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHJmLmtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gUHJveHkgbmF2aWdhdGlvbiBhYm9ydCB0aHJvdWdoIHRvIHJldmFsaWRhdGlvbiBmZXRjaGVyc1xuICAgIGxldCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMgPSAoKSA9PiByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKGYgPT4gYWJvcnRGZXRjaGVyKGYua2V5KSk7XG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICB9XG4gICAgbGV0IHtcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJlcXVlc3QpO1xuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgX2FmdGVyXyBsb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWYgd2Ugc2hvcnRcbiAgICAvLyBjaXJjdWl0ZWQgYmVjYXVzZSBmZXRjaENvbnRyb2xsZXJzIHdvdWxkIGhhdmUgYmVlbiBhYm9ydGVkIGFuZFxuICAgIC8vIHJlYXNzaWduZWQgdG8gbmV3IGNvbnRyb2xsZXJzIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyZi5rZXkpKTtcbiAgICAvLyBJZiBhbnkgbG9hZGVycyByZXR1cm5lZCBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QoWy4uLmxvYWRlclJlc3VsdHMsIC4uLmZldGNoZXJSZXN1bHRzXSk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBpZiAocmVkaXJlY3QuaWR4ID49IG1hdGNoZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgICAvLyBsb2FkZXIgZXhlY3V0aW9uc1xuICAgICAgICBsZXQgZmV0Y2hlcktleSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmVxdWVzdCwgcmVkaXJlY3QucmVzdWx0LCB7XG4gICAgICAgIHJlcGxhY2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBXaXJlIHVwIHN1YnNjcmliZXJzIHRvIHVwZGF0ZSBsb2FkZXJEYXRhIGFzIHByb21pc2VzIHNldHRsZVxuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZWZlcnJlZERhdGEsIHJvdXRlSWQpID0+IHtcbiAgICAgIGRlZmVycmVkRGF0YS5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb25cbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpcyBzdGFibGUgYWNyb3NzIHJlc29sdmUvcmVqZWN0XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGluc3RhbmNlIGlmIHdlIHdlcmUgYWJvcnRlZCBvciBpZiBwcm9taXNlcyBoYXZlIHNldHRsZWRcbiAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHtcbiAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAvLyBEdXJpbmcgcGFydGlhbCBoeWRyYXRpb24sIHByZXNlcnZlIFNTUiBlcnJvcnMgZm9yIHJvdXRlcyB0aGF0IGRvbid0IHJlLXJ1blxuICAgIGlmIChmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiAmJiBpbml0aWFsSHlkcmF0aW9uICYmIHN0YXRlLmVycm9ycykge1xuICAgICAgT2JqZWN0LmVudHJpZXMoc3RhdGUuZXJyb3JzKS5maWx0ZXIoX3JlZjIgPT4ge1xuICAgICAgICBsZXQgW2lkXSA9IF9yZWYyO1xuICAgICAgICByZXR1cm4gIW1hdGNoZXNUb0xvYWQuc29tZShtID0+IG0ucm91dGUuaWQgPT09IGlkKTtcbiAgICAgIH0pLmZvckVhY2goX3JlZjMgPT4ge1xuICAgICAgICBsZXQgW3JvdXRlSWQsIGVycm9yXSA9IF9yZWYzO1xuICAgICAgICBlcnJvcnMgPSBPYmplY3QuYXNzaWduKGVycm9ycyB8fCB7fSwge1xuICAgICAgICAgIFtyb3V0ZUlkXTogZXJyb3JcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHVwZGF0ZWRGZXRjaGVycyA9IG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTtcbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpO1xuICAgIGxldCBzaG91bGRVcGRhdGVGZXRjaGVycyA9IHVwZGF0ZWRGZXRjaGVycyB8fCBkaWRBYm9ydEZldGNoTG9hZHMgfHwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID4gMDtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0sIHNob3VsZFVwZGF0ZUZldGNoZXJzID8ge1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSA6IHt9KTtcbiAgfVxuICAvLyBUcmlnZ2VyIGEgZmV0Y2hlciBsb2FkL3N1Ym1pdCBmb3IgdGhlIGdpdmVuIGZldGNoZXIga2V5XG4gIGZ1bmN0aW9uIGZldGNoKGtleSwgcm91dGVJZCwgaHJlZiwgb3B0cykge1xuICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicm91dGVyLmZldGNoKCkgd2FzIGNhbGxlZCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIsIGJ1dCBpdCBzaG91bGRuJ3QgYmUuIFwiICsgXCJZb3UgYXJlIGxpa2VseSBjYWxsaW5nIGEgdXNlRmV0Y2hlcigpIG1ldGhvZCBpbiB0aGUgYm9keSBvZiB5b3VyIGNvbXBvbmVudC4gXCIgKyBcIlRyeSBtb3ZpbmcgaXQgdG8gYSB1c2VFZmZlY3Qgb3IgYSBjYWxsYmFjay5cIik7XG4gICAgfVxuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy51bnN0YWJsZV9mbHVzaFN5bmMpID09PSB0cnVlO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgaHJlZiwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLCByb3V0ZUlkLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnJlbGF0aXZlKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBub3JtYWxpemVkUGF0aCwgYmFzZW5hbWUpO1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IG5vcm1hbGl6ZWRQYXRoXG4gICAgICB9KSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIHRydWUsIG5vcm1hbGl6ZWRQYXRoLCBvcHRzKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBtYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIHBhdGgpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFN0b3JlIG9mZiB0aGUgbWF0Y2ggc28gd2UgY2FuIGNhbGwgaXQncyBzaG91bGRSZXZhbGlkYXRlIG9uIHN1YnNlcXVlbnRcbiAgICAvLyByZXZhbGlkYXRpb25zXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcGF0aFxuICAgIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgZmx1c2hTeW5jLCBzdWJtaXNzaW9uKTtcbiAgfVxuICAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBtYXRjaGVkIGZldGNoZXIuc3VibWl0KCksIGFuZCB0aGVuIGhhbmRsZSByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgYW5kIHJldmFsaWRhdGlvblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBmbHVzaFN5bmMsIHN1Ym1pc3Npb24pIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7XG4gICAgaWYgKCFtYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIW1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogcGF0aCxcbiAgICAgICAgcm91dGVJZDogcm91dGVJZFxuICAgICAgfSk7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvciwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBzdWJtaXR0aW5nIHN0YXRlXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlciksIHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICAgIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwsIHN1Ym1pc3Npb24pO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgb3JpZ2luYXRpbmdMb2FkSWQgPSBpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgbGV0IGFjdGlvblJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFwiYWN0aW9uXCIsIGZldGNoUmVxdWVzdCwgW21hdGNoXSwgcmVxdWVzdE1hdGNoZXMpO1xuICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhY3Rpb25SZXN1bHRzWzBdO1xuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdXIgb3duIGZldGNoZXJcbiAgICAgIC8vIHJlLXN1Ym1pdCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnNcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2hlbiB1c2luZyB2N19mZXRjaGVyUGVyc2lzdCwgd2UgZG9uJ3Qgd2FudCBlcnJvcnMgYnViYmxpbmcgdXAgdG8gdGhlIFVJXG4gICAgLy8gb3IgcmVkaXJlY3RzIHByb2Nlc3NlZCBmb3IgdW5tb3VudGVkIGZldGNoZXJzIHNvIHdlIGp1c3QgcmV2ZXJ0IHRoZW0gdG9cbiAgICAvLyBpZGxlXG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCAmJiBkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KGFjdGlvblJlc3VsdCkgfHwgaXNFcnJvclJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBMZXQgU3VjY2Vzc1Jlc3VsdCdzIGZhbGwgdGhyb3VnaCBmb3IgcmV2YWxpZGF0aW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICAgICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID4gb3JpZ2luYXRpbmdMb2FkSWQpIHtcbiAgICAgICAgICAvLyBBIG5ldyBuYXZpZ2F0aW9uIHdhcyBraWNrZWQgb2ZmIGFmdGVyIG91ciBhY3Rpb24gc3RhcnRlZCwgc28gdGhhdFxuICAgICAgICAgIC8vIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciB0aGlzIHJlZGlyZWN0IG5hdmlnYXRpb24uICBXZSBhbHJlYWR5XG4gICAgICAgICAgLy8gc2V0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgc28gYWxsIGxvYWRlcnMgZm9yIHRoZSBuZXcgcm91dGUgc2hvdWxkXG4gICAgICAgICAgLy8gZmlyZSB1bmxlc3Mgb3B0ZWQgb3V0IHZpYSBzaG91bGRSZXZhbGlkYXRlXG4gICAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGtleSk7XG4gICAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbikpO1xuICAgICAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihmZXRjaFJlcXVlc3QsIGFjdGlvblJlc3VsdCwge1xuICAgICAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb246IHN1Ym1pc3Npb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gfHwgc3RhdGUubG9jYXRpb247XG4gICAgbGV0IHJldmFsaWRhdGlvblJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIG5leHRMb2NhdGlvbiwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG1hdGNoZXMgPSBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSBcImlkbGVcIiA/IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCBiYXNlbmFtZSkgOiBzdGF0ZS5tYXRjaGVzO1xuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuICAgIGxldCBsb2FkRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGFjdGlvblJlc3VsdC5kYXRhKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkRmV0Y2hlcik7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIG5leHRMb2NhdGlvbiwgZmFsc2UsIGZ1dHVyZS51bnN0YWJsZV9za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBbbWF0Y2gucm91dGUuaWQsIGFjdGlvblJlc3VsdF0pO1xuICAgIC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlXG4gICAgLy8gY3VycmVudCBmZXRjaGVyIHdoaWNoIHdlIHdhbnQgdG8ga2VlcCBpbiBpdCdzIGN1cnJlbnQgbG9hZGluZyBzdGF0ZSB3aGljaFxuICAgIC8vIGNvbnRhaW5zIGl0J3MgYWN0aW9uIHN1Ym1pc3Npb24gaW5mbyArIGFjdGlvbiBkYXRhXG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZmlsdGVyKHJmID0+IHJmLmtleSAhPT0ga2V5KS5mb3JFYWNoKHJmID0+IHtcbiAgICAgIGxldCBzdGFsZUtleSA9IHJmLmtleTtcbiAgICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoc3RhbGVLZXkpO1xuICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoc3RhbGVLZXkpKSB7XG4gICAgICAgIGFib3J0RmV0Y2hlcihzdGFsZUtleSk7XG4gICAgICB9XG4gICAgICBpZiAocmYuY29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChzdGFsZUtleSwgcmYuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+IHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gocmYgPT4gYWJvcnRGZXRjaGVyKHJmLmtleSkpO1xuICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyk7XG4gICAgbGV0IHtcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuICAgIGlmIChhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gociA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyLmtleSkpO1xuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChbLi4ubG9hZGVyUmVzdWx0cywgLi4uZmV0Y2hlclJlc3VsdHNdKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGlmIChyZWRpcmVjdC5pZHggPj0gbWF0Y2hlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAgIC8vIGZldGNoUmVkaXJlY3RJZHMgc28gaXQgZG9lc24ndCBnZXQgcmV2YWxpZGF0ZWQgb24gdGhlIG5leHQgc2V0IG9mXG4gICAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICAgIGxldCBmZXRjaGVyS2V5ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbcmVkaXJlY3QuaWR4IC0gbWF0Y2hlc1RvTG9hZC5sZW5ndGhdLmtleTtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoZmV0Y2hlcktleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24ocmV2YWxpZGF0aW9uUmVxdWVzdCwgcmVkaXJlY3QucmVzdWx0KTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgc3RhdGUubWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgdW5kZWZpbmVkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgLy8gU2luY2Ugd2UgbGV0IHJldmFsaWRhdGlvbnMgY29tcGxldGUgZXZlbiBpZiB0aGUgc3VibWl0dGluZyBmZXRjaGVyIHdhc1xuICAgIC8vIGRlbGV0ZWQsIG9ubHkgcHV0IGl0IGJhY2sgdG8gaWRsZSBpZiBpdCBoYXNuJ3QgYmVlbiBkZWxldGVkXG4gICAgaWYgKHN0YXRlLmZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcihhY3Rpb25SZXN1bHQuZGF0YSk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICAgIGFib3J0U3RhbGVGZXRjaExvYWRzKGxvYWRJZCk7XG4gICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbiBhIG5hdmlnYXRpb24gbG9hZGluZyBzdGF0ZSBhbmQgdGhpcyBmZXRjaGVyIGlzXG4gICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGVcbiAgICAvLyBuYXZpZ2F0aW9uIGFuZCBjb21wbGV0ZSBpdCB3aXRoIHRoZSBmZXRjaGVyIGRhdGFcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgbG9hZElkID4gcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpIHtcbiAgICAgIGludmFyaWFudChwZW5kaW5nQWN0aW9uLCBcIkV4cGVjdGVkIHBlbmRpbmcgYWN0aW9uXCIpO1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YSxcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvdGhlcndpc2UganVzdCB1cGRhdGUgd2l0aCB0aGUgZmV0Y2hlciBkYXRhLCBwcmVzZXJ2aW5nIGFueSBleGlzdGluZ1xuICAgICAgLy8gbG9hZGVyRGF0YSBmb3IgbG9hZGVycyB0aGF0IGRpZCBub3QgbmVlZCB0byByZWxvYWQuICBXZSBoYXZlIHRvXG4gICAgICAvLyBtYW51YWxseSBtZXJnZSBoZXJlIHNpbmNlIHdlIGFyZW4ndCBnb2luZyB0aHJvdWdoIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGxvYWRlckRhdGE6IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBsb2FkZXJEYXRhLCBtYXRjaGVzLCBlcnJvcnMpLFxuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0pO1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBDYWxsIHRoZSBtYXRjaGVkIGxvYWRlciBmb3IgZmV0Y2hlci5sb2FkKCksIGhhbmRsaW5nIHJlZGlyZWN0cywgZXJyb3JzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgZmx1c2hTeW5jLCBzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkKSwge1xuICAgICAgZmx1c2hTeW5jXG4gICAgfSk7XG4gICAgLy8gQ2FsbCB0aGUgbG9hZGVyIGZvciB0aGlzIGZldGNoZXIgcm91dGUgbWF0Y2hcbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgb3JpZ2luYXRpbmdMb2FkSWQgPSBpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFwibG9hZGVyXCIsIGZldGNoUmVxdWVzdCwgW21hdGNoXSwgbWF0Y2hlcyk7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbMF07XG4gICAgLy8gRGVmZXJyZWQgaXNuJ3Qgc3VwcG9ydGVkIGZvciBmZXRjaGVyIGxvYWRzLCBhd2FpdCBldmVyeXRoaW5nIGFuZCB0cmVhdCBpdFxuICAgIC8vIGFzIGEgbm9ybWFsIGxvYWQuICByZXNvbHZlRGVmZXJyZWREYXRhIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGlzXG4gICAgLy8gZmV0Y2hlciBnZXRzIGFib3J0ZWQsIHNvIHdlIGp1c3QgbGVhdmUgcmVzdWx0IHVudG91Y2hlZCBhbmQgc2hvcnQgY2lyY3VpdFxuICAgIC8vIGJlbG93IGlmIHRoYXQgaGFwcGVuc1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9XG4gICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91ciBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2UgZG9uJ3Qgd2FudCBlcnJvcnMgYnViYmxpbmcgdXAgb3IgcmVkaXJlY3RzIGZvbGxvd2VkIGZvciB1bm1vdW50ZWRcbiAgICAvLyBmZXRjaGVycywgc28gc2hvcnQgY2lyY3VpdCBoZXJlIGlmIGl0IHdhcyByZW1vdmVkIGZyb20gdGhlIFVJXG4gICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID4gb3JpZ2luYXRpbmdMb2FkSWQpIHtcbiAgICAgICAgLy8gQSBuZXcgbmF2aWdhdGlvbiB3YXMga2lja2VkIG9mZiBhZnRlciBvdXIgbG9hZGVyIHN0YXJ0ZWQsIHNvIHRoYXRcbiAgICAgICAgLy8gc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoaXMgcmVkaXJlY3QgbmF2aWdhdGlvblxuICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcbiAgICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oZmV0Y2hSZXF1ZXN0LCByZXN1bHQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW55IG5vbi1yZWRpcmVjdCBlcnJvcnMgdGhyb3duXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgcmVzdWx0LmVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KCFpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCksIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICAvLyBQdXQgdGhlIGZldGNoZXIgYmFjayBpbnRvIGFuIGlkbGUgc3RhdGVcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcihyZXN1bHQuZGF0YSkpO1xuICB9XG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGhhbmRsZSByZWRpcmVjdHMgcmV0dXJuZWQgZnJvbSBhbiBhY3Rpb24gb3IgbG9hZGVyLlxuICAgKiBOb3JtYWxseSwgYSByZWRpcmVjdCBcInJlcGxhY2VzXCIgdGhlIG5hdmlnYXRpb24gdGhhdCB0cmlnZ2VyZWQgaXQuICBTbywgZm9yXG4gICAqIGV4YW1wbGU6XG4gICAqXG4gICAqICAtIHVzZXIgaXMgb24gL2FcbiAgICogIC0gdXNlciBjbGlja3MgYSBsaW5rIHRvIC9iXG4gICAqICAtIGxvYWRlciBmb3IgL2IgcmVkaXJlY3RzIHRvIC9jXG4gICAqXG4gICAqIEluIGEgbm9uLUpTIGFwcCB0aGUgYnJvd3NlciB3b3VsZCB0cmFjayB0aGUgaW4tZmxpZ2h0IG5hdmlnYXRpb24gdG8gL2IgYW5kXG4gICAqIHRoZW4gcmVwbGFjZSBpdCB3aXRoIC9jIHdoZW4gaXQgZW5jb3VudGVyZWQgdGhlIHJlZGlyZWN0IHJlc3BvbnNlLiAgSW5cbiAgICogdGhlIGVuZCBpdCB3b3VsZCBvbmx5IGV2ZXIgdXBkYXRlIHRoZSBVUkwgYmFyIHdpdGggL2MuXG4gICAqXG4gICAqIEluIGNsaWVudC1zaWRlIHJvdXRpbmcgdXNpbmcgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSwgd2UgYWltIHRvIGVtdWxhdGVcbiAgICogdGhpcyBiZWhhdmlvciBhbmQgd2UgYWxzbyBkbyBub3QgdXBkYXRlIGhpc3RvcnkgdW50aWwgdGhlIGVuZCBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiAoaW5jbHVkaW5nIHByb2Nlc3NlZCByZWRpcmVjdHMpLiAgVGhpcyBtZWFucyB0aGF0IHdlIG5ldmVyXG4gICAqIGFjdHVhbGx5IHRvdWNoIGhpc3RvcnkgdW50aWwgd2UndmUgcHJvY2Vzc2VkIHJlZGlyZWN0cywgc28gd2UganVzdCB1c2VcbiAgICogdGhlIGhpc3RvcnkgYWN0aW9uIGZyb20gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb24gKFBVU0ggb3IgUkVQTEFDRSkuXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihyZXF1ZXN0LCByZWRpcmVjdCwgX3RlbXAyKSB7XG4gICAgbGV0IHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBmZXRjaGVyU3VibWlzc2lvbixcbiAgICAgIHJlcGxhY2VcbiAgICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgICBpZiAocmVkaXJlY3QucmVzcG9uc2UuaGVhZGVycy5oYXMoXCJYLVJlbWl4LVJldmFsaWRhdGVcIikpIHtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgbG9jYXRpb24gPSByZWRpcmVjdC5yZXNwb25zZS5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgIGludmFyaWFudChsb2NhdGlvbiwgXCJFeHBlY3RlZCBhIExvY2F0aW9uIGhlYWRlciBvbiB0aGUgcmVkaXJlY3QgUmVzcG9uc2VcIik7XG4gICAgbG9jYXRpb24gPSBub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uKGxvY2F0aW9uLCBuZXcgVVJMKHJlcXVlc3QudXJsKSwgYmFzZW5hbWUpO1xuICAgIGxldCByZWRpcmVjdExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIGxvY2F0aW9uLCB7XG4gICAgICBfaXNSZWRpcmVjdDogdHJ1ZVxuICAgIH0pO1xuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIGxldCBpc0RvY3VtZW50UmVsb2FkID0gZmFsc2U7XG4gICAgICBpZiAocmVkaXJlY3QucmVzcG9uc2UuaGVhZGVycy5oYXMoXCJYLVJlbWl4LVJlbG9hZC1Eb2N1bWVudFwiKSkge1xuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbmVkIFgtUmVtaXgtUmVsb2FkLURvY3VtZW50XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICAgICAgY29uc3QgdXJsID0gaW5pdC5oaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPVxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0byBhIG5ldyBvcmlnaW5cbiAgICAgICAgdXJsLm9yaWdpbiAhPT0gcm91dGVyV2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fFxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0aGF0IGRvZXMgbm90IG1hdGNoIG91ciBiYXNlbmFtZVxuICAgICAgICBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpID09IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoaXNEb2N1bWVudFJlbG9hZCkge1xuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24uYXNzaWduKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBhYm9ydCBvbiByZWRpcmVjdHMsIHNpbmNlIHdlIGRvbid0IGRldGVjdCB0aGVcbiAgICAvLyByZWRpcmVjdCB1bnRpbCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBzZXR0bGVkXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID0gcmVwbGFjZSA9PT0gdHJ1ZSA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7XG4gICAgLy8gVXNlIHRoZSBpbmNvbWluZyBzdWJtaXNzaW9uIGlmIHByb3ZpZGVkLCBmYWxsYmFjayBvbiB0aGUgYWN0aXZlIG9uZSBpblxuICAgIC8vIHN0YXRlLm5hdmlnYXRpb25cbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZVxuICAgIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuICAgIGlmICghc3VibWlzc2lvbiAmJiAhZmV0Y2hlclN1Ym1pc3Npb24gJiYgZm9ybU1ldGhvZCAmJiBmb3JtQWN0aW9uICYmIGZvcm1FbmNUeXBlKSB7XG4gICAgICBzdWJtaXNzaW9uID0gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24pO1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIHdhcyBhIDMwNy8zMDggc3VibWlzc2lvbiB3ZSB3YW50IHRvIHByZXNlcnZlIHRoZSBIVFRQIG1ldGhvZCBhbmRcbiAgICAvLyByZS1zdWJtaXQgdGhlIEdFVC9QT1NUL1BVVC9QQVRDSC9ERUxFVEUgYXMgYSBzdWJtaXNzaW9uIG5hdmlnYXRpb24gdG8gdGhlXG4gICAgLy8gcmVkaXJlY3RlZCBsb2NhdGlvblxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbjtcbiAgICBpZiAocmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzLmhhcyhyZWRpcmVjdC5yZXNwb25zZS5zdGF0dXMpICYmIGFjdGl2ZVN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChhY3RpdmVTdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIHN1Ym1pc3Npb246IF9leHRlbmRzKHt9LCBhY3RpdmVTdWJtaXNzaW9uLCB7XG4gICAgICAgICAgZm9ybUFjdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSksXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBuYXZpZ2F0aW9uIHN1Ym1pc3Npb24sIHdlIHdpbGwgcHJlc2VydmUgaXQgdGhyb3VnaCB0aGVcbiAgICAgIC8vIHJlZGlyZWN0IG5hdmlnYXRpb25cbiAgICAgIGxldCBvdmVycmlkZU5hdmlnYXRpb24gPSBnZXRMb2FkaW5nTmF2aWdhdGlvbihyZWRpcmVjdExvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICAgIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIHJlZGlyZWN0TG9jYXRpb24sIHtcbiAgICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uLFxuICAgICAgICAvLyBTZW5kIGZldGNoZXIgc3VibWlzc2lvbnMgdGhyb3VnaCBmb3Igc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgICBmZXRjaGVyU3VibWlzc2lvbixcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLy8gVXRpbGl0eSB3cmFwcGVyIGZvciBjYWxsaW5nIGRhdGFTdHJhdGVneSBjbGllbnQtc2lkZSB3aXRob3V0IGhhdmluZyB0b1xuICAvLyBwYXNzIGFyb3VuZCB0aGUgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBjYWxsRGF0YVN0cmF0ZWd5KHR5cGUsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMpIHtcbiAgICB0cnkge1xuICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5SW1wbChkYXRhU3RyYXRlZ3lJbXBsLCB0eXBlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzKTtcbiAgICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChyZXN1bHRzLm1hcCgocmVzdWx0LCBpKSA9PiB7XG4gICAgICAgIGlmIChpc1JlZGlyZWN0SGFuZGxlclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgICAgbGV0IHJlc3BvbnNlID0gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgICAgIHJlc3BvbnNlOiBub3JtYWxpemVSZWxhdGl2ZVJvdXRpbmdSZWRpcmVjdFJlc3BvbnNlKHJlc3BvbnNlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkW2ldLnJvdXRlLmlkLCBtYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnZlcnRIYW5kbGVyUmVzdWx0VG9EYXRhUmVzdWx0KHJlc3VsdCk7XG4gICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWYgdGhlIG91dGVyIGRhdGFTdHJhdGVneSBtZXRob2QgdGhyb3dzLCBqdXN0IHJldHVybiB0aGUgZXJyb3IgZm9yIGFsbFxuICAgICAgLy8gbWF0Y2hlcyAtIGFuZCBpdCdsbCBuYXR1cmFsbHkgYnViYmxlIHRvIHRoZSByb290XG4gICAgICByZXR1cm4gbWF0Y2hlc1RvTG9hZC5tYXAoKCkgPT4gKHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBmZXRjaGVyc1RvTG9hZCwgcmVxdWVzdCkge1xuICAgIGxldCBbbG9hZGVyUmVzdWx0cywgLi4uZmV0Y2hlclJlc3VsdHNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW21hdGNoZXNUb0xvYWQubGVuZ3RoID8gY2FsbERhdGFTdHJhdGVneShcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzKSA6IFtdLCAuLi5mZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiB7XG4gICAgICBpZiAoZi5tYXRjaGVzICYmIGYubWF0Y2ggJiYgZi5jb250cm9sbGVyKSB7XG4gICAgICAgIGxldCBmZXRjaGVyUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgZi5wYXRoLCBmLmNvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICAgICAgcmV0dXJuIGNhbGxEYXRhU3RyYXRlZ3koXCJsb2FkZXJcIiwgZmV0Y2hlclJlcXVlc3QsIFtmLm1hdGNoXSwgZi5tYXRjaGVzKS50aGVuKHIgPT4gclswXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICAgICAgcGF0aG5hbWU6IGYucGF0aFxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pXSk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW3Jlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIGxvYWRlclJlc3VsdHMubWFwKCgpID0+IHJlcXVlc3Quc2lnbmFsKSwgZmFsc2UsIHN0YXRlLmxvYWRlckRhdGEpLCByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBmZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiBmLm1hdGNoKSwgZmV0Y2hlclJlc3VsdHMsIGZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGYuY29udHJvbGxlciA/IGYuY29udHJvbGxlci5zaWduYWwgOiBudWxsKSwgdHJ1ZSldKTtcbiAgICByZXR1cm4ge1xuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpIHtcbiAgICAvLyBFdmVyeSBpbnRlcnJ1cHRpb24gdHJpZ2dlcnMgYSByZXZhbGlkYXRpb25cbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTtcbiAgICAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkge1xuICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMucHVzaChrZXkpO1xuICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBmZXRjaGVyLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBmZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGFjdGl2ZUZldGNoZXJzLnNldChrZXksIChhY3RpdmVGZXRjaGVycy5nZXQoa2V5KSB8fCAwKSArIDEpO1xuICAgICAgLy8gSWYgdGhpcyBmZXRjaGVyIHdhcyBwcmV2aW91c2x5IG1hcmtlZCBmb3IgZGVsZXRpb24sIHVubWFyayBpdCBzaW5jZSB3ZVxuICAgICAgLy8gaGF2ZSBhIG5ldyBpbnN0YW5jZVxuICAgICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlcihrZXkpIHtcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIC8vIERvbid0IGFib3J0IHRoZSBjb250cm9sbGVyIGlmIHRoaXMgaXMgYSBkZWxldGlvbiBvZiBhIGZldGNoZXIuc3VibWl0KClcbiAgICAvLyBpbiBpdCdzIGxvYWRpbmcgcGhhc2Ugc2luY2UgLSB3ZSBkb24ndCB3YW50IHRvIGFib3J0IHRoZSBjb3JyZXNwb25kaW5nXG4gICAgLy8gcmV2YWxpZGF0aW9uIGFuZCB3YW50IHRoZW0gdG8gY29tcGxldGUgYW5kIGxhbmRcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSAmJiAhKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgZmV0Y2hSZWxvYWRJZHMuaGFzKGtleSkpKSB7XG4gICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgIGRlbGV0ZWRGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyQW5kVXBkYXRlU3RhdGUoa2V5KSB7XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgbGV0IGNvdW50ID0gKGFjdGl2ZUZldGNoZXJzLmdldChrZXkpIHx8IDApIC0gMTtcbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIGFjdGl2ZUZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuYWRkKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVGZXRjaGVycy5zZXQoa2V5LCBjb3VudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWJvcnRGZXRjaGVyKGtleSkge1xuICAgIGxldCBjb250cm9sbGVyID0gZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KTtcbiAgICBpbnZhcmlhbnQoY29udHJvbGxlciwgXCJFeHBlY3RlZCBmZXRjaCBjb250cm9sbGVyOiBcIiArIGtleSk7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoZXJzRG9uZShrZXlzKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gZ2V0RmV0Y2hlcihrZXkpO1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoZmV0Y2hlci5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpIHtcbiAgICBsZXQgZG9uZUtleXMgPSBbXTtcbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gZmFsc2U7XG4gICAgZm9yIChsZXQga2V5IG9mIGZldGNoUmVkaXJlY3RJZHMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG4gICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgZG9uZUtleXMucHVzaChrZXkpO1xuICAgICAgICB1cGRhdGVkRmV0Y2hlcnMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgICByZXR1cm4gdXBkYXRlZEZldGNoZXJzO1xuICB9XG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBba2V5LCBpZF0gb2YgZmV0Y2hSZWxvYWRJZHMpIHtcbiAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICAgICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgeWVldGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG4gIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5LCBmbikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLmdldChrZXkpICE9PSBmbikge1xuICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zZXQoa2V5LCBmbik7XG4gICAgfVxuICAgIHJldHVybiBibG9ja2VyO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrZXIoa2V5KSB7XG4gICAgc3RhdGUuYmxvY2tlcnMuZGVsZXRlKGtleSk7XG4gICAgYmxvY2tlckZ1bmN0aW9ucy5kZWxldGUoa2V5KTtcbiAgfVxuICAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnNcbiAgZnVuY3Rpb24gdXBkYXRlQmxvY2tlcihrZXksIG5ld0Jsb2NrZXIpIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcbiAgICAvLyBQb29yIG1hbnMgc3RhdGUgbWFjaGluZSA6KVxuICAgIC8vIGh0dHBzOi8vbWVybWFpZC5saXZlL2VkaXQjcGFrbzplTnFWa2M5T3d6QU14bDhsOG5uakFZckV0RElPSEVCSWd3dktKVFJlR3kzX2xEcElxTzI3azZhd01HMFhjckxsbno4N253ZG9uRVNvZ0tYWEJ1RTc5cnE3NVhaTzMteUhkczBSSlZ1djcwWXJQbFVyQ0VlMkhmck9SUzNydWJxWmZ1aHRwZzVDOXdrNXRaNFZLY1JVcTg4cTlaOFJTMC00OGNFMWlISmtMMHVnYkh1Rkx1czlMNnNwWnk4blg5TVAyQ05kb21WYXBvc3F1M2ZHYXlUOFQ4LWpKUXdoZXBvX1V0cGdCUWFERVVvbTA0ZFpoQU4xYUpCRGxVS0pCeEUxY2VCMlNtajBNbG4tSUJXNUFGVTJkd1Vpa3R0XzJRYXEyZEJmYUtkRXVwODVVVjdZZC1kS2psbmthYmwyUHZyMERUa1RyZU1cbiAgICBpbnZhcmlhbnQoYmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIsIFwiSW52YWxpZCBibG9ja2VyIHN0YXRlIHRyYW5zaXRpb246IFwiICsgYmxvY2tlci5zdGF0ZSArIFwiIC0+IFwiICsgbmV3QmxvY2tlci5zdGF0ZSk7XG4gICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgYmxvY2tlcnMuc2V0KGtleSwgbmV3QmxvY2tlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgYmxvY2tlcnNcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzaG91bGRCbG9ja05hdmlnYXRpb24oX3JlZjQpIHtcbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBfcmVmNDtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIG9ueSBzdXBwb3J0IGEgc2luZ2xlIGFjdGl2ZSBibG9ja2VyIGF0IHRoZSBtb21lbnQgc2luY2Ugd2UgZG9uJ3QgaGF2ZVxuICAgIC8vIGFueSBjb21wZWxsaW5nIHVzZSBjYXNlcyBmb3IgbXVsdGktYmxvY2tlciB5ZXRcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID4gMSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJBIHJvdXRlciBvbmx5IHN1cHBvcnRzIG9uZSBibG9ja2VyIGF0IGEgdGltZVwiKTtcbiAgICB9XG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGJsb2NrZXJGdW5jdGlvbnMuZW50cmllcygpKTtcbiAgICBsZXQgW2Jsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0gPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSk7XG4gICAgaWYgKGJsb2NrZXIgJiYgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHtcbiAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrXG4gICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWVcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQXQgdGhpcyBwb2ludCwgd2Uga25vdyB3ZSdyZSB1bmJsb2NrZWQvYmxvY2tlZCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHRoZVxuICAgIC8vIHVzZXItcHJvdmlkZWQgYmxvY2tlciBmdW5jdGlvblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pKSB7XG4gICAgICByZXR1cm4gYmxvY2tlcktleTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9XG4gIC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcbiAgZnVuY3Rpb24gZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24ocG9zaXRpb25zLCBnZXRQb3NpdGlvbiwgZ2V0S2V5KSB7XG4gICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBnZXRQb3NpdGlvbjtcbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCBudWxsO1xuICAgIC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChnZXRTY3JvbGxSZXN0b3JhdGlvbktleSkge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCBtYXRjaGVzLm1hcChtID0+IGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKSk7XG4gICAgICByZXR1cm4ga2V5IHx8IGxvY2F0aW9uLmtleTtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2F0aW9uLmtleTtcbiAgfVxuICBmdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiB5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBfaW50ZXJuYWxTZXRSb3V0ZXMobmV3Um91dGVzKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKG5ld1JvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgfVxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGJhc2VuYW1lO1xuICAgIH0sXG4gICAgZ2V0IGZ1dHVyZSgpIHtcbiAgICAgIHJldHVybiBmdXR1cmU7XG4gICAgfSxcbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcbiAgICBnZXQgd2luZG93KCkge1xuICAgICAgcmV0dXJuIHJvdXRlcldpbmRvdztcbiAgICB9LFxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6IHRvID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogdG8gPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXI6IGRlbGV0ZUZldGNoZXJBbmRVcGRhdGVTdGF0ZSxcbiAgICBkaXNwb3NlLFxuICAgIGdldEJsb2NrZXIsXG4gICAgZGVsZXRlQmxvY2tlcixcbiAgICBfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzOiBmZXRjaENvbnRyb2xsZXJzLFxuICAgIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLFxuICAgIC8vIFRPRE86IFJlbW92ZSBzZXRSb3V0ZXMsIGl0J3MgdGVtcG9yYXJ5IHRvIGF2b2lkIGRlYWxpbmcgd2l0aFxuICAgIC8vIHVwZGF0aW5nIHRoZSB0cmVlIHdoaWxlIHZhbGlkYXRpbmcgdGhlIHVwZGF0ZSBhbGdvcml0aG0uXG4gICAgX2ludGVybmFsU2V0Um91dGVzXG4gIH07XG4gIHJldHVybiByb3V0ZXI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmNvbnN0IFVOU0FGRV9ERUZFUlJFRF9TWU1CT0wgPSBTeW1ib2woXCJkZWZlcnJlZFwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXIocm91dGVzLCBvcHRzKSB7XG4gIGludmFyaWFudChyb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVTdGF0aWNIYW5kbGVyXCIpO1xuICBsZXQgbWFuaWZlc3QgPSB7fTtcbiAgbGV0IGJhc2VuYW1lID0gKG9wdHMgPyBvcHRzLmJhc2VuYW1lIDogbnVsbCkgfHwgXCIvXCI7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM7XG4gIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXMpIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBvcHRzLm1hcFJvdXRlUHJvcGVydGllcztcbiAgfSBlbHNlIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBvcHRzLmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlLFxuICAgIHY3X3Rocm93QWJvcnRSZWFzb246IGZhbHNlXG4gIH0sIG9wdHMgPyBvcHRzLmZ1dHVyZSA6IG51bGwpO1xuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICAvKipcbiAgICogVGhlIHF1ZXJ5KCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciBkb2N1bWVudCByZXF1ZXN0cywgaW4gd2hpY2ggd2Ugd2FudCB0b1xuICAgKiBjYWxsIGFuIG9wdGlvbmFsIGFjdGlvbiBhbmQgcG90ZW50aWFsbHkgbXVsdGlwbGUgbG9hZGVycyBmb3IgYWxsIG5lc3RlZFxuICAgKiByb3V0ZXMuICBJdCByZXR1cm5zIGEgU3RhdGljSGFuZGxlckNvbnRleHQgb2JqZWN0LCB3aGljaCBpcyB2ZXJ5IHNpbWlsYXJcbiAgICogdG8gdGhlIHJvdXRlciBzdGF0ZSAobG9jYXRpb24sIGxvYWRlckRhdGEsIGFjdGlvbkRhdGEsIGVycm9ycywgZXRjLikgYW5kXG4gICAqIGFsc28gYWRkcyBTU1Itc3BlY2lmaWMgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgc3RhdHVzQ29kZSBhbmQgaGVhZGVyc1xuICAgKiBmcm9tIGFjdGlvbi9sb2FkZXJzIFJlc3BvbnNlcy5cbiAgICpcbiAgICogSXQgX3Nob3VsZF8gbmV2ZXIgdGhyb3cgYW5kIHNob3VsZCByZXBvcnQgYWxsIGVycm9ycyB0aHJvdWdoIHRoZVxuICAgKiByZXR1cm5lZCBjb250ZXh0LmVycm9ycyBvYmplY3QsIHByb3Blcmx5IGFzc29jaWF0aW5nIGVycm9ycyB0byB0aGVpciBlcnJvclxuICAgKiBib3VuZGFyeS4gIEFkZGl0aW9uYWxseSwgaXQgdHJhY2tzIF9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHdoaWNoIGNhbiBiZVxuICAgKiB1c2VkIHRvIGVtdWxhdGUgUmVhY3QgZXJyb3IgYm91bmRhcmllcyBkdXJpbmcgU1NyIGJ5IHBlcmZvcm1pbmcgYSBzZWNvbmRcbiAgICogcGFzcyBvbmx5IGRvd24gdG8gdGhlIGJvdW5kYXJ5SWQuXG4gICAqXG4gICAqIFRoZSBvbmUgZXhjZXB0aW9uIHdoZXJlIHdlIGRvIG5vdCByZXR1cm4gYSBTdGF0aWNIYW5kbGVyQ29udGV4dCBpcyB3aGVuIGFcbiAgICogcmVkaXJlY3QgcmVzcG9uc2UgaXMgcmV0dXJuZWQgb3IgdGhyb3duIGZyb20gYW55IGFjdGlvbi9sb2FkZXIuICBXZVxuICAgKiBwcm9wYWdhdGUgdGhhdCBvdXQgYW5kIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIHNvIHRoZSBIVFRQIHNlcnZlciBjYW5cbiAgICogcmV0dXJuIGl0IGRpcmVjdGx5LlxuICAgKlxuICAgKiAtIGBvcHRzLnJlcXVlc3RDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBzZXJ2ZXIgY29udGV4dCB0aGF0IHdpbGwgYmUgcGFzc2VkXG4gICAqICAgdG8gYWN0aW9ucy9sb2FkZXJzIGluIHRoZSBgY29udGV4dGAgcGFyYW1ldGVyXG4gICAqIC0gYG9wdHMuc2tpcExvYWRlckVycm9yQnViYmxpbmdgIGlzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB0aGF0IHdpbGwgcHJldmVudFxuICAgKiAgIHRoZSBidWJibGluZyBvZiBlcnJvcnMgd2hpY2ggYWxsb3dzIHNpbmdsZS1mZXRjaC10eXBlIGltcGxlbWVudGF0aW9uc1xuICAgKiAgIHdoZXJlIHRoZSBjbGllbnQgd2lsbCBoYW5kbGUgdGhlIGJ1YmJsaW5nIGFuZCB3ZSBtYXkgbmVlZCB0byByZXR1cm4gZGF0YVxuICAgKiAgIGZvciB0aGUgaGFuZGxpbmcgcm91dGVcbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5KHJlcXVlc3QsIF90ZW1wMykge1xuICAgIGxldCB7XG4gICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLFxuICAgICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5XG4gICAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSB8fCBudWxsLCBza2lwTG9hZGVyRXJyb3JCdWJibGluZyA9PT0gdHJ1ZSwgbnVsbCk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLy8gV2hlbiByZXR1cm5pbmcgU3RhdGljSGFuZGxlckNvbnRleHQsIHdlIHBhdGNoIGJhY2sgaW4gdGhlIGxvY2F0aW9uIGhlcmVcbiAgICAvLyBzaW5jZSB3ZSBuZWVkIGl0IGZvciBSZWFjdCBDb250ZXh0LiAgQnV0IHRoaXMgaGVscHMga2VlcCBvdXIgc3VibWl0IGFuZFxuICAgIC8vIGxvYWRSb3V0ZURhdGEgb3BlcmF0aW5nIG9uIGEgUmVxdWVzdCBpbnN0ZWFkIG9mIGEgTG9jYXRpb25cbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgbG9jYXRpb24sXG4gICAgICBiYXNlbmFtZVxuICAgIH0sIHJlc3VsdCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBxdWVyeVJvdXRlKCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0YXJnZXRlZCByb3V0ZSByZXF1ZXN0cywgZWl0aGVyXG4gICAqIGZvciBmZXRjaCA/X2RhdGEgcmVxdWVzdHMgb3IgcmVzb3VyY2Ugcm91dGUgcmVxdWVzdHMuICBJbiB0aGlzIGNhc2UsIHdlXG4gICAqIGFyZSBvbmx5IGV2ZXIgY2FsbGluZyBhIHNpbmdsZSBhY3Rpb24gb3IgbG9hZGVyLCBhbmQgd2UgYXJlIHJldHVybmluZyB0aGVcbiAgICogcmV0dXJuZWQgdmFsdWUgZGlyZWN0bHkuICBJbiBtb3N0IGNhc2VzLCB0aGlzIHdpbGwgYmUgYSBSZXNwb25zZSByZXR1cm5lZFxuICAgKiBmcm9tIHRoZSBhY3Rpb24vbG9hZGVyLCBidXQgaXQgbWF5IGJlIGEgcHJpbWl0aXZlIG9yIG90aGVyIHZhbHVlIGFzIHdlbGwgLVxuICAgKiBhbmQgaW4gc3VjaCBjYXNlcyB0aGUgY2FsbGluZyBjb250ZXh0IHNob3VsZCBoYW5kbGUgdGhhdCBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogV2UgZG8gcmVzcGVjdCB0aGUgdGhyb3cvcmV0dXJuIGRpZmZlcmVudGlhdGlvbiwgc28gaWYgYW4gYWN0aW9uL2xvYWRlclxuICAgKiB0aHJvd3MsIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyB0aGUgdmFsdWUuICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZVxuICAgKiBjYW4gZG8gcHJvcGVyIGJvdW5kYXJ5IGlkZW50aWZpY2F0aW9uIGluIFJlbWl4IHdoZXJlIGEgdGhyb3duIFJlc3BvbnNlXG4gICAqIG11c3QgZ28gdG8gdGhlIENhdGNoIEJvdW5kYXJ5IGJ1dCBhIHJldHVybmVkIFJlc3BvbnNlIGlzIGhhcHB5LXBhdGguXG4gICAqXG4gICAqIE9uZSB0aGluZyB0byBub3RlIGlzIHRoYXQgYW55IFJvdXRlci1pbml0aWF0ZWQgRXJyb3JzIHRoYXQgbWFrZSBzZW5zZVxuICAgKiB0byBhc3NvY2lhdGUgd2l0aCBhIHN0YXR1cyBjb2RlIHdpbGwgYmUgdGhyb3duIGFzIGFuIEVycm9yUmVzcG9uc2VcbiAgICogaW5zdGFuY2Ugd2hpY2ggaW5jbHVkZSB0aGUgcmF3IEVycm9yLCBzdWNoIHRoYXQgdGhlIGNhbGxpbmcgY29udGV4dCBjYW5cbiAgICogc2VyaWFsaXplIHRoZSBlcnJvciBhcyB0aGV5IHNlZSBmaXQgd2hpbGUgaW5jbHVkaW5nIHRoZSBwcm9wZXIgcmVzcG9uc2VcbiAgICogY29kZS4gIEV4YW1wbGVzIGhlcmUgYXJlIDQwNCBhbmQgNDA1IGVycm9ycyB0aGF0IG9jY3VyIHByaW9yIHRvIHJlYWNoaW5nXG4gICAqIGFueSB1c2VyLWRlZmluZWQgbG9hZGVycy5cbiAgICpcbiAgICogLSBgb3B0cy5yb3V0ZUlkYCBhbGxvd3MgeW91IHRvIHNwZWNpZnkgdGhlIHNwZWNpZmljIHJvdXRlIGhhbmRsZXIgdG8gY2FsbC5cbiAgICogICBJZiBub3QgcHJvdmlkZWQgdGhlIGhhbmRsZXIgd2lsbCBkZXRlcm1pbmUgdGhlIHByb3BlciByb3V0ZSBieSBtYXRjaGluZ1xuICAgKiAgIGFnYWluc3QgYHJlcXVlc3QudXJsYFxuICAgKiAtIGBvcHRzLnJlcXVlc3RDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBzZXJ2ZXIgY29udGV4dCB0aGF0IHdpbGwgYmUgcGFzc2VkXG4gICAqICAgIHRvIGFjdGlvbnMvbG9hZGVycyBpbiB0aGUgYGNvbnRleHRgIHBhcmFtZXRlclxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShyZXF1ZXN0LCBfdGVtcDQpIHtcbiAgICBsZXQge1xuICAgICAgcm91dGVJZCxcbiAgICAgIHJlcXVlc3RDb250ZXh0LFxuICAgICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5XG4gICAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiICYmIG1ldGhvZCAhPT0gXCJPUFRJT05TXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gcm91dGVJZCA/IG1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpIDogZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmIChyb3V0ZUlkICYmICFtYXRjaCkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDMsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaCkge1xuICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGl0IEkgZG9uJ3QgdGhpbms/XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5IHx8IG51bGwsIGZhbHNlLCBtYXRjaCk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHdlIGdvdCBiYWNrIHJlc3VsdC5lcnJvcnMsIHRoYXQgbWVhbnMgdGhlIGxvYWRlci9hY3Rpb24gdGhyZXdcbiAgICAgIC8vIF9zb21ldGhpbmdfIHRoYXQgd2Fzbid0IGEgUmVzcG9uc2UsIGJ1dCBpdCdzIG5vdCBndWFyYW50ZWVkL3JlcXVpcmVkXG4gICAgICAvLyB0byBiZSBhbiBgaW5zdGFuY2VvZiBFcnJvcmAgZWl0aGVyLCBzbyB3ZSBoYXZlIHRvIHVzZSB0aHJvdyBoZXJlIHRvXG4gICAgICAvLyBwcmVzZXJ2ZSB0aGUgXCJlcnJvclwiIHN0YXRlIG91dHNpZGUgb2YgcXVlcnlJbXBsLlxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cbiAgICBpZiAocmVzdWx0LmFjdGlvbkRhdGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlc3VsdC5hY3Rpb25EYXRhKVswXTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICB2YXIgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlO1xuICAgICAgbGV0IGRhdGEgPSBPYmplY3QudmFsdWVzKHJlc3VsdC5sb2FkZXJEYXRhKVswXTtcbiAgICAgIGlmICgoX3Jlc3VsdCRhY3RpdmVEZWZlcnJlID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkcykgIT0gbnVsbCAmJiBfcmVzdWx0JGFjdGl2ZURlZmVycmVbbWF0Y2gucm91dGUuaWRdKSB7XG4gICAgICAgIGRhdGFbVU5TQUZFX0RFRkVSUkVEX1NZTUJPTF0gPSByZXN1bHQuYWN0aXZlRGVmZXJyZWRzW21hdGNoLnJvdXRlLmlkXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIHJvdXRlTWF0Y2gpIHtcbiAgICBpbnZhcmlhbnQocmVxdWVzdC5zaWduYWwsIFwicXVlcnkoKS9xdWVyeVJvdXRlKCkgcmVxdWVzdHMgbXVzdCBjb250YWluIGFuIEFib3J0Q29udHJvbGxlciBzaWduYWxcIik7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc011dGF0aW9uTWV0aG9kKHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIHJvdXRlTWF0Y2gpO1xuICAgICAgcmV0dXJuIGlzUmVzcG9uc2UocmVzdWx0KSA/IHJlc3VsdCA6IF9leHRlbmRzKHt9LCByZXN1bHQsIHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHRocmV3L3JldHVybmVkIGEgUmVzcG9uc2UgaW4gY2FsbExvYWRlck9yQWN0aW9uIGZvciBhXG4gICAgICAvLyBgcXVlcnlSb3V0ZWAgY2FsbCwgd2UgdGhyb3cgdGhlIGBIYW5kbGVyUmVzdWx0YCB0byBiYWlsIG91dCBlYXJseVxuICAgICAgLy8gYW5kIHRoZW4gcmV0dXJuIG9yIHRocm93IHRoZSByYXcgUmVzcG9uc2UgaGVyZSBhY2NvcmRpbmdseVxuICAgICAgaWYgKGlzSGFuZGxlclJlc3VsdChlKSAmJiBpc1Jlc3BvbnNlKGUucmVzdWx0KSkge1xuICAgICAgICBpZiAoZS50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUucmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gUmVkaXJlY3RzIGFyZSBhbHdheXMgcmV0dXJuZWQgc2luY2UgdGhleSBkb24ndCBwcm9wYWdhdGUgdG8gY2F0Y2hcbiAgICAgIC8vIGJvdW5kYXJpZXNcbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzcG9uc2UoZSkpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuICBhc3luYyBmdW5jdGlvbiBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgYWN0aW9uTWF0Y2gsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCBpc1JvdXRlUmVxdWVzdCkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24gJiYgIWFjdGlvbk1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWRcbiAgICAgIH0pO1xuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvclxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFwiYWN0aW9uXCIsIHJlcXVlc3QsIFthY3Rpb25NYXRjaF0sIG1hdGNoZXMsIGlzUm91dGVSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5KTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdHNbMF07XG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICB0aHJvd1N0YXRpY0hhbmRsZXJBYm9ydGVkRXJyb3IocmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIGZ1dHVyZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQucmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5yZXNwb25zZS5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3JcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gTm90ZTogVGhpcyBzaG91bGQgb25seSBiZSBub24tUmVzcG9uc2UgdmFsdWVzIGlmIHdlIGdldCBoZXJlLCBzaW5jZVxuICAgICAgLy8gaXNSb3V0ZVJlcXVlc3Qgc2hvdWxkIHRocm93IGFueSBSZXNwb25zZSByZWNlaXZlZCBpbiBjYWxsTG9hZGVyT3JBY3Rpb25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlczogW2FjdGlvbk1hdGNoXSxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcnM6IG51bGwsXG4gICAgICAgIC8vIE5vdGU6IHN0YXR1c0NvZGUgKyBoZWFkZXJzIGFyZSB1bnVzZWQgaGVyZSBzaW5jZSBxdWVyeVJvdXRlIHdpbGxcbiAgICAgICAgLy8gcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugb3IgdmFsdWVcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzXG4gICAgbGV0IGxvYWRlclJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXF1ZXN0LnVybCwge1xuICAgICAgaGVhZGVyczogcmVxdWVzdC5oZWFkZXJzLFxuICAgICAgcmVkaXJlY3Q6IHJlcXVlc3QucmVkaXJlY3QsXG4gICAgICBzaWduYWw6IHJlcXVlc3Quc2lnbmFsXG4gICAgfSk7XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nID8gYWN0aW9uTWF0Y2ggOiBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgbnVsbCwgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWQsIHJlc3VsdF0pO1xuICAgICAgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiByZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsID8gcmVzdWx0LnN0YXR1c0NvZGUgOiA1MDAsXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IF9leHRlbmRzKHt9LCByZXN1bHQuaGVhZGVycyA/IHtcbiAgICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgICB9IDoge30pXG4gICAgICB9KTtcbiAgICB9XG4gICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKGxvYWRlclJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCBudWxsKTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgIH1cbiAgICB9LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25IZWFkZXJzOiByZXN1bHQuaGVhZGVycyA/IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmhlYWRlcnNcbiAgICAgIH0gOiB7fVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIHJvdXRlTWF0Y2gsIHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICBsZXQgaXNSb3V0ZVJlcXVlc3QgPSByb3V0ZU1hdGNoICE9IG51bGw7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeVJvdXRlKCkpXG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0ICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubG9hZGVyKSAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxhenkpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlTWF0Y2gucm91dGUuaWRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgcmVxdWVzdE1hdGNoZXMgPSByb3V0ZU1hdGNoID8gW3JvdXRlTWF0Y2hdIDogcGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgcGVuZGluZ0FjdGlvblJlc3VsdFswXSkgOiBtYXRjaGVzO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKG0gPT4gbS5yb3V0ZS5sb2FkZXIgfHwgbS5yb3V0ZS5sYXp5KTtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5KCkpXG4gICAgaWYgKG1hdGNoZXNUb0xvYWQubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICAvLyBBZGQgYSBudWxsIGZvciBhbGwgbWF0Y2hlZCByb3V0ZXMgZm9yIHByb3BlciByZXZhbGlkYXRpb24gb24gdGhlIGNsaWVudFxuICAgICAgICBsb2FkZXJEYXRhOiBtYXRjaGVzLnJlZHVjZSgoYWNjLCBtKSA9PiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICAgIFttLnJvdXRlLmlkXTogbnVsbFxuICAgICAgICB9KSwge30pLFxuICAgICAgICBlcnJvcnM6IHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHtcbiAgICAgICAgICBbcGVuZGluZ0FjdGlvblJlc3VsdFswXV06IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZXJyb3JcbiAgICAgICAgfSA6IG51bGwsXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFwibG9hZGVyXCIsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIGlzUm91dGVSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5KTtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgdGhyb3dTdGF0aWNIYW5kbGVyQWJvcnRlZEVycm9yKHJlcXVlc3QsIGlzUm91dGVSZXF1ZXN0LCBmdXR1cmUpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IGNvbnRleHQgPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIGFjdGl2ZURlZmVycmVkcywgc2tpcExvYWRlckVycm9yQnViYmxpbmcpO1xuICAgIC8vIEFkZCBhIG51bGwgZm9yIGFueSBub24tbG9hZGVyIG1hdGNoZXMgZm9yIHByb3BlciByZXZhbGlkYXRpb24gb24gdGhlIGNsaWVudFxuICAgIGxldCBleGVjdXRlZExvYWRlcnMgPSBuZXcgU2V0KG1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IG1hdGNoLnJvdXRlLmlkKSk7XG4gICAgbWF0Y2hlcy5mb3JFYWNoKG1hdGNoID0+IHtcbiAgICAgIGlmICghZXhlY3V0ZWRMb2FkZXJzLmhhcyhtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgICAgY29udGV4dC5sb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgYWN0aXZlRGVmZXJyZWRzOiBhY3RpdmVEZWZlcnJlZHMuc2l6ZSA+IDAgPyBPYmplY3QuZnJvbUVudHJpZXMoYWN0aXZlRGVmZXJyZWRzLmVudHJpZXMoKSkgOiBudWxsXG4gICAgfSk7XG4gIH1cbiAgLy8gVXRpbGl0eSB3cmFwcGVyIGZvciBjYWxsaW5nIGRhdGFTdHJhdGVneSBzZXJ2ZXItc2lkZSB3aXRob3V0IGhhdmluZyB0b1xuICAvLyBwYXNzIGFyb3VuZCB0aGUgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBjYWxsRGF0YVN0cmF0ZWd5KHR5cGUsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIGlzUm91dGVSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5KSB7XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5SW1wbCh1bnN0YWJsZV9kYXRhU3RyYXRlZ3kgfHwgZGVmYXVsdERhdGFTdHJhdGVneSwgdHlwZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgcmVxdWVzdENvbnRleHQpO1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChyZXN1bHRzLm1hcCgocmVzdWx0LCBpKSA9PiB7XG4gICAgICBpZiAoaXNSZWRpcmVjdEhhbmRsZXJSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXN1bHQucmVzdWx0O1xuICAgICAgICAvLyBUaHJvdyByZWRpcmVjdHMgYW5kIGxldCB0aGUgc2VydmVyIGhhbmRsZSB0aGVtIHdpdGggYW4gSFRUUCByZWRpcmVjdFxuICAgICAgICB0aHJvdyBub3JtYWxpemVSZWxhdGl2ZVJvdXRpbmdSZWRpcmVjdFJlc3BvbnNlKHJlc3BvbnNlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkW2ldLnJvdXRlLmlkLCBtYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdC5yZXN1bHQpICYmIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIC8vIEZvciBTU1Igc2luZ2xlLXJvdXRlIHJlcXVlc3RzLCB3ZSB3YW50IHRvIGhhbmQgUmVzcG9uc2VzIGJhY2tcbiAgICAgICAgLy8gZGlyZWN0bHkgd2l0aG91dCB1bndyYXBwaW5nXG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb252ZXJ0SGFuZGxlclJlc3VsdFRvRGF0YVJlc3VsdChyZXN1bHQpO1xuICAgIH0pKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEdpdmVuIGFuIGV4aXN0aW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0IGFuZCBhbiBlcnJvciB0aHJvd24gYXQgcmVuZGVyIHRpbWUsXG4gKiBwcm92aWRlIGFuIHVwZGF0ZWQgU3RhdGljSGFuZGxlckNvbnRleHQgc3VpdGFibGUgZm9yIGEgc2Vjb25kIFNTUiByZW5kZXJcbiAqL1xuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdDb250ZXh0O1xufVxuZnVuY3Rpb24gdGhyb3dTdGF0aWNIYW5kbGVyQWJvcnRlZEVycm9yKHJlcXVlc3QsIGlzUm91dGVSZXF1ZXN0LCBmdXR1cmUpIHtcbiAgaWYgKGZ1dHVyZS52N190aHJvd0Fib3J0UmVhc29uICYmIHJlcXVlc3Quc2lnbmFsLnJlYXNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgcmVxdWVzdC5zaWduYWwucmVhc29uO1xuICB9XG4gIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWQ6IFwiICsgcmVxdWVzdC5tZXRob2QgKyBcIiBcIiArIHJlcXVlc3QudXJsKTtcbn1cbmZ1bmN0aW9uIGlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykge1xuICByZXR1cm4gb3B0cyAhPSBudWxsICYmIChcImZvcm1EYXRhXCIgaW4gb3B0cyAmJiBvcHRzLmZvcm1EYXRhICE9IG51bGwgfHwgXCJib2R5XCIgaW4gb3B0cyAmJiBvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVUbyhsb2NhdGlvbiwgbWF0Y2hlcywgYmFzZW5hbWUsIHByZXBlbmRCYXNlbmFtZSwgdG8sIHY3X3JlbGF0aXZlU3BsYXRQYXRoLCBmcm9tUm91dGVJZCwgcmVsYXRpdmUpIHtcbiAgbGV0IGNvbnRleHR1YWxNYXRjaGVzO1xuICBsZXQgYWN0aXZlUm91dGVNYXRjaDtcbiAgaWYgKGZyb21Sb3V0ZUlkKSB7XG4gICAgLy8gR3JhYiBtYXRjaGVzIHVwIHRvIHRoZSBjYWxsaW5nIHJvdXRlIHNvIG91ciByb3V0ZS1yZWxhdGl2ZSBsb2dpYyBpc1xuICAgIC8vIHJlbGF0aXZlIHRvIHRoZSBjb3JyZWN0IHNvdXJjZSByb3V0ZVxuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gW107XG4gICAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgICAgY29udGV4dHVhbE1hdGNoZXMucHVzaChtYXRjaCk7XG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQgPT09IGZyb21Sb3V0ZUlkKSB7XG4gICAgICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnRleHR1YWxNYXRjaGVzID0gbWF0Y2hlcztcbiAgICBhY3RpdmVSb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICB9XG4gIC8vIFJlc29sdmUgdGhlIHJlbGF0aXZlIHBhdGhcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8gPyB0byA6IFwiLlwiLCBnZXRSZXNvbHZlVG9NYXRjaGVzKGNvbnRleHR1YWxNYXRjaGVzLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCksIHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBsb2NhdGlvbi5wYXRobmFtZSwgcmVsYXRpdmUgPT09IFwicGF0aFwiKTtcbiAgLy8gV2hlbiBgdG9gIGlzIG5vdCBzcGVjaWZpZWQgd2UgaW5oZXJpdCBzZWFyY2gvaGFzaCBmcm9tIHRoZSBjdXJyZW50XG4gIC8vIGxvY2F0aW9uLCB1bmxpa2Ugd2hlbiB0bz1cIi5cIiBhbmQgd2UganVzdCBpbmhlcml0IHRoZSBwYXRoLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZW1peC9pc3N1ZXMvOTI3XG4gIGlmICh0byA9PSBudWxsKSB7XG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgcGF0aC5oYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgfVxuICAvLyBBZGQgYW4gP2luZGV4IHBhcmFtIGZvciBtYXRjaGVkIGluZGV4IHJvdXRlcyBpZiB3ZSBkb24ndCBhbHJlYWR5IGhhdmUgb25lXG4gIGlmICgodG8gPT0gbnVsbCB8fCB0byA9PT0gXCJcIiB8fCB0byA9PT0gXCIuXCIpICYmIGFjdGl2ZVJvdXRlTWF0Y2ggJiYgYWN0aXZlUm91dGVNYXRjaC5yb3V0ZS5pbmRleCAmJiAhaGFzTmFrZWRJbmRleFF1ZXJ5KHBhdGguc2VhcmNoKSkge1xuICAgIHBhdGguc2VhcmNoID0gcGF0aC5zZWFyY2ggPyBwYXRoLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgXCI/aW5kZXgmXCIpIDogXCI/aW5kZXhcIjtcbiAgfVxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lLiAgSWZcbiAgLy8gdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93c1xuICAvLyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaFxuICAvLyBvbiByb290IGFjdGlvbnNcbiAgaWYgKHByZXBlbmRCYXNlbmFtZSAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlUGF0aChwYXRoKTtcbn1cbi8vIE5vcm1hbGl6ZSBuYXZpZ2F0aW9uIG9wdGlvbnMgYnkgY29udmVydGluZyBmb3JtTWV0aG9kPUdFVCBmb3JtRGF0YSBvYmplY3RzIHRvXG4vLyBVUkxTZWFyY2hQYXJhbXMgc28gdGhleSBiZWhhdmUgaWRlbnRpY2FsbHkgdG8gbGlua3Mgd2l0aCBxdWVyeSBwYXJhbXNcbmZ1bmN0aW9uIG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhub3JtYWxpemVGb3JtTWV0aG9kLCBpc0ZldGNoZXIsIHBhdGgsIG9wdHMpIHtcbiAgLy8gUmV0dXJuIGxvY2F0aW9uIHZlcmJhdGltIG9uIG5vbi1zdWJtaXNzaW9uIG5hdmlnYXRpb25zXG4gIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuICBpZiAob3B0cy5mb3JtTWV0aG9kICYmICFpc1ZhbGlkTWV0aG9kKG9wdHMuZm9ybU1ldGhvZCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCxcbiAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IG9wdHMuZm9ybU1ldGhvZFxuICAgICAgfSlcbiAgICB9O1xuICB9XG4gIGxldCBnZXRJbnZhbGlkQm9keUVycm9yID0gKCkgPT4gKHtcbiAgICBwYXRoLFxuICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgdHlwZTogXCJpbnZhbGlkLWJvZHlcIlxuICAgIH0pXG4gIH0pO1xuICAvLyBDcmVhdGUgYSBTdWJtaXNzaW9uIG9uIG5vbi1HRVQgbmF2aWdhdGlvbnNcbiAgbGV0IHJhd0Zvcm1NZXRob2QgPSBvcHRzLmZvcm1NZXRob2QgfHwgXCJnZXRcIjtcbiAgbGV0IGZvcm1NZXRob2QgPSBub3JtYWxpemVGb3JtTWV0aG9kID8gcmF3Rm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpIDogcmF3Rm9ybU1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICBsZXQgZm9ybUFjdGlvbiA9IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpO1xuICBpZiAob3B0cy5ib2R5ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAob3B0cy5mb3JtRW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgIC8vIHRleHQgb25seSBzdXBwb3J0IFBPU1QvUFVUL1BBVENIL0RFTEVURSBzdWJtaXNzaW9uc1xuICAgICAgaWYgKCFpc011dGF0aW9uTWV0aG9kKGZvcm1NZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgICBsZXQgdGV4dCA9IHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBvcHRzLmJvZHkgOiBvcHRzLmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSB8fCBvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgP1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjcGxhaW4tdGV4dC1mb3JtLWRhdGFcbiAgICAgIEFycmF5LmZyb20ob3B0cy5ib2R5LmVudHJpZXMoKSkucmVkdWNlKChhY2MsIF9yZWY1KSA9PiB7XG4gICAgICAgIGxldCBbbmFtZSwgdmFsdWVdID0gX3JlZjU7XG4gICAgICAgIHJldHVybiBcIlwiICsgYWNjICsgbmFtZSArIFwiPVwiICsgdmFsdWUgKyBcIlxcblwiO1xuICAgICAgfSwgXCJcIikgOiBTdHJpbmcob3B0cy5ib2R5KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGgsXG4gICAgICAgIHN1Ym1pc3Npb246IHtcbiAgICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICAgIGZvcm1BY3Rpb24sXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICAgICAgdGV4dFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAob3B0cy5mb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIC8vIGpzb24gb25seSBzdXBwb3J0cyBQT1NUL1BVVC9QQVRDSC9ERUxFVEUgc3VibWlzc2lvbnNcbiAgICAgIGlmICghaXNNdXRhdGlvbk1ldGhvZChmb3JtTWV0aG9kKSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGpzb24gPSB0eXBlb2Ygb3B0cy5ib2R5ID09PSBcInN0cmluZ1wiID8gSlNPTi5wYXJzZShvcHRzLmJvZHkpIDogb3B0cy5ib2R5O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgICAgZm9ybU1ldGhvZCxcbiAgICAgICAgICAgIGZvcm1BY3Rpb24sXG4gICAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBqc29uLFxuICAgICAgICAgICAgdGV4dDogdW5kZWZpbmVkXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpbnZhcmlhbnQodHlwZW9mIEZvcm1EYXRhID09PSBcImZ1bmN0aW9uXCIsIFwiRm9ybURhdGEgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50XCIpO1xuICBsZXQgc2VhcmNoUGFyYW1zO1xuICBsZXQgZm9ybURhdGE7XG4gIGlmIChvcHRzLmZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5mb3JtRGF0YSk7XG4gICAgZm9ybURhdGEgPSBvcHRzLmZvcm1EYXRhO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuYm9keTtcbiAgfSBlbHNlIGlmIChvcHRzLmJvZHkgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBvcHRzLmJvZHk7XG4gICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSA9PSBudWxsKSB7XG4gICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMob3B0cy5ib2R5KTtcbiAgICAgIGZvcm1EYXRhID0gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZ2V0SW52YWxpZEJvZHlFcnJvcigpO1xuICAgIH1cbiAgfVxuICBsZXQgc3VibWlzc2lvbiA9IHtcbiAgICBmb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IG9wdHMgJiYgb3B0cy5mb3JtRW5jVHlwZSB8fCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLFxuICAgIGZvcm1EYXRhLFxuICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICB0ZXh0OiB1bmRlZmluZWRcbiAgfTtcbiAgaWYgKGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvblxuICAgIH07XG4gIH1cbiAgLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnNcbiAgbGV0IHBhcnNlZFBhdGggPSBwYXJzZVBhdGgocGF0aCk7XG4gIC8vIE9uIEdFVCBuYXZpZ2F0aW9uIHN1Ym1pc3Npb25zIHdlIGNhbiBkcm9wIHRoZSA/aW5kZXggcGFyYW0gZnJvbSB0aGVcbiAgLy8gcmVzdWx0aW5nIGxvY2F0aW9uIHNpbmNlIGFsbCBsb2FkZXJzIHdpbGwgcnVuLiAgQnV0IGZldGNoZXIgR0VUIHN1Ym1pc3Npb25zXG4gIC8vIG9ubHkgcnVuIGEgc2luZ2xlIGxvYWRlciBzbyB3ZSBuZWVkIHRvIHByZXNlcnZlIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG4gIGlmIChpc0ZldGNoZXIgJiYgcGFyc2VkUGF0aC5zZWFyY2ggJiYgaGFzTmFrZWRJbmRleFF1ZXJ5KHBhcnNlZFBhdGguc2VhcmNoKSkge1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbmRleFwiLCBcIlwiKTtcbiAgfVxuICBwYXJzZWRQYXRoLnNlYXJjaCA9IFwiP1wiICsgc2VhcmNoUGFyYW1zO1xuICByZXR1cm4ge1xuICAgIHBhdGg6IGNyZWF0ZVBhdGgocGFyc2VkUGF0aCksXG4gICAgc3VibWlzc2lvblxuICB9O1xufVxuLy8gRmlsdGVyIG91dCBhbGwgcm91dGVzIGJlbG93IGFueSBjYXVnaHQgZXJyb3IgYXMgdGhleSBhcmVuJ3QgZ29pbmcgdG9cbi8vIHJlbmRlciBzbyB3ZSBkb24ndCBuZWVkIHRvIGxvYWQgdGhlbVxuZnVuY3Rpb24gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCkge1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcztcbiAgaWYgKGJvdW5kYXJ5SWQpIHtcbiAgICBsZXQgaW5kZXggPSBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IGJvdW5kYXJ5SWQpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBib3VuZGFyeU1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKDAsIGluZGV4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJvdW5kYXJ5TWF0Y2hlcztcbn1cbmZ1bmN0aW9uIGdldE1hdGNoZXNUb0xvYWQoaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc0luaXRpYWxMb2FkLCBza2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gIGxldCBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nQWN0aW9uUmVzdWx0ID8gaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZXJyb3IgOiBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmRhdGEgOiB1bmRlZmluZWQ7XG4gIGxldCBjdXJyZW50VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RhdGUubG9jYXRpb24pO1xuICBsZXQgbmV4dFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKGxvY2F0aW9uKTtcbiAgLy8gUGljayBuYXZpZ2F0aW9uIG1hdGNoZXMgdGhhdCBhcmUgbmV0LW5ldyBvciBxdWFsaWZ5IGZvciByZXZhbGlkYXRpb25cbiAgbGV0IGJvdW5kYXJ5SWQgPSBwZW5kaW5nQWN0aW9uUmVzdWx0ICYmIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkgPyBwZW5kaW5nQWN0aW9uUmVzdWx0WzBdIDogdW5kZWZpbmVkO1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gYm91bmRhcnlJZCA/IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpIDogbWF0Y2hlcztcbiAgLy8gRG9uJ3QgcmV2YWxpZGF0ZSBsb2FkZXJzIGJ5IGRlZmF1bHQgYWZ0ZXIgYWN0aW9uIDR4eC81eHggcmVzcG9uc2VzXG4gIC8vIHdoZW4gdGhlIGZsYWcgaXMgZW5hYmxlZC4gIFRoZXkgY2FuIHN0aWxsIG9wdC1pbnRvIHJldmFsaWRhdGlvbiB2aWFcbiAgLy8gYHNob3VsZFJldmFsaWRhdGVgIHZpYSBgYWN0aW9uUmVzdWx0YFxuICBsZXQgYWN0aW9uU3RhdHVzID0gcGVuZGluZ0FjdGlvblJlc3VsdCA/IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uc3RhdHVzQ29kZSA6IHVuZGVmaW5lZDtcbiAgbGV0IHNob3VsZFNraXBSZXZhbGlkYXRpb24gPSBza2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24gJiYgYWN0aW9uU3RhdHVzICYmIGFjdGlvblN0YXR1cyA+PSA0MDA7XG4gIGxldCBuYXZpZ2F0aW9uTWF0Y2hlcyA9IGJvdW5kYXJ5TWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGxldCB7XG4gICAgICByb3V0ZVxuICAgIH0gPSBtYXRjaDtcbiAgICBpZiAocm91dGUubGF6eSkge1xuICAgICAgLy8gV2UgaGF2ZW4ndCBsb2FkZWQgdGhpcyByb3V0ZSB5ZXQgc28gd2UgZG9uJ3Qga25vdyBpZiBpdCdzIGdvdCBhIGxvYWRlciFcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAocm91dGUubG9hZGVyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlzSW5pdGlhbExvYWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygcm91dGUubG9hZGVyICE9PSBcImZ1bmN0aW9uXCIgfHwgcm91dGUubG9hZGVyLmh5ZHJhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCAmJiAoXG4gICAgICAvLyBEb24ndCByZS1ydW4gaWYgdGhlIGxvYWRlciByYW4gYW5kIHRocmV3IGFuIGVycm9yXG4gICAgICAhc3RhdGUuZXJyb3JzIHx8IHN0YXRlLmVycm9yc1tyb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBjYWxsIHRoZSBsb2FkZXIgb24gbmV3IHJvdXRlIGluc3RhbmNlcyBhbmQgcGVuZGluZyBkZWZlciBjYW5jZWxsYXRpb25zXG4gICAgaWYgKGlzTmV3TG9hZGVyKHN0YXRlLmxvYWRlckRhdGEsIHN0YXRlLm1hdGNoZXNbaW5kZXhdLCBtYXRjaCkgfHwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMuc29tZShpZCA9PiBpZCA9PT0gbWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3Igd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlXG4gICAgLy8gcHJvdmlkZXMgaXQncyBvd24gaW1wbGVtZW50YXRpb24sIHRoZW4gd2UgZ2l2ZSB0aGVtIGZ1bGwgY29udHJvbCBidXRcbiAgICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzXG4gICAgbGV0IGN1cnJlbnRSb3V0ZU1hdGNoID0gc3RhdGUubWF0Y2hlc1tpbmRleF07XG4gICAgbGV0IG5leHRSb3V0ZU1hdGNoID0gbWF0Y2g7XG4gICAgcmV0dXJuIHNob3VsZFJldmFsaWRhdGVMb2FkZXIobWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgIGN1cnJlbnRVcmwsXG4gICAgICBjdXJyZW50UGFyYW1zOiBjdXJyZW50Um91dGVNYXRjaC5wYXJhbXMsXG4gICAgICBuZXh0VXJsLFxuICAgICAgbmV4dFBhcmFtczogbmV4dFJvdXRlTWF0Y2gucGFyYW1zXG4gICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgdW5zdGFibGVfYWN0aW9uU3RhdHVzOiBhY3Rpb25TdGF0dXMsXG4gICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTogc2hvdWxkU2tpcFJldmFsaWRhdGlvbiA/IGZhbHNlIDpcbiAgICAgIC8vIEZvcmNlZCByZXZhbGlkYXRpb24gZHVlIHRvIHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdG9yLCBvciBYLVJlbWl4LVJldmFsaWRhdGVcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgfHwgY3VycmVudFVybC5wYXRobmFtZSArIGN1cnJlbnRVcmwuc2VhcmNoID09PSBuZXh0VXJsLnBhdGhuYW1lICsgbmV4dFVybC5zZWFyY2ggfHxcbiAgICAgIC8vIFNlYXJjaCBwYXJhbXMgYWZmZWN0IGFsbCBsb2FkZXJzXG4gICAgICBjdXJyZW50VXJsLnNlYXJjaCAhPT0gbmV4dFVybC5zZWFyY2ggfHwgaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRSb3V0ZU1hdGNoLCBuZXh0Um91dGVNYXRjaClcbiAgICB9KSk7XG4gIH0pO1xuICAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG4gIGxldCByZXZhbGlkYXRpbmdGZXRjaGVycyA9IFtdO1xuICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKGYsIGtleSkgPT4ge1xuICAgIC8vIERvbid0IHJldmFsaWRhdGU6XG4gICAgLy8gIC0gb24gaW5pdGlhbCBsb2FkIChzaG91bGRuJ3QgYmUgYW55IGZldGNoZXJzIHRoZW4gYW55d2F5KVxuICAgIC8vICAtIGlmIGZldGNoZXIgd29uJ3QgYmUgcHJlc2VudCBpbiB0aGUgc3Vic2VxdWVudCByZW5kZXJcbiAgICAvLyAgICAtIG5vIGxvbmdlciBtYXRjaGVzIHRoZSBVUkwgKHY3X2ZldGNoZXJQZXJzaXN0PWZhbHNlKVxuICAgIC8vICAgIC0gd2FzIHVubW91bnRlZCBidXQgcGVyc2lzdGVkIGR1ZSB0byB2N19mZXRjaGVyUGVyc2lzdD10cnVlXG4gICAgaWYgKGlzSW5pdGlhbExvYWQgfHwgIW1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IGYucm91dGVJZCkgfHwgZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBmZXRjaGVyTWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBmLnBhdGgsIGJhc2VuYW1lKTtcbiAgICAvLyBJZiB0aGUgZmV0Y2hlciBwYXRoIG5vIGxvbmdlciBtYXRjaGVzLCBwdXNoIGl0IGluIHdpdGggbnVsbCBtYXRjaGVzIHNvXG4gICAgLy8gd2UgY2FuIHRyaWdnZXIgYSA0MDQgaW4gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhLiAgTm90ZSB0aGlzIGlzXG4gICAgLy8gY3VycmVudGx5IG9ubHkgYSB1c2UtY2FzZSBmb3IgUmVtaXggSE1SIHdoZXJlIHRoZSByb3V0ZSB0cmVlIGNhbiBjaGFuZ2VcbiAgICAvLyBhdCBydW50aW1lIGFuZCByZW1vdmUgYSByb3V0ZSBwcmV2aW91c2x5IGxvYWRlZCB2aWEgYSBmZXRjaGVyXG4gICAgaWYgKCFmZXRjaGVyTWF0Y2hlcykge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaCh7XG4gICAgICAgIGtleSxcbiAgICAgICAgcm91dGVJZDogZi5yb3V0ZUlkLFxuICAgICAgICBwYXRoOiBmLnBhdGgsXG4gICAgICAgIG1hdGNoZXM6IG51bGwsXG4gICAgICAgIG1hdGNoOiBudWxsLFxuICAgICAgICBjb250cm9sbGVyOiBudWxsXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUmV2YWxpZGF0aW5nIGZldGNoZXJzIGFyZSBkZWNvdXBsZWQgZnJvbSB0aGUgcm91dGUgbWF0Y2hlcyBzaW5jZSB0aGV5XG4gICAgLy8gbG9hZCBmcm9tIGEgc3RhdGljIGhyZWYuICBUaGV5IHJldmFsaWRhdGUgYmFzZWQgb24gZXhwbGljaXQgcmV2YWxpZGF0aW9uXG4gICAgLy8gKHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdG9yLCBvciBYLVJlbWl4LVJldmFsaWRhdGUpXG4gICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICBsZXQgZmV0Y2hlck1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2goZmV0Y2hlck1hdGNoZXMsIGYucGF0aCk7XG4gICAgbGV0IHNob3VsZFJldmFsaWRhdGUgPSBmYWxzZTtcbiAgICBpZiAoZmV0Y2hSZWRpcmVjdElkcy5oYXMoa2V5KSkge1xuICAgICAgLy8gTmV2ZXIgdHJpZ2dlciBhIHJldmFsaWRhdGlvbiBvZiBhbiBhY3RpdmVseSByZWRpcmVjdGluZyBmZXRjaGVyXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChjYW5jZWxsZWRGZXRjaGVyTG9hZHMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgLy8gQWx3YXlzIHJldmFsaWRhdGUgaWYgdGhlIGZldGNoZXIgd2FzIGNhbmNlbGxlZFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChmZXRjaGVyICYmIGZldGNoZXIuc3RhdGUgIT09IFwiaWRsZVwiICYmIGZldGNoZXIuZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB0aGUgZmV0Y2hlciBoYXNuJ3QgZXZlciBjb21wbGV0ZWQgbG9hZGluZyB5ZXQsIHRoZW4gdGhpcyBpc24ndCBhXG4gICAgICAvLyByZXZhbGlkYXRpb24sIGl0IHdvdWxkIGp1c3QgYmUgYSBicmFuZCBuZXcgbG9hZCBpZiBhbiBleHBsaWNpdFxuICAgICAgLy8gcmV2YWxpZGF0aW9uIGlzIHJlcXVpcmVkXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gaXNSZXZhbGlkYXRpb25SZXF1aXJlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIGZhbGwgYmFjayBvbiBhbnkgdXNlci1kZWZpbmVkIHNob3VsZFJldmFsaWRhdGUsIGRlZmF1bHRpbmdcbiAgICAgIC8vIHRvIGV4cGxpY2l0IHJldmFsaWRhdGlvbnMgb25seVxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IHNob3VsZFJldmFsaWRhdGVMb2FkZXIoZmV0Y2hlck1hdGNoLCBfZXh0ZW5kcyh7XG4gICAgICAgIGN1cnJlbnRVcmwsXG4gICAgICAgIGN1cnJlbnRQYXJhbXM6IHN0YXRlLm1hdGNoZXNbc3RhdGUubWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXMsXG4gICAgICAgIG5leHRVcmwsXG4gICAgICAgIG5leHRQYXJhbXM6IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5wYXJhbXNcbiAgICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgICB1bnN0YWJsZV9hY3Rpb25TdGF0dXM6IGFjdGlvblN0YXR1cyxcbiAgICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6IHNob3VsZFNraXBSZXZhbGlkYXRpb24gPyBmYWxzZSA6IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBmZXRjaGVyTWF0Y2hlcyxcbiAgICAgICAgbWF0Y2g6IGZldGNoZXJNYXRjaCxcbiAgICAgICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlcigpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW25hdmlnYXRpb25NYXRjaGVzLCByZXZhbGlkYXRpbmdGZXRjaGVyc107XG59XG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPVxuICAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHxcbiAgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkO1xuICAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuICBsZXQgaXNNaXNzaW5nRGF0YSA9IGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkO1xuICAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhXG4gIHJldHVybiBpc05ldyB8fCBpc01pc3NpbmdEYXRhO1xufVxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoXG4gICAgLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8XG4gICAgLy8gc3BsYXQgcGFyYW0gY2hhbmdlZCwgd2hpY2ggaXMgbm90IHByZXNlbnQgaW4gbWF0Y2gucGF0aFxuICAgIC8vIGUuZy4gL2ZpbGVzL2ltYWdlcy9hdmF0YXIuanBnIC0+IGZpbGVzL2ZpbmFuY2VzLnhsc1xuICAgIGN1cnJlbnRQYXRoICE9IG51bGwgJiYgY3VycmVudFBhdGguZW5kc1dpdGgoXCIqXCIpICYmIGN1cnJlbnRNYXRjaC5wYXJhbXNbXCIqXCJdICE9PSBtYXRjaC5wYXJhbXNbXCIqXCJdXG4gICk7XG59XG5mdW5jdGlvbiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGxvYWRlck1hdGNoLCBhcmcpIHtcbiAgaWYgKGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUpIHtcbiAgICBsZXQgcm91dGVDaG9pY2UgPSBsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKGFyZyk7XG4gICAgaWYgKHR5cGVvZiByb3V0ZUNob2ljZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiByb3V0ZUNob2ljZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyZy5kZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cbi8qKlxuICogRXhlY3V0ZSByb3V0ZS5sYXp5KCkgbWV0aG9kcyB0byBsYXppbHkgbG9hZCByb3V0ZSBtb2R1bGVzIChsb2FkZXIsIGFjdGlvbixcbiAqIHNob3VsZFJldmFsaWRhdGUpIGFuZCB1cGRhdGUgdGhlIHJvdXRlTWFuaWZlc3QgaW4gcGxhY2Ugd2hpY2ggc2hhcmVzIG9iamVjdHNcbiAqIHdpdGggZGF0YVJvdXRlcyBzbyB0aG9zZSBnZXQgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlTW9kdWxlKHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KSB7XG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbGF6eVJvdXRlID0gYXdhaXQgcm91dGUubGF6eSgpO1xuICAvLyBJZiB0aGUgbGF6eSByb3V0ZSBmdW5jdGlvbiB3YXMgZXhlY3V0ZWQgYW5kIHJlbW92ZWQgYnkgYW5vdGhlciBwYXJhbGxlbFxuICAvLyBjYWxsIHRoZW4gd2UgY2FuIHJldHVybiAtIGZpcnN0IGxhenkoKSB0byBmaW5pc2ggd2lucyBiZWNhdXNlIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgb2YgbGF6eSBpcyBleHBlY3RlZCB0byBiZSBzdGF0aWNcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCByb3V0ZVRvVXBkYXRlID0gbWFuaWZlc3Rbcm91dGUuaWRdO1xuICBpbnZhcmlhbnQocm91dGVUb1VwZGF0ZSwgXCJObyByb3V0ZSBmb3VuZCBpbiBtYW5pZmVzdFwiKTtcbiAgLy8gVXBkYXRlIHRoZSByb3V0ZSBpbiBwbGFjZS4gIFRoaXMgc2hvdWxkIGJlIHNhZmUgYmVjYXVzZSB0aGVyZSdzIG5vIHdheVxuICAvLyB3ZSBjb3VsZCB5ZXQgYmUgc2l0dGluZyBvbiB0aGlzIHJvdXRlIGFzIHdlIGNhbid0IGdldCB0aGVyZSB3aXRob3V0XG4gIC8vIHJlc29sdmluZyBsYXp5KCkgZmlyc3QuXG4gIC8vXG4gIC8vIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gdGhlIEhNUiBcInVwZGF0ZVwiIHVzZS1jYXNlIHdoZXJlIHdlIG1heSBhY3RpdmVseSBiZVxuICAvLyBvbiB0aGUgcm91dGUgYmVpbmcgdXBkYXRlZC4gIFRoZSBtYWluIGNvbmNlcm4gYm9pbHMgZG93biB0byBcImRvZXMgdGhpc1xuICAvLyBtdXRhdGlvbiBhZmZlY3QgYW55IG9uZ29pbmcgbmF2aWdhdGlvbnMgb3IgYW55IGN1cnJlbnQgc3RhdGUubWF0Y2hlc1xuICAvLyB2YWx1ZXM/XCIuICBJZiBub3QsIGl0IHNob3VsZCBiZSBzYWZlIHRvIHVwZGF0ZSBpbiBwbGFjZS5cbiAgbGV0IHJvdXRlVXBkYXRlcyA9IHt9O1xuICBmb3IgKGxldCBsYXp5Um91dGVQcm9wZXJ0eSBpbiBsYXp5Um91dGUpIHtcbiAgICBsZXQgc3RhdGljUm91dGVWYWx1ZSA9IHJvdXRlVG9VcGRhdGVbbGF6eVJvdXRlUHJvcGVydHldO1xuICAgIGxldCBpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgPSBzdGF0aWNSb3V0ZVZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAvLyBUaGlzIHByb3BlcnR5IGlzbid0IHN0YXRpYyBzaW5jZSBpdCBzaG91bGQgYWx3YXlzIGJlIHVwZGF0ZWQgYmFzZWRcbiAgICAvLyBvbiB0aGUgcm91dGUgdXBkYXRlc1xuICAgIGxhenlSb3V0ZVByb3BlcnR5ICE9PSBcImhhc0Vycm9yQm91bmRhcnlcIjtcbiAgICB3YXJuaW5nKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQsIFwiUm91dGUgXFxcIlwiICsgcm91dGVUb1VwZGF0ZS5pZCArIFwiXFxcIiBoYXMgYSBzdGF0aWMgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgXCIgKyBcImRlZmluZWQgYnV0IGl0cyBsYXp5IGZ1bmN0aW9uIGlzIGFsc28gcmV0dXJuaW5nIGEgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuIFwiICsgKFwiVGhlIGxhenkgcm91dGUgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgd2lsbCBiZSBpZ25vcmVkLlwiKSk7XG4gICAgaWYgKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgJiYgIWltbXV0YWJsZVJvdXRlS2V5cy5oYXMobGF6eVJvdXRlUHJvcGVydHkpKSB7XG4gICAgICByb3V0ZVVwZGF0ZXNbbGF6eVJvdXRlUHJvcGVydHldID0gbGF6eVJvdXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cbiAgLy8gTXV0YXRlIHRoZSByb3V0ZSB3aXRoIHRoZSBwcm92aWRlZCB1cGRhdGVzLiAgRG8gdGhpcyBmaXJzdCBzbyB3ZSBwYXNzXG4gIC8vIHRoZSB1cGRhdGVkIHZlcnNpb24gdG8gbWFwUm91dGVQcm9wZXJ0aWVzXG4gIE9iamVjdC5hc3NpZ24ocm91dGVUb1VwZGF0ZSwgcm91dGVVcGRhdGVzKTtcbiAgLy8gTXV0YXRlIHRoZSBgaGFzRXJyb3JCb3VuZGFyeWAgcHJvcGVydHkgb24gdGhlIHJvdXRlIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAvLyB1cGRhdGVzIGFuZCByZW1vdmUgdGhlIGBsYXp5YCBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNvbHZlIHRoZSBsYXp5XG4gIC8vIHJvdXRlIGFnYWluLlxuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIF9leHRlbmRzKHt9LCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGVUb1VwZGF0ZSksIHtcbiAgICBsYXp5OiB1bmRlZmluZWRcbiAgfSkpO1xufVxuLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgZGF0YVN0cmF0ZWd5YCB3aGljaCBmZXRjaGVzIGFsbCBsb2FkZXJzIGluIHBhcmFsbGVsXG5mdW5jdGlvbiBkZWZhdWx0RGF0YVN0cmF0ZWd5KG9wdHMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKG9wdHMubWF0Y2hlcy5tYXAobSA9PiBtLnJlc29sdmUoKSkpO1xufVxuYXN5bmMgZnVuY3Rpb24gY2FsbERhdGFTdHJhdGVneUltcGwoZGF0YVN0cmF0ZWd5SW1wbCwgdHlwZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgcmVxdWVzdENvbnRleHQpIHtcbiAgbGV0IHJvdXRlSWRzVG9Mb2FkID0gbWF0Y2hlc1RvTG9hZC5yZWR1Y2UoKGFjYywgbSkgPT4gYWNjLmFkZChtLnJvdXRlLmlkKSwgbmV3IFNldCgpKTtcbiAgbGV0IGxvYWRlZE1hdGNoZXMgPSBuZXcgU2V0KCk7XG4gIC8vIFNlbmQgYWxsIG1hdGNoZXMgaGVyZSB0byBhbGxvdyBmb3IgYSBtaWRkbGV3YXJlLXR5cGUgaW1wbGVtZW50YXRpb24uXG4gIC8vIGhhbmRsZXIgd2lsbCBiZSBhIG5vLW9wIGZvciB1bm5lZWRlZCByb3V0ZXMgYW5kIHdlIGZpbHRlciB0aG9zZSByZXN1bHRzXG4gIC8vIGJhY2sgb3V0IGJlbG93LlxuICBsZXQgcmVzdWx0cyA9IGF3YWl0IGRhdGFTdHJhdGVneUltcGwoe1xuICAgIG1hdGNoZXM6IG1hdGNoZXMubWFwKG1hdGNoID0+IHtcbiAgICAgIGxldCBzaG91bGRMb2FkID0gcm91dGVJZHNUb0xvYWQuaGFzKG1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIC8vIGByZXNvbHZlYCBlbmNhcHN1bGF0ZXMgdGhlIHJvdXRlLmxhenksIGV4ZWN1dGluZyB0aGVcbiAgICAgIC8vIGxvYWRlci9hY3Rpb24sIGFuZCBtYXBwaW5nIHJldHVybiB2YWx1ZXMvdGhyb3duIGVycm9ycyB0byBhXG4gICAgICAvLyBIYW5kbGVyUmVzdWx0LiAgVXNlcnMgY2FuIHBhc3MgYSBjYWxsYmFjayB0byB0YWtlIGZpbmUtZ3JhaW5lZCBjb250cm9sXG4gICAgICAvLyBvdmVyIHRoZSBleGVjdXRpb24gb2YgdGhlIGxvYWRlci9hY3Rpb25cbiAgICAgIGxldCByZXNvbHZlID0gaGFuZGxlck92ZXJyaWRlID0+IHtcbiAgICAgICAgbG9hZGVkTWF0Y2hlcy5hZGQobWF0Y2gucm91dGUuaWQpO1xuICAgICAgICByZXR1cm4gc2hvdWxkTG9hZCA/IGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgaGFuZGxlck92ZXJyaWRlLCByZXF1ZXN0Q29udGV4dCkgOiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgICByZXN1bHQ6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIG1hdGNoLCB7XG4gICAgICAgIHNob3VsZExvYWQsXG4gICAgICAgIHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0pLFxuICAgIHJlcXVlc3QsXG4gICAgcGFyYW1zOiBtYXRjaGVzWzBdLnBhcmFtcyxcbiAgICBjb250ZXh0OiByZXF1ZXN0Q29udGV4dFxuICB9KTtcbiAgLy8gVGhyb3cgaWYgYW55IGxvYWRSb3V0ZSBpbXBsZW1lbnRhdGlvbnMgbm90IGNhbGxlZCBzaW5jZSB0aGV5IGFyZSB3aGF0XG4gIC8vIGVuc3VyZXMgYSByb3V0ZSBpcyBmdWxseSBsb2FkZWRcbiAgbWF0Y2hlcy5mb3JFYWNoKG0gPT4gaW52YXJpYW50KGxvYWRlZE1hdGNoZXMuaGFzKG0ucm91dGUuaWQpLCBcImBtYXRjaC5yZXNvbHZlKClgIHdhcyBub3QgY2FsbGVkIGZvciByb3V0ZSBpZCBcXFwiXCIgKyBtLnJvdXRlLmlkICsgXCJcXFwiLiBcIiArIFwiWW91IG11c3QgY2FsbCBgbWF0Y2gucmVzb2x2ZSgpYCBvbiBldmVyeSBtYXRjaCBwYXNzZWQgdG8gXCIgKyBcImBkYXRhU3RyYXRlZ3lgIHRvIGVuc3VyZSBhbGwgcm91dGVzIGFyZSBwcm9wZXJseSBsb2FkZWQuXCIpKTtcbiAgLy8gRmlsdGVyIG91dCBhbnkgbWlkZGxld2FyZS1vbmx5IG1hdGNoZXMgZm9yIHdoaWNoIHdlIGRpZG4ndCBuZWVkIHRvIHJ1biBoYW5kbGVyc1xuICByZXR1cm4gcmVzdWx0cy5maWx0ZXIoKF8sIGkpID0+IHJvdXRlSWRzVG9Mb2FkLmhhcyhtYXRjaGVzW2ldLnJvdXRlLmlkKSk7XG59XG4vLyBEZWZhdWx0IGxvZ2ljIGZvciBjYWxsaW5nIGEgbG9hZGVyL2FjdGlvbiBpcyB0aGUgdXNlciBoYXMgbm8gc3BlY2lmaWVkIGEgZGF0YVN0cmF0ZWd5XG5hc3luYyBmdW5jdGlvbiBjYWxsTG9hZGVyT3JBY3Rpb24odHlwZSwgcmVxdWVzdCwgbWF0Y2gsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGhhbmRsZXJPdmVycmlkZSwgc3RhdGljQ29udGV4dCkge1xuICBsZXQgcmVzdWx0O1xuICBsZXQgb25SZWplY3Q7XG4gIGxldCBydW5IYW5kbGVyID0gaGFuZGxlciA9PiB7XG4gICAgLy8gU2V0dXAgYSBwcm9taXNlIHdlIGNhbiByYWNlIGFnYWluc3Qgc28gdGhhdCBhYm9ydCBzaWduYWxzIHNob3J0IGNpcmN1aXRcbiAgICBsZXQgcmVqZWN0O1xuICAgIC8vIFRoaXMgd2lsbCBuZXZlciByZXNvbHZlIHNvIHNhZmUgdG8gdHlwZSBpdCBhcyBQcm9taXNlPEhhbmRsZXJSZXN1bHQ+IHRvXG4gICAgLy8gc2F0aXNmeSB0aGUgZnVuY3Rpb24gcmV0dXJuIHZhbHVlXG4gICAgbGV0IGFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTtcbiAgICBvblJlamVjdCA9ICgpID0+IHJlamVjdCgpO1xuICAgIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvblJlamVjdCk7XG4gICAgbGV0IGFjdHVhbEhhbmRsZXIgPSBjdHggPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIllvdSBjYW5ub3QgY2FsbCB0aGUgaGFuZGxlciBmb3IgYSByb3V0ZSB3aGljaCBkZWZpbmVzIGEgYm9vbGVhbiBcIiArIChcIlxcXCJcIiArIHR5cGUgKyBcIlxcXCIgW3JvdXRlSWQ6IFwiICsgbWF0Y2gucm91dGUuaWQgKyBcIl1cIikpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYW5kbGVyKHtcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgcGFyYW1zOiBtYXRjaC5wYXJhbXMsXG4gICAgICAgIGNvbnRleHQ6IHN0YXRpY0NvbnRleHRcbiAgICAgIH0sIC4uLihjdHggIT09IHVuZGVmaW5lZCA/IFtjdHhdIDogW10pKTtcbiAgICB9O1xuICAgIGxldCBoYW5kbGVyUHJvbWlzZTtcbiAgICBpZiAoaGFuZGxlck92ZXJyaWRlKSB7XG4gICAgICBoYW5kbGVyUHJvbWlzZSA9IGhhbmRsZXJPdmVycmlkZShjdHggPT4gYWN0dWFsSGFuZGxlcihjdHgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlclByb21pc2UgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxldCB2YWwgPSBhd2FpdCBhY3R1YWxIYW5kbGVyKCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwiZGF0YVwiLFxuICAgICAgICAgICAgcmVzdWx0OiB2YWxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIHJlc3VsdDogZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJhY2UoW2hhbmRsZXJQcm9taXNlLCBhYm9ydFByb21pc2VdKTtcbiAgfTtcbiAgdHJ5IHtcbiAgICBsZXQgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgIGlmIChtYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAvLyBSdW4gc3RhdGljYWxseSBkZWZpbmVkIGhhbmRsZXIgaW4gcGFyYWxsZWwgd2l0aCBsYXp5KClcbiAgICAgICAgbGV0IGhhbmRsZXJFcnJvcjtcbiAgICAgICAgbGV0IFt2YWx1ZV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIHRocm93cywgZG9uJ3QgbGV0IGl0IGltbWVkaWF0ZWx5IGJ1YmJsZSBvdXQsXG4gICAgICAgIC8vIHNpbmNlIHdlIG5lZWQgdG8gbGV0IHRoZSBsYXp5KCkgZXhlY3V0aW9uIGZpbmlzaCBzbyB3ZSBrbm93IGlmIHRoaXNcbiAgICAgICAgLy8gcm91dGUgaGFzIGEgYm91bmRhcnkgdGhhdCBjYW4gaGFuZGxlIHRoZSBlcnJvclxuICAgICAgICBydW5IYW5kbGVyKGhhbmRsZXIpLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIGhhbmRsZXJFcnJvciA9IGU7XG4gICAgICAgIH0pLCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KV0pO1xuICAgICAgICBpZiAoaGFuZGxlckVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBoYW5kbGVyRXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb2FkIGxhenkgcm91dGUgbW9kdWxlLCB0aGVuIHJ1biBhbnkgcmV0dXJuZWQgaGFuZGxlclxuICAgICAgICBhd2FpdCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KTtcbiAgICAgICAgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIC8vIEhhbmRsZXIgc3RpbGwgcnVucyBldmVuIGlmIHdlIGdvdCBpbnRlcnJ1cHRlZCB0byBtYWludGFpbiBjb25zaXN0ZW5jeVxuICAgICAgICAgIC8vIHdpdGggdW4tYWJvcnRhYmxlIGJlaGF2aW9yIG9mIGhhbmRsZXIgZXhlY3V0aW9uIG9uIG5vbi1sYXp5IG9yXG4gICAgICAgICAgLy8gcHJldmlvdXNseS1sYXp5LWxvYWRlZCByb3V0ZXNcbiAgICAgICAgICByZXN1bHQgPSBhd2FpdCBydW5IYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiYWN0aW9uXCIpIHtcbiAgICAgICAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgICAgbGV0IHBhdGhuYW1lID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaDtcbiAgICAgICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgcm91dGVJZDogbWF0Y2gucm91dGUuaWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBsYXp5KCkgcm91dGUgaGFzIG5vIGxvYWRlciB0byBydW4uICBTaG9ydCBjaXJjdWl0IGhlcmUgc28gd2UgZG9uJ3RcbiAgICAgICAgICAvLyBoaXQgdGhlIGludmFyaWFudCBiZWxvdyB0aGF0IGVycm9ycyBvbiByZXR1cm5pbmcgdW5kZWZpbmVkLlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgICAgICByZXN1bHQ6IHVuZGVmaW5lZFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFoYW5kbGVyKSB7XG4gICAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBydW5IYW5kbGVyKGhhbmRsZXIpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQocmVzdWx0LnJlc3VsdCAhPT0gdW5kZWZpbmVkLCBcIllvdSBkZWZpbmVkIFwiICsgKHR5cGUgPT09IFwiYWN0aW9uXCIgPyBcImFuIGFjdGlvblwiIDogXCJhIGxvYWRlclwiKSArIFwiIGZvciByb3V0ZSBcIiArIChcIlxcXCJcIiArIG1hdGNoLnJvdXRlLmlkICsgXCJcXFwiIGJ1dCBkaWRuJ3QgcmV0dXJuIGFueXRoaW5nIGZyb20geW91ciBgXCIgKyB0eXBlICsgXCJgIFwiKSArIFwiZnVuY3Rpb24uIFBsZWFzZSByZXR1cm4gYSB2YWx1ZSBvciBgbnVsbGAuXCIpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gV2Ugc2hvdWxkIGFscmVhZHkgYmUgY2F0Y2hpbmcgYW5kIGNvbnZlcnRpbmcgbm9ybWFsIGhhbmRsZXIgZXhlY3V0aW9ucyB0b1xuICAgIC8vIEhhbmRsZXJSZXN1bHRzIGFuZCByZXR1cm5pbmcgdGhlbSwgc28gYW55dGhpbmcgdGhhdCB0aHJvd3MgaGVyZSBpcyBhblxuICAgIC8vIHVuZXhwZWN0ZWQgZXJyb3Igd2Ugc3RpbGwgbmVlZCB0byB3cmFwXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICByZXN1bHQ6IGVcbiAgICB9O1xuICB9IGZpbmFsbHkge1xuICAgIGlmIChvblJlamVjdCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRIYW5kbGVyUmVzdWx0VG9EYXRhUmVzdWx0KGhhbmRsZXJSZXN1bHQpIHtcbiAgbGV0IHtcbiAgICByZXN1bHQsXG4gICAgdHlwZSxcbiAgICBzdGF0dXNcbiAgfSA9IGhhbmRsZXJSZXN1bHQ7XG4gIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICBsZXQgZGF0YTtcbiAgICB0cnkge1xuICAgICAgbGV0IGNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgICAgLy8gQ2hlY2sgYmV0d2VlbiB3b3JkIGJvdW5kYXJpZXMgaW5zdGVhZCBvZiBzdGFydHNXaXRoKCkgZHVlIHRvIHRoZSBsYXN0XG4gICAgICAvLyBwYXJhZ3JhcGggb2YgaHR0cHM6Ly9odHRwd2cub3JnL3NwZWNzL3JmYzkxMTAuaHRtbCNmaWVsZC5jb250ZW50LXR5cGVcbiAgICAgIGlmIChjb250ZW50VHlwZSAmJiAvXFxiYXBwbGljYXRpb25cXC9qc29uXFxiLy50ZXN0KGNvbnRlbnRUeXBlKSkge1xuICAgICAgICBpZiAocmVzdWx0LmJvZHkgPT0gbnVsbCkge1xuICAgICAgICAgIGRhdGEgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQuanNvbigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gYXdhaXQgcmVzdWx0LnRleHQoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBuZXcgRXJyb3JSZXNwb25zZUltcGwocmVzdWx0LnN0YXR1cywgcmVzdWx0LnN0YXR1c1RleHQsIGRhdGEpLFxuICAgICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICBlcnJvcjogcmVzdWx0LFxuICAgICAgc3RhdHVzQ29kZTogaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0KSA/IHJlc3VsdC5zdGF0dXMgOiBzdGF0dXNcbiAgICB9O1xuICB9XG4gIGlmIChpc0RlZmVycmVkRGF0YShyZXN1bHQpKSB7XG4gICAgdmFyIF9yZXN1bHQkaW5pdCwgX3Jlc3VsdCRpbml0MjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kZWZlcnJlZCxcbiAgICAgIGRlZmVycmVkRGF0YTogcmVzdWx0LFxuICAgICAgc3RhdHVzQ29kZTogKF9yZXN1bHQkaW5pdCA9IHJlc3VsdC5pbml0KSA9PSBudWxsID8gdm9pZCAwIDogX3Jlc3VsdCRpbml0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6ICgoX3Jlc3VsdCRpbml0MiA9IHJlc3VsdC5pbml0KSA9PSBudWxsID8gdm9pZCAwIDogX3Jlc3VsdCRpbml0Mi5oZWFkZXJzKSAmJiBuZXcgSGVhZGVycyhyZXN1bHQuaW5pdC5oZWFkZXJzKVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LFxuICAgIHN0YXR1c0NvZGU6IHN0YXR1c1xuICB9O1xufVxuLy8gU3VwcG9ydCByZWxhdGl2ZSByb3V0aW5nIGluIGludGVybmFsIHJlZGlyZWN0c1xuZnVuY3Rpb24gbm9ybWFsaXplUmVsYXRpdmVSb3V0aW5nUmVkaXJlY3RSZXNwb25zZShyZXNwb25zZSwgcmVxdWVzdCwgcm91dGVJZCwgbWF0Y2hlcywgYmFzZW5hbWUsIHY3X3JlbGF0aXZlU3BsYXRQYXRoKSB7XG4gIGxldCBsb2NhdGlvbiA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gIGludmFyaWFudChsb2NhdGlvbiwgXCJSZWRpcmVjdHMgcmV0dXJuZWQvdGhyb3duIGZyb20gbG9hZGVycy9hY3Rpb25zIG11c3QgaGF2ZSBhIExvY2F0aW9uIGhlYWRlclwiKTtcbiAgaWYgKCFBQlNPTFVURV9VUkxfUkVHRVgudGVzdChsb2NhdGlvbikpIHtcbiAgICBsZXQgdHJpbW1lZE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgKyAxKTtcbiAgICBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvKG5ldyBVUkwocmVxdWVzdC51cmwpLCB0cmltbWVkTWF0Y2hlcywgYmFzZW5hbWUsIHRydWUsIGxvY2F0aW9uLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCk7XG4gICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCBsb2NhdGlvbik7XG4gIH1cbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUmVkaXJlY3RMb2NhdGlvbihsb2NhdGlvbiwgY3VycmVudFVybCwgYmFzZW5hbWUpIHtcbiAgaWYgKEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KGxvY2F0aW9uKSkge1xuICAgIC8vIFN0cmlwIG9mZiB0aGUgcHJvdG9jb2wrb3JpZ2luIGZvciBzYW1lLW9yaWdpbiArIHNhbWUtYmFzZW5hbWUgYWJzb2x1dGUgcmVkaXJlY3RzXG4gICAgbGV0IG5vcm1hbGl6ZWRMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgIGxldCB1cmwgPSBub3JtYWxpemVkTG9jYXRpb24uc3RhcnRzV2l0aChcIi8vXCIpID8gbmV3IFVSTChjdXJyZW50VXJsLnByb3RvY29sICsgbm9ybWFsaXplZExvY2F0aW9uKSA6IG5ldyBVUkwobm9ybWFsaXplZExvY2F0aW9uKTtcbiAgICBsZXQgaXNTYW1lQmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpICE9IG51bGw7XG4gICAgaWYgKHVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luICYmIGlzU2FtZUJhc2VuYW1lKSB7XG4gICAgICByZXR1cm4gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbG9jYXRpb247XG59XG4vLyBVdGlsaXR5IG1ldGhvZCBmb3IgY3JlYXRpbmcgdGhlIFJlcXVlc3QgaW5zdGFuY2VzIGZvciBsb2FkZXJzL2FjdGlvbnMgZHVyaW5nXG4vLyBjbGllbnQtc2lkZSBuYXZpZ2F0aW9ucyBhbmQgZmV0Y2hlcy4gIER1cmluZyBTU1Igd2Ugd2lsbCBhbHdheXMgaGF2ZSBhXG4vLyBSZXF1ZXN0IGluc3RhbmNlIGZyb20gdGhlIHN0YXRpYyBoYW5kbGVyIChxdWVyeS9xdWVyeVJvdXRlKVxuZnVuY3Rpb24gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaGlzdG9yeSwgbG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge1xuICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoc3RyaXBIYXNoRnJvbVBhdGgobG9jYXRpb24pKS50b1N0cmluZygpO1xuICBsZXQgaW5pdCA9IHtcbiAgICBzaWduYWxcbiAgfTtcbiAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgbGV0IHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtRW5jVHlwZVxuICAgIH0gPSBzdWJtaXNzaW9uO1xuICAgIC8vIERpZG4ndCB0aGluayB3ZSBuZWVkZWQgdGhpcyBidXQgaXQgdHVybnMgb3V0IHVubGlrZSBvdGhlciBtZXRob2RzLCBwYXRjaFxuICAgIC8vIHdvbid0IGJlIHByb3Blcmx5IG5vcm1hbGl6ZWQgdG8gdXBwZXJjYXNlIGFuZCByZXN1bHRzIGluIGEgNDA1IGVycm9yLlxuICAgIC8vIFNlZTogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtbWV0aG9kXG4gICAgaW5pdC5tZXRob2QgPSBmb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKGZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgaW5pdC5oZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBmb3JtRW5jVHlwZVxuICAgICAgfSk7XG4gICAgICBpbml0LmJvZHkgPSBKU09OLnN0cmluZ2lmeShzdWJtaXNzaW9uLmpzb24pO1xuICAgIH0gZWxzZSBpZiAoZm9ybUVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24udGV4dDtcbiAgICB9IGVsc2UgaWYgKGZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICYmIHN1Ym1pc3Npb24uZm9ybURhdGEpIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoc3VibWlzc2lvbi5mb3JtRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gc3VibWlzc2lvbi5mb3JtRGF0YTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgaW5pdCk7XG59XG5mdW5jdGlvbiBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhmb3JtRGF0YSkge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgZm9ybURhdGEuZW50cmllcygpKSB7XG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjY29udmVydGluZy1hbi1lbnRyeS1saXN0LXRvLWEtbGlzdC1vZi1uYW1lLXZhbHVlLXBhaXJzXG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlIDogdmFsdWUubmFtZSk7XG4gIH1cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbmZ1bmN0aW9uIGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcykge1xuICBsZXQgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIHNlYXJjaFBhcmFtcy5lbnRyaWVzKCkpIHtcbiAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uUmVzdWx0LCBhY3RpdmVEZWZlcnJlZHMsIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nKSB7XG4gIC8vIEZpbGwgaW4gbG9hZGVyRGF0YS9lcnJvcnMgZnJvbSBvdXIgbG9hZGVyc1xuICBsZXQgbG9hZGVyRGF0YSA9IHt9O1xuICBsZXQgZXJyb3JzID0gbnVsbDtcbiAgbGV0IHN0YXR1c0NvZGU7XG4gIGxldCBmb3VuZEVycm9yID0gZmFsc2U7XG4gIGxldCBsb2FkZXJIZWFkZXJzID0ge307XG4gIGxldCBwZW5kaW5nRXJyb3IgPSBwZW5kaW5nQWN0aW9uUmVzdWx0ICYmIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkgPyBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmVycm9yIDogdW5kZWZpbmVkO1xuICAvLyBQcm9jZXNzIGxvYWRlciByZXN1bHRzIGludG8gc3RhdGUubG9hZGVyRGF0YS9zdGF0ZS5lcnJvcnNcbiAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7XG4gICAgbGV0IGlkID0gbWF0Y2hlc1RvTG9hZFtpbmRleF0ucm91dGUuaWQ7XG4gICAgaW52YXJpYW50KCFpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCksIFwiQ2Fubm90IGhhbmRsZSByZWRpcmVjdCByZXN1bHRzIGluIHByb2Nlc3NMb2FkZXJEYXRhXCIpO1xuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBlcnJvciA9IHJlc3VsdC5lcnJvcjtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nIGFjdGlvbiBlcnJvciwgd2UgcmVwb3J0IGl0IGF0IHRoZSBoaWdoZXN0LXJvdXRlXG4gICAgICAvLyB0aGF0IHRocm93cyBhIGxvYWRlciBlcnJvciwgYW5kIHRoZW4gY2xlYXIgaXQgb3V0IHRvIGluZGljYXRlIHRoYXRcbiAgICAgIC8vIGl0IHdhcyBjb25zdW1lZFxuICAgICAgaWYgKHBlbmRpbmdFcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVycm9yID0gcGVuZGluZ0Vycm9yO1xuICAgICAgICBwZW5kaW5nRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307XG4gICAgICBpZiAoc2tpcExvYWRlckVycm9yQnViYmxpbmcpIHtcbiAgICAgICAgZXJyb3JzW2lkXSA9IGVycm9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTG9vayB1cHdhcmRzIGZyb20gdGhlIG1hdGNoZWQgcm91dGUgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yXG4gICAgICAgIC8vIGJvdW5kYXJ5LCBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoLiAgUHJlZmVyIGhpZ2hlciBlcnJvciB2YWx1ZXNcbiAgICAgICAgLy8gaWYgbG93ZXIgZXJyb3JzIGJ1YmJsZSB0byB0aGUgc2FtZSBib3VuZGFyeVxuICAgICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgaWQpO1xuICAgICAgICBpZiAoZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID09IG51bGwpIHtcbiAgICAgICAgICBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0gPSBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2xlYXIgb3VyIGFueSBwcmlvciBsb2FkZXJEYXRhIGZvciB0aGUgdGhyb3dpbmcgcm91dGVcbiAgICAgIGxvYWRlckRhdGFbaWRdID0gdW5kZWZpbmVkO1xuICAgICAgLy8gT25jZSB3ZSBmaW5kIG91ciBmaXJzdCAoaGlnaGVzdCkgZXJyb3IsIHdlIHNldCB0aGUgc3RhdHVzIGNvZGUgYW5kXG4gICAgICAvLyBwcmV2ZW50IGRlZXBlciBzdGF0dXMgY29kZXMgZnJvbSBvdmVycmlkaW5nXG4gICAgICBpZiAoIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgZm91bmRFcnJvciA9IHRydWU7XG4gICAgICAgIHN0YXR1c0NvZGUgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMDtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5zZXQoaWQsIHJlc3VsdC5kZWZlcnJlZERhdGEpO1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YTtcbiAgICAgICAgLy8gRXJyb3Igc3RhdHVzIGNvZGVzIGFsd2F5cyBvdmVycmlkZSBzdWNjZXNzIHN0YXR1cyBjb2RlcywgYnV0IGlmIGFsbFxuICAgICAgICAvLyBsb2FkZXJzIGFyZSBzdWNjZXNzZnVsIHdlIHRha2UgdGhlIGRlZXBlc3Qgc3RhdHVzIGNvZGUuXG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsICYmIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgICBzdGF0dXNDb2RlID0gcmVzdWx0LnN0YXR1c0NvZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTtcbiAgICAgICAgLy8gRXJyb3Igc3RhdHVzIGNvZGVzIGFsd2F5cyBvdmVycmlkZSBzdWNjZXNzIHN0YXR1cyBjb2RlcywgYnV0IGlmIGFsbFxuICAgICAgICAvLyBsb2FkZXJzIGFyZSBzdWNjZXNzZnVsIHdlIHRha2UgdGhlIGRlZXBlc3Qgc3RhdHVzIGNvZGUuXG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzQ29kZSAmJiByZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwICYmICFmb3VuZEVycm9yKSB7XG4gICAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICAvLyBJZiB3ZSBkaWRuJ3QgY29uc3VtZSB0aGUgcGVuZGluZyBhY3Rpb24gZXJyb3IgKGkuZS4sIGFsbCBsb2FkZXJzXG4gIC8vIHJlc29sdmVkKSwgdGhlbiBjb25zdW1lIGl0IGhlcmUuICBBbHNvIGNsZWFyIG91dCBhbnkgbG9hZGVyRGF0YSBmb3IgdGhlXG4gIC8vIHRocm93aW5nIHJvdXRlXG4gIGlmIChwZW5kaW5nRXJyb3IgIT09IHVuZGVmaW5lZCAmJiBwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gICAgZXJyb3JzID0ge1xuICAgICAgW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dOiBwZW5kaW5nRXJyb3JcbiAgICB9O1xuICAgIGxvYWRlckRhdGFbcGVuZGluZ0FjdGlvblJlc3VsdFswXV0gPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9ycyxcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlIHx8IDIwMCxcbiAgICBsb2FkZXJIZWFkZXJzXG4gIH07XG59XG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0FjdGlvblJlc3VsdCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpIHtcbiAgbGV0IHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9yc1xuICB9ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uUmVzdWx0LCBhY3RpdmVEZWZlcnJlZHMsIGZhbHNlIC8vIFRoaXMgbWV0aG9kIGlzIG9ubHkgY2FsbGVkIGNsaWVudCBzaWRlIHNvIHdlIGFsd2F5cyB3YW50IHRvIGJ1YmJsZVxuICApO1xuICAvLyBQcm9jZXNzIHJlc3VsdHMgZnJvbSBvdXIgcmV2YWxpZGF0aW5nIGZldGNoZXJzXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQge1xuICAgICAga2V5LFxuICAgICAgbWF0Y2gsXG4gICAgICBjb250cm9sbGVyXG4gICAgfSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW2luZGV4XTtcbiAgICBpbnZhcmlhbnQoZmV0Y2hlclJlc3VsdHMgIT09IHVuZGVmaW5lZCAmJiBmZXRjaGVyUmVzdWx0c1tpbmRleF0gIT09IHVuZGVmaW5lZCwgXCJEaWQgbm90IGZpbmQgY29ycmVzcG9uZGluZyBmZXRjaGVyIHJlc3VsdFwiKTtcbiAgICBsZXQgcmVzdWx0ID0gZmV0Y2hlclJlc3VsdHNbaW5kZXhdO1xuICAgIC8vIFByb2Nlc3MgZmV0Y2hlciBub24tcmVkaXJlY3QgZXJyb3JzXG4gICAgaWYgKGNvbnRyb2xsZXIgJiYgY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gTm90aGluZyB0byBkbyBmb3IgYWJvcnRlZCBmZXRjaGVyc1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCBtYXRjaCA9PSBudWxsID8gdm9pZCAwIDogbWF0Y2gucm91dGUuaWQpO1xuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIGVycm9ycywge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgfSBlbHNlIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgcmVkaXJlY3RzIHNob3VsZCBnZXQgcHJvY2Vzc2VkIGFib3ZlLCBidXQgd2VcbiAgICAgIC8vIGtlZXAgdGhpcyB0byB0eXBlIG5hcnJvdyB0byBhIHN1Y2Nlc3MgcmVzdWx0IGluIHRoZSBlbHNlXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgcmV2YWxpZGF0aW9uIHJlZGlyZWN0XCIpO1xuICAgIH0gZWxzZSBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIGRlZmVycmVkIGRhdGEgc2hvdWxkIGJlIGF3YWl0ZWQgZm9yIGZldGNoZXJzXG4gICAgICAvLyBpbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzXG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIocmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH07XG59XG5mdW5jdGlvbiBtZXJnZUxvYWRlckRhdGEobG9hZGVyRGF0YSwgbmV3TG9hZGVyRGF0YSwgbWF0Y2hlcywgZXJyb3JzKSB7XG4gIGxldCBtZXJnZWRMb2FkZXJEYXRhID0gX2V4dGVuZHMoe30sIG5ld0xvYWRlckRhdGEpO1xuICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG4gICAgaWYgKG5ld0xvYWRlckRhdGEuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICBpZiAobmV3TG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IG5ld0xvYWRlckRhdGFbaWRdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCAmJiBtYXRjaC5yb3V0ZS5sb2FkZXIpIHtcbiAgICAgIC8vIFByZXNlcnZlIGV4aXN0aW5nIGtleXMgbm90IGluY2x1ZGVkIGluIG5ld0xvYWRlckRhdGEgYW5kIHdoZXJlIGEgbG9hZGVyXG4gICAgICAvLyB3YXNuJ3QgcmVtb3ZlZCBieSBITVJcbiAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbG9hZGVyRGF0YVtpZF07XG4gICAgfVxuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgLy8gRG9uJ3Qga2VlcCBhbnkgbG9hZGVyIGRhdGEgYmVsb3cgdGhlIGJvdW5kYXJ5XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1lcmdlZExvYWRlckRhdGE7XG59XG5mdW5jdGlvbiBnZXRBY3Rpb25EYXRhRm9yQ29tbWl0KHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgaWYgKCFwZW5kaW5nQWN0aW9uUmVzdWx0KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8ge1xuICAgIC8vIENsZWFyIG91dCBwcmlvciBhY3Rpb25EYXRhIG9uIGVycm9yc1xuICAgIGFjdGlvbkRhdGE6IHt9XG4gIH0gOiB7XG4gICAgYWN0aW9uRGF0YToge1xuICAgICAgW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dOiBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmRhdGFcbiAgICB9XG4gIH07XG59XG4vLyBGaW5kIHRoZSBuZWFyZXN0IGVycm9yIGJvdW5kYXJ5LCBsb29raW5nIHVwd2FyZHMgZnJvbSB0aGUgbGVhZiByb3V0ZSAob3IgdGhlXG4vLyByb3V0ZSBzcGVjaWZpZWQgYnkgcm91dGVJZCkgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yIGJvdW5kYXJ5LFxuLy8gZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaFxuZnVuY3Rpb24gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCByb3V0ZUlkKSB7XG4gIGxldCBlbGlnaWJsZU1hdGNoZXMgPSByb3V0ZUlkID8gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmZpbmRJbmRleChtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpICsgMSkgOiBbLi4ubWF0Y2hlc107XG4gIHJldHVybiBlbGlnaWJsZU1hdGNoZXMucmV2ZXJzZSgpLmZpbmQobSA9PiBtLnJvdXRlLmhhc0Vycm9yQm91bmRhcnkgPT09IHRydWUpIHx8IG1hdGNoZXNbMF07XG59XG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlcykge1xuICAvLyBQcmVmZXIgYSByb290IGxheW91dCByb3V0ZSBpZiBwcmVzZW50LCBvdGhlcndpc2Ugc2hpbSBpbiBhIHJvdXRlIG9iamVjdFxuICBsZXQgcm91dGUgPSByb3V0ZXMubGVuZ3RoID09PSAxID8gcm91dGVzWzBdIDogcm91dGVzLmZpbmQociA9PiByLmluZGV4IHx8ICFyLnBhdGggfHwgci5wYXRoID09PSBcIi9cIikgfHwge1xuICAgIGlkOiBcIl9fc2hpbS1lcnJvci1yb3V0ZV9fXCJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbe1xuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgcGF0aG5hbWVCYXNlOiBcIlwiLFxuICAgICAgcm91dGVcbiAgICB9XSxcbiAgICByb3V0ZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcihzdGF0dXMsIF90ZW1wNSkge1xuICBsZXQge1xuICAgIHBhdGhuYW1lLFxuICAgIHJvdXRlSWQsXG4gICAgbWV0aG9kLFxuICAgIHR5cGVcbiAgfSA9IF90ZW1wNSA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDU7XG4gIGxldCBzdGF0dXNUZXh0ID0gXCJVbmtub3duIFNlcnZlciBFcnJvclwiO1xuICBsZXQgZXJyb3JNZXNzYWdlID0gXCJVbmtub3duIEByZW1peC1ydW4vcm91dGVyIGVycm9yXCI7XG4gIGlmIChzdGF0dXMgPT09IDQwMCkge1xuICAgIHN0YXR1c1RleHQgPSBcIkJhZCBSZXF1ZXN0XCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhIGBsb2FkZXJgIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImRlZmVyLWFjdGlvblwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcImRlZmVyKCkgaXMgbm90IHN1cHBvcnRlZCBpbiBhY3Rpb25zXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcImludmFsaWQtYm9keVwiKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIlVuYWJsZSB0byBlbmNvZGUgc3VibWlzc2lvbiBib2R5XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDAzKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiRm9yYmlkZGVuXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJSb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiIGRvZXMgbm90IG1hdGNoIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTm90IEZvdW5kXCI7XG4gICAgZXJyb3JNZXNzYWdlID0gXCJObyByb3V0ZSBtYXRjaGVzIFVSTCBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIlwiO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA1KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGFuIGBhY3Rpb25gIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmIChtZXRob2QpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCByZXF1ZXN0IG1ldGhvZCBcXFwiXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiXFxcIlwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEVycm9yUmVzcG9uc2VJbXBsKHN0YXR1cyB8fCA1MDAsIHN0YXR1c1RleHQsIG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpLCB0cnVlKTtcbn1cbi8vIEZpbmQgYW55IHJldHVybmVkIHJlZGlyZWN0IGVycm9ycywgc3RhcnRpbmcgZnJvbSB0aGUgbG93ZXN0IG1hdGNoXG5mdW5jdGlvbiBmaW5kUmVkaXJlY3QocmVzdWx0cykge1xuICBmb3IgKGxldCBpID0gcmVzdWx0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgaWR4OiBpXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCkge1xuICBsZXQgcGFyc2VkUGF0aCA9IHR5cGVvZiBwYXRoID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHBhdGgpIDogcGF0aDtcbiAgcmV0dXJuIGNyZWF0ZVBhdGgoX2V4dGVuZHMoe30sIHBhcnNlZFBhdGgsIHtcbiAgICBoYXNoOiBcIlwiXG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGlzSGFzaENoYW5nZU9ubHkoYSwgYikge1xuICBpZiAoYS5wYXRobmFtZSAhPT0gYi5wYXRobmFtZSB8fCBhLnNlYXJjaCAhPT0gYi5zZWFyY2gpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGEuaGFzaCA9PT0gXCJcIikge1xuICAgIC8vIC9wYWdlIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gYi5oYXNoICE9PSBcIlwiO1xuICB9IGVsc2UgaWYgKGEuaGFzaCA9PT0gYi5oYXNoKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNoYXNoXG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoYi5oYXNoICE9PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZSNvdGhlclxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIElmIHRoZSBoYXNoIGlzIHJlbW92ZWQgdGhlIGJyb3dzZXIgd2lsbCByZS1wZXJmb3JtIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyXG4gIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2VcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNIYW5kbGVyUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0ICE9IG51bGwgJiYgdHlwZW9mIHJlc3VsdCA9PT0gXCJvYmplY3RcIiAmJiBcInR5cGVcIiBpbiByZXN1bHQgJiYgXCJyZXN1bHRcIiBpbiByZXN1bHQgJiYgKHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmRhdGEgfHwgcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpO1xufVxuZnVuY3Rpb24gaXNSZWRpcmVjdEhhbmRsZXJSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdC5yZXN1bHQpICYmIHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHJlc3VsdC5yZXN1bHQuc3RhdHVzKTtcbn1cbmZ1bmN0aW9uIGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kZWZlcnJlZDtcbn1cbmZ1bmN0aW9uIGlzRXJyb3JSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcjtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiAocmVzdWx0ICYmIHJlc3VsdC50eXBlKSA9PT0gUmVzdWx0VHlwZS5yZWRpcmVjdDtcbn1cbmZ1bmN0aW9uIGlzRGVmZXJyZWREYXRhKHZhbHVlKSB7XG4gIGxldCBkZWZlcnJlZCA9IHZhbHVlO1xuICByZXR1cm4gZGVmZXJyZWQgJiYgdHlwZW9mIGRlZmVycmVkID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5kYXRhID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5zdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmZXJyZWQuY2FuY2VsID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLnJlc29sdmVEYXRhID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHZhbHVlLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlLmhlYWRlcnMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLmJvZHkgIT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzcG9uc2UocmVzdWx0KSB7XG4gIGlmICghaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICBsZXQgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgcmV0dXJuIHN0YXR1cyA+PSAzMDAgJiYgc3RhdHVzIDw9IDM5OSAmJiBsb2NhdGlvbiAhPSBudWxsO1xufVxuZnVuY3Rpb24gaXNWYWxpZE1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkUmVxdWVzdE1ldGhvZHMuaGFzKG1ldGhvZC50b0xvd2VyQ2FzZSgpKTtcbn1cbmZ1bmN0aW9uIGlzTXV0YXRpb25NZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZE11dGF0aW9uTWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgc2lnbmFscywgaXNGZXRjaGVyLCBjdXJyZW50TG9hZGVyRGF0YSkge1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmVzdWx0cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpbmRleF07XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hlc1RvTG9hZFtpbmRleF07XG4gICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIG1hdGNoLCB0aGVuIHdlIGNhbiBoYXZlIGEgZGVmZXJyZWQgcmVzdWx0IHRvIGRvXG4gICAgLy8gYW55dGhpbmcgd2l0aC4gIFRoaXMgaXMgZm9yIHJldmFsaWRhdGluZyBmZXRjaGVycyB3aGVyZSB0aGUgcm91dGUgd2FzXG4gICAgLy8gcmVtb3ZlZCBkdXJpbmcgSE1SXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2gucm91dGUuaWQpO1xuICAgIGxldCBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpICYmIChpc0ZldGNoZXIgfHwgaXNSZXZhbGlkYXRpbmdMb2FkZXIpKSB7XG4gICAgICAvLyBOb3RlOiB3ZSBkbyBub3QgaGF2ZSB0byB0b3VjaCBhY3RpdmVEZWZlcnJlZHMgaGVyZSBzaW5jZSB3ZSByYWNlIHRoZW1cbiAgICAgIC8vIGFnYWluc3QgdGhlIHNpZ25hbCBpbiByZXNvbHZlRGVmZXJyZWREYXRhIGFuZCB0aGV5J2xsIGdldCBhYm9ydGVkXG4gICAgICAvLyB0aGVyZSBpZiBuZWVkZWRcbiAgICAgIGxldCBzaWduYWwgPSBzaWduYWxzW2luZGV4XTtcbiAgICAgIGludmFyaWFudChzaWduYWwsIFwiRXhwZWN0ZWQgYW4gQWJvcnRTaWduYWwgZm9yIHJldmFsaWRhdGluZyBmZXRjaGVyIGRlZmVycmVkIHJlc3VsdFwiKTtcbiAgICAgIGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIGlzRmV0Y2hlcikudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSByZXN1bHQgfHwgcmVzdWx0c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgdW53cmFwKSB7XG4gIGlmICh1bndyYXAgPT09IHZvaWQgMCkge1xuICAgIHVud3JhcCA9IGZhbHNlO1xuICB9XG4gIGxldCBhYm9ydGVkID0gYXdhaXQgcmVzdWx0LmRlZmVycmVkRGF0YS5yZXNvbHZlRGF0YShzaWduYWwpO1xuICBpZiAoYWJvcnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodW53cmFwKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS51bndyYXBwZWREYXRhXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIEhhbmRsZSBhbnkgVHJhY2tlZFByb21pc2UuX2Vycm9yIHZhbHVlcyBlbmNvdW50ZXJlZCB3aGlsZSB1bndyYXBwaW5nXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhXG4gIH07XG59XG5mdW5jdGlvbiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoKSB7XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCkuZ2V0QWxsKFwiaW5kZXhcIikuc29tZSh2ID0+IHYgPT09IFwiXCIpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pIHtcbiAgbGV0IHNlYXJjaCA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbikuc2VhcmNoIDogbG9jYXRpb24uc2VhcmNoO1xuICBpZiAobWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4ICYmIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2ggfHwgXCJcIikpIHtcbiAgICAvLyBSZXR1cm4gdGhlIGxlYWYgaW5kZXggcm91dGUgd2hlbiBpbmRleCBpcyBwcmVzZW50XG4gICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBPdGhlcndpc2UgZ3JhYiB0aGUgZGVlcGVzdCBcInBhdGggY29udHJpYnV0aW5nXCIgbWF0Y2ggKGlnbm9yaW5nIGluZGV4IGFuZFxuICAvLyBwYXRobGVzcyBsYXlvdXQgcm91dGVzKVxuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKG5hdmlnYXRpb24pIHtcbiAgbGV0IHtcbiAgICBmb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGUsXG4gICAgdGV4dCxcbiAgICBmb3JtRGF0YSxcbiAgICBqc29uXG4gIH0gPSBuYXZpZ2F0aW9uO1xuICBpZiAoIWZvcm1NZXRob2QgfHwgIWZvcm1BY3Rpb24gfHwgIWZvcm1FbmNUeXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0XG4gICAgfTtcbiAgfSBlbHNlIGlmIChmb3JtRGF0YSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0gZWxzZSBpZiAoanNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbixcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9IGVsc2Uge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKSB7XG4gIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBsb2NhdGlvbixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHRcbiAgfTtcbiAgcmV0dXJuIG5hdmlnYXRpb247XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBkYXRhKSB7XG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IGZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0LFxuICAgICAgZGF0YVxuICAgIH07XG4gICAgcmV0dXJuIGZldGNoZXI7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGFcbiAgICB9O1xuICAgIHJldHVybiBmZXRjaGVyO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdWJtaXR0aW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIpIHtcbiAgbGV0IGZldGNoZXIgPSB7XG4gICAgc3RhdGU6IFwic3VibWl0dGluZ1wiLFxuICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZFxuICB9O1xuICByZXR1cm4gZmV0Y2hlcjtcbn1cbmZ1bmN0aW9uIGdldERvbmVGZXRjaGVyKGRhdGEpIHtcbiAgbGV0IGZldGNoZXIgPSB7XG4gICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgZGF0YVxuICB9O1xuICByZXR1cm4gZmV0Y2hlcjtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMoX3dpbmRvdywgdHJhbnNpdGlvbnMpIHtcbiAgdHJ5IHtcbiAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IF93aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSk7XG4gICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgIGZvciAobGV0IFtrLCB2XSBvZiBPYmplY3QuZW50cmllcyhqc29uIHx8IHt9KSkge1xuICAgICAgICBpZiAodiAmJiBBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbnMuc2V0KGssIG5ldyBTZXQodiB8fCBbXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICB9XG59XG5mdW5jdGlvbiBwZXJzaXN0QXBwbGllZFRyYW5zaXRpb25zKF93aW5kb3csIHRyYW5zaXRpb25zKSB7XG4gIGlmICh0cmFuc2l0aW9ucy5zaXplID4gMCkge1xuICAgIGxldCBqc29uID0ge307XG4gICAgZm9yIChsZXQgW2ssIHZdIG9mIHRyYW5zaXRpb25zKSB7XG4gICAgICBqc29uW2tdID0gWy4uLnZdO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgX3dpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShqc29uKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiRmFpbGVkIHRvIHNhdmUgYXBwbGllZCB2aWV3IHRyYW5zaXRpb25zIGluIHNlc3Npb25TdG9yYWdlIChcIiArIGVycm9yICsgXCIpLlwiKTtcbiAgICB9XG4gIH1cbn1cbi8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uLCBJRExFX0JMT0NLRVIsIElETEVfRkVUQ0hFUiwgSURMRV9OQVZJR0FUSU9OLCBVTlNBRkVfREVGRVJSRURfU1lNQk9MLCBEZWZlcnJlZERhdGEgYXMgVU5TQUZFX0RlZmVycmVkRGF0YSwgRXJyb3JSZXNwb25zZUltcGwgYXMgVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsLCBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCBhcyBVTlNBRkVfY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gsIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMgYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsIGdldFJlc29sdmVUb01hdGNoZXMgYXMgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMsIGludmFyaWFudCBhcyBVTlNBRkVfaW52YXJpYW50LCB3YXJuaW5nIGFzIFVOU0FGRV93YXJuaW5nLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlciwgY3JlYXRlU3RhdGljSGFuZGxlciwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvciwgZ2V0VG9QYXRobmFtZSwgaXNEZWZlcnJlZERhdGEsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqb2luUGF0aHMsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIG5vcm1hbGl6ZVBhdGhuYW1lLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZXNvbHZlUGF0aCwgcmVzb2x2ZVRvLCBzdHJpcEJhc2VuYW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXIuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIERPTSB2Ni4yMy4xXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBSb3V0ZXIsIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIHVzZUhyZWYsIHVzZVJlc29sdmVkUGF0aCwgdXNlTG9jYXRpb24sIHVzZU5hdmlnYXRlLCBjcmVhdGVQYXRoLCBVTlNBRkVfdXNlUm91dGVJZCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGlvbiwgdXNlQmxvY2tlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQXdhaXQsIE1lbW9yeVJvdXRlciwgTmF2aWdhdGUsIE5hdmlnYXRpb25UeXBlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlcywgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBVTlNBRkVfUm91dGVDb250ZXh0LCBVTlNBRkVfdXNlUm91dGVJZCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1c2VBY3Rpb25EYXRhLCB1c2VBc3luY0Vycm9yLCB1c2VBc3luY1ZhbHVlLCB1c2VCbG9ja2VyLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvYWRlckRhdGEsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTWF0Y2hlcywgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb24sIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSZXZhbGlkYXRvciwgdXNlUm91dGVFcnJvciwgdXNlUm91dGVMb2FkZXJEYXRhLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgc3RyaXBCYXNlbmFtZSwgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZVJvdXRlciwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwsIFVOU0FGRV9pbnZhcmlhbnQsIGpvaW5QYXRocywgSURMRV9GRVRDSEVSLCBtYXRjaFBhdGggfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5leHBvcnQgeyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwgfSBmcm9tICdAcmVtaXgtcnVuL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgZGVmYXVsdE1ldGhvZCA9IFwiZ2V0XCI7XG5jb25zdCBkZWZhdWx0RW5jVHlwZSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdC50YWdOYW1lID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNCdXR0b25FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnV0dG9uXCI7XG59XG5mdW5jdGlvbiBpc0Zvcm1FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZm9ybVwiO1xufVxuZnVuY3Rpb24gaXNJbnB1dEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiO1xufVxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cbmZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkge1xuICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwICYmIChcbiAgLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmXG4gIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gIDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoaW5pdCkgfHwgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IGluaXQgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICByZXR1cm4gbWVtby5jb25jYXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAodiA9PiBba2V5LCB2XSkgOiBbW2tleSwgdmFsdWVdXSk7XG4gIH0sIFtdKSk7XG59XG5mdW5jdGlvbiBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvblNlYXJjaCwgZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uU2VhcmNoKTtcbiAgaWYgKGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgICAvLyBVc2UgYGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCguLi4pYCBoZXJlIGluc3RlYWQgb2YgaXRlcmF0aW5nIG9mXG4gICAgLy8gYGRlZmF1bHRTZWFyY2hQYXJhbXMua2V5cygpYCB0byB3b3JrLWFyb3VuZCBhIGJ1ZyBpbiBGaXJlZm94IHJlbGF0ZWQgdG9cbiAgICAvLyB3ZWIgZXh0ZW5zaW9ucy4gUmVsZXZhbnQgQnVnemlsbGEgdGlja2V0czpcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDE0NjAyXG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTAyMzk4NFxuICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXMoa2V5KSkge1xuICAgICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG4vLyBPbmUtdGltZSBjaGVjayBmb3Igc3VibWl0dGVyIHN1cHBvcnRcbmxldCBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IG51bGw7XG5mdW5jdGlvbiBpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkge1xuICBpZiAoX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPT09IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZvcm1EYXRhKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpZiBGb3JtRGF0YSBzdXBwb3J0cyB0aGUgc3VibWl0dGVyIHBhcmFtZXRlciwgdGhpcyB3aWxsIHRocm93XG4gICAgICAwKTtcbiAgICAgIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gZmFsc2U7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXI7XG59XG5jb25zdCBzdXBwb3J0ZWRGb3JtRW5jVHlwZXMgPSBuZXcgU2V0KFtcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLCBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiwgXCJ0ZXh0L3BsYWluXCJdKTtcbmZ1bmN0aW9uIGdldEZvcm1FbmNUeXBlKGVuY1R5cGUpIHtcbiAgaWYgKGVuY1R5cGUgIT0gbnVsbCAmJiAhc3VwcG9ydGVkRm9ybUVuY1R5cGVzLmhhcyhlbmNUeXBlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIlxcXCJcIiArIGVuY1R5cGUgKyBcIlxcXCIgaXMgbm90IGEgdmFsaWQgYGVuY1R5cGVgIGZvciBgPEZvcm0+YC9gPGZldGNoZXIuRm9ybT5gIFwiICsgKFwiYW5kIHdpbGwgZGVmYXVsdCB0byBcXFwiXCIgKyBkZWZhdWx0RW5jVHlwZSArIFwiXFxcIlwiKSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGVuY1R5cGU7XG59XG5mdW5jdGlvbiBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBiYXNlbmFtZSkge1xuICBsZXQgbWV0aG9kO1xuICBsZXQgYWN0aW9uO1xuICBsZXQgZW5jVHlwZTtcbiAgbGV0IGZvcm1EYXRhO1xuICBsZXQgYm9keTtcbiAgaWYgKGlzRm9ybUVsZW1lbnQodGFyZ2V0KSkge1xuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJhY3Rpb25cIik7XG4gICAgYWN0aW9uID0gYXR0ciA/IHN0cmlwQmFzZW5hbWUoYXR0ciwgYmFzZW5hbWUpIDogbnVsbDtcbiAgICBtZXRob2QgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgZW5jVHlwZSA9IGdldEZvcm1FbmNUeXBlKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSBcInN1Ym1pdFwiIHx8IHRhcmdldC50eXBlID09PSBcImltYWdlXCIpKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcbiAgICBpZiAoZm9ybSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGEgPGJ1dHRvbj4gb3IgPGlucHV0IHR5cGU9XFxcInN1Ym1pdFxcXCI+IHdpdGhvdXQgYSA8Zm9ybT5cIik7XG4gICAgfVxuICAgIC8vIDxidXR0b24+LzxpbnB1dCB0eXBlPVwic3VibWl0XCI+IG1heSBvdmVycmlkZSBhdHRyaWJ1dGVzIG9mIDxmb3JtPlxuICAgIC8vIFdoZW4gZ3JhYmJpbmcgdGhlIGFjdGlvbiBmcm9tIHRoZSBlbGVtZW50LCBpdCB3aWxsIGhhdmUgaGFkIHRoZSBiYXNlbmFtZVxuICAgIC8vIHByZWZpeGVkIHRvIGVuc3VyZSBub24tSlMgc2NlbmFyaW9zIHdvcmssIHNvIHN0cmlwIGl0IHNpbmNlIHdlJ2xsXG4gICAgLy8gcmUtcHJlZml4IGluIHRoZSByb3V0ZXJcbiAgICBsZXQgYXR0ciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtYWN0aW9uXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG4gICAgbWV0aG9kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBlbmNUeXBlID0gZ2V0Rm9ybUVuY1R5cGUodGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1lbmN0eXBlXCIpKSB8fCBnZXRGb3JtRW5jVHlwZShmb3JtLmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikpIHx8IGRlZmF1bHRFbmNUeXBlO1xuICAgIC8vIEJ1aWxkIGEgRm9ybURhdGEgb2JqZWN0IHBvcHVsYXRlZCBmcm9tIGEgZm9ybSBhbmQgc3VibWl0dGVyXG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSwgdGFyZ2V0KTtcbiAgICAvLyBJZiB0aGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBgRm9ybURhdGEoZWwsIHN1Ym1pdHRlcilgIGZvcm1hdCxcbiAgICAvLyB0aGVuIHRhY2sgb24gdGhlIHN1Ym1pdHRlciB2YWx1ZSBhdCB0aGUgZW5kLiAgVGhpcyBpcyBhIGxpZ2h0d2VpZ2h0XG4gICAgLy8gc29sdXRpb24gdGhhdCBpcyBub3QgMTAwJSBzcGVjIGNvbXBsaWFudC4gIEZvciBjb21wbGV0ZSBzdXBwb3J0IGluIG9sZGVyXG4gICAgLy8gYnJvd3NlcnMsIGNvbnNpZGVyIHVzaW5nIHRoZSBgZm9ybWRhdGEtc3VibWl0dGVyLXBvbHlmaWxsYCBwYWNrYWdlXG4gICAgaWYgKCFpc0Zvcm1EYXRhU3VibWl0dGVyU3VwcG9ydGVkKCkpIHtcbiAgICAgIGxldCB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHZhbHVlXG4gICAgICB9ID0gdGFyZ2V0O1xuICAgICAgaWYgKHR5cGUgPT09IFwiaW1hZ2VcIikge1xuICAgICAgICBsZXQgcHJlZml4ID0gbmFtZSA/IG5hbWUgKyBcIi5cIiA6IFwiXCI7XG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcmVmaXggKyBcInhcIiwgXCIwXCIpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJlZml4ICsgXCJ5XCIsIFwiMFwiKTtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSkge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc0h0bWxFbGVtZW50KHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgXCIgKyBcIjxpbnB1dCB0eXBlPVxcXCJzdWJtaXR8aW1hZ2VcXFwiPlwiKTtcbiAgfSBlbHNlIHtcbiAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG51bGw7XG4gICAgZW5jVHlwZSA9IGRlZmF1bHRFbmNUeXBlO1xuICAgIGJvZHkgPSB0YXJnZXQ7XG4gIH1cbiAgLy8gU2VuZCBib2R5IGZvciA8Rm9ybSBlbmNUeXBlPVwidGV4dC9wbGFpblwiIHNvIHdlIGVuY29kZSBpdCBpbnRvIHRleHRcbiAgaWYgKGZvcm1EYXRhICYmIGVuY1R5cGUgPT09IFwidGV4dC9wbGFpblwiKSB7XG4gICAgYm9keSA9IGZvcm1EYXRhO1xuICAgIGZvcm1EYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiB7XG4gICAgYWN0aW9uLFxuICAgIG1ldGhvZDogbWV0aG9kLnRvTG93ZXJDYXNlKCksXG4gICAgZW5jVHlwZSxcbiAgICBmb3JtRGF0YSxcbiAgICBib2R5XG4gIH07XG59XG5cbmNvbnN0IF9leGNsdWRlZCA9IFtcIm9uQ2xpY2tcIiwgXCJyZWxhdGl2ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwidGFyZ2V0XCIsIFwidG9cIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiwgXCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvblwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcImFyaWEtY3VycmVudFwiLCBcImNhc2VTZW5zaXRpdmVcIiwgXCJjbGFzc05hbWVcIiwgXCJlbmRcIiwgXCJzdHlsZVwiLCBcInRvXCIsIFwidW5zdGFibGVfdmlld1RyYW5zaXRpb25cIiwgXCJjaGlsZHJlblwiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcImZldGNoZXJLZXlcIiwgXCJuYXZpZ2F0ZVwiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwibWV0aG9kXCIsIFwiYWN0aW9uXCIsIFwib25TdWJtaXRcIiwgXCJyZWxhdGl2ZVwiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiLCBcInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXCJdO1xuLy8gSEVZIFlPVSEgRE9OJ1QgVE9VQ0ggVEhJUyBWQVJJQUJMRSFcbi8vXG4vLyBJdCBpcyByZXBsYWNlZCB3aXRoIHRoZSBwcm9wZXIgdmVyc2lvbiBhdCBidWlsZCB0aW1lIHZpYSBhIGJhYmVsIHBsdWdpbiBpblxuLy8gdGhlIHJvbGx1cCBjb25maWcuXG4vL1xuLy8gRXhwb3J0IGEgZ2xvYmFsIHByb3BlcnR5IG9udG8gdGhlIHdpbmRvdyBmb3IgUmVhY3QgUm91dGVyIGRldGVjdGlvbiBieSB0aGVcbi8vIENvcmUgV2ViIFZpdGFscyBUZWNobm9sb2d5IFJlcG9ydC4gIFRoaXMgd2F5IHRoZXkgY2FuIGNvbmZpZ3VyZSB0aGUgYHdhcHBhbHl6ZXJgXG4vLyB0byBkZXRlY3QgYW5kIHByb3Blcmx5IGNsYXNzaWZ5IGxpdmUgd2Vic2l0ZXMgYXMgYmVpbmcgYnVpbHQgd2l0aCBSZWFjdCBSb3V0ZXI6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vSFRUUEFyY2hpdmUvd2FwcGFseXplci9ibG9iL21haW4vc3JjL3RlY2hub2xvZ2llcy9yLmpzb25cbmNvbnN0IFJFQUNUX1JPVVRFUl9WRVJTSU9OID0gXCI2XCI7XG50cnkge1xuICB3aW5kb3cuX19yZWFjdFJvdXRlclZlcnNpb24gPSBSRUFDVF9ST1VURVJfVkVSU0lPTjtcbn0gY2F0Y2ggKGUpIHtcbiAgLy8gbm8tb3Bcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllczogVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcyxcbiAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3k6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMudW5zdGFibGVfZGF0YVN0cmF0ZWd5LFxuICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlSGFzaFJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXMsXG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzOiBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLFxuICAgIHVuc3RhYmxlX2RhdGFTdHJhdGVneTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy51bnN0YWJsZV9kYXRhU3RyYXRlZ3ksXG4gICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICB9KS5pbml0aWFsaXplKCk7XG59XG5mdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7XG4gIHZhciBfd2luZG93O1xuICBsZXQgc3RhdGUgPSAoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cuX19zdGF0aWNSb3V0ZXJIeWRyYXRpb25EYXRhO1xuICBpZiAoc3RhdGUgJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgIGVycm9yczogZGVzZXJpYWxpemVFcnJvcnMoc3RhdGUuZXJyb3JzKVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIGRlc2VyaWFsaXplRXJyb3JzKGVycm9ycykge1xuICBpZiAoIWVycm9ycykgcmV0dXJuIG51bGw7XG4gIGxldCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoZXJyb3JzKTtcbiAgbGV0IHNlcmlhbGl6ZWQgPSB7fTtcbiAgZm9yIChsZXQgW2tleSwgdmFsXSBvZiBlbnRyaWVzKSB7XG4gICAgLy8gSGV5IHlvdSEgIElmIHlvdSBjaGFuZ2UgdGhpcywgcGxlYXNlIGNoYW5nZSB0aGUgY29ycmVzcG9uZGluZyBsb2dpYyBpblxuICAgIC8vIHNlcmlhbGl6ZUVycm9ycyBpbiByZWFjdC1yb3V0ZXItZG9tL3NlcnZlci50c3ggOilcbiAgICBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiUm91dGVFcnJvclJlc3BvbnNlXCIpIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IG5ldyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwodmFsLnN0YXR1cywgdmFsLnN0YXR1c1RleHQsIHZhbC5kYXRhLCB2YWwuaW50ZXJuYWwgPT09IHRydWUpO1xuICAgIH0gZWxzZSBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09IFwiRXJyb3JcIikge1xuICAgICAgLy8gQXR0ZW1wdCB0byByZWNvbnN0cnVjdCB0aGUgcmlnaHQgdHlwZSBvZiBFcnJvciAoaS5lLiwgUmVmZXJlbmNlRXJyb3IpXG4gICAgICBpZiAodmFsLl9fc3ViVHlwZSkge1xuICAgICAgICBsZXQgRXJyb3JDb25zdHJ1Y3RvciA9IHdpbmRvd1t2YWwuX19zdWJUeXBlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBFcnJvckNvbnN0cnVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yQ29uc3RydWN0b3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBuby1vcCAtIGZhbGwgdGhyb3VnaCBhbmQgY3JlYXRlIGEgbm9ybWFsIEVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2VyaWFsaXplZFtrZXldID09IG51bGwpIHtcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbmNvbnN0IFZpZXdUcmFuc2l0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFZpZXdUcmFuc2l0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiVmlld1RyYW5zaXRpb25cIjtcbn1cbmNvbnN0IEZldGNoZXJzQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG5ldyBNYXAoKSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZldGNoZXJzQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRmV0Y2hlcnNcIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBDb21wb25lbnRzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5jb25zdCBGTFVTSF9TWU5DID0gXCJmbHVzaFN5bmNcIjtcbmNvbnN0IGZsdXNoU3luY0ltcGwgPSBSZWFjdERPTVtGTFVTSF9TWU5DXTtcbmNvbnN0IFVTRV9JRCA9IFwidXNlSWRcIjtcbmNvbnN0IHVzZUlkSW1wbCA9IFJlYWN0W1VTRV9JRF07XG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb25TYWZlKGNiKSB7XG4gIGlmIChzdGFydFRyYW5zaXRpb25JbXBsKSB7XG4gICAgc3RhcnRUcmFuc2l0aW9uSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hTeW5jU2FmZShjYikge1xuICBpZiAoZmx1c2hTeW5jSW1wbCkge1xuICAgIGZsdXNoU3luY0ltcGwoY2IpO1xuICB9IGVsc2Uge1xuICAgIGNiKCk7XG4gIH1cbn1cbmNsYXNzIERlZmVycmVkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBcInBlbmRpbmdcIjtcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlc29sdmUgPSB2YWx1ZSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVzb2x2ZWRcIjtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMucmVqZWN0ID0gcmVhc29uID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCBbcGVuZGluZ1N0YXRlLCBzZXRQZW5kaW5nU3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFt2dENvbnRleHQsIHNldFZ0Q29udGV4dF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICB9KTtcbiAgbGV0IFtyZW5kZXJEZmQsIHNldFJlbmRlckRmZF0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW3RyYW5zaXRpb24sIHNldFRyYW5zaXRpb25dID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFtpbnRlcnJ1cHRpb24sIHNldEludGVycnVwdGlvbl0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgZmV0Y2hlckRhdGEgPSBSZWFjdC51c2VSZWYobmV3IE1hcCgpKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IG9wdEluU3RhcnRUcmFuc2l0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soY2IgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24pIHtcbiAgICAgIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfSwgW3Y3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjaygobmV3U3RhdGUsIF9yZWYyKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVycyxcbiAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogZmx1c2hTeW5jLFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25PcHRzOiB2aWV3VHJhbnNpdGlvbk9wdHNcbiAgICB9ID0gX3JlZjI7XG4gICAgZGVsZXRlZEZldGNoZXJzLmZvckVhY2goa2V5ID0+IGZldGNoZXJEYXRhLmN1cnJlbnQuZGVsZXRlKGtleSkpO1xuICAgIG5ld1N0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgaWYgKGZldGNoZXIuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZldGNoZXJEYXRhLmN1cnJlbnQuc2V0KGtleSwgZmV0Y2hlci5kYXRhKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlID0gcm91dGVyLndpbmRvdyA9PSBudWxsIHx8IHJvdXRlci53aW5kb3cuZG9jdW1lbnQgPT0gbnVsbCB8fCB0eXBlb2Ygcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uICE9PSBcImZ1bmN0aW9uXCI7XG4gICAgLy8gSWYgdGhpcyBpc24ndCBhIHZpZXcgdHJhbnNpdGlvbiBvciBpdCdzIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBicm93c2VyLFxuICAgIC8vIGp1c3QgdXBkYXRlIGFuZCBiZSBkb25lIHdpdGggaXRcbiAgICBpZiAoIXZpZXdUcmFuc2l0aW9uT3B0cyB8fCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUpIHtcbiAgICAgIGlmIChmbHVzaFN5bmMpIHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdEluU3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmbHVzaFN5bmMgKyBzdGFydFZpZXdUcmFuc2l0aW9uXG4gICAgaWYgKGZsdXNoU3luYykge1xuICAgICAgLy8gRmx1c2ggdGhyb3VnaCB0aGUgY29udGV4dCB0byBtYXJrIERPTSBlbGVtZW50cyBhcyB0cmFuc2l0aW9uPWluZ1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiB7XG4gICAgICAgIC8vIENhbmNlbCBhbnkgcGVuZGluZyB0cmFuc2l0aW9uc1xuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgICAgIHRyYW5zaXRpb24uc2tpcFRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogdHJ1ZSxcbiAgICAgICAgICBmbHVzaFN5bmM6IHRydWUsXG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMuY3VycmVudExvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLy8gVXBkYXRlIHRoZSBET01cbiAgICAgIGxldCB0ID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQ2xlYW4gdXAgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBjb21wbGV0ZXNcbiAgICAgIHQuZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4ge1xuICAgICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICAgIHNldFRyYW5zaXRpb24odW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRQZW5kaW5nU3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZmx1c2hTeW5jU2FmZSgoKSA9PiBzZXRUcmFuc2l0aW9uKHQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gc3RhcnRUcmFuc2l0aW9uICsgc3RhcnRWaWV3VHJhbnNpdGlvblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAvLyBJbnRlcnJ1cHRpbmcgYW4gaW4tcHJvZ3Jlc3MgdHJhbnNpdGlvbiwgY2FuY2VsIGFuZCBsZXQgZXZlcnl0aGluZyBmbHVzaFxuICAgICAgLy8gb3V0LCBhbmQgdGhlbiBraWNrIG9mZiBhIG5ldyB0cmFuc2l0aW9uIGZyb20gdGhlIGludGVycnVwdGlvbiBzdGF0ZVxuICAgICAgcmVuZGVyRGZkICYmIHJlbmRlckRmZC5yZXNvbHZlKCk7XG4gICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICBzZXRJbnRlcnJ1cHRpb24oe1xuICAgICAgICBzdGF0ZTogbmV3U3RhdGUsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29tcGxldGVkIG5hdmlnYXRpb24gdXBkYXRlIHdpdGggb3B0ZWQtaW4gdmlldyB0cmFuc2l0aW9ucywgbGV0ICdlciByaXBcbiAgICAgIHNldFBlbmRpbmdTdGF0ZShuZXdTdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiB2aWV3VHJhbnNpdGlvbk9wdHMubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIud2luZG93LCB0cmFuc2l0aW9uLCByZW5kZXJEZmQsIGZldGNoZXJEYXRhLCBvcHRJblN0YXJ0VHJhbnNpdGlvbl0pO1xuICAvLyBOZWVkIHRvIHVzZSBhIGxheW91dCBlZmZlY3QgaGVyZSBzbyB3ZSBhcmUgc3Vic2NyaWJlZCBlYXJseSBlbm91Z2ggdG9cbiAgLy8gcGljayB1cCBvbiBhbnkgcmVuZGVyLWRyaXZlbiByZWRpcmVjdHMvbmF2aWdhdGlvbnMgKHVzZUVmZmVjdC88TmF2aWdhdGU+KVxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gcm91dGVyLnN1YnNjcmliZShzZXRTdGF0ZSksIFtyb3V0ZXIsIHNldFN0YXRlXSk7XG4gIC8vIFdoZW4gd2Ugc3RhcnQgYSB2aWV3IHRyYW5zaXRpb24sIGNyZWF0ZSBhIERlZmVycmVkIHdlIGNhbiB1c2UgZm9yIHRoZVxuICAvLyBldmVudHVhbCBcImNvbXBsZXRlZFwiIHJlbmRlclxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmICF2dENvbnRleHQuZmx1c2hTeW5jKSB7XG4gICAgICBzZXRSZW5kZXJEZmQobmV3IERlZmVycmVkKCkpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dF0pO1xuICAvLyBPbmNlIHRoZSBkZWZlcnJlZCBpcyBjcmVhdGVkLCBraWNrIG9mZiBzdGFydFZpZXdUcmFuc2l0aW9uKCkgdG8gdXBkYXRlIHRoZVxuICAvLyBET00gYW5kIHRoZW4gd2FpdCBvbiB0aGUgRGVmZXJyZWQgdG8gcmVzb2x2ZSAoaW5kaWNhdGluZyB0aGUgRE9NIHVwZGF0ZSBoYXNcbiAgLy8gaGFwcGVuZWQpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgcm91dGVyLndpbmRvdykge1xuICAgICAgbGV0IG5ld1N0YXRlID0gcGVuZGluZ1N0YXRlO1xuICAgICAgbGV0IHJlbmRlclByb21pc2UgPSByZW5kZXJEZmQucHJvbWlzZTtcbiAgICAgIGxldCB0cmFuc2l0aW9uID0gcm91dGVyLndpbmRvdy5kb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgb3B0SW5TdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICAgIGF3YWl0IHJlbmRlclByb21pc2U7XG4gICAgICB9KTtcbiAgICAgIHRyYW5zaXRpb24uZmluaXNoZWQuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHNldFJlbmRlckRmZCh1bmRlZmluZWQpO1xuICAgICAgICBzZXRUcmFuc2l0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgIHNldFBlbmRpbmdTdGF0ZSh1bmRlZmluZWQpO1xuICAgICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHNldFRyYW5zaXRpb24odHJhbnNpdGlvbik7XG4gICAgfVxuICB9LCBbb3B0SW5TdGFydFRyYW5zaXRpb24sIHBlbmRpbmdTdGF0ZSwgcmVuZGVyRGZkLCByb3V0ZXIud2luZG93XSk7XG4gIC8vIFdoZW4gdGhlIG5ldyBsb2NhdGlvbiBmaW5hbGx5IHJlbmRlcnMgYW5kIGlzIGNvbW1pdHRlZCB0byB0aGUgRE9NLCB0aGlzXG4gIC8vIGVmZmVjdCB3aWxsIHJ1biB0byByZXNvbHZlIHRoZSB0cmFuc2l0aW9uXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJlbmRlckRmZCAmJiBwZW5kaW5nU3RhdGUgJiYgc3RhdGUubG9jYXRpb24ua2V5ID09PSBwZW5kaW5nU3RhdGUubG9jYXRpb24ua2V5KSB7XG4gICAgICByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgIH1cbiAgfSwgW3JlbmRlckRmZCwgdHJhbnNpdGlvbiwgc3RhdGUubG9jYXRpb24sIHBlbmRpbmdTdGF0ZV0pO1xuICAvLyBJZiB3ZSBnZXQgaW50ZXJydXB0ZWQgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uIGR1cmluZyBhIHRyYW5zaXRpb24sIHdlIHNraXBcbiAgLy8gdGhlIGFjdGl2ZSB0cmFuc2l0aW9uLCBsZXQgaXQgY2xlYW51cCwgdGhlbiBraWNrIGl0IG9mZiBhZ2FpbiBoZXJlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nICYmIGludGVycnVwdGlvbikge1xuICAgICAgc2V0UGVuZGluZ1N0YXRlKGludGVycnVwdGlvbi5zdGF0ZSk7XG4gICAgICBzZXRWdENvbnRleHQoe1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGZsdXNoU3luYzogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogaW50ZXJydXB0aW9uLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBpbnRlcnJ1cHRpb24ubmV4dExvY2F0aW9uXG4gICAgICB9KTtcbiAgICAgIHNldEludGVycnVwdGlvbih1bmRlZmluZWQpO1xuICAgIH1cbiAgfSwgW3Z0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcsIGludGVycnVwdGlvbl0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbGxiYWNrRWxlbWVudCA9PSBudWxsIHx8ICFyb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24sIFwiYDxSb3V0ZXJQcm92aWRlciBmYWxsYmFja0VsZW1lbnQ+YCBpcyBkZXByZWNhdGVkIHdoZW4gdXNpbmcgXCIgKyBcImB2N19wYXJ0aWFsSHlkcmF0aW9uYCwgdXNlIGEgYEh5ZHJhdGVGYWxsYmFja2AgY29tcG9uZW50IGluc3RlYWRcIikgOiB2b2lkIDA7XG4gICAgLy8gT25seSBsb2cgdGhpcyBvbmNlIG9uIGluaXRpYWwgbW91bnRcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcbiAgbGV0IG5hdmlnYXRvciA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogbiA9PiByb3V0ZXIubmF2aWdhdGUobiksXG4gICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pLFxuICAgICAgcmVwbGFjZTogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KVxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcbiAgbGV0IGJhc2VuYW1lID0gcm91dGVyLmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgcm91dGVyLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IGZhbHNlLFxuICAgIGJhc2VuYW1lXG4gIH0pLCBbcm91dGVyLCBuYXZpZ2F0b3IsIGJhc2VuYW1lXSk7XG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHN0YXRlXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZldGNoZXJzQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBmZXRjaGVyRGF0YS5jdXJyZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFZpZXdUcmFuc2l0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2dENvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvcixcbiAgICBmdXR1cmU6IHtcbiAgICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiByb3V0ZXIuZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoXG4gICAgfVxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCB8fCByb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVzLCB7XG4gICAgcm91dGVzOiByb3V0ZXIucm91dGVzLFxuICAgIGZ1dHVyZTogcm91dGVyLmZ1dHVyZSxcbiAgICBzdGF0ZTogc3RhdGVcbiAgfSkgOiBmYWxsYmFja0VsZW1lbnQpKSkpKSwgbnVsbCk7XG59XG5mdW5jdGlvbiBEYXRhUm91dGVzKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgcm91dGVzLFxuICAgIGZ1dHVyZSxcbiAgICBzdGF0ZVxuICB9ID0gX3JlZjM7XG4gIHJldHVybiBVTlNBRkVfdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUsIGZ1dHVyZSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gUHJvdmlkZXMgdGhlIGNsZWFuZXN0IFVSTHMuXG4gKi9cbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgd2luZG93XG4gIH0gPSBfcmVmNDtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmZ1bmN0aW9uIEhhc2hSb3V0ZXIoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBmdXR1cmUsXG4gICAgd2luZG93XG4gIH0gPSBfcmVmNTtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudFxuICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZFxuICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lXG4gKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LlxuICovXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWY2KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWY2O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgYDxhPmAuXG4gKi9cbmNvbnN0IExpbmsgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaW5rV2l0aFJlZihfcmVmNywgcmVmKSB7XG4gIGxldCB7XG4gICAgICBvbkNsaWNrLFxuICAgICAgcmVsYXRpdmUsXG4gICAgICByZWxvYWREb2N1bWVudCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHRhcmdldCxcbiAgICAgIHRvLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICB9ID0gX3JlZjcsXG4gICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY3LCBfZXhjbHVkZWQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIGFic29sdXRlIFVSTHNcbiAgbGV0IGFic29sdXRlSHJlZjtcbiAgbGV0IGlzRXh0ZXJuYWwgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiAmJiBBQlNPTFVURV9VUkxfUkVHRVgudGVzdCh0bykpIHtcbiAgICAvLyBSZW5kZXIgdGhlIGFic29sdXRlIGhyZWYgc2VydmVyLSBhbmQgY2xpZW50LXNpZGVcbiAgICBhYnNvbHV0ZUhyZWYgPSB0bztcbiAgICAvLyBPbmx5IGNoZWNrIGZvciBleHRlcm5hbCBvcmlnaW5zIGNsaWVudC1zaWRlXG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgbGV0IHRhcmdldFVybCA9IHRvLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIHRvKSA6IG5ldyBVUkwodG8pO1xuICAgICAgICBsZXQgcGF0aCA9IHN0cmlwQmFzZW5hbWUodGFyZ2V0VXJsLnBhdGhuYW1lLCBiYXNlbmFtZSk7XG4gICAgICAgIGlmICh0YXJnZXRVcmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBwYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBTdHJpcCB0aGUgcHJvdG9jb2wvb3JpZ2luL2Jhc2VuYW1lIGZvciBzYW1lLW9yaWdpbiBhYnNvbHV0ZSBVUkxzXG4gICAgICAgICAgdG8gPSBwYXRoICsgdGFyZ2V0VXJsLnNlYXJjaCArIHRhcmdldFVybC5oYXNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzRXh0ZXJuYWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFdlIGNhbid0IGRvIGV4dGVybmFsIFVSTCBkZXRlY3Rpb24gd2l0aG91dCBhIHZhbGlkIFVSTFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCI8TGluayB0bz1cXFwiXCIgKyB0byArIFwiXFxcIj4gY29udGFpbnMgYW4gaW52YWxpZCBVUkwgd2hpY2ggd2lsbCBwcm9iYWJseSBicmVhayBcIiArIFwid2hlbiBjbGlja2VkIC0gcGxlYXNlIHVwZGF0ZSB0byBhIHZhbGlkIFVSTCBwYXRoLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gUmVuZGVyZWQgaW50byA8YSBocmVmPiBmb3IgcmVsYXRpdmUgVVJMc1xuICBsZXQgaHJlZiA9IHVzZUhyZWYodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmUsXG4gICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgfSk7XG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBhYnNvbHV0ZUhyZWYgfHwgaHJlZixcbiAgICAgIG9uQ2xpY2s6IGlzRXh0ZXJuYWwgfHwgcmVsb2FkRG9jdW1lbnQgPyBvbkNsaWNrIDogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuLyoqXG4gKiBBIGA8TGluaz5gIHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5jb25zdCBOYXZMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjgsIHJlZikge1xuICBsZXQge1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgICAgZW5kID0gZmFsc2UsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIGNoaWxkcmVuXG4gICAgfSA9IF9yZWY4LFxuICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmOCwgX2V4Y2x1ZGVkMik7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmU6IHJlc3QucmVsYXRpdmVcbiAgfSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIG5hdmlnYXRvcixcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgaXNUcmFuc2l0aW9uaW5nID0gcm91dGVyU3RhdGUgIT0gbnVsbCAmJlxuICAvLyBDb25kaXRpb25hbCB1c2FnZSBpcyBPSyBoZXJlIGJlY2F1c2UgdGhlIHVzYWdlIG9mIGEgZGF0YSByb3V0ZXIgaXMgc3RhdGljXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICB1c2VWaWV3VHJhbnNpdGlvblN0YXRlKHBhdGgpICYmIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uID09PSB0cnVlO1xuICBsZXQgdG9QYXRobmFtZSA9IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihwYXRoKS5wYXRobmFtZSA6IHBhdGgucGF0aG5hbWU7XG4gIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHJvdXRlclN0YXRlICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24gJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiA/IHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24ucGF0aG5hbWUgOiBudWxsO1xuICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gbmV4dExvY2F0aW9uUGF0aG5hbWUgPyBuZXh0TG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbiAgICB0b1BhdGhuYW1lID0gdG9QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIGlmIChuZXh0TG9jYXRpb25QYXRobmFtZSAmJiBiYXNlbmFtZSkge1xuICAgIG5leHRMb2NhdGlvblBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShuZXh0TG9jYXRpb25QYXRobmFtZSwgYmFzZW5hbWUpIHx8IG5leHRMb2NhdGlvblBhdGhuYW1lO1xuICB9XG4gIC8vIElmIHRoZSBgdG9gIGhhcyBhIHRyYWlsaW5nIHNsYXNoLCBsb29rIGF0IHRoYXQgZXhhY3Qgc3BvdC4gIE90aGVyd2lzZSxcbiAgLy8gd2UncmUgbG9va2luZyBmb3IgYSBzbGFzaCBfYWZ0ZXJfIHdoYXQncyBpbiBgdG9gLiAgRm9yIGV4YW1wbGU6XG4gIC8vXG4gIC8vIDxOYXZMaW5rIHRvPVwiL3VzZXJzXCI+IGFuZCA8TmF2TGluayB0bz1cIi91c2Vycy9cIj5cbiAgLy8gYm90aCB3YW50IHRvIGxvb2sgZm9yIGEgLyBhdCBpbmRleCA2IHRvIG1hdGNoIFVSTCBgL3VzZXJzL21hdHRgXG4gIGNvbnN0IGVuZFNsYXNoUG9zaXRpb24gPSB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IHRvUGF0aG5hbWUubGVuZ3RoIC0gMSA6IHRvUGF0aG5hbWUubGVuZ3RoO1xuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KGVuZFNsYXNoUG9zaXRpb24pID09PSBcIi9cIjtcbiAgbGV0IGlzUGVuZGluZyA9IG5leHRMb2NhdGlvblBhdGhuYW1lICE9IG51bGwgJiYgKG5leHRMb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIik7XG4gIGxldCByZW5kZXJQcm9wcyA9IHtcbiAgICBpc0FjdGl2ZSxcbiAgICBpc1BlbmRpbmcsXG4gICAgaXNUcmFuc2l0aW9uaW5nXG4gIH07XG4gIGxldCBhcmlhQ3VycmVudCA9IGlzQWN0aXZlID8gYXJpYUN1cnJlbnRQcm9wIDogdW5kZWZpbmVkO1xuICBsZXQgY2xhc3NOYW1lO1xuICBpZiAodHlwZW9mIGNsYXNzTmFtZVByb3AgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3AocmVuZGVyUHJvcHMpO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbCwgaXNQZW5kaW5nID8gXCJwZW5kaW5nXCIgOiBudWxsLCBpc1RyYW5zaXRpb25pbmcgPyBcInRyYW5zaXRpb25pbmdcIiA6IG51bGxdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgfVxuICBsZXQgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3AocmVuZGVyUHJvcHMpIDogc3R5bGVQcm9wO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgdG86IHRvLFxuICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uOiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbihyZW5kZXJQcm9wcykgOiBjaGlsZHJlbik7XG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xufVxuLyoqXG4gKiBBIGBAcmVtaXgtcnVuL3JvdXRlcmAtYXdhcmUgYDxmb3JtPmAuIEl0IGJlaGF2ZXMgbGlrZSBhIG5vcm1hbCBmb3JtIGV4Y2VwdFxuICogdGhhdCB0aGUgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VydmVyIGlzIHdpdGggYGZldGNoYCBpbnN0ZWFkIG9mIG5ldyBkb2N1bWVudFxuICogcmVxdWVzdHMsIGFsbG93aW5nIGNvbXBvbmVudHMgdG8gYWRkIG5pY2VyIFVYIHRvIHRoZSBwYWdlIGFzIHRoZSBmb3JtIGlzXG4gKiBzdWJtaXR0ZWQgYW5kIHJldHVybnMgd2l0aCBkYXRhLlxuICovXG5jb25zdCBGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKF9yZWY5LCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgbGV0IHtcbiAgICAgIGZldGNoZXJLZXksXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIHJlbG9hZERvY3VtZW50LFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICAgIGFjdGlvbixcbiAgICAgIG9uU3VibWl0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgIH0gPSBfcmVmOSxcbiAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY5LCBfZXhjbHVkZWQzKTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdCgpO1xuICBsZXQgZm9ybUFjdGlvbiA9IHVzZUZvcm1BY3Rpb24oYWN0aW9uLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gIGxldCBzdWJtaXRIYW5kbGVyID0gZXZlbnQgPT4ge1xuICAgIG9uU3VibWl0ICYmIG9uU3VibWl0KGV2ZW50KTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgbGV0IHN1Ym1pdHRlciA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnN1Ym1pdHRlcjtcbiAgICBsZXQgc3VibWl0TWV0aG9kID0gKHN1Ym1pdHRlciA9PSBudWxsID8gdm9pZCAwIDogc3VibWl0dGVyLmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikpIHx8IG1ldGhvZDtcbiAgICBzdWJtaXQoc3VibWl0dGVyIHx8IGV2ZW50LmN1cnJlbnRUYXJnZXQsIHtcbiAgICAgIGZldGNoZXJLZXksXG4gICAgICBtZXRob2Q6IHN1Ym1pdE1ldGhvZCxcbiAgICAgIG5hdmlnYXRlLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHN0YXRlLFxuICAgICAgcmVsYXRpdmUsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGZvcndhcmRlZFJlZixcbiAgICBtZXRob2Q6IGZvcm1NZXRob2QsXG4gICAgYWN0aW9uOiBmb3JtQWN0aW9uLFxuICAgIG9uU3VibWl0OiByZWxvYWREb2N1bWVudCA/IG9uU3VibWl0IDogc3VibWl0SGFuZGxlclxuICB9LCBwcm9wcykpO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cbi8qKlxuICogVGhpcyBjb21wb25lbnQgd2lsbCBlbXVsYXRlIHRoZSBicm93c2VyJ3Mgc2Nyb2xsIHJlc3RvcmF0aW9uIG9uIGxvY2F0aW9uXG4gKiBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBTY3JvbGxSZXN0b3JhdGlvbihfcmVmMTApIHtcbiAgbGV0IHtcbiAgICBnZXRLZXksXG4gICAgc3RvcmFnZUtleVxuICB9ID0gX3JlZjEwO1xuICB1c2VTY3JvbGxSZXN0b3JhdGlvbih7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTY3JvbGxSZXN0b3JhdGlvbi5kaXNwbGF5TmFtZSA9IFwiU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBIb29rc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBEYXRhUm91dGVySG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRcIl0gPSBcInVzZVN1Ym1pdFwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVN1Ym1pdEZldGNoZXJcIl0gPSBcInVzZVN1Ym1pdEZldGNoZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VGZXRjaGVyXCJdID0gXCJ1c2VGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1widXNlVmlld1RyYW5zaXRpb25TdGF0ZVwiXSA9IFwidXNlVmlld1RyYW5zaXRpb25TdGF0ZVwiO1xufSkoRGF0YVJvdXRlckhvb2sgfHwgKERhdGFSb3V0ZXJIb29rID0ge30pKTtcbnZhciBEYXRhUm91dGVyU3RhdGVIb29rO1xuKGZ1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VGZXRjaGVyXCJdID0gXCJ1c2VGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VGZXRjaGVyc1wiXSA9IFwidXNlRmV0Y2hlcnNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVNjcm9sbFJlc3RvcmF0aW9uXCJdID0gXCJ1c2VTY3JvbGxSZXN0b3JhdGlvblwiO1xufSkoRGF0YVJvdXRlclN0YXRlSG9vayB8fCAoRGF0YVJvdXRlclN0YXRlSG9vayA9IHt9KSk7XG4vLyBJbnRlcm5hbCBob29rc1xuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICAhc3RhdGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlO1xufVxuLy8gRXh0ZXJuYWwgaG9va3Ncbi8qKlxuICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZlxuICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2VcbiAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuXG4gKi9cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICByZWxhdGl2ZSxcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhldmVudCA9PiB7XG4gICAgaWYgKHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUHJvcCAhPT0gdW5kZWZpbmVkID8gcmVwbGFjZVByb3AgOiBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcbiAgICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2UsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIHJlbGF0aXZlLFxuICAgICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbG9jYXRpb24sIG5hdmlnYXRlLCBwYXRoLCByZXBsYWNlUHJvcCwgc3RhdGUsIHRhcmdldCwgdG8sIHByZXZlbnRTY3JvbGxSZXNldCwgcmVsYXRpdmUsIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cbmZ1bmN0aW9uIHVzZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyh0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSBcInVuZGVmaW5lZFwiLCBcIllvdSBjYW5ub3QgdXNlIHRoZSBgdXNlU2VhcmNoUGFyYW1zYCBob29rIGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IFwiICsgXCJzdXBwb3J0IHRoZSBVUkxTZWFyY2hQYXJhbXMgQVBJLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IEludGVybmV0IFwiICsgXCJFeHBsb3JlciAxMSwgd2UgcmVjb21tZW5kIHlvdSBsb2FkIGEgcG9seWZpbGwgc3VjaCBhcyBcIiArIFwiaHR0cHM6Ly9naXRodWIuY29tL3VuZ2FwL3VybC1zZWFyY2gtcGFyYW1zXFxuXFxuXCIgKyBcIklmIHlvdSdyZSB1bnN1cmUgaG93IHRvIGxvYWQgcG9seWZpbGxzLCB3ZSByZWNvbW1lbmQgeW91IGNoZWNrIG91dCBcIiArIFwiaHR0cHM6Ly9wb2x5ZmlsbC5pby92My8gd2hpY2ggcHJvdmlkZXMgc29tZSByZWNvbW1lbmRhdGlvbnMgYWJvdXQgaG93IFwiICsgXCJ0byBsb2FkIHBvbHlmaWxscyBvbmx5IGZvciB1c2VycyB0aGF0IG5lZWQgdGhlbSwgaW5zdGVhZCBvZiBmb3IgZXZlcnkgXCIgKyBcInVzZXIuXCIpIDogdm9pZCAwO1xuICBsZXQgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihjcmVhdGVTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpKTtcbiAgbGV0IGhhc1NldFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VNZW1vKCgpID0+XG4gIC8vIE9ubHkgbWVyZ2UgaW4gdGhlIGRlZmF1bHRzIGlmIHdlIGhhdmVuJ3QgeWV0IGNhbGxlZCBzZXRTZWFyY2hQYXJhbXMuXG4gIC8vIE9uY2Ugd2UgY2FsbCB0aGF0IHdlIHdhbnQgdGhvc2UgdG8gdGFrZSBwcmVjZWRlbmNlLCBvdGhlcndpc2UgeW91IGNhbid0XG4gIC8vIHJlbW92ZSBhIHBhcmFtIHdpdGggc2V0U2VhcmNoUGFyYW1zKHt9KSBpZiBpdCBoYXMgYW4gaW5pdGlhbCB2YWx1ZVxuICBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvbi5zZWFyY2gsIGhhc1NldFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50ID8gbnVsbCA6IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCksIFtsb2NhdGlvbi5zZWFyY2hdKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZUNhbGxiYWNrKChuZXh0SW5pdCwgbmF2aWdhdGVPcHRpb25zKSA9PiB7XG4gICAgY29uc3QgbmV3U2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHR5cGVvZiBuZXh0SW5pdCA9PT0gXCJmdW5jdGlvblwiID8gbmV4dEluaXQoc2VhcmNoUGFyYW1zKSA6IG5leHRJbml0KTtcbiAgICBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA9IHRydWU7XG4gICAgbmF2aWdhdGUoXCI/XCIgKyBuZXdTZWFyY2hQYXJhbXMsIG5hdmlnYXRlT3B0aW9ucyk7XG4gIH0sIFtuYXZpZ2F0ZSwgc2VhcmNoUGFyYW1zXSk7XG4gIHJldHVybiBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbXNdO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgY2FsbGluZyBzdWJtaXQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLiBcIiArIFwiVHJ5IGNhbGxpbmcgc3VibWl0IHdpdGhpbiBhIGB1c2VFZmZlY3RgIG9yIGNhbGxiYWNrIGluc3RlYWQuXCIpO1xuICB9XG59XG5sZXQgZmV0Y2hlcklkID0gMDtcbmxldCBnZXRVbmlxdWVGZXRjaGVySWQgPSAoKSA9PiBcIl9fXCIgKyBTdHJpbmcoKytmZXRjaGVySWQpICsgXCJfX1wiO1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBwcm9ncmFtbWF0aWNhbGx5IHN1Ym1pdCBhIGZvcm0gKG9yXG4gKiBzb21lIGFyYml0cmFyeSBkYXRhKSB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiB1c2VTdWJtaXQoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTdWJtaXQpO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBjdXJyZW50Um91dGVJZCA9IFVOU0FGRV91c2VSb3V0ZUlkKCk7XG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2YWxpZGF0ZUNsaWVudFNpZGVTdWJtaXNzaW9uKCk7XG4gICAgbGV0IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIG1ldGhvZCxcbiAgICAgIGVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGJvZHlcbiAgICB9ID0gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgYmFzZW5hbWUpO1xuICAgIGlmIChvcHRpb25zLm5hdmlnYXRlID09PSBmYWxzZSkge1xuICAgICAgbGV0IGtleSA9IG9wdGlvbnMuZmV0Y2hlcktleSB8fCBnZXRVbmlxdWVGZXRjaGVySWQoKTtcbiAgICAgIHJvdXRlci5mZXRjaChrZXksIGN1cnJlbnRSb3V0ZUlkLCBvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZm9ybURhdGEsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IG1ldGhvZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCBlbmNUeXBlLFxuICAgICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IG9wdGlvbnMudW5zdGFibGVfZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKG9wdGlvbnMuYWN0aW9uIHx8IGFjdGlvbiwge1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAgYm9keSxcbiAgICAgICAgZm9ybU1ldGhvZDogb3B0aW9ucy5tZXRob2QgfHwgbWV0aG9kLFxuICAgICAgICBmb3JtRW5jVHlwZTogb3B0aW9ucy5lbmNUeXBlIHx8IGVuY1R5cGUsXG4gICAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgICAgc3RhdGU6IG9wdGlvbnMuc3RhdGUsXG4gICAgICAgIGZyb21Sb3V0ZUlkOiBjdXJyZW50Um91dGVJZCxcbiAgICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRpb25zLnVuc3RhYmxlX2ZsdXNoU3luYyxcbiAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb246IG9wdGlvbnMudW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgYmFzZW5hbWUsIGN1cnJlbnRSb3V0ZUlkXSk7XG59XG4vLyB2NzogRXZlbnR1YWxseSB3ZSBzaG91bGQgZGVwcmVjYXRlIHRoaXMgZW50aXJlbHkgaW4gZmF2b3Igb2YgdXNpbmcgdGhlXG4vLyByb3V0ZXIgbWV0aG9kIGRpcmVjdGx5P1xuZnVuY3Rpb24gdXNlRm9ybUFjdGlvbihhY3Rpb24sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCByb3V0ZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICAhcm91dGVDb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGb3JtQWN0aW9uIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IFttYXRjaF0gPSByb3V0ZUNvbnRleHQubWF0Y2hlcy5zbGljZSgtMSk7XG4gIC8vIFNoYWxsb3cgY2xvbmUgcGF0aCBzbyB3ZSBjYW4gbW9kaWZ5IGl0IGJlbG93LCBvdGhlcndpc2Ugd2UgbW9kaWZ5IHRoZVxuICAvLyBvYmplY3QgcmVmZXJlbmNlZCBieSB1c2VNZW1vIGluc2lkZSB1c2VSZXNvbHZlZFBhdGhcbiAgbGV0IHBhdGggPSBfZXh0ZW5kcyh7fSwgdXNlUmVzb2x2ZWRQYXRoKGFjdGlvbiA/IGFjdGlvbiA6IFwiLlwiLCB7XG4gICAgcmVsYXRpdmVcbiAgfSkpO1xuICAvLyBJZiBubyBhY3Rpb24gd2FzIHNwZWNpZmllZCwgYnJvd3NlcnMgd2lsbCBwZXJzaXN0IGN1cnJlbnQgc2VhcmNoIHBhcmFtc1xuICAvLyB3aGVuIGRldGVybWluaW5nIHRoZSBwYXRoLCBzbyBtYXRjaCB0aGF0IGJlaGF2aW9yXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBpZiAoYWN0aW9uID09IG51bGwpIHtcbiAgICAvLyBTYWZlIHRvIHdyaXRlIHRvIHRoaXMgZGlyZWN0bHkgaGVyZSBzaW5jZSBpZiBhY3Rpb24gd2FzIHVuZGVmaW5lZCwgd2VcbiAgICAvLyB3b3VsZCBoYXZlIGNhbGxlZCB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpIHdoaWNoIHdpbGwgbmV2ZXIgaW5jbHVkZSBhIHNlYXJjaFxuICAgIHBhdGguc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoO1xuICAgIC8vIFdoZW4gZ3JhYmJpbmcgc2VhcmNoIHBhcmFtcyBmcm9tIHRoZSBVUkwsIHJlbW92ZSBhbnkgaW5jbHVkZWQgP2luZGV4IHBhcmFtXG4gICAgLy8gc2luY2UgaXQgbWlnaHQgbm90IGFwcGx5IHRvIG91ciBjb250ZXh0dWFsIHJvdXRlLiAgV2UgYWRkIGl0IGJhY2sgYmFzZWRcbiAgICAvLyBvbiBtYXRjaC5yb3V0ZS5pbmRleCBiZWxvd1xuICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICBpZiAocGFyYW1zLmhhcyhcImluZGV4XCIpICYmIHBhcmFtcy5nZXQoXCJpbmRleFwiKSA9PT0gXCJcIikge1xuICAgICAgcGFyYW1zLmRlbGV0ZShcImluZGV4XCIpO1xuICAgICAgcGF0aC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKSA/IFwiP1wiICsgcGFyYW1zLnRvU3RyaW5nKCkgOiBcIlwiO1xuICAgIH1cbiAgfVxuICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSBcIi5cIikgJiYgbWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH1cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgZm9ybSBhY3Rpb24uICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlXG4gIC8vIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZVxuICAvLyBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG4vLyBUT0RPOiAodjcpIENoYW5nZSB0aGUgdXNlRmV0Y2hlciBnZW5lcmljIGRlZmF1bHQgZnJvbSBgYW55YCB0byBgdW5rbm93bmBcbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXIoX3RlbXAzKSB7XG4gIHZhciBfcm91dGUkbWF0Y2hlcztcbiAgbGV0IHtcbiAgICBrZXlcbiAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VGZXRjaGVyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCBmZXRjaGVyRGF0YSA9IFJlYWN0LnVzZUNvbnRleHQoRmV0Y2hlcnNDb250ZXh0KTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlSWQgPSAoX3JvdXRlJG1hdGNoZXMgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0pID09IG51bGwgPyB2b2lkIDAgOiBfcm91dGUkbWF0Y2hlcy5yb3V0ZS5pZDtcbiAgIWZldGNoZXJEYXRhID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBGZXRjaGVyc0NvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIXJvdXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgIShyb3V0ZUlkICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIC8vIEZldGNoZXIga2V5IGhhbmRsaW5nXG4gIC8vIE9LIHRvIGNhbGwgY29uZGl0aW9uYWxseSB0byBmZWF0dXJlIGRldGVjdCBgdXNlSWRgXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICBsZXQgZGVmYXVsdEtleSA9IHVzZUlkSW1wbCA/IHVzZUlkSW1wbCgpIDogXCJcIjtcbiAgbGV0IFtmZXRjaGVyS2V5LCBzZXRGZXRjaGVyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKGtleSB8fCBkZWZhdWx0S2V5KTtcbiAgaWYgKGtleSAmJiBrZXkgIT09IGZldGNoZXJLZXkpIHtcbiAgICBzZXRGZXRjaGVyS2V5KGtleSk7XG4gIH0gZWxzZSBpZiAoIWZldGNoZXJLZXkpIHtcbiAgICAvLyBXZSB3aWxsIG9ubHkgZmFsbCB0aHJvdWdoIGhlcmUgd2hlbiBgdXNlSWRgIGlzIG5vdCBhdmFpbGFibGVcbiAgICBzZXRGZXRjaGVyS2V5KGdldFVuaXF1ZUZldGNoZXJJZCgpKTtcbiAgfVxuICAvLyBSZWdpc3RyYXRpb24vY2xlYW51cFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJvdXRlci5nZXRGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyBUZWxsIHRoZSByb3V0ZXIgd2UndmUgdW5tb3VudGVkIC0gaWYgdjdfZmV0Y2hlclBlcnNpc3QgaXMgZW5hYmxlZCB0aGlzXG4gICAgICAvLyB3aWxsIG5vdCBkZWxldGUgaW1tZWRpYXRlbHkgYnV0IGluc3RlYWQgcXVldWUgdXAgYSBkZWxldGUgYWZ0ZXIgdGhlXG4gICAgICAvLyBmZXRjaGVyIHJldHVybnMgdG8gYW4gYGlkbGVgIHN0YXRlXG4gICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICB9O1xuICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7XG4gIC8vIEZldGNoZXIgYWRkaXRpb25zXG4gIGxldCBsb2FkID0gUmVhY3QudXNlQ2FsbGJhY2soKGhyZWYsIG9wdHMpID0+IHtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYsIG9wdHMpO1xuICB9LCBbZmV0Y2hlcktleSwgcm91dGVJZCwgcm91dGVyXSk7XG4gIGxldCBzdWJtaXRJbXBsID0gdXNlU3VibWl0KCk7XG4gIGxldCBzdWJtaXQgPSBSZWFjdC51c2VDYWxsYmFjaygodGFyZ2V0LCBvcHRzKSA9PiB7XG4gICAgc3VibWl0SW1wbCh0YXJnZXQsIF9leHRlbmRzKHt9LCBvcHRzLCB7XG4gICAgICBuYXZpZ2F0ZTogZmFsc2UsXG4gICAgICBmZXRjaGVyS2V5XG4gICAgfSkpO1xuICB9LCBbZmV0Y2hlcktleSwgc3VibWl0SW1wbF0pO1xuICBsZXQgRmV0Y2hlckZvcm0gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgRmV0Y2hlckZvcm0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm0sIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBuYXZpZ2F0ZTogZmFsc2UsXG4gICAgICAgIGZldGNoZXJLZXk6IGZldGNoZXJLZXksXG4gICAgICAgIHJlZjogcmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgRmV0Y2hlckZvcm0uZGlzcGxheU5hbWUgPSBcImZldGNoZXIuRm9ybVwiO1xuICAgIH1cbiAgICByZXR1cm4gRmV0Y2hlckZvcm07XG4gIH0sIFtmZXRjaGVyS2V5XSk7XG4gIC8vIEV4cG9zZWQgRmV0Y2hlcldpdGhDb21wb25lbnRzXG4gIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGZldGNoZXJLZXkpIHx8IElETEVfRkVUQ0hFUjtcbiAgbGV0IGRhdGEgPSBmZXRjaGVyRGF0YS5nZXQoZmV0Y2hlcktleSk7XG4gIGxldCBmZXRjaGVyV2l0aENvbXBvbmVudHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IF9leHRlbmRzKHtcbiAgICBGb3JtOiBGZXRjaGVyRm9ybSxcbiAgICBzdWJtaXQsXG4gICAgbG9hZFxuICB9LCBmZXRjaGVyLCB7XG4gICAgZGF0YVxuICB9KSwgW0ZldGNoZXJGb3JtLCBzdWJtaXQsIGxvYWQsIGZldGNoZXIsIGRhdGFdKTtcbiAgcmV0dXJuIGZldGNoZXJXaXRoQ29tcG9uZW50cztcbn1cbi8qKlxuICogUHJvdmlkZXMgYWxsIGZldGNoZXJzIGN1cnJlbnRseSBvbiB0aGUgcGFnZS4gVXNlZnVsIGZvciBsYXlvdXRzIGFuZCBwYXJlbnRcbiAqIHJvdXRlcyB0aGF0IG5lZWQgdG8gcHJvdmlkZSBwZW5kaW5nL29wdGltaXN0aWMgVUkgcmVnYXJkaW5nIHRoZSBmZXRjaC5cbiAqL1xuZnVuY3Rpb24gdXNlRmV0Y2hlcnMoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTtcbiAgcmV0dXJuIEFycmF5LmZyb20oc3RhdGUuZmV0Y2hlcnMuZW50cmllcygpKS5tYXAoX3JlZjExID0+IHtcbiAgICBsZXQgW2tleSwgZmV0Y2hlcl0gPSBfcmVmMTE7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBmZXRjaGVyLCB7XG4gICAgICBrZXlcbiAgICB9KTtcbiAgfSk7XG59XG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSB7fTtcbi8qKlxuICogV2hlbiByZW5kZXJlZCBpbnNpZGUgYSBSb3V0ZXJQcm92aWRlciwgd2lsbCByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbnMgb24gbmF2aWdhdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXNlU2Nyb2xsUmVzdG9yYXRpb24oX3RlbXA0KSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQ7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCB7XG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBtYXRjaGVzID0gdXNlTWF0Y2hlcygpO1xuICBsZXQgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTtcbiAgLy8gVHJpZ2dlciBtYW51YWwgc2Nyb2xsIHJlc3RvcmF0aW9uIHdoaWxlIHdlJ3JlIGFjdGl2ZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgICB9O1xuICB9LCBbXSk7XG4gIC8vIFNhdmUgcG9zaXRpb25zIG9uIHBhZ2VoaWRlXG4gIHVzZVBhZ2VIaWRlKFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAobmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIGxldCBrZXkgPSAoZ2V0S2V5ID8gZ2V0S2V5KGxvY2F0aW9uLCBtYXRjaGVzKSA6IG51bGwpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNhdmVkU2Nyb2xsUG9zaXRpb25zKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIkZhaWxlZCB0byBzYXZlIHNjcm9sbCBwb3NpdGlvbnMgaW4gc2Vzc2lvblN0b3JhZ2UsIDxTY3JvbGxSZXN0b3JhdGlvbiAvPiB3aWxsIG5vdCB3b3JrIHByb3Blcmx5IChcIiArIGVycm9yICsgXCIpLlwiKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgfSwgW3N0b3JhZ2VLZXksIGdldEtleSwgbmF2aWdhdGlvbi5zdGF0ZSwgbG9jYXRpb24sIG1hdGNoZXNdKSk7XG4gIC8vIFJlYWQgaW4gYW55IHNhdmVkIHNjcm9sbCBsb2NhdGlvbnNcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgc2Vzc2lvblBvc2l0aW9ucyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgICB9XG4gICAgfSwgW3N0b3JhZ2VLZXldKTtcbiAgICAvLyBFbmFibGUgc2Nyb2xsIHJlc3RvcmF0aW9uIGluIHRoZSByb3V0ZXJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IGdldEtleVdpdGhvdXRCYXNlbmFtZSA9IGdldEtleSAmJiBiYXNlbmFtZSAhPT0gXCIvXCIgPyAobG9jYXRpb24sIG1hdGNoZXMpID0+IGdldEtleSggLy8gU3RyaXAgdGhlIGJhc2VuYW1lIHRvIG1hdGNoIHVzZUxvY2F0aW9uKClcbiAgICAgIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSwgbWF0Y2hlcykgOiBnZXRLZXk7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZXIuZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24oc2F2ZWRTY3JvbGxQb3NpdGlvbnMsICgpID0+IHdpbmRvdy5zY3JvbGxZLCBnZXRLZXlXaXRob3V0QmFzZW5hbWUpO1xuICAgICAgcmV0dXJuICgpID0+IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiAmJiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24oKTtcbiAgICB9LCBbcm91dGVyLCBiYXNlbmFtZSwgZ2V0S2V5XSk7XG4gICAgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBiZWVuIGhlcmUgYmVmb3JlLCBzY3JvbGwgdG8gaXRcbiAgICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyB0cnkgdG8gc2Nyb2xsIHRvIHRoZSBoYXNoXG4gICAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkZWNvZGVVUklDb21wb25lbnQobG9jYXRpb24uaGFzaC5zbGljZSgxKSkpO1xuICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICBlbC5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgcmVzZXQgaWYgdGhpcyBuYXZpZ2F0aW9uIG9wdGVkIG91dFxuICAgICAgaWYgKHByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xuICB9XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBiZWZvcmV1bmxvYWRgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZUJlZm9yZVVubG9hZChjYWxsYmFjaywgb3B0aW9ucykge1xuICBsZXQge1xuICAgIGNhcHR1cmVcbiAgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7XG4gICAgICBjYXB0dXJlXG4gICAgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYHBhZ2VoaWRlYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLiAgVGhpcyBldmVudCBpcyBiZXR0ZXIgc3VwcG9ydGVkIHRoYW4gYmVmb3JldW5sb2FkIGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZnVuY3Rpb24gdXNlUGFnZUhpZGUoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIH07XG4gIH0sIFtjYWxsYmFjaywgY2FwdHVyZV0pO1xufVxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB1c2VCbG9ja2VyIHRvIHNob3cgYSB3aW5kb3cuY29uZmlybSBwcm9tcHQgdG8gdXNlcnMgaW5zdGVhZFxuICogb2YgYnVpbGRpbmcgYSBjdXN0b20gVUkgd2l0aCB1c2VCbG9ja2VyLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgaGFzICphIGxvdCBvZiByb3VnaCBlZGdlcyogYW5kIGJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSAoYW5kXG4gKiB2ZXJ5IGluY29ycmVjdGx5IGluIHNvbWUgY2FzZXMpIGFjcm9zcyBicm93c2VycyBpZiB1c2VyIGNsaWNrIGFkZGl0aW9uXG4gKiBiYWNrL2ZvcndhcmQgbmF2aWdhdGlvbnMgd2hpbGUgdGhlIGNvbmZpcm0gaXMgb3Blbi4gIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiB1c2VQcm9tcHQoX3JlZjEyKSB7XG4gIGxldCB7XG4gICAgd2hlbixcbiAgICBtZXNzYWdlXG4gIH0gPSBfcmVmMTI7XG4gIGxldCBibG9ja2VyID0gdXNlQmxvY2tlcih3aGVuKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIpIHtcbiAgICAgIGxldCBwcm9jZWVkID0gd2luZG93LmNvbmZpcm0obWVzc2FnZSk7XG4gICAgICBpZiAocHJvY2VlZCkge1xuICAgICAgICAvLyBUaGlzIHRpbWVvdXQgaXMgbmVlZGVkIHRvIGF2b2lkIGEgd2VpcmQgXCJyYWNlXCIgb24gUE9QIG5hdmlnYXRpb25zXG4gICAgICAgIC8vIGJldHdlZW4gdGhlIGB3aW5kb3cuaGlzdG9yeWAgcmV2ZXJ0IG5hdmlnYXRpb24gYW5kIHRoZSByZXN1bHQgb2ZcbiAgICAgICAgLy8gYHdpbmRvdy5jb25maXJtYFxuICAgICAgICBzZXRUaW1lb3V0KGJsb2NrZXIucHJvY2VlZCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbYmxvY2tlciwgbWVzc2FnZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiAhd2hlbikge1xuICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIHdoZW5dKTtcbn1cbi8qKlxuICogUmV0dXJuIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSB2aWV3IHRyYW5zaXRpb24gdG8gdGhlXG4gKiBnaXZlbiBocmVmLiAgWW91IGNhbiB1c2UgdGhpcyB2YWx1ZSB0byByZW5kZXIgQ1NTIGNsYXNzZXMgb3Igdmlld1RyYW5zaXRpb25OYW1lXG4gKiBzdHlsZXMgb250byB5b3VyIGVsZW1lbnRzXG4gKlxuICogQHBhcmFtIGhyZWYgVGhlIGRlc3RpbmF0aW9uIGhyZWZcbiAqIEBwYXJhbSBbb3B0cy5yZWxhdGl2ZV0gUmVsYXRpdmUgcm91dGluZyB0eXBlIChcInJvdXRlXCIgfCBcInBhdGhcIilcbiAqL1xuZnVuY3Rpb24gdXNlVmlld1RyYW5zaXRpb25TdGF0ZSh0bywgb3B0cykge1xuICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0cyA9IHt9O1xuICB9XG4gIGxldCB2dENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFZpZXdUcmFuc2l0aW9uQ29udGV4dCk7XG4gICEodnRDb250ZXh0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJgdW5zdGFibGVfdXNlVmlld1RyYW5zaXRpb25TdGF0ZWAgbXVzdCBiZSB1c2VkIHdpdGhpbiBgcmVhY3Qtcm91dGVyLWRvbWAncyBgUm91dGVyUHJvdmlkZXJgLiAgXCIgKyBcIkRpZCB5b3UgYWNjaWRlbnRhbGx5IGltcG9ydCBgUm91dGVyUHJvdmlkZXJgIGZyb20gYHJlYWN0LXJvdXRlcmA/XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWVcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLnVzZVZpZXdUcmFuc2l0aW9uU3RhdGUpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiBvcHRzLnJlbGF0aXZlXG4gIH0pO1xuICBpZiAoIXZ0Q29udGV4dC5pc1RyYW5zaXRpb25pbmcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IGN1cnJlbnRQYXRoID0gc3RyaXBCYXNlbmFtZSh2dENvbnRleHQuY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgdnRDb250ZXh0LmN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRQYXRoID0gc3RyaXBCYXNlbmFtZSh2dENvbnRleHQubmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgdnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZTtcbiAgLy8gVHJhbnNpdGlvbiBpcyBhY3RpdmUgaWYgd2UncmUgZ29pbmcgdG8gb3IgY29taW5nIGZyb20gdGhlIGluZGljYXRlZFxuICAvLyBkZXN0aW5hdGlvbi4gIFRoaXMgZW5zdXJlcyB0aGF0IG90aGVyIFBVU0ggbmF2aWdhdGlvbnMgdGhhdCByZXZlcnNlXG4gIC8vIGFuIGluZGljYXRlZCB0cmFuc2l0aW9uIGFwcGx5LiAgSS5lLiwgb24gdGhlIGxpc3QgdmlldyB5b3UgaGF2ZTpcbiAgLy9cbiAgLy8gICA8TmF2TGluayB0bz1cIi9kZXRhaWxzLzFcIiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbj5cbiAgLy9cbiAgLy8gSWYgeW91IGNsaWNrIHRoZSBicmVhZGNydW1iIGJhY2sgdG8gdGhlIGxpc3QgdmlldzpcbiAgLy9cbiAgLy8gICA8TmF2TGluayB0bz1cIi9saXN0XCIgdW5zdGFibGVfdmlld1RyYW5zaXRpb24+XG4gIC8vXG4gIC8vIFdlIHNob3VsZCBhcHBseSB0aGUgdHJhbnNpdGlvbiBiZWNhdXNlIGl0J3MgaW5kaWNhdGVkIGFzIGFjdGl2ZSBnb2luZ1xuICAvLyBmcm9tIC9saXN0IC0+IC9kZXRhaWxzLzEgYW5kIHRoZXJlZm9yZSBzaG91bGQgYmUgYWN0aXZlIG9uIHRoZSByZXZlcnNlXG4gIC8vIChldmVuIHRob3VnaCB0aGlzIGlzbid0IHN0cmljdGx5IGEgUE9QIHJldmVyc2UpXG4gIHJldHVybiBtYXRjaFBhdGgocGF0aC5wYXRobmFtZSwgbmV4dFBhdGgpICE9IG51bGwgfHwgbWF0Y2hQYXRoKHBhdGgucGF0aG5hbWUsIGN1cnJlbnRQYXRoKSAhPSBudWxsO1xufVxuLy8jZW5kcmVnaW9uXG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEZvcm0sIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmssIFJvdXRlclByb3ZpZGVyLCBTY3JvbGxSZXN0b3JhdGlvbiwgRmV0Y2hlcnNDb250ZXh0IGFzIFVOU0FGRV9GZXRjaGVyc0NvbnRleHQsIFZpZXdUcmFuc2l0aW9uQ29udGV4dCBhcyBVTlNBRkVfVmlld1RyYW5zaXRpb25Db250ZXh0LCB1c2VTY3JvbGxSZXN0b3JhdGlvbiBhcyBVTlNBRkVfdXNlU2Nyb2xsUmVzdG9yYXRpb24sIGNyZWF0ZUJyb3dzZXJSb3V0ZXIsIGNyZWF0ZUhhc2hSb3V0ZXIsIGNyZWF0ZVNlYXJjaFBhcmFtcywgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyLCB1c2VQcm9tcHQgYXMgdW5zdGFibGVfdXNlUHJvbXB0LCB1c2VWaWV3VHJhbnNpdGlvblN0YXRlIGFzIHVuc3RhYmxlX3VzZVZpZXdUcmFuc2l0aW9uU3RhdGUsIHVzZUJlZm9yZVVubG9hZCwgdXNlRmV0Y2hlciwgdXNlRmV0Y2hlcnMsIHVzZUZvcm1BY3Rpb24sIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcywgdXNlU3VibWl0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIHY2LjIzLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzLCBtYXRjaFBhdGgsIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzLCBVTlNBRkVfd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCwgc3RyaXBCYXNlbmFtZSwgSURMRV9CTE9DS0VSLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgQWJvcnRlZERlZmVycmVkRXJyb3IsIGNyZWF0ZVJvdXRlciB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsIGNyZWF0ZVBhdGgsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZXNvbHZlUGF0aCB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8vIENyZWF0ZSByZWFjdC1zcGVjaWZpYyB0eXBlcyBmcm9tIHRoZSBhZ25vc3RpYyB0eXBlcyBpbiBAcmVtaXgtcnVuL3JvdXRlciB0b1xuLy8gZXhwb3J0IGZyb20gcmVhY3Qtcm91dGVyXG5jb25zdCBEYXRhUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclwiO1xufVxuY29uc3QgRGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyU3RhdGVcIjtcbn1cbmNvbnN0IEF3YWl0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBBd2FpdENvbnRleHQuZGlzcGxheU5hbWUgPSBcIkF3YWl0XCI7XG59XG5cbi8qKlxuICogQSBOYXZpZ2F0b3IgaXMgYSBcImxvY2F0aW9uIGNoYW5nZXJcIjsgaXQncyBob3cgeW91IGdldCB0byBkaWZmZXJlbnQgbG9jYXRpb25zLlxuICpcbiAqIEV2ZXJ5IGhpc3RvcnkgaW5zdGFuY2UgY29uZm9ybXMgdG8gdGhlIE5hdmlnYXRvciBpbnRlcmZhY2UsIGJ1dCB0aGVcbiAqIGRpc3RpbmN0aW9uIGlzIHVzZWZ1bCBwcmltYXJpbHkgd2hlbiBpdCBjb21lcyB0byB0aGUgbG93LWxldmVsIGA8Um91dGVyPmAgQVBJXG4gKiB3aGVyZSBib3RoIHRoZSBsb2NhdGlvbiBhbmQgYSBuYXZpZ2F0b3IgbXVzdCBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGluIG9yZGVyXG4gKiB0byBhdm9pZCBcInRlYXJpbmdcIiB0aGF0IG1heSBvY2N1ciBpbiBhIHN1c3BlbnNlLWVuYWJsZWQgYXBwIGlmIHRoZSBhY3Rpb25cbiAqIGFuZC9vciBsb2NhdGlvbiB3ZXJlIHRvIGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgaGlzdG9yeSBpbnN0YW5jZS5cbiAqL1xuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZpZ2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTmF2aWdhdGlvblwiO1xufVxuY29uc3QgTG9jYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cbmNvbnN0IFJvdXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXSxcbiAgaXNEYXRhUm91dGU6IGZhbHNlXG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZVwiO1xufVxuY29uc3QgUm91dGVFcnJvckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaHJlZlxuICovXG5mdW5jdGlvbiB1c2VIcmVmKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIGhhc2gsXG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoXG4gIH0gPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIG5hdmlnYXRvci5jcmVhdGVIcmVmKHtcbiAgICBwYXRobmFtZTogam9pbmVkUGF0aG5hbWUsXG4gICAgc2VhcmNoLFxuICAgIGhhc2hcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIGA8Um91dGVyPmAuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHRcbiAqL1xuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTG9jYXRpb24oKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogYDxOYXZMaW5rPmAuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbWF0Y2hcbiAqL1xuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBwYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSwgW3BhdGhuYW1lLCBwYXR0ZXJuXSk7XG59XG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5cbmNvbnN0IG5hdmlnYXRlRWZmZWN0V2FybmluZyA9IFwiWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gXCIgKyBcInlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLlwiO1xuXG4vLyBNdXRlIHdhcm5pbmdzIGZvciBjYWxscyB0byB1c2VOYXZpZ2F0ZSBpbiBTU1IgZW52aXJvbm1lbnRzXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGNiKSB7XG4gIGxldCBpc1N0YXRpYyA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYztcbiAgaWYgKCFpc1N0YXRpYykge1xuICAgIC8vIFdlIHNob3VsZCBiZSBhYmxlIHRvIGdldCByaWQgb2YgdGhpcyBvbmNlIHJlYWN0IDE4LjMgaXMgcmVsZWFzZWRcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzI2Mzk1XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KGNiKTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gaW1wZXJhdGl2ZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBsb2NhdGlvbi4gVXNlZCBieSBgPExpbms+YHMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlKCkge1xuICBsZXQge1xuICAgIGlzRGF0YVJvdXRlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIHJldHVybiBpc0RhdGFSb3V0ZSA/IHVzZU5hdmlnYXRlU3RhYmxlKCkgOiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCk7XG59XG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgZnV0dXJlLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpIDogdm9pZCAwO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIGhpc3RvcnkgbGlzdGVuZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTtcblxuICAgIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgICAvLyB0byBoYW5kaW5nIG9mZiB0byBoaXN0b3J5IChidXQgb25seSBpZiB3ZSdyZSBub3QgaW4gYSBkYXRhIHJvdXRlcixcbiAgICAvLyBvdGhlcndpc2UgaXQnbGwgcHJlcGVuZCB0aGUgYmFzZW5hbWUgaW5zaWRlIG9mIHRoZSByb3V0ZXIpLlxuICAgIC8vIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2UgbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZVxuICAgIC8vIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYVxuICAgIC8vIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgICBpZiAoZGF0YVJvdXRlckNvbnRleHQgPT0gbnVsbCAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgZGF0YVJvdXRlckNvbnRleHRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXQtY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChPdXRsZXRDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IGA8T3V0bGV0PmAgdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXRcbiAqL1xuZnVuY3Rpb24gdXNlT3V0bGV0KGNvbnRleHQpIHtcbiAgbGV0IG91dGxldCA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KS5vdXRsZXQ7XG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG4gIHJldHVybiBvdXRsZXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcGFyYW1zXG4gKi9cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcmVzb2x2ZWQtcGF0aFxuICovXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIGZ1dHVyZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiBgPE91dGxldD5gIHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJvdXRlc1xuICovXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIGxvY2F0aW9uQXJnKTtcbn1cblxuLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gd2l0aCBhY2NlcHQgb3B0aW9uYWwgcGFyYW0gZm9yIFJvdXRlclByb3ZpZGVyIHVzYWdlXG5mdW5jdGlvbiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXM6IHBhcmVudE1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBwYXJlbnRNYXRjaGVzW3BhcmVudE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGxldCBwYXJlbnRQYXJhbXMgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbiAgbGV0IHBhcmVudFBhdGhuYW1lID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWUgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50Um91dGUgPSByb3V0ZU1hdGNoICYmIHJvdXRlTWF0Y2gucm91dGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuICBpZiAobG9jYXRpb25BcmcpIHtcbiAgICB2YXIgX3BhcnNlZExvY2F0aW9uQXJnJHBhO1xuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGF0aG5hbWU7XG4gIGlmIChwYXJlbnRQYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSByZW1haW5pbmcgcGF0aG5hbWUgYnkgcmVtb3ZpbmcgdGhlICMgb2YgVVJMIHNlZ21lbnRzIHRoZVxuICAgIC8vIHBhcmVudFBhdGhuYW1lQmFzZSBoYXMsIGluc3RlYWQgb2YgcmVtb3ZpbmcgYmFzZWQgb24gY2hhcmFjdGVyIGNvdW50LlxuICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSBjYW4ndCBndWFyYW50ZWUgdGhhdCBpbmNvbWluZy9vdXRnb2luZyBlbmNvZGluZ3MvXG4gICAgLy8gZGVjb2RpbmdzIHdpbGwgbWF0Y2ggZXhhY3RseS5cbiAgICAvLyBXZSBkZWNvZGUgcGF0aHMgYmVmb3JlIG1hdGNoaW5nIG9uIGEgcGVyLXNlZ21lbnQgYmFzaXMgd2l0aFxuICAgIC8vIGRlY29kZVVSSUNvbXBvbmVudCgpLCBidXQgd2UgcmUtZW5jb2RlIHBhdGhuYW1lcyB2aWEgYG5ldyBVUkwoKWAgc28gdGhleVxuICAgIC8vIG1hdGNoIHdoYXQgYHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZWAgd291bGQgcmVmbGVjdC4gIFRob3NlIGRvbid0IDEwMCVcbiAgICAvLyBhbGlnbiB3aGVuIGl0IGNvbWVzIHRvIGVuY29kZWQgVVJJIGNoYXJhY3RlcnMgc3VjaCBhcyAlIGFuZCAmLlxuICAgIC8vXG4gICAgLy8gU28gd2UgbWF5IGVuZCB1cCB3aXRoOlxuICAgIC8vICAgcGF0aG5hbWU6ICAgICAgICAgICBcIi9kZXNjZW5kYW50L2ElMjViL21hdGNoXCJcbiAgICAvLyAgIHBhcmVudFBhdGhuYW1lQmFzZTogXCIvZGVzY2VuZGFudC9hJWJcIlxuICAgIC8vXG4gICAgLy8gQW5kIHRoZSBkaXJlY3Qgc3Vic3RyaW5nIHJlbW92YWwgYXBwcm9hY2ggd29uJ3Qgd29yayA6L1xuICAgIGxldCBwYXJlbnRTZWdtZW50cyA9IHBhcmVudFBhdGhuYW1lQmFzZS5yZXBsYWNlKC9eXFwvLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgIGxldCBzZWdtZW50cyA9IHBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gICAgcmVtYWluaW5nUGF0aG5hbWUgPSBcIi9cIiArIHNlZ21lbnRzLnNsaWNlKHBhcmVudFNlZ21lbnRzLmxlbmd0aCkuam9pbihcIi9cIik7XG4gIH1cbiAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXMsIHtcbiAgICBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWVcbiAgfSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhtYXRjaGVzID09IG51bGwgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuQ29tcG9uZW50ICE9PSB1bmRlZmluZWQgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmxhenkgIT09IHVuZGVmaW5lZCwgXCJNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiICsgXCJkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQgb3IgQ29tcG9uZW50LiBUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIFwiICsgXCJudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWUpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUsIGZ1dHVyZSk7XG5cbiAgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG4gIGlmIChsb2NhdGlvbkFyZyAmJiByZW5kZXJlZE1hdGNoZXMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBsb2NhdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICAgIHBhdGhuYW1lOiBcIi9cIixcbiAgICAgICAgICBzZWFyY2g6IFwiXCIsXG4gICAgICAgICAgaGFzaDogXCJcIixcbiAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICBrZXk6IFwiZGVmYXVsdFwiXG4gICAgICAgIH0sIGxvY2F0aW9uKSxcbiAgICAgICAgbmF2aWdhdGlvblR5cGU6IEFjdGlvbi5Qb3BcbiAgICAgIH1cbiAgICB9LCByZW5kZXJlZE1hdGNoZXMpO1xuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JDb21wb25lbnQoKSB7XG4gIGxldCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKTtcbiAgbGV0IG1lc3NhZ2UgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgKyBcIiBcIiArIGVycm9yLnN0YXR1c1RleHQgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTtcbiAgbGV0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDtcbiAgbGV0IGxpZ2h0Z3JleSA9IFwicmdiYSgyMDAsMjAwLDIwMCwgMC41KVwiO1xuICBsZXQgcHJlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMC41cmVtXCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGNvZGVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGRldkluZm8gPSBudWxsO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGhhbmRsZWQgYnkgUmVhY3QgUm91dGVyIGRlZmF1bHQgRXJyb3JCb3VuZGFyeTpcIiwgZXJyb3IpO1xuICAgIGRldkluZm8gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiXFx1RDgzRFxcdURDQkYgSGV5IGRldmVsb3BlciBcXHVEODNEXFx1REM0QlwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiWW91IGNhbiBwcm92aWRlIGEgd2F5IGJldHRlciBVWCB0aGFuIHRoaXMgd2hlbiB5b3VyIGFwcCB0aHJvd3MgZXJyb3JzIGJ5IHByb3ZpZGluZyB5b3VyIG93biBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJFcnJvckJvdW5kYXJ5XCIpLCBcIiBvclwiLCBcIiBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJlcnJvckVsZW1lbnRcIiksIFwiIHByb3Agb24geW91ciByb3V0ZS5cIikpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuZXhwZWN0ZWQgQXBwbGljYXRpb24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCBkZXZJbmZvKTtcbn1cbmNvbnN0IGRlZmF1bHRFcnJvckVsZW1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RXJyb3JDb21wb25lbnQsIG51bGwpO1xuY2xhc3MgUmVuZGVyRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgLy8gV2hlbiB3ZSBnZXQgaW50byBhbiBlcnJvciBzdGF0ZSwgdGhlIHVzZXIgd2lsbCBsaWtlbHkgY2xpY2sgXCJiYWNrXCIgdG8gdGhlXG4gICAgLy8gcHJldmlvdXMgcGFnZSB0aGF0IGRpZG4ndCBoYXZlIGFuIGVycm9yLiBCZWNhdXNlIHRoaXMgd3JhcHMgdGhlIGVudGlyZVxuICAgIC8vIGFwcGxpY2F0aW9uLCB0aGF0IHdpbGwgaGF2ZSBubyBlZmZlY3QtLXRoZSBlcnJvciBwYWdlIGNvbnRpbnVlcyB0byBkaXNwbGF5LlxuICAgIC8vIFRoaXMgZ2l2ZXMgdXMgYSBtZWNoYW5pc20gdG8gcmVjb3ZlciBmcm9tIHRoZSBlcnJvciB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgIC8vXG4gICAgLy8gV2hldGhlciB3ZSdyZSBpbiBhbiBlcnJvciBzdGF0ZSBvciBub3QsIHdlIHVwZGF0ZSB0aGUgbG9jYXRpb24gaW4gc3RhdGVcbiAgICAvLyBzbyB0aGF0IHdoZW4gd2UgYXJlIGluIGFuIGVycm9yIHN0YXRlLCBpdCBnZXRzIHJlc2V0IHdoZW4gYSBuZXcgbG9jYXRpb25cbiAgICAvLyBjb21lcyBpbiBhbmQgdGhlIHVzZXIgcmVjb3ZlcnMgZnJvbSB0aGUgZXJyb3IuXG4gICAgaWYgKHN0YXRlLmxvY2F0aW9uICE9PSBwcm9wcy5sb2NhdGlvbiB8fCBzdGF0ZS5yZXZhbGlkYXRpb24gIT09IFwiaWRsZVwiICYmIHByb3BzLnJldmFsaWRhdGlvbiA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvblxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBub3QgY2hhbmdpbmcgbG9jYXRpb25zLCBwcmVzZXJ2ZSB0aGUgbG9jYXRpb24gYnV0IHN0aWxsIHN1cmZhY2VcbiAgICAvLyBhbnkgbmV3IGVycm9ycyB0aGF0IG1heSBjb21lIHRocm91Z2guIFdlIHJldGFpbiB0aGUgZXhpc3RpbmcgZXJyb3IsIHdlIGRvXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dFxuICAgIC8vIHRoZSBsb2NhdGlvbiBjaGFuZ2luZy5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yICE9PSB1bmRlZmluZWQgPyBwcm9wcy5lcnJvciA6IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uXG4gICAgfTtcbiAgfVxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlJlYWN0IFJvdXRlciBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciAhPT0gdW5kZWZpbmVkID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yb3V0ZUNvbnRleHRcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUVycm9yQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZXJyb3IsXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICB9KSkgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG59XG5mdW5jdGlvbiBSZW5kZXJlZFJvdXRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICByb3V0ZUNvbnRleHQsXG4gICAgbWF0Y2gsXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuXG4gIC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2hcbiAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyXG4gIGlmIChkYXRhUm91dGVyQ29udGV4dCAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWMgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dCAmJiAobWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkpKSB7XG4gICAgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCA9IG1hdGNoLnJvdXRlLmlkO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogcm91dGVDb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKSB7XG4gIHZhciBfZGF0YVJvdXRlclN0YXRlMjtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuICBpZiAoZGF0YVJvdXRlclN0YXRlID09PSB2b2lkIDApIHtcbiAgICBkYXRhUm91dGVyU3RhdGUgPSBudWxsO1xuICB9XG4gIGlmIChmdXR1cmUgPT09IHZvaWQgMCkge1xuICAgIGZ1dHVyZSA9IG51bGw7XG4gIH1cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIHZhciBfZGF0YVJvdXRlclN0YXRlO1xuICAgIGlmICgoX2RhdGFSb3V0ZXJTdGF0ZSA9IGRhdGFSb3V0ZXJTdGF0ZSkgIT0gbnVsbCAmJiBfZGF0YVJvdXRlclN0YXRlLmVycm9ycykge1xuICAgICAgLy8gRG9uJ3QgYmFpbCBpZiB3ZSBoYXZlIGRhdGEgcm91dGVyIGVycm9ycyBzbyB3ZSBjYW4gcmVuZGVyIHRoZW0gaW4gdGhlXG4gICAgICAvLyBib3VuZGFyeS4gIFVzZSB0aGUgcHJlLW1hdGNoZWQgKG9yIHNoaW1tZWQpIG1hdGNoZXNcbiAgICAgIG1hdGNoZXMgPSBkYXRhUm91dGVyU3RhdGUubWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBtYXRjaGVzO1xuXG4gIC8vIElmIHdlIGhhdmUgZGF0YSBlcnJvcnMsIHRyaW0gbWF0Y2hlcyB0byB0aGUgaGlnaGVzdCBlcnJvciBib3VuZGFyeVxuICBsZXQgZXJyb3JzID0gKF9kYXRhUm91dGVyU3RhdGUyID0gZGF0YVJvdXRlclN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGFSb3V0ZXJTdGF0ZTIuZXJyb3JzO1xuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZCk7XG4gICAgIShlcnJvckluZGV4ID49IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIHJvdXRlIGZvciBlcnJvcnMgb24gcm91dGUgSURzOiBcIiArIE9iamVjdC5rZXlzKGVycm9ycykuam9pbihcIixcIikpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIE1hdGgubWluKHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGgsIGVycm9ySW5kZXggKyAxKSk7XG4gIH1cblxuICAvLyBJZiB3ZSdyZSBpbiBhIHBhcnRpYWwgaHlkcmF0aW9uIG1vZGUsIGRldGVjdCBpZiB3ZSBuZWVkIHRvIHJlbmRlciBkb3duIHRvXG4gIC8vIGEgZ2l2ZW4gSHlkcmF0ZUZhbGxiYWNrIHdoaWxlIHdlIGxvYWQgdGhlIHJlc3Qgb2YgdGhlIGh5ZHJhdGlvbiBkYXRhXG4gIGxldCByZW5kZXJGYWxsYmFjayA9IGZhbHNlO1xuICBsZXQgZmFsbGJhY2tJbmRleCA9IC0xO1xuICBpZiAoZGF0YVJvdXRlclN0YXRlICYmIGZ1dHVyZSAmJiBmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyZWRNYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbWF0Y2ggPSByZW5kZXJlZE1hdGNoZXNbaV07XG4gICAgICAvLyBUcmFjayB0aGUgZGVlcGVzdCBmYWxsYmFjayB1cCB1bnRpbCB0aGUgZmlyc3Qgcm91dGUgd2l0aG91dCBkYXRhXG4gICAgICBpZiAobWF0Y2gucm91dGUuSHlkcmF0ZUZhbGxiYWNrIHx8IG1hdGNoLnJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQpIHtcbiAgICAgICAgZmFsbGJhY2tJbmRleCA9IGk7XG4gICAgICB9XG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQpIHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICAgIGVycm9yc1xuICAgICAgICB9ID0gZGF0YVJvdXRlclN0YXRlO1xuICAgICAgICBsZXQgbmVlZHNUb1J1bkxvYWRlciA9IG1hdGNoLnJvdXRlLmxvYWRlciAmJiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkICYmICghZXJyb3JzIHx8IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtYXRjaC5yb3V0ZS5sYXp5IHx8IG5lZWRzVG9SdW5Mb2FkZXIpIHtcbiAgICAgICAgICAvLyBXZSBmb3VuZCB0aGUgZmlyc3Qgcm91dGUgdGhhdCdzIG5vdCByZWFkeSB0byByZW5kZXIgKHdhaXRpbmcgb25cbiAgICAgICAgICAvLyBsYXp5LCBvciBoYXMgYSBsb2FkZXIgdGhhdCBoYXNuJ3QgcnVuIHlldCkuICBGbGFnIHRoYXQgd2UgbmVlZCB0b1xuICAgICAgICAgIC8vIHJlbmRlciBhIGZhbGxiYWNrIGFuZCByZW5kZXIgdXAgdW50aWwgdGhlIGFwcHJvcHJpYXRlIGZhbGxiYWNrXG4gICAgICAgICAgcmVuZGVyRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGlmIChmYWxsYmFja0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBmYWxsYmFja0luZGV4ICsgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IFtyZW5kZXJlZE1hdGNoZXNbMF1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIC8vIE9ubHkgZGF0YSByb3V0ZXJzIGhhbmRsZSBlcnJvcnMvZmFsbGJhY2tzXG4gICAgbGV0IGVycm9yO1xuICAgIGxldCBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSBmYWxzZTtcbiAgICBsZXQgZXJyb3JFbGVtZW50ID0gbnVsbDtcbiAgICBsZXQgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG51bGw7XG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSkge1xuICAgICAgZXJyb3IgPSBlcnJvcnMgJiYgbWF0Y2gucm91dGUuaWQgPyBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgZXJyb3JFbGVtZW50ID0gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGRlZmF1bHRFcnJvckVsZW1lbnQ7XG4gICAgICBpZiAocmVuZGVyRmFsbGJhY2spIHtcbiAgICAgICAgaWYgKGZhbGxiYWNrSW5kZXggPCAwICYmIGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgd2FybmluZ09uY2UoXCJyb3V0ZS1mYWxsYmFja1wiLCBmYWxzZSwgXCJObyBgSHlkcmF0ZUZhbGxiYWNrYCBlbGVtZW50IHByb3ZpZGVkIHRvIHJlbmRlciBkdXJpbmcgaW5pdGlhbCBoeWRyYXRpb25cIik7XG4gICAgICAgICAgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmYWxsYmFja0luZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG1hdGNoLnJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbWF0Y2hlcyA9IHBhcmVudE1hdGNoZXMuY29uY2F0KHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKTtcbiAgICBsZXQgZ2V0Q2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgICBsZXQgY2hpbGRyZW47XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBlcnJvckVsZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjaykge1xuICAgICAgICBjaGlsZHJlbiA9IGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoLnJvdXRlLkNvbXBvbmVudCkge1xuICAgICAgICAvLyBOb3RlOiBUaGlzIGlzIGEgZGUtb3B0aW1pemVkIHBhdGggc2luY2UgUmVhY3Qgd29uJ3QgcmUtdXNlIHRoZVxuICAgICAgICAvLyBSZWFjdEVsZW1lbnQgc2luY2UgaXQncyBpZGVudGl0eSBjaGFuZ2VzIHdpdGggZWFjaCBuZXdcbiAgICAgICAgLy8gUmVhY3QuY3JlYXRlRWxlbWVudCBjYWxsLiAgV2Uga2VlcCB0aGlzIHNvIGZvbGtzIGNhbiB1c2VcbiAgICAgICAgLy8gYDxSb3V0ZSBDb21wb25lbnQ9ey4uLn0+YCBpbiBgPFJvdXRlcz5gIGJ1dCBnZW5lcmFsbHkgYENvbXBvbmVudGBcbiAgICAgICAgLy8gdXNhZ2UgaXMgb25seSBhZHZpc2VkIGluIGBSb3V0ZXJQcm92aWRlcmAgd2hlbiB3ZSBjYW4gY29udmVydCBpdCB0b1xuICAgICAgICAvLyBgZWxlbWVudGAgYWhlYWQgb2YgdGltZS5cbiAgICAgICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChtYXRjaC5yb3V0ZS5Db21wb25lbnQsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIGNoaWxkcmVuID0gbWF0Y2gucm91dGUuZWxlbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuID0gb3V0bGV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlcmVkUm91dGUsIHtcbiAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgICBvdXRsZXQsXG4gICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICBpc0RhdGFSb3V0ZTogZGF0YVJvdXRlclN0YXRlICE9IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9O1xuICAgIC8vIE9ubHkgd3JhcCBpbiBhbiBlcnJvciBib3VuZGFyeSB3aXRoaW4gZGF0YSByb3V0ZXIgdXNhZ2VzIHdoZW4gd2UgaGF2ZSBhblxuICAgIC8vIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IG9uIHRoaXMgcm91dGUuICBPdGhlcndpc2UgbGV0IGl0IGJ1YmJsZSB1cCB0b1xuICAgIC8vIGFuIGFuY2VzdG9yIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50XG4gICAgcmV0dXJuIGRhdGFSb3V0ZXJTdGF0ZSAmJiAobWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSB8fCBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgaW5kZXggPT09IDApID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyRXJyb3JCb3VuZGFyeSwge1xuICAgICAgbG9jYXRpb246IGRhdGFSb3V0ZXJTdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogZGF0YVJvdXRlclN0YXRlLnJldmFsaWRhdGlvbixcbiAgICAgIGNvbXBvbmVudDogZXJyb3JFbGVtZW50LFxuICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgY2hpbGRyZW46IGdldENoaWxkcmVuKCksXG4gICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgb3V0bGV0OiBudWxsLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBpc0RhdGFSb3V0ZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pIDogZ2V0Q2hpbGRyZW4oKTtcbiAgfSwgbnVsbCk7XG59XG52YXIgRGF0YVJvdXRlckhvb2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZU5hdmlnYXRlU3RhYmxlXCJdID0gXCJ1c2VOYXZpZ2F0ZVwiO1xuICByZXR1cm4gRGF0YVJvdXRlckhvb2s7XG59KERhdGFSb3V0ZXJIb29rIHx8IHt9KTtcbnZhciBEYXRhUm91dGVyU3RhdGVIb29rID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VMb2FkZXJEYXRhXCJdID0gXCJ1c2VMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VBY3Rpb25EYXRhXCJdID0gXCJ1c2VBY3Rpb25EYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUVycm9yXCJdID0gXCJ1c2VSb3V0ZUVycm9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0aW9uXCJdID0gXCJ1c2VOYXZpZ2F0aW9uXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUxvYWRlckRhdGFcIl0gPSBcInVzZVJvdXRlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTWF0Y2hlc1wiXSA9IFwidXNlTWF0Y2hlc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0ZVN0YWJsZVwiXSA9IFwidXNlTmF2aWdhdGVcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlSWRcIl0gPSBcInVzZVJvdXRlSWRcIjtcbiAgcmV0dXJuIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG59KERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwge30pO1xuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcm91dGU7XG59XG5cbi8vIEludGVybmFsIHZlcnNpb24gd2l0aCBob29rTmFtZS1hd2FyZSBkZWJ1Z2dpbmdcbmZ1bmN0aW9uIHVzZUN1cnJlbnRSb3V0ZUlkKGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IHVzZVJvdXRlQ29udGV4dChob29rTmFtZSk7XG4gIGxldCB0aGlzUm91dGUgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICF0aGlzUm91dGUucm91dGUuaWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBob29rTmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiB0aGlzUm91dGUucm91dGUuaWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSUQgZm9yIHRoZSBuZWFyZXN0IGNvbnRleHR1YWwgcm91dGVcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVJZCgpIHtcbiAgcmV0dXJuIHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVJZCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uLCBkZWZhdWx0aW5nIHRvIGFuIFwiaWRsZVwiIG5hdmlnYXRpb24gd2hlblxuICogbm8gbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzc1xuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0aW9uKTtcbiAgcmV0dXJuIHN0YXRlLm5hdmlnYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHJldmFsaWRhdGUgZnVuY3Rpb24gZm9yIG1hbnVhbGx5IHRyaWdnZXJpbmcgcmV2YWxpZGF0aW9uLCBhcyB3ZWxsXG4gKiBhcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbnkgbWFudWFsIHJldmFsaWRhdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXNlUmV2YWxpZGF0b3IoKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJldmFsaWRhdGU6IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLFxuICAgIHN0YXRlOiBzdGF0ZS5yZXZhbGlkYXRpb25cbiAgfSksIFtkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSwgc3RhdGUucmV2YWxpZGF0aW9uXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIHJvdXRlIG1hdGNoZXMsIHVzZWZ1bCBmb3IgYWNjZXNzaW5nIGxvYWRlckRhdGEgZm9yXG4gKiBwYXJlbnQvY2hpbGQgcm91dGVzIG9yIHRoZSByb3V0ZSBcImhhbmRsZVwiIHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIHVzZU1hdGNoZXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlcyxcbiAgICBsb2FkZXJEYXRhXG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VNYXRjaGVzKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hlcy5tYXAobSA9PiBVTlNBRkVfY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gobSwgbG9hZGVyRGF0YSkpLCBbbWF0Y2hlcywgbG9hZGVyRGF0YV0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlciBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBsb2FkZXJcbiAqL1xuZnVuY3Rpb24gdXNlTG9hZGVyRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgaWYgKHN0YXRlLmVycm9ycyAmJiBzdGF0ZS5lcnJvcnNbcm91dGVJZF0gIT0gbnVsbCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgY2Fubm90IGB1c2VMb2FkZXJEYXRhYCBpbiBhbiBlcnJvckVsZW1lbnQgKHJvdXRlSWQ6IFwiICsgcm91dGVJZCArIFwiKVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlckRhdGEgZm9yIHRoZSBnaXZlbiByb3V0ZUlkXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlTG9hZGVyRGF0YShyb3V0ZUlkKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlTG9hZGVyRGF0YSk7XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGlvbiBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBhY3Rpb25cbiAqL1xuZnVuY3Rpb24gdXNlQWN0aW9uRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQWN0aW9uRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmFjdGlvbkRhdGEgPyBzdGF0ZS5hY3Rpb25EYXRhW3JvdXRlSWRdIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgZXJyb3IsIHdoaWNoIGNvdWxkIGJlIGEgbG9hZGVyL2FjdGlvblxuICogZXJyb3Igb3IgYSByZW5kZXIgZXJyb3IuICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBmcm9tIHlvdXJcbiAqIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVFcnJvcigpIHtcbiAgdmFyIF9zdGF0ZSRlcnJvcnM7XG4gIGxldCBlcnJvciA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVFcnJvckNvbnRleHQpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpO1xuXG4gIC8vIElmIHRoaXMgd2FzIGEgcmVuZGVyIGVycm9yLCB3ZSBwdXQgaXQgaW4gYSBSb3V0ZUVycm9yIGNvbnRleHQgaW5zaWRlXG4gIC8vIG9mIFJlbmRlckVycm9yQm91bmRhcnlcbiAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG4gIHJldHVybiAoX3N0YXRlJGVycm9ycyA9IHN0YXRlLmVycm9ycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRlcnJvcnNbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaGFwcHktcGF0aCBkYXRhIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn1cbmxldCBibG9ja2VySWQgPSAwO1xuXG4vKipcbiAqIEFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byBibG9jayBuYXZpZ2F0aW9ucyB3aXRoaW4gdGhlIFNQQSBhbmQgcHJlc2VudCB0aGVcbiAqIHVzZXIgYSBjb25maXJtYXRpb24gZGlhbG9nIHRvIGNvbmZpcm0gdGhlIG5hdmlnYXRpb24uICBNb3N0bHkgdXNlZCB0byBhdm9pZFxuICogdXNpbmcgaGFsZi1maWxsZWQgZm9ybSBkYXRhLiAgVGhpcyBkb2VzIG5vdCBoYW5kbGUgaGFyZC1yZWxvYWRzIG9yXG4gKiBjcm9zcy1vcmlnaW4gbmF2aWdhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHVzZUJsb2NrZXIoc2hvdWxkQmxvY2spIHtcbiAgbGV0IHtcbiAgICByb3V0ZXIsXG4gICAgYmFzZW5hbWVcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IFtibG9ja2VyS2V5LCBzZXRCbG9ja2VyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICBsZXQgYmxvY2tlckZ1bmN0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soYXJnID0+IHtcbiAgICBpZiAodHlwZW9mIHNob3VsZEJsb2NrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiAhIXNob3VsZEJsb2NrO1xuICAgIH1cbiAgICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSB7XG4gICAgICByZXR1cm4gc2hvdWxkQmxvY2soYXJnKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGV5IHByb3ZpZGVkIHVzIGEgZnVuY3Rpb24gYW5kIHdlJ3ZlIGdvdCBhbiBhY3RpdmUgYmFzZW5hbWUsIHN0cmlwXG4gICAgLy8gaXQgZnJvbSB0aGUgbG9jYXRpb25zIHdlIGV4cG9zZSB0byB0aGUgdXNlciB0byBtYXRjaCB0aGUgYmVoYXZpb3Igb2ZcbiAgICAvLyB1c2VMb2NhdGlvblxuICAgIGxldCB7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSA9IGFyZztcbiAgICByZXR1cm4gc2hvdWxkQmxvY2soe1xuICAgICAgY3VycmVudExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgY3VycmVudExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBuZXh0TG9jYXRpb246IF9leHRlbmRzKHt9LCBuZXh0TG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbmV4dExvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSxcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcbiAgfSwgW2Jhc2VuYW1lLCBzaG91bGRCbG9ja10pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGlzIGluIGNoYXJnZSBvZiBibG9ja2VyIGtleSBhc3NpZ25tZW50IGFuZCBkZWxldGlvbiAod2hpY2ggaXNcbiAgLy8gdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBrZXkpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGtleSA9IFN0cmluZygrK2Jsb2NrZXJJZCk7XG4gICAgc2V0QmxvY2tlcktleShrZXkpO1xuICAgIHJldHVybiAoKSA9PiByb3V0ZXIuZGVsZXRlQmxvY2tlcihrZXkpO1xuICB9LCBbcm91dGVyXSk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaGFuZGxlcyBhc3NpZ25pbmcgdGhlIGJsb2NrZXJGdW5jdGlvbi4gIFRoaXMgaXMgdG8gaGFuZGxlXG4gIC8vIHVuc3RhYmxlIGJsb2NrZXIgZnVuY3Rpb24gaWRlbnRpdGllcywgYW5kIGhhcHBlbnMgb25seSBhZnRlciB0aGUgcHJpb3JcbiAgLy8gZWZmZWN0IHNvIHdlIGRvbid0IGdldCBhbiBvcnBoYW5lZCBibG9ja2VyRnVuY3Rpb24gaW4gdGhlIHJvdXRlciB3aXRoIGFcbiAgLy8ga2V5IG9mIFwiXCIuICBVbnRpbCB0aGVuIHdlIGp1c3QgaGF2ZSB0aGUgSURMRV9CTE9DS0VSLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyS2V5ICE9PSBcIlwiKSB7XG4gICAgICByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uXSk7XG5cbiAgLy8gUHJlZmVyIHRoZSBibG9ja2VyIGZyb20gYHN0YXRlYCBub3QgYHJvdXRlci5zdGF0ZWAgc2luY2UgRGF0YVJvdXRlckNvbnRleHRcbiAgLy8gaXMgbWVtb2l6ZWQgc28gdGhpcyBlbnN1cmVzIHdlIHVwZGF0ZSBvbiBibG9ja2VyIHN0YXRlIHVwZGF0ZXNcbiAgcmV0dXJuIGJsb2NrZXJLZXkgJiYgc3RhdGUuYmxvY2tlcnMuaGFzKGJsb2NrZXJLZXkpID8gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpIDogSURMRV9CTE9DS0VSO1xufVxuXG4vKipcbiAqIFN0YWJsZSB2ZXJzaW9uIG9mIHVzZU5hdmlnYXRlIHRoYXQgaXMgdXNlZCB3aGVuIHdlIGFyZSBpbiB0aGUgY29udGV4dCBvZlxuICogYSBSb3V0ZXJQcm92aWRlci5cbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGVTdGFibGUoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VOYXZpZ2F0ZVN0YWJsZSk7XG4gIGxldCBpZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgbmF2aWdhdGVFZmZlY3RXYXJuaW5nKSA6IHZvaWQgMDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaGVyZSBzaW5jZSBpZiB0aGlzIGhhcHBlbnMgb24gZmlyc3QgcmVuZGVyIHRoZSBuYXZpZ2F0ZVxuICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciByb3V0ZXIgc3Vic2NyaWJlciB5ZXRcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvLCBfZXh0ZW5kcyh7XG4gICAgICAgIGZyb21Sb3V0ZUlkOiBpZFxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgaWRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgYWxyZWFkeVdhcm5lZCA9IHt9O1xuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZnVuY3Rpb24gUm91dGVyUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgIGZhbGxiYWNrRWxlbWVudCxcbiAgICByb3V0ZXIsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmO1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCkge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgICB9XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuXG4gIC8vIE5lZWQgdG8gdXNlIGEgbGF5b3V0IGVmZmVjdCBoZXJlIHNvIHdlIGFyZSBzdWJzY3JpYmVkIGVhcmx5IGVub3VnaCB0b1xuICAvLyBwaWNrIHVwIG9uIGFueSByZW5kZXItZHJpdmVuIHJlZGlyZWN0cy9uYXZpZ2F0aW9ucyAodXNlRWZmZWN0LzxOYXZpZ2F0ZT4pXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiByb3V0ZXIuc3Vic2NyaWJlKHNldFN0YXRlKSwgW3JvdXRlciwgc2V0U3RhdGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxsYmFja0VsZW1lbnQgPT0gbnVsbCB8fCAhcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uLCBcImA8Um91dGVyUHJvdmlkZXIgZmFsbGJhY2tFbGVtZW50PmAgaXMgZGVwcmVjYXRlZCB3aGVuIHVzaW5nIFwiICsgXCJgdjdfcGFydGlhbEh5ZHJhdGlvbmAsIHVzZSBhIGBIeWRyYXRlRmFsbGJhY2tgIGNvbXBvbmVudCBpbnN0ZWFkXCIpIDogdm9pZCAwO1xuICAgIC8vIE9ubHkgbG9nIHRoaXMgb25jZSBvbiBpbml0aWFsIG1vdW50XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlSHJlZjogcm91dGVyLmNyZWF0ZUhyZWYsXG4gICAgICBlbmNvZGVMb2NhdGlvbjogcm91dGVyLmVuY29kZUxvY2F0aW9uLFxuICAgICAgZ286IG4gPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSlcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJvdXRlcixcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBmYWxzZSxcbiAgICBiYXNlbmFtZVxuICB9KSwgW3JvdXRlciwgbmF2aWdhdG9yLCBiYXNlbmFtZV0pO1xuXG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZGF0YVJvdXRlckNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdGF0ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yLFxuICAgIGZ1dHVyZToge1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IHJvdXRlci5mdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICB9XG4gIH0sIHN0YXRlLmluaXRpYWxpemVkIHx8IHJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgZnV0dXJlOiByb3V0ZXIuZnV0dXJlLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KSA6IGZhbGxiYWNrRWxlbWVudCkpKSwgbnVsbCk7XG59XG5mdW5jdGlvbiBEYXRhUm91dGVzKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgcm91dGVzLFxuICAgIGZ1dHVyZSxcbiAgICBzdGF0ZVxuICB9ID0gX3JlZjI7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgdW5kZWZpbmVkLCBzdGF0ZSwgZnV0dXJlKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjM7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgZnV0dXJlLFxuICAgIHN0YXRpYzogaXNTdGF0aWNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyghaXNTdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuXG4gIC8vIFJlc29sdmUgdGhlIHBhdGggb3V0c2lkZSBvZiB0aGUgZWZmZWN0IHNvIHRoYXQgd2hlbiBlZmZlY3RzIHJ1biB0d2ljZSBpblxuICAvLyBTdHJpY3RNb2RlIHRoZXkgbmF2aWdhdGUgdG8gdGhlIHNhbWUgcGxhY2VcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCksIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIik7XG4gIGxldCBqc29uUGF0aCA9IEpTT04uc3RyaW5naWZ5KHBhdGgpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gbmF2aWdhdGUoSlNPTi5wYXJzZShqc29uUGF0aCksIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0pLCBbbmF2aWdhdGUsIGpzb25QYXRoLCByZWxhdGl2ZSwgcmVwbGFjZSwgc3RhdGVdKTtcbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9vdXRsZXRcbiAqL1xuZnVuY3Rpb24gT3V0bGV0KHByb3BzKSB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG4vKipcbiAqIERlY2xhcmVzIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgYXQgYSBjZXJ0YWluIFVSTCBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIFwiICsgXCJuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgO1xufVxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIGA8Um91dGVyPmAgZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSBgPEJyb3dzZXJSb3V0ZXI+YFxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgYDxTdGF0aWNSb3V0ZXI+YCBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL3JvdXRlclxuICovXG5mdW5jdGlvbiBSb3V0ZXIoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gICAgY2hpbGRyZW4gPSBudWxsLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgbmF2aWdhdGlvblR5cGUgPSBBY3Rpb24uUG9wLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZSxcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWY1O1xuICAhIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90IHJlbmRlciBhIDxSb3V0ZXI+IGluc2lkZSBhbm90aGVyIDxSb3V0ZXI+LlwiICsgXCIgWW91IHNob3VsZCBuZXZlciBoYXZlIG1vcmUgdGhhbiBvbmUgaW4geW91ciBhcHAuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sXG4gIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcFxuICBsZXQgYmFzZW5hbWUgPSBiYXNlbmFtZVByb3AucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4gIGxldCBuYXZpZ2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlXG4gICAgfSwgZnV0dXJlKVxuICB9KSwgW2Jhc2VuYW1lLCBmdXR1cmUsIG5hdmlnYXRvciwgc3RhdGljUHJvcF0pO1xuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuICBsZXQgbG9jYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IHRyYWlsaW5nUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSk7XG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgICAgc2VhcmNoLFxuICAgICAgICBoYXNoLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAga2V5XG4gICAgICB9LFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXksIG5hdmlnYXRpb25UeXBlXSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGxvY2F0aW9uQ29udGV4dCAhPSBudWxsLCBcIjxSb3V0ZXIgYmFzZW5hbWU9XFxcIlwiICsgYmFzZW5hbWUgKyBcIlxcXCI+IGlzIG5vdCBhYmxlIHRvIG1hdGNoIHRoZSBVUkwgXCIgKyAoXCJcXFwiXCIgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggKyBcIlxcXCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBcIikgKyBcImJhc2VuYW1lLCBzbyB0aGUgPFJvdXRlcj4gd29uJ3QgcmVuZGVyIGFueXRoaW5nLlwiKSA6IHZvaWQgMDtcbiAgaWYgKGxvY2F0aW9uQ29udGV4dCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG5hdmlnYXRpb25Db250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICB2YWx1ZTogbG9jYXRpb25Db250ZXh0XG4gIH0pKTtcbn1cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgYDxSb3V0ZT5gIGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvcm91dGVzXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcyhfcmVmNikge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uXG4gIH0gPSBfcmVmNjtcbiAgcmV0dXJuIHVzZVJvdXRlcyhjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBsb2NhdGlvbik7XG59XG4vKipcbiAqIENvbXBvbmVudCB0byB1c2UgZm9yIHJlbmRlcmluZyBsYXppbHkgbG9hZGVkIGRhdGEgZnJvbSByZXR1cm5pbmcgZGVmZXIoKVxuICogaW4gYSBsb2FkZXIgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gQXdhaXQoX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBlcnJvckVsZW1lbnQsXG4gICAgcmVzb2x2ZVxuICB9ID0gX3JlZjc7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdEVycm9yQm91bmRhcnksIHtcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIGVycm9yRWxlbWVudDogZXJyb3JFbGVtZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc29sdmVBd2FpdCwgbnVsbCwgY2hpbGRyZW4pKTtcbn1cbnZhciBBd2FpdFJlbmRlclN0YXR1cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoQXdhaXRSZW5kZXJTdGF0dXMpIHtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJwZW5kaW5nXCJdID0gMF0gPSBcInBlbmRpbmdcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJzdWNjZXNzXCJdID0gMV0gPSBcInN1Y2Nlc3NcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJlcnJvclwiXSA9IDJdID0gXCJlcnJvclwiO1xuICByZXR1cm4gQXdhaXRSZW5kZXJTdGF0dXM7XG59KEF3YWl0UmVuZGVyU3RhdHVzIHx8IHt9KTtcbmNvbnN0IG5ldmVyU2V0dGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG5jbGFzcyBBd2FpdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JcbiAgICB9O1xuICB9XG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiPEF3YWl0PiBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBsZXQge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBlcnJvckVsZW1lbnQsXG4gICAgICByZXNvbHZlXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHByb21pc2UgPSBudWxsO1xuICAgIGxldCBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgIGlmICghKHJlc29sdmUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgLy8gRGlkbid0IGdldCBhIHByb21pc2UgLSBwcm92aWRlIGFzIGEgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcztcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgIC8vIENhdWdodCBhIHJlbmRlciBlcnJvciwgcHJvdmlkZSBpdCBhcyBhIHJlamVjdGVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yO1xuICAgICAgbGV0IHJlbmRlckVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gQXZvaWQgdW5oYW5kbGVkIHJlamVjdGlvbiB3YXJuaW5nc1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZW5kZXJFcnJvclxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChyZXNvbHZlLl90cmFja2VkKSB7XG4gICAgICAvLyBBbHJlYWR5IHRyYWNrZWQgcHJvbWlzZSAtIGNoZWNrIGNvbnRlbnRzXG4gICAgICBwcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgIHN0YXR1cyA9IFwiX2Vycm9yXCIgaW4gcHJvbWlzZSA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogXCJfZGF0YVwiIGluIHByb21pc2UgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oZGF0YSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgICAgfSksIGVycm9yID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgcHJvbWlzZS5fZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgLy8gRnJlZXplIHRoZSBVSSBieSB0aHJvd2luZyBhIG5ldmVyIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHRocm93IG5ldmVyU2V0dGxlZFByb21pc2U7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmICFlcnJvckVsZW1lbnQpIHtcbiAgICAgIC8vIE5vIGVycm9yRWxlbWVudCwgdGhyb3cgdG8gdGhlIG5lYXJlc3Qgcm91dGUtbGV2ZWwgZXJyb3IgYm91bmRhcnlcbiAgICAgIHRocm93IHByb21pc2UuX2Vycm9yO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogZXJyb3JFbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2Vzcykge1xuICAgICAgLy8gUmVuZGVyIGNoaWxkcmVuIHdpdGggcmVzb2x2ZWQgdmFsdWVcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVGhyb3cgdG8gdGhlIHN1c3BlbnNlIGJvdW5kYXJ5XG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBJbmRpcmVjdGlvbiB0byBsZXZlcmFnZSB1c2VBc3luY1ZhbHVlIGZvciBhIHJlbmRlci1wcm9wIEFQSSBvbiBgPEF3YWl0PmBcbiAqL1xuZnVuY3Rpb24gUmVzb2x2ZUF3YWl0KF9yZWY4KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY4O1xuICBsZXQgZGF0YSA9IHVzZUFzeW5jVmFsdWUoKTtcbiAgbGV0IHRvUmVuZGVyID0gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbihkYXRhKSA6IGNoaWxkcmVuO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIHRvUmVuZGVyKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvY3JlYXRlLXJvdXRlcy1mcm9tLWNoaWxkcmVuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50UGF0aCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGxldCByb3V0ZXMgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAvLyBJZ25vcmUgbm9uLWVsZW1lbnRzLiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gbW9yZSBlYXNpbHkgaW5saW5lXG4gICAgICAvLyBjb25kaXRpb25hbHMgaW4gdGhlaXIgcm91dGUgY29uZmlnLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFJlYWN0LkZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KHJvdXRlcywgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICEoZWxlbWVudC50eXBlID09PSBSb3V0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIltcIiArICh0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWUpICsgXCJdIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCFlbGVtZW50LnByb3BzLmluZGV4IHx8ICFlbGVtZW50LnByb3BzLmNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQW4gaW5kZXggcm91dGUgY2Fubm90IGhhdmUgY2hpbGQgcm91dGVzLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgQ29tcG9uZW50OiBlbGVtZW50LnByb3BzLkNvbXBvbmVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoLFxuICAgICAgbG9hZGVyOiBlbGVtZW50LnByb3BzLmxvYWRlcixcbiAgICAgIGFjdGlvbjogZWxlbWVudC5wcm9wcy5hY3Rpb24sXG4gICAgICBlcnJvckVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50LFxuICAgICAgRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5LFxuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgICAgIHNob3VsZFJldmFsaWRhdGU6IGVsZW1lbnQucHJvcHMuc2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgIGhhbmRsZTogZWxlbWVudC5wcm9wcy5oYW5kbGUsXG4gICAgICBsYXp5OiBlbGVtZW50LnByb3BzLmxhenlcbiAgICB9O1xuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCB0cmVlUGF0aCk7XG4gICAgfVxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IG9mIGBtYXRjaFJvdXRlcygpYCBpbnRvIGEgUmVhY3QgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cblxuZnVuY3Rpb24gbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSB7XG4gIGxldCB1cGRhdGVzID0ge1xuICAgIC8vIE5vdGU6IHRoaXMgY2hlY2sgYWxzbyBvY2N1cnMgaW4gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIHNvIHVwZGF0ZVxuICAgIC8vIHRoZXJlIGlmIHlvdSBjaGFuZ2UgdGhpcyAtLSBwbGVhc2UgYW5kIHRoYW5rIHlvdSFcbiAgICBoYXNFcnJvckJvdW5kYXJ5OiByb3V0ZS5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgcm91dGUuZXJyb3JFbGVtZW50ICE9IG51bGxcbiAgfTtcbiAgaWYgKHJvdXRlLkNvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChyb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgQ29tcG9uZW50YCBhbmQgYGVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYENvbXBvbmVudGAgd2lsbCBiZSB1c2VkLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih1cGRhdGVzLCB7XG4gICAgICBlbGVtZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5Db21wb25lbnQpLFxuICAgICAgQ29tcG9uZW50OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICBpZiAocm91dGUuSHlkcmF0ZUZhbGxiYWNrKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBIeWRyYXRlRmFsbGJhY2tgIGFuZCBgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgSHlkcmF0ZUZhbGxiYWNrYCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkh5ZHJhdGVGYWxsYmFjayksXG4gICAgICBIeWRyYXRlRmFsbGJhY2s6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5FcnJvckJvdW5kYXJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEVycm9yQm91bmRhcnlgIGFuZCBgZXJyb3JFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBFcnJvckJvdW5kYXJ5YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVycm9yRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuRXJyb3JCb3VuZGFyeSksXG4gICAgICBFcnJvckJvdW5kYXJ5OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdXBkYXRlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXg6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEluZGV4XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnVuc3RhYmxlX2RhdGFTdHJhdGVneVxuICB9KS5pbml0aWFsaXplKCk7XG59XG5cbmV4cG9ydCB7IEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIERhdGFSb3V0ZXJDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgRGF0YVJvdXRlclN0YXRlQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgTG9jYXRpb25Db250ZXh0IGFzIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIE5hdmlnYXRpb25Db250ZXh0IGFzIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIG1hcFJvdXRlUHJvcGVydGllcyBhcyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCB1c2VSb3V0ZUlkIGFzIFVOU0FGRV91c2VSb3V0ZUlkLCB1c2VSb3V0ZXNJbXBsIGFzIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIGFzIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgcmVuZGVyTWF0Y2hlcywgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlQmxvY2tlciwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImV4cG9ydCB2YXIgZm9yY2VSZWZsb3cgPSBmdW5jdGlvbiBmb3JjZVJlZmxvdyhub2RlKSB7XG4gIHJldHVybiBub2RlLnNjcm9sbFRvcDtcbn07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuaW1wb3J0IHsgZm9yY2VSZWZsb3cgfSBmcm9tICcuL3V0aWxzL3JlZmxvdyc7XG5leHBvcnQgdmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0IHZhciBFWElURUQgPSAnZXhpdGVkJztcbmV4cG9ydCB2YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0IHZhciBFTlRFUkVEID0gJ2VudGVyZWQnO1xuZXhwb3J0IHZhciBFWElUSU5HID0gJ2V4aXRpbmcnO1xuLyoqXG4gKiBUaGUgVHJhbnNpdGlvbiBjb21wb25lbnQgbGV0cyB5b3UgZGVzY3JpYmUgYSB0cmFuc2l0aW9uIGZyb20gb25lIGNvbXBvbmVudFxuICogc3RhdGUgdG8gYW5vdGhlciBfb3ZlciB0aW1lXyB3aXRoIGEgc2ltcGxlIGRlY2xhcmF0aXZlIEFQSS4gTW9zdCBjb21tb25seVxuICogaXQncyB1c2VkIHRvIGFuaW1hdGUgdGhlIG1vdW50aW5nIGFuZCB1bm1vdW50aW5nIG9mIGEgY29tcG9uZW50LCBidXQgY2FuIGFsc29cbiAqIGJlIHVzZWQgdG8gZGVzY3JpYmUgaW4tcGxhY2UgdHJhbnNpdGlvbiBzdGF0ZXMgYXMgd2VsbC5cbiAqXG4gKiAtLS1cbiAqXG4gKiAqKk5vdGUqKjogYFRyYW5zaXRpb25gIGlzIGEgcGxhdGZvcm0tYWdub3N0aWMgYmFzZSBjb21wb25lbnQuIElmIHlvdSdyZSB1c2luZ1xuICogdHJhbnNpdGlvbnMgaW4gQ1NTLCB5b3UnbGwgcHJvYmFibHkgd2FudCB0byB1c2VcbiAqIFtgQ1NTVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvY3NzLXRyYW5zaXRpb24pXG4gKiBpbnN0ZWFkLiBJdCBpbmhlcml0cyBhbGwgdGhlIGZlYXR1cmVzIG9mIGBUcmFuc2l0aW9uYCwgYnV0IGNvbnRhaW5zXG4gKiBhZGRpdGlvbmFsIGZlYXR1cmVzIG5lY2Vzc2FyeSB0byBwbGF5IG5pY2Ugd2l0aCBDU1MgdHJhbnNpdGlvbnMgKGhlbmNlIHRoZVxuICogbmFtZSBvZiB0aGUgY29tcG9uZW50KS5cbiAqXG4gKiAtLS1cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IGRvZXMgbm90IGFsdGVyIHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIGNvbXBvbmVudCBpdCByZW5kZXJzLCBpdCBvbmx5IHRyYWNrcyBcImVudGVyXCIgYW5kIFwiZXhpdFwiIHN0YXRlcyBmb3IgdGhlXG4gKiBjb21wb25lbnRzLiBJdCdzIHVwIHRvIHlvdSB0byBnaXZlIG1lYW5pbmcgYW5kIGVmZmVjdCB0byB0aG9zZSBzdGF0ZXMuIEZvclxuICogZXhhbXBsZSB3ZSBjYW4gYWRkIHN0eWxlcyB0byBhIGNvbXBvbmVudCB3aGVuIGl0IGVudGVycyBvciBleGl0czpcbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogICBleGl0aW5nOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGV4aXRlZDogIHsgb3BhY2l0eTogMCB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgPGRpdiBzdHlsZT17e1xuICogICAgICAgICAuLi5kZWZhdWx0U3R5bGUsXG4gKiAgICAgICAgIC4uLnRyYW5zaXRpb25TdHlsZXNbc3RhdGVdXG4gKiAgICAgICB9fT5cbiAqICAgICAgICAgSSdtIGEgZmFkZSBUcmFuc2l0aW9uIVxuICogICAgICAgPC9kaXY+XG4gKiAgICAgKX1cbiAqICAgPC9UcmFuc2l0aW9uPlxuICogKTtcbiAqIGBgYFxuICpcbiAqIFRoZXJlIGFyZSA0IG1haW4gc3RhdGVzIGEgVHJhbnNpdGlvbiBjYW4gYmUgaW46XG4gKiAgLSBgJ2VudGVyaW5nJ2BcbiAqICAtIGAnZW50ZXJlZCdgXG4gKiAgLSBgJ2V4aXRpbmcnYFxuICogIC0gYCdleGl0ZWQnYFxuICpcbiAqIFRyYW5zaXRpb24gc3RhdGUgaXMgdG9nZ2xlZCB2aWEgdGhlIGBpbmAgcHJvcC4gV2hlbiBgdHJ1ZWAgdGhlIGNvbXBvbmVudFxuICogYmVnaW5zIHRoZSBcIkVudGVyXCIgc3RhZ2UuIER1cmluZyB0aGlzIHN0YWdlLCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgZnJvbVxuICogaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSwgdG8gYCdlbnRlcmluZydgIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlXG4gKiB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlIGl0J3MgY29tcGxldGUuIExldCdzIHRha2VcbiAqIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSAod2UnbGwgdXNlIHRoZVxuICogW3VzZVN0YXRlXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlc3RhdGUpIGhvb2spOlxuICpcbiAqIGBgYGpzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBbaW5Qcm9wLCBzZXRJblByb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXs1MDB9PlxuICogICAgICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgICAgIC8vIC4uLlxuICogICAgICAgICApfVxuICogICAgICAgPC9UcmFuc2l0aW9uPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRJblByb3AodHJ1ZSl9PlxuICogICAgICAgICBDbGljayB0byBFbnRlclxuICogICAgICAgPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZVxuICogYW5kIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlc1xuICogdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb21cbiAqIGAnZXhpdGluZydgIHRvIGAnZXhpdGVkJ2AuXG4gKi9cblxudmFyIFRyYW5zaXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQ7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgLy8gICBsZXQgbmV4dFN0YXR1cyA9IG51bGxcbiAgLy8gICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gIC8vICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHsgbmV4dFN0YXR1cyB9XG4gIC8vIH1cbiAgO1xuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlLCB0aGlzLmFwcGVhclN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhmYWxzZSwgbmV4dFN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGltZW91dHMgPSBmdW5jdGlvbiBnZXRUaW1lb3V0cygpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDtcbiAgICB2YXIgZXhpdCwgZW50ZXIsIGFwcGVhcjtcbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7IC8vIFRPRE86IHJlbW92ZSBmYWxsYmFjayBmb3IgbmV4dCBtYWpvclxuXG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhciAhPT0gdW5kZWZpbmVkID8gdGltZW91dC5hcHBlYXIgOiBlbnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGVudGVyOiBlbnRlcixcbiAgICAgIGFwcGVhcjogYXBwZWFyXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU3RhdHVzKG1vdW50aW5nLCBuZXh0U3RhdHVzKSB7XG4gICAgaWYgKG1vdW50aW5nID09PSB2b2lkIDApIHtcbiAgICAgIG1vdW50aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0IHx8IHRoaXMucHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB0aGlzLnByb3BzLm5vZGVSZWYuY3VycmVudCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3B1bGwvNzQ5XG4gICAgICAgICAgLy8gV2l0aCB1bm1vdW50T25FeGl0IG9yIG1vdW50T25FbnRlciwgdGhlIGVudGVyIGFuaW1hdGlvbiBzaG91bGQgaGFwcGVuIGF0IHRoZSB0cmFuc2l0aW9uIGJldHdlZW4gYGV4aXRlZGAgYW5kIGBlbnRlcmluZ2AuXG4gICAgICAgICAgLy8gVG8gbWFrZSB0aGUgYW5pbWF0aW9uIGhhcHBlbiwgIHdlIGhhdmUgdG8gc2VwYXJhdGUgZWFjaCByZW5kZXJpbmcgYW5kIGF2b2lkIGJlaW5nIHByb2Nlc3NlZCBhcyBiYXRjaGVkLlxuXG4gICAgICAgICAgaWYgKG5vZGUpIGZvcmNlUmVmbG93KG5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IGZ1bmN0aW9uIChwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwcm9wVmFsdWVba2V5XTtcbiAgICAgIHJldHVybiBQcm9wVHlwZXMuaW5zdGFuY2VPZih2YWx1ZSAmJiAnb3duZXJEb2N1bWVudCcgaW4gdmFsdWUgPyB2YWx1ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LkVsZW1lbnQgOiBFbGVtZW50KShwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KTtcbiAgICB9XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzO1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCIvKiFcblx0Q29weXJpZ2h0IChjKSAyMDE4IEplZCBXYXRzb24uXG5cdExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG5cdGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSAnJztcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKGFyZykge1xuXHRcdFx0XHRjbGFzc2VzID0gYXBwZW5kQ2xhc3MoY2xhc3NlcywgcGFyc2VWYWx1ZShhcmcpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcztcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlVmFsdWUgKGFyZykge1xuXHRcdGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuXHRcdFx0cmV0dXJuIGFyZztcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIGFyZyAhPT0gJ29iamVjdCcpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdH1cblxuXHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdHJldHVybiBhcmcudG9TdHJpbmcoKTtcblx0XHR9XG5cblx0XHR2YXIgY2xhc3NlcyA9ICcnO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0aWYgKGhhc093bi5jYWxsKGFyZywga2V5KSAmJiBhcmdba2V5XSkge1xuXHRcdFx0XHRjbGFzc2VzID0gYXBwZW5kQ2xhc3MoY2xhc3Nlcywga2V5KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcztcblx0fVxuXG5cdGZ1bmN0aW9uIGFwcGVuZENsYXNzICh2YWx1ZSwgbmV3Q2xhc3MpIHtcblx0XHRpZiAoIW5ld0NsYXNzKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHRcblx0XHRpZiAodmFsdWUpIHtcblx0XHRcdHJldHVybiB2YWx1ZSArICcgJyArIG5ld0NsYXNzO1xuXHRcdH1cblx0XG5cdFx0cmV0dXJuIHZhbHVlICsgbmV3Q2xhc3M7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJmdW5jdGlvbiByKGUpe3ZhciB0LGYsbj1cIlwiO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZSluKz1lO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGUpaWYoQXJyYXkuaXNBcnJheShlKSl7dmFyIG89ZS5sZW5ndGg7Zm9yKHQ9MDt0PG87dCsrKWVbdF0mJihmPXIoZVt0XSkpJiYobiYmKG4rPVwiIFwiKSxuKz1mKX1lbHNlIGZvcihmIGluIGUpZVtmXSYmKG4mJihuKz1cIiBcIiksbis9Zik7cmV0dXJuIG59ZXhwb3J0IGZ1bmN0aW9uIGNsc3goKXtmb3IodmFyIGUsdCxmPTAsbj1cIlwiLG89YXJndW1lbnRzLmxlbmd0aDtmPG87ZisrKShlPWFyZ3VtZW50c1tmXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG5jb25zdCBraW5kT2YgPSAoY2FjaGUgPT4gdGhpbmcgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5jb25zdCBraW5kT2ZUZXN0ID0gKHR5cGUpID0+IHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuICh0aGluZykgPT4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZVxufVxuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufVxuXG5jb25zdCBBTFBIQSA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eidcblxuY29uc3QgRElHSVQgPSAnMDEyMzQ1Njc4OSc7XG5cbmNvbnN0IEFMUEhBQkVUID0ge1xuICBESUdJVCxcbiAgQUxQSEEsXG4gIEFMUEhBX0RJR0lUOiBBTFBIQSArIEFMUEhBLnRvVXBwZXJDYXNlKCkgKyBESUdJVFxufVxuXG5jb25zdCBnZW5lcmF0ZVN0cmluZyA9IChzaXplID0gMTYsIGFscGhhYmV0ID0gQUxQSEFCRVQuQUxQSEFfRElHSVQpID0+IHtcbiAgbGV0IHN0ciA9ICcnO1xuICBjb25zdCB7bGVuZ3RofSA9IGFscGhhYmV0O1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgc3RyICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBsZW5ndGh8MF1cbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmNvbnN0IGlzQXN5bmNGbiA9IGtpbmRPZlRlc3QoJ0FzeW5jRnVuY3Rpb24nKTtcblxuY29uc3QgaXNUaGVuYWJsZSA9ICh0aGluZykgPT5cbiAgdGhpbmcgJiYgKGlzT2JqZWN0KHRoaW5nKSB8fCBpc0Z1bmN0aW9uKHRoaW5nKSkgJiYgaXNGdW5jdGlvbih0aGluZy50aGVuKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLmNhdGNoKTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICByZXNwb25zZSAmJiAodGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbmNvbnN0IGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnLFxuICAnRVJSX05PVF9TVVBQT1JUJyxcbiAgJ0VSUl9JTlZBTElEX1VSTCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goY29kZSA9PiB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSAoZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSA9PiB7XG4gIGNvbnN0IGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG5cbiAgdXRpbHMudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9LCBwcm9wID0+IHtcbiAgICByZXR1cm4gcHJvcCAhPT0gJ2lzQXhpb3NFcnJvcic7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLmNhdXNlID0gZXJyb3I7XG5cbiAgYXhpb3NFcnJvci5uYW1lID0gZXJyb3IubmFtZTtcblxuICBjdXN0b21Qcm9wcyAmJiBPYmplY3QuYXNzaWduKGF4aW9zRXJyb3IsIGN1c3RvbVByb3BzKTtcblxuICByZXR1cm4gYXhpb3NFcnJvcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zRXJyb3I7XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5leHBvcnQgZGVmYXVsdCBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbi8vIHRlbXBvcmFyeSBob3RmaXggdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcyB1bnRpbCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBpcyByZWZhY3RvcmVkXG5pbXBvcnQgUGxhdGZvcm1Gb3JtRGF0YSBmcm9tICcuLi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChQbGF0Zm9ybUZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXMsXG4gICAgRm9ybURhdGEsXG4gICAgQmxvYlxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogbnVsbDtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iIDogbnVsbFxuIiwiY29uc3QgaGFzQnJvd3NlckVudiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJFbnYgPSAoXG4gIChwcm9kdWN0KSA9PiB7XG4gICAgcmV0dXJuIGhhc0Jyb3dzZXJFbnYgJiYgWydSZWFjdE5hdGl2ZScsICdOYXRpdmVTY3JpcHQnLCAnTlMnXS5pbmRleE9mKHByb2R1Y3QpIDwgMFxuICB9KSh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cbmV4cG9ydCB7XG4gIGhhc0Jyb3dzZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyRW52XG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi9ub2RlL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vY29tbW9uL3V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi51dGlscyxcbiAgLi4ucGxhdGZvcm1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVscGVycy5kZWZhdWx0VmlzaXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwgb3B0aW9ucykpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nIGxpa2UgYGZvb1t4XVt5XVt6XWAgYW5kIHJldHVybnMgYW4gYXJyYXkgbGlrZSBgWydmb28nLCAneCcsICd5JywgJ3onXVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBzdHJpbmdzLlxuICovXG5mdW5jdGlvbiBwYXJzZVByb3BQYXRoKG5hbWUpIHtcbiAgLy8gZm9vW3hdW3ldW3pdXG4gIC8vIGZvby54LnkuelxuICAvLyBmb28teC15LXpcbiAgLy8gZm9vIHggeSB6XG4gIHJldHVybiB1dGlscy5tYXRjaEFsbCgvXFx3K3xcXFsoXFx3KildL2csIG5hbWUpLm1hcChtYXRjaCA9PiB7XG4gICAgcmV0dXJuIG1hdGNoWzBdID09PSAnW10nID8gJycgOiBtYXRjaFsxXSB8fCBtYXRjaFswXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydCBhbiBhcnJheSB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY29udmVydCB0byBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhbmQgdmFsdWVzIGFzIHRoZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb09iamVjdChhcnIpIHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhcnIpO1xuICBsZXQgaTtcbiAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGxldCBrZXk7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgb2JqW2tleV0gPSBhcnJba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgRm9ybURhdGEgb2JqZWN0IGFuZCByZXR1cm5zIGEgSmF2YVNjcmlwdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgVGhlIEZvcm1EYXRhIG9iamVjdCB0byBjb252ZXJ0IHRvIEpTT04uXG4gKlxuICogQHJldHVybnMge09iamVjdDxzdHJpbmcsIGFueT4gfCBudWxsfSBUaGUgY29udmVydGVkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZm9ybURhdGFUb0pTT04oZm9ybURhdGEpIHtcbiAgZnVuY3Rpb24gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXQsIGluZGV4KSB7XG4gICAgbGV0IG5hbWUgPSBwYXRoW2luZGV4KytdO1xuXG4gICAgaWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSByZXR1cm4gdHJ1ZTtcblxuICAgIGNvbnN0IGlzTnVtZXJpY0tleSA9IE51bWJlci5pc0Zpbml0ZSgrbmFtZSk7XG4gICAgY29uc3QgaXNMYXN0ID0gaW5kZXggPj0gcGF0aC5sZW5ndGg7XG4gICAgbmFtZSA9ICFuYW1lICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0KSA/IHRhcmdldC5sZW5ndGggOiBuYW1lO1xuXG4gICAgaWYgKGlzTGFzdCkge1xuICAgICAgaWYgKHV0aWxzLmhhc093blByb3AodGFyZ2V0LCBuYW1lKSkge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSBbdGFyZ2V0W25hbWVdLCB2YWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXRbbmFtZV0gfHwgIXV0aWxzLmlzT2JqZWN0KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0W25hbWVdLCBpbmRleCk7XG5cbiAgICBpZiAocmVzdWx0ICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gYXJyYXlUb09iamVjdCh0YXJnZXRbbmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZm9ybURhdGEpICYmIHV0aWxzLmlzRnVuY3Rpb24oZm9ybURhdGEuZW50cmllcykpIHtcbiAgICBjb25zdCBvYmogPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2hFbnRyeShmb3JtRGF0YSwgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBidWlsZFBhdGgocGFyc2VQcm9wUGF0aChuYW1lKSwgdmFsdWUsIG9iaiwgMCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1EYXRhVG9KU09OO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHRvVVJMRW5jb2RlZEZvcm0gZnJvbSAnLi4vaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IHV0aWxzLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpICYmIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvP1xcLyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIGNvbnN0IG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0cyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICBsZXQgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgY29uc3QgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IGNvb2tpZXMgZnJvbSAnLi8uLi9oZWxwZXJzL2Nvb2tpZXMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4vLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuLi9jb3JlL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IGlzVVJMU2FtZU9yaWdpbiBmcm9tICcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgc3BlZWRvbWV0ZXIgZnJvbSAnLi4vaGVscGVycy9zcGVlZG9tZXRlci5qcyc7XG5cbmZ1bmN0aW9uIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtKSB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXZlbnQ6IGVcbiAgICB9O1xuXG4gICAgZGF0YVtpc0Rvd25sb2FkU3RyZWFtID8gJ2Rvd25sb2FkJyA6ICd1cGxvYWQnXSA9IHRydWU7XG5cbiAgICBsaXN0ZW5lcihkYXRhKTtcbiAgfTtcbn1cblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBsZXQge3Jlc3BvbnNlVHlwZSwgd2l0aFhTUkZUb2tlbn0gPSBjb25maWc7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnRUeXBlO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52IHx8IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikge1xuICAgICAgICByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShmYWxzZSk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICAgIH0gZWxzZSBpZiAoKGNvbnRlbnRUeXBlID0gcmVxdWVzdEhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGZpeCBzZW1pY29sb24gZHVwbGljYXRpb24gaXNzdWUgZm9yIFJlYWN0TmF0aXZlIEZvcm1EYXRhIGltcGxlbWVudGF0aW9uXG4gICAgICAgIGNvbnN0IFt0eXBlLCAuLi50b2tlbnNdID0gY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuICAgICAgICByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShbdHlwZSB8fCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsIC4uLnRva2Vuc10uam9pbignOyAnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIGNvbnN0IHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKSk7XG4gICAgfVxuXG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52KSB7XG4gICAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzLmlzRnVuY3Rpb24od2l0aFhTUkZUb2tlbikgJiYgKHdpdGhYU1JGVG9rZW4gPSB3aXRoWFNSRlRva2VuKGNvbmZpZykpO1xuXG4gICAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkpIHtcbiAgICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICAgIGNvbnN0IHhzcmZWYWx1ZSA9IGNvbmZpZy54c3JmSGVhZGVyTmFtZSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSk7XG5cbiAgICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldChjb25maWcueHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25VcGxvYWRQcm9ncmVzcykpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8geyAuLi50aGluZyB9IDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSBcIjEuNi44XCI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4uL2Vudi9kYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG5jb25zdCBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICpcbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiAodmFsdWUsIG9wdCwgb3B0cykgPT4ge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4uL2hlbHBlcnMvYnVpbGRVUkwuanMnO1xuaW1wb3J0IEludGVyY2VwdG9yTWFuYWdlciBmcm9tICcuL0ludGVyY2VwdG9yTWFuYWdlci5qcyc7XG5pbXBvcnQgZGlzcGF0Y2hSZXF1ZXN0IGZyb20gJy4vZGlzcGF0Y2hSZXF1ZXN0LmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4vYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJy4uL2hlbHBlcnMvdmFsaWRhdG9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi9BeGlvc0hlYWRlcnMuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmNsYXNzIEF4aW9zIHtcbiAgY29uc3RydWN0b3IoaW5zdGFuY2VDb25maWcpIHtcbiAgICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBjb25maWdPclVybCBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gICAqIEBwYXJhbSB7P09iamVjdH0gY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAgICovXG4gIGFzeW5jIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5fcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBsZXQgZHVtbXk7XG5cbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPyBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShkdW1teSA9IHt9KSA6IChkdW1teSA9IG5ldyBFcnJvcigpKTtcblxuICAgICAgICAvLyBzbGljZSBvZmYgdGhlIEVycm9yOiAuLi4gbGluZVxuICAgICAgICBjb25zdCBzdGFjayA9IGR1bW15LnN0YWNrID8gZHVtbXkuc3RhY2sucmVwbGFjZSgvXi4rXFxuLywgJycpIDogJyc7XG5cbiAgICAgICAgaWYgKCFlcnIuc3RhY2spIHtcbiAgICAgICAgICBlcnIuc3RhY2sgPSBzdGFjaztcbiAgICAgICAgICAvLyBtYXRjaCB3aXRob3V0IHRoZSAyIHRvcCBzdGFjayBsaW5lc1xuICAgICAgICB9IGVsc2UgaWYgKHN0YWNrICYmICFTdHJpbmcoZXJyLnN0YWNrKS5lbmRzV2l0aChzdGFjay5yZXBsYWNlKC9eLitcXG4uK1xcbi8sICcnKSkpIHtcbiAgICAgICAgICBlcnIuc3RhY2sgKz0gJ1xcbicgKyBzdGFja1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBfcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICAgIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICAgIH1cblxuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCB7dHJhbnNpdGlvbmFsLCBwYXJhbXNTZXJpYWxpemVyLCBoZWFkZXJzfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNTZXJpYWxpemVyICE9IG51bGwpIHtcbiAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcmFtc1NlcmlhbGl6ZXIpKSB7XG4gICAgICAgIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyID0ge1xuICAgICAgICAgIHNlcmlhbGl6ZTogcGFyYW1zU2VyaWFsaXplclxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgICAgZW5jb2RlOiB2YWxpZGF0b3JzLmZ1bmN0aW9uLFxuICAgICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGxldCBjb250ZXh0SGVhZGVycyA9IGhlYWRlcnMgJiYgdXRpbHMubWVyZ2UoXG4gICAgICBoZWFkZXJzLmNvbW1vbixcbiAgICAgIGhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgaGVhZGVycyAmJiB1dGlscy5mb3JFYWNoKFxuICAgICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgICAobWV0aG9kKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW21ldGhvZF07XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmNvbmNhdChjb250ZXh0SGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICBsZXQgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgbGV0IHByb21pc2U7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBsZW47XG5cbiAgICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgY29uc3QgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LmJpbmQodGhpcyksIHVuZGVmaW5lZF07XG4gICAgICBjaGFpbi51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBjaGFpbi5wdXNoLmFwcGx5KGNoYWluLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgbGVuID0gY2hhaW4ubGVuZ3RoO1xuXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW5baSsrXSwgY2hhaW5baSsrXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGxlbiA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIGxldCBuZXdDb25maWcgPSBjb25maWc7XG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICBjb25zdCBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBvblJlamVjdGVkLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaSA9IDA7XG4gICAgbGVuID0gcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRVcmkoY29uZmlnKSB7XG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuICB9XG59XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybCxcbiAgICAgICAgZGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCgpO1xuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2QgKyAnRm9ybSddID0gZ2VuZXJhdGVIVFRQTWV0aG9kKHRydWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL0NhbmNlbGVkRXJyb3IuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxUb2tlbn1cbiAqL1xuY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbihjYW5jZWwgPT4ge1xuICAgICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICAgIGxldCBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICAgIH1cbiAgICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbiA9IG9uZnVsZmlsbGVkID0+IHtcbiAgICAgIGxldCBfcmVzb2x2ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAgICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAgICovXG4gIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn1cbiIsImNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIdHRwU3RhdHVzQ29kZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiJdLCJuYW1lcyI6WyJzaGVldEZvclRhZyIsInRhZyIsImkiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJvcHRpb25zIiwiU3R5bGVTaGVldCIsIl90aGlzIiwiYmVmb3JlIiwiX3Byb3RvIiwibm9kZXMiLCJydWxlIiwic2hlZXQiLCJlIiwiYWJzIiwiaGFzaCIsInZhbHVlIiwibGVuZ3RoIiwidHJpbSIsInBhdHRlcm4iLCJyZXBsYWNlbWVudCIsImluZGV4b2YiLCJzZWFyY2giLCJpbmRleCIsImJlZ2luIiwiZW5kIiwiYXJyYXkiLCJjYWxsYmFjayIsImxpbmUiLCJjb2x1bW4iLCJwb3NpdGlvbiIsImNoYXJhY3RlciIsImNoYXJhY3RlcnMiLCJub2RlIiwicm9vdCIsInBhcmVudCIsInR5cGUiLCJwcm9wcyIsImNoaWxkcmVuIiwicHJldiIsIm5leHQiLCJwZWVrIiwiY2FyZXQiLCJzbGljZSIsInRva2VuIiwiYWxsb2MiLCJkZWFsbG9jIiwiZGVsaW1pdCIsImRlbGltaXRlciIsInRva2VuaXplciIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiZXNjYXBpbmciLCJjb3VudCIsImNvbW1lbnRlciIsIkNPTU1FTlQiLCJQQUdFIiwiTUVESUEiLCJJTVBPUlQiLCJDSEFSU0VUIiwiVklFV1BPUlQiLCJTVVBQT1JUUyIsIkRPQ1VNRU5UIiwiTkFNRVNQQUNFIiwiRk9OVF9GQUNFIiwiQ09VTlRFUl9TVFlMRSIsIkZPTlRfRkVBVFVSRV9WQUxVRVMiLCJMQVlFUiIsIm91dHB1dCIsInN0cmluZ2lmeSIsImVsZW1lbnQiLCJtaWRkbGV3YXJlIiwiY29sbGVjdGlvbiIsInJ1bGVzaGVldCIsInByZWZpeGVyIiwibmFtZXNwYWNlIiwiY29tcGlsZSIsInBhcnNlIiwicnVsZXMiLCJydWxlc2V0cyIsInBzZXVkbyIsInBvaW50cyIsImRlY2xhcmF0aW9ucyIsIm9mZnNldCIsImF0cnVsZSIsInByb3BlcnR5IiwicHJldmlvdXMiLCJ2YXJpYWJsZSIsInNjYW5uaW5nIiwiYW1wZXJzYW5kIiwicmVmZXJlbmNlIiwiY29tbWVudCIsImRlY2xhcmF0aW9uIiwicnVsZXNldCIsInBvc3QiLCJzaXplIiwiaiIsImsiLCJ4IiwieSIsInoiLCJpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmciLCJ0b1J1bGVzIiwicGFyc2VkIiwiZ2V0UnVsZXMiLCJmaXhlZEVsZW1lbnRzIiwiY29tcGF0IiwiaXNJbXBsaWNpdFJ1bGUiLCJwYXJlbnRSdWxlcyIsInJlbW92ZUxhYmVsIiwiaWdub3JlRmxhZyIsImlzSWdub3JpbmdDb21tZW50IiwiY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0iLCJjYWNoZSIsInVuc2FmZVBzZXVkb0NsYXNzZXMiLCJpc05lc3RlZCIsImNvbW1lbnRDb250YWluZXIiLCJ1bnNhZmVQc2V1ZG9DbGFzcyIsImlzSW1wb3J0UnVsZSIsImlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyIsIm51bGxpZnlFbGVtZW50IiwiaW5jb3JyZWN0SW1wb3J0QWxhcm0iLCJkZWZhdWx0U3R5bGlzUGx1Z2lucyIsImNyZWF0ZUNhY2hlIiwia2V5Iiwic3NyU3R5bGVzIiwiZGF0YUVtb3Rpb25BdHRyaWJ1dGUiLCJzdHlsaXNQbHVnaW5zIiwiaW5zZXJ0ZWQiLCJjb250YWluZXIiLCJub2Rlc1RvSHlkcmF0ZSIsImF0dHJpYiIsIl9pbnNlcnQiLCJvbW5pcHJlc2VudFBsdWdpbnMiLCJjdXJyZW50U2hlZXQiLCJmaW5hbGl6aW5nUGx1Z2lucyIsInNlcmlhbGl6ZXIiLCJzdHlsaXMiLCJzdHlsZXMiLCJzZWxlY3RvciIsInNlcmlhbGl6ZWQiLCJzaG91bGRDYWNoZSIsIm1lbW9pemUiLCJmbiIsImFyZyIsImlzQnJvd3NlciIsImhhc093biIsIkVtb3Rpb25DYWNoZUNvbnRleHQiLCJDYWNoZVByb3ZpZGVyIiwiX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIiwid2l0aEVtb3Rpb25DYWNoZSIsImZ1bmMiLCJyZWYiLCJUaGVtZUNvbnRleHQiLCJ1c2VUaGVtZSIsImdldFRoZW1lIiwib3V0ZXJUaGVtZSIsInRoZW1lIiwibWVyZ2VkVGhlbWUiLCJjcmVhdGVDYWNoZVdpdGhUaGVtZSIsIlRoZW1lUHJvdmlkZXIiLCJ3aXRoVGhlbWUiLCJDb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwicmVuZGVyIiwiV2l0aFRoZW1lIiwiZ2V0TGFzdFBhcnQiLCJmdW5jdGlvbk5hbWUiLCJwYXJ0cyIsImdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZSIsIm1hdGNoIiwiaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMiLCJzYW5pdGl6ZUlkZW50aWZpZXIiLCJnZXRMYWJlbEZyb21TdGFja1RyYWNlIiwic3RhY2tUcmFjZSIsImxpbmVzIiwidHlwZVByb3BOYW1lIiwibGFiZWxQcm9wTmFtZSIsImNyZWF0ZUVtb3Rpb25Qcm9wcyIsIm5ld1Byb3BzIiwiSW5zZXJ0aW9uIiwiX3JlZiIsImlzU3RyaW5nVGFnIiwiRW1vdGlvbiIsIkVtb3Rpb24kMSIsInBrZyIsImpzeCIsImFyZ3MiLCJhcmdzTGVuZ3RoIiwiY3JlYXRlRWxlbWVudEFyZ0FycmF5Iiwid2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsIiwiR2xvYmFsIiwic2VyaWFsaXplZE5hbWVzIiwic2VyaWFsaXplZFN0eWxlcyIsInNoZWV0UmVmIiwicmVoeWRyYXRpbmciLCJzaGVldFJlZkN1cnJlbnQiLCJjc3MiLCJfbGVuIiwiX2tleSIsImtleWZyYW1lcyIsImluc2VydGFibGUiLCJuYW1lIiwiY2xhc3NuYW1lcyIsImxlbiIsImNscyIsInRvQWRkIiwibWVyZ2UiLCJyZWdpc3RlcmVkIiwiY2xhc3NOYW1lIiwicmVnaXN0ZXJlZFN0eWxlcyIsInJhd0NsYXNzTmFtZSIsInNlcmlhbGl6ZWRBcnIiLCJDbGFzc05hbWVzIiwibXVybXVyMiIsInN0ciIsImgiLCJ1bml0bGVzc0tleXMiLCJJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiIsIlVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SIiwiaHlwaGVuYXRlUmVnZXgiLCJhbmltYXRpb25SZWdleCIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJwMSIsInAyIiwiY3Vyc29yIiwibm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UiLCJoYW5kbGVJbnRlcnBvbGF0aW9uIiwibWVyZ2VkUHJvcHMiLCJpbnRlcnBvbGF0aW9uIiwiY3JlYXRlU3RyaW5nRnJvbU9iamVjdCIsInByZXZpb3VzQ3Vyc29yIiwicmVzdWx0IiwiY2FjaGVkIiwib2JqIiwic3RyaW5nIiwiX2kiLCJpbnRlcnBvbGF0ZWQiLCJsYWJlbFBhdHRlcm4iLCJzb3VyY2VNYXBQYXR0ZXJuIiwic2VyaWFsaXplU3R5bGVzIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJzb3VyY2VNYXAiLCJpZGVudGlmaWVyTmFtZSIsInN5bmNGYWxsYmFjayIsImNyZWF0ZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2siLCJ1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2siLCJnZXRSZWdpc3RlcmVkU3R5bGVzIiwiY2xhc3NOYW1lcyIsInJlZ2lzdGVyU3R5bGVzIiwiaW5zZXJ0U3R5bGVzIiwiY3VycmVudCIsImV4dHJhY3RFdmVudEhhbmRsZXJzIiwib2JqZWN0IiwiZXhjbHVkZUtleXMiLCJwcm9wIiwiaXNIb3N0Q29tcG9uZW50IiwiYXBwZW5kT3duZXJTdGF0ZSIsImVsZW1lbnRUeXBlIiwib3RoZXJQcm9wcyIsIm93bmVyU3RhdGUiLCJvbWl0RXZlbnRIYW5kbGVycyIsIm1lcmdlU2xvdFByb3BzIiwicGFyYW1ldGVycyIsImdldFNsb3RQcm9wcyIsImFkZGl0aW9uYWxQcm9wcyIsImV4dGVybmFsU2xvdFByb3BzIiwiZXh0ZXJuYWxGb3J3YXJkZWRQcm9wcyIsImpvaW5lZENsYXNzZXMiLCJjbHN4IiwibWVyZ2VkU3R5bGUiLCJldmVudEhhbmRsZXJzIiwiY29tcG9uZW50c1Byb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMiLCJvdGhlclByb3BzV2l0aG91dEV2ZW50SGFuZGxlcnMiLCJpbnRlcm5hbFNsb3RQcm9wcyIsInJlc29sdmVDb21wb25lbnRQcm9wcyIsImNvbXBvbmVudFByb3BzIiwic2xvdFN0YXRlIiwiX2V4Y2x1ZGVkIiwidXNlU2xvdFByb3BzIiwiX3BhcmFtZXRlcnMkYWRkaXRpb25hIiwic2tpcFJlc29sdmluZ1Nsb3RQcm9wcyIsInJlc3QiLCJyZXNvbHZlZENvbXBvbmVudHNQcm9wcyIsImludGVybmFsUmVmIiwidXNlRm9ya1JlZiIsImV4cG9ydHMiLCJfdXRpbHMiLCJnZXRCYWNrZHJvcFV0aWxpdHlDbGFzcyIsInNsb3QiLCJnZW5lcmF0ZVV0aWxpdHlDbGFzcyIsImJhY2tkcm9wQ2xhc3NlcyIsImdlbmVyYXRlVXRpbGl0eUNsYXNzZXMiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsImNsYXNzZXMiLCJpbnZpc2libGUiLCJzbG90cyIsImNvbXBvc2VDbGFzc2VzIiwiQmFja2Ryb3BSb290Iiwic3R5bGVkIiwiaW5Qcm9wcyIsIl9zbG90UHJvcHMkcm9vdCIsIl9zbG90cyRyb290IiwidXNlVGhlbWVQcm9wcyIsImNvbXBvbmVudCIsImNvbXBvbmVudHMiLCJjb21wb25lbnRzUHJvcHMiLCJvcGVuIiwic2xvdFByb3BzIiwiVHJhbnNpdGlvbkNvbXBvbmVudCIsIkZhZGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJvdGhlciIsInJvb3RTbG90UHJvcHMiLCJjcmVhdGVCb3giLCJ0aGVtZUlkIiwiZGVmYXVsdFRoZW1lIiwiZGVmYXVsdENsYXNzTmFtZSIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiQm94Um9vdCIsInN0eWxlRnVuY3Rpb25TeCIsIl9leHRlbmRTeFByb3AiLCJleHRlbmRTeFByb3AiLCJjcmVhdGVUaGVtZSIsIkNsYXNzTmFtZUdlbmVyYXRvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiZ2V0Q2hpbGRNYXBwaW5nIiwibWFwRm4iLCJtYXBwZXIiLCJjaGlsZCIsImMiLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsImdldFByb3AiLCJnZXRJbml0aWFsQ2hpbGRNYXBwaW5nIiwib25FeGl0ZWQiLCJnZXROZXh0Q2hpbGRNYXBwaW5nIiwibmV4dFByb3BzIiwicHJldkNoaWxkTWFwcGluZyIsIm5leHRDaGlsZE1hcHBpbmciLCJoYXNQcmV2IiwiaGFzTmV4dCIsInByZXZDaGlsZCIsImlzTGVhdmluZyIsInZhbHVlcyIsImRlZmF1bHRQcm9wcyIsIlRyYW5zaXRpb25Hcm91cCIsIl9SZWFjdCRDb21wb25lbnQiLCJjb250ZXh0IiwiaGFuZGxlRXhpdGVkIiwiZmlyc3RSZW5kZXIiLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwic3RhdGUiLCJfdGhpcyRwcm9wcyIsImNoaWxkRmFjdG9yeSIsImNvbnRleHRWYWx1ZSIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJSaXBwbGUiLCJwdWxzYXRlIiwicmlwcGxlWCIsInJpcHBsZVkiLCJyaXBwbGVTaXplIiwiaW5Qcm9wIiwidGltZW91dCIsImxlYXZpbmciLCJzZXRMZWF2aW5nIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlU3R5bGVzIiwiY2hpbGRDbGFzc05hbWUiLCJ0aW1lb3V0SWQiLCJnZXRUb3VjaFJpcHBsZVV0aWxpdHlDbGFzcyIsIl8iLCJ0IiwiX3QiLCJfdDIiLCJfdDMiLCJfdDQiLCJEVVJBVElPTiIsIkRFTEFZX1JJUFBMRSIsImVudGVyS2V5ZnJhbWUiLCJleGl0S2V5ZnJhbWUiLCJwdWxzYXRlS2V5ZnJhbWUiLCJUb3VjaFJpcHBsZVJvb3QiLCJUb3VjaFJpcHBsZVJpcHBsZSIsImNlbnRlclByb3AiLCJyaXBwbGVzIiwic2V0UmlwcGxlcyIsInJpcHBsZUNhbGxiYWNrIiwiaWdub3JpbmdNb3VzZURvd24iLCJzdGFydFRpbWVyIiwidXNlVGltZW91dCIsInN0YXJ0VGltZXJDb21taXQiLCJzdGFydENvbW1pdCIsInBhcmFtcyIsImNiIiwib2xkUmlwcGxlcyIsInN0YXJ0IiwiZXZlbnQiLCJjZW50ZXIiLCJmYWtlRWxlbWVudCIsInJlY3QiLCJjbGllbnRYIiwiY2xpZW50WSIsInNpemVYIiwic2l6ZVkiLCJzdG9wIiwiZ2V0QnV0dG9uQmFzZVV0aWxpdHlDbGFzcyIsImRpc2FibGVkIiwiZm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lIiwiY29tcG9zZWRDbGFzc2VzIiwiQnV0dG9uQmFzZVJvb3QiLCJhY3Rpb24iLCJjZW50ZXJSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJMaW5rQ29tcG9uZW50Iiwib25CbHVyIiwib25DbGljayIsIm9uQ29udGV4dE1lbnUiLCJvbkRyYWdMZWF2ZSIsIm9uRm9jdXMiLCJvbkZvY3VzVmlzaWJsZSIsIm9uS2V5RG93biIsIm9uS2V5VXAiLCJvbk1vdXNlRG93biIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VVcCIsIm9uVG91Y2hFbmQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hTdGFydCIsInRhYkluZGV4IiwiVG91Y2hSaXBwbGVQcm9wcyIsInRvdWNoUmlwcGxlUmVmIiwiYnV0dG9uUmVmIiwicmlwcGxlUmVmIiwiaGFuZGxlUmlwcGxlUmVmIiwiaXNGb2N1c1Zpc2libGVSZWYiLCJoYW5kbGVGb2N1c1Zpc2libGUiLCJoYW5kbGVCbHVyVmlzaWJsZSIsImZvY3VzVmlzaWJsZVJlZiIsInVzZUlzRm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwibW91bnRlZFN0YXRlIiwic2V0TW91bnRlZFN0YXRlIiwiZW5hYmxlVG91Y2hSaXBwbGUiLCJ1c2VSaXBwbGVIYW5kbGVyIiwicmlwcGxlQWN0aW9uIiwiZXZlbnRDYWxsYmFjayIsInNraXBSaXBwbGVBY3Rpb24iLCJ1c2VFdmVudENhbGxiYWNrIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlQ29udGV4dE1lbnUiLCJoYW5kbGVEcmFnTGVhdmUiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImlzTm9uTmF0aXZlQnV0dG9uIiwiYnV0dG9uIiwia2V5ZG93blJlZiIsImhhbmRsZUtleURvd24iLCJoYW5kbGVLZXlVcCIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsImhhbmRsZVJlZiIsImRlZmF1bHRUaW1lb3V0IiwiYWRkRW5kTGlzdGVuZXIiLCJhcHBlYXIiLCJlYXNpbmciLCJvbkVudGVyIiwib25FbnRlcmVkIiwib25FbnRlcmluZyIsIm9uRXhpdCIsIm9uRXhpdGluZyIsInN0eWxlIiwiZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCIsIm5vZGVSZWYiLCJub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrIiwibWF5YmVJc0FwcGVhcmluZyIsImhhbmRsZUVudGVyaW5nIiwiaGFuZGxlRW50ZXIiLCJpc0FwcGVhcmluZyIsInRyYW5zaXRpb25Qcm9wcyIsImhhbmRsZUVudGVyZWQiLCJoYW5kbGVFeGl0aW5nIiwiaGFuZGxlRXhpdCIsImhhbmRsZUFkZEVuZExpc3RlbmVyIiwiY2hpbGRQcm9wcyIsImdldFNjYWxlIiwiaXNXZWJLaXQxNTQiLCJHcm93IiwidGltZXIiLCJhdXRvVGltZW91dCIsImRlbGF5IiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwiZHVyYXRpb24iLCJvdmVycmlkZXNSZXNvbHZlciIsImFsaWduSXRlbXMiLCJkZW5zZSIsImRpc2FibGVHdXR0ZXJzIiwiZGl2aWRlciIsInNlbGVjdGVkIiwiTGlzdEl0ZW1CdXR0b25Sb290IiwiYXV0b0ZvY3VzIiwiY2hpbGRDb250ZXh0IiwibGlzdEl0ZW1SZWYiLCJnZXRMaXN0SXRlbUJ1dHRvblV0aWxpdHlDbGFzcyIsImdldExpc3RJdGVtVGV4dFV0aWxpdHlDbGFzcyIsImluc2V0IiwicHJpbWFyeSIsInNlY29uZGFyeSIsIkxpc3RJdGVtVGV4dFJvb3QiLCJkaXNhYmxlVHlwb2dyYXBoeSIsInByaW1hcnlQcm9wIiwicHJpbWFyeVR5cG9ncmFwaHlQcm9wcyIsInNlY29uZGFyeVByb3AiLCJzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHMiLCJMaXN0Q29udGV4dCIsIlR5cG9ncmFwaHkiLCJnZXRMaXN0VXRpbGl0eUNsYXNzIiwibGlzdENsYXNzZXMiLCJkaXNhYmxlUGFkZGluZyIsInN1YmhlYWRlciIsIkxpc3RSb290IiwiaXNPdmVyZmxvd2luZyIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJvd25lcldpbmRvdyIsImFyaWFIaWRkZW4iLCJzaG93IiwiZ2V0UGFkZGluZ1JpZ2h0IiwiaXNBcmlhSGlkZGVuRm9yYmlkZGVuT25FbGVtZW50IiwiaXNGb3JiaWRkZW5UYWdOYW1lIiwiaXNJbnB1dEhpZGRlbiIsImFyaWFIaWRkZW5TaWJsaW5ncyIsIm1vdW50RWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwiZWxlbWVudHNUb0V4Y2x1ZGUiLCJibGFja2xpc3QiLCJpc05vdEV4Y2x1ZGVkRWxlbWVudCIsImlzTm90Rm9yYmlkZGVuRWxlbWVudCIsImZpbmRJbmRleE9mIiwiaXRlbXMiLCJpZHgiLCJpdGVtIiwiaGFuZGxlQ29udGFpbmVyIiwiY29udGFpbmVySW5mbyIsInJlc3RvcmVTdHlsZSIsInNjcm9sbGJhclNpemUiLCJnZXRTY3JvbGxiYXJTaXplIiwic2Nyb2xsQ29udGFpbmVyIiwiY29udGFpbmVyV2luZG93IiwiZWwiLCJnZXRIaWRkZW5TaWJsaW5ncyIsImhpZGRlblNpYmxpbmdzIiwiTW9kYWxNYW5hZ2VyIiwibW9kYWwiLCJtb2RhbEluZGV4IiwiY29udGFpbmVySW5kZXgiLCJhcmlhSGlkZGVuU3RhdGUiLCJuZXh0VG9wIiwiZ2V0Q29udGFpbmVyIiwiZ2V0SGFzVHJhbnNpdGlvbiIsImRlZmF1bHRNYW5hZ2VyIiwidXNlTW9kYWwiLCJkaXNhYmxlRXNjYXBlS2V5RG93biIsImRpc2FibGVTY3JvbGxMb2NrIiwibWFuYWdlciIsImNsb3NlQWZ0ZXJUcmFuc2l0aW9uIiwib25UcmFuc2l0aW9uRW50ZXIiLCJvblRyYW5zaXRpb25FeGl0ZWQiLCJvbkNsb3NlIiwicm9vdFJlZiIsIm1vdW50Tm9kZVJlZiIsIm1vZGFsUmVmIiwiZXhpdGVkIiwic2V0RXhpdGVkIiwiaGFzVHJhbnNpdGlvbiIsImFyaWFIaWRkZW5Qcm9wIiwiZ2V0RG9jIiwiZ2V0TW9kYWwiLCJoYW5kbGVNb3VudGVkIiwiaGFuZGxlT3BlbiIsInJlc29sdmVkQ29udGFpbmVyIiwiaXNUb3BNb2RhbCIsImhhbmRsZVBvcnRhbFJlZiIsImhhbmRsZUNsb3NlIiwiY3JlYXRlSGFuZGxlS2V5RG93biIsIm90aGVySGFuZGxlcnMiLCJfb3RoZXJIYW5kbGVycyRvbktleUQiLCJjcmVhdGVIYW5kbGVCYWNrZHJvcENsaWNrIiwiX290aGVySGFuZGxlcnMkb25DbGljIiwicHJvcHNFdmVudEhhbmRsZXJzIiwiZXh0ZXJuYWxFdmVudEhhbmRsZXJzIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiY2FuZGlkYXRlc1NlbGVjdG9yIiwiZ2V0VGFiSW5kZXgiLCJ0YWJpbmRleEF0dHIiLCJpc05vblRhYmJhYmxlUmFkaW8iLCJnZXRSYWRpbyIsInJvdmluZyIsImlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUiLCJkZWZhdWx0R2V0VGFiYmFibGUiLCJyZWd1bGFyVGFiTm9kZXMiLCJvcmRlcmVkVGFiTm9kZXMiLCJub2RlVGFiSW5kZXgiLCJhIiwiYiIsImRlZmF1bHRJc0VuYWJsZWQiLCJGb2N1c1RyYXAiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsImRpc2FibGVSZXN0b3JlRm9jdXMiLCJnZXRUYWJiYWJsZSIsImlzRW5hYmxlZCIsImlnbm9yZU5leHRFbmZvcmNlRm9jdXMiLCJzZW50aW5lbFN0YXJ0Iiwic2VudGluZWxFbmQiLCJub2RlVG9SZXN0b3JlIiwicmVhY3RGb2N1c0V2ZW50VGFyZ2V0IiwiYWN0aXZhdGVkIiwibGFzdEtleWRvd24iLCJsb29wRm9jdXMiLCJuYXRpdmVFdmVudCIsImNvbnRhaW4iLCJyb290RWxlbWVudCIsInRhYmJhYmxlIiwiX2xhc3RLZXlkb3duJGN1cnJlbnQiLCJfbGFzdEtleWRvd24kY3VycmVudDIiLCJpc1NoaWZ0VGFiIiwiZm9jdXNOZXh0IiwiZm9jdXNQcmV2aW91cyIsImludGVydmFsIiwiY2hpbGRyZW5Qcm9wc0hhbmRsZXIiLCJoYW5kbGVGb2N1c1NlbnRpbmVsIiwiUG9ydGFsIiwiZm9yd2FyZGVkUmVmIiwiZGlzYWJsZVBvcnRhbCIsIm1vdW50Tm9kZSIsInNldE1vdW50Tm9kZSIsInVzZUVuaGFuY2VkRWZmZWN0Iiwic2V0UmVmIiwiZ2V0TW9kYWxVdGlsaXR5Q2xhc3MiLCJtb2RhbENsYXNzZXMiLCJNb2RhbFJvb3QiLCJNb2RhbEJhY2tkcm9wIiwiQmFja2Ryb3AiLCJfcmVmMiIsIl9zbG90cyRiYWNrZHJvcCIsIl9zbG90UHJvcHMkYmFja2Ryb3AiLCJCYWNrZHJvcENvbXBvbmVudCIsIkJhY2tkcm9wUHJvcHMiLCJoaWRlQmFja2Ryb3AiLCJrZWVwTW91bnRlZCIsIm9uQmFja2Ryb3BDbGljayIsInByb3BzV2l0aERlZmF1bHRzIiwiZ2V0Um9vdFByb3BzIiwiZ2V0QmFja2Ryb3BQcm9wcyIsImdldFRyYW5zaXRpb25Qcm9wcyIsInBvcnRhbFJlZiIsIlJvb3RTbG90IiwiQmFja2Ryb3BTbG90IiwiYmFja2Ryb3BTbG90UHJvcHMiLCJyb290UHJvcHMiLCJiYWNrZHJvcFByb3BzIiwiZWxldmF0aW9uIiwiYWxwaGFWYWx1ZSIsImdldFBhcGVyVXRpbGl0eUNsYXNzIiwicGFwZXJDbGFzc2VzIiwic3F1YXJlIiwidmFyaWFudCIsIlBhcGVyUm9vdCIsIl90aGVtZSR2YXJzJG92ZXJsYXlzIiwiZ2V0UG9wb3ZlclV0aWxpdHlDbGFzcyIsInBvcG92ZXJDbGFzc2VzIiwiX2V4Y2x1ZGVkMiIsIl9leGNsdWRlZDMiLCJnZXRPZmZzZXRUb3AiLCJ2ZXJ0aWNhbCIsImdldE9mZnNldExlZnQiLCJob3Jpem9udGFsIiwiZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJuIiwicmVzb2x2ZUFuY2hvckVsIiwiYW5jaG9yRWwiLCJQb3BvdmVyUm9vdCIsIk1vZGFsIiwiUG9wb3ZlclBhcGVyIiwiUGFwZXIiLCJfc2xvdFByb3BzJHBhcGVyIiwiX3Nsb3RzJHBhcGVyIiwiYW5jaG9yT3JpZ2luIiwiYW5jaG9yUG9zaXRpb24iLCJhbmNob3JSZWZlcmVuY2UiLCJjb250YWluZXJQcm9wIiwibWFyZ2luVGhyZXNob2xkIiwiUGFwZXJQcm9wc1Byb3AiLCJ0cmFuc2l0aW9uRHVyYXRpb25Qcm9wIiwiVHJhbnNpdGlvblByb3BzIiwiZXh0ZXJuYWxQYXBlclNsb3RQcm9wcyIsInBhcGVyUmVmIiwiaGFuZGxlUGFwZXJSZWYiLCJnZXRBbmNob3JPZmZzZXQiLCJyZXNvbHZlZEFuY2hvckVsIiwiYW5jaG9yUmVjdCIsImdldFRyYW5zZm9ybU9yaWdpbiIsImVsZW1SZWN0IiwiZ2V0UG9zaXRpb25pbmdTdHlsZSIsImVsZW1UcmFuc2Zvcm1PcmlnaW4iLCJhbmNob3JPZmZzZXQiLCJ0b3AiLCJsZWZ0IiwiYm90dG9tIiwicmlnaHQiLCJoZWlnaHRUaHJlc2hvbGQiLCJ3aWR0aFRocmVzaG9sZCIsImRpZmYiLCJpc1Bvc2l0aW9uZWQiLCJzZXRJc1Bvc2l0aW9uZWQiLCJzZXRQb3NpdGlvbmluZ1N0eWxlcyIsInBvc2l0aW9uaW5nIiwiaGFuZGxlUmVzaXplIiwiZGVib3VuY2UiLCJQYXBlclNsb3QiLCJwYXBlclByb3BzIiwiX3VzZVNsb3RQcm9wcyIsInJvb3RTbG90UHJvcHNQcm9wIiwiZ2V0U3R5bGVWYWx1ZSIsImlzRW1wdHkiLCJUZXh0YXJlYUF1dG9zaXplIiwib25DaGFuZ2UiLCJtYXhSb3dzIiwibWluUm93cyIsImlzQ29udHJvbGxlZCIsImlucHV0UmVmIiwic2hhZG93UmVmIiwiY2FsY3VsYXRlVGV4dGFyZWFTdHlsZXMiLCJpbnB1dCIsImNvbXB1dGVkU3R5bGUiLCJpbnB1dFNoYWxsb3ciLCJib3hTaXppbmciLCJwYWRkaW5nIiwiYm9yZGVyIiwiaW5uZXJIZWlnaHQiLCJzaW5nbGVSb3dIZWlnaHQiLCJvdXRlckhlaWdodCIsIm91dGVySGVpZ2h0U3R5bGUiLCJvdmVyZmxvd2luZyIsInN5bmNIZWlnaHQiLCJ0ZXh0YXJlYVN0eWxlcyIsInJBRiIsInJBRkhhbmRsZVJlc2l6ZSIsImRlYm91bmNlSGFuZGxlUmVzaXplIiwicmVzaXplT2JzZXJ2ZXIiLCJoYW5kbGVDaGFuZ2UiLCJmb3JtQ29udHJvbFN0YXRlIiwic3RhdGVzIiwibXVpRm9ybUNvbnRyb2wiLCJhY2MiLCJ1c2VGb3JtQ29udHJvbCIsInVwcGVyVGhlbWUiLCJnbG9iYWxTdHlsZXMiLCJoYXNWYWx1ZSIsImlzRmlsbGVkIiwiU1NSIiwiaXNBZG9ybmVkU3RhcnQiLCJnZXRJbnB1dEJhc2VVdGlsaXR5Q2xhc3MiLCJyb290T3ZlcnJpZGVzUmVzb2x2ZXIiLCJjYXBpdGFsaXplIiwiaW5wdXRPdmVycmlkZXNSZXNvbHZlciIsImNvbG9yIiwiZXJyb3IiLCJlbmRBZG9ybm1lbnQiLCJmb2N1c2VkIiwiZm9ybUNvbnRyb2wiLCJmdWxsV2lkdGgiLCJoaWRkZW5MYWJlbCIsIm11bHRpbGluZSIsInJlYWRPbmx5Iiwic3RhcnRBZG9ybm1lbnQiLCJJbnB1dEJhc2VSb290IiwiSW5wdXRCYXNlQ29tcG9uZW50IiwibGlnaHQiLCJwbGFjZWhvbGRlciIsInBsYWNlaG9sZGVySGlkZGVuIiwicGxhY2Vob2xkZXJWaXNpYmxlIiwiaW5wdXRHbG9iYWxTdHlsZXMiLCJfc2xvdFByb3BzJGlucHV0IiwiYXJpYURlc2NyaWJlZGJ5IiwiYXV0b0NvbXBsZXRlIiwiZGVmYXVsdFZhbHVlIiwiZGlzYWJsZUluamVjdGluZ0dsb2JhbFN0eWxlcyIsImlkIiwiaW5wdXRDb21wb25lbnQiLCJpbnB1dFByb3BzUHJvcCIsImlucHV0UmVmUHJvcCIsInJlbmRlclN1ZmZpeCIsInJvd3MiLCJ2YWx1ZVByb3AiLCJoYW5kbGVJbnB1dFJlZldhcm5pbmciLCJpbnN0YW5jZSIsImhhbmRsZUlucHV0UmVmIiwic2V0Rm9jdXNlZCIsImZjcyIsIm9uRmlsbGVkIiwib25FbXB0eSIsImNoZWNrRGlydHkiLCJoYW5kbGVDbGljayIsIklucHV0Q29tcG9uZW50IiwiaW5wdXRQcm9wcyIsImhhbmRsZUF1dG9GaWxsIiwiUm9vdCIsIklucHV0IiwiZ2V0SW5wdXRVdGlsaXR5Q2xhc3MiLCJkaXNhYmxlVW5kZXJsaW5lIiwiSW5wdXRSb290Iiwicm9vdFNob3VsZEZvcndhcmRQcm9wIiwiYm90dG9tTGluZUNvbG9yIiwiSW5wdXRJbnB1dCIsIl9zbG90cyRpbnB1dCIsImNvbXBvbmVudHNQcm9wc1Byb3AiLCJpbnB1dENvbXBvbmVudHNQcm9wcyIsImRlZXBtZXJnZSIsIklucHV0U2xvdCIsImdldEZpbGxlZElucHV0VXRpbGl0eUNsYXNzIiwiRmlsbGVkSW5wdXRSb290IiwiX3BhbGV0dGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJob3ZlckJhY2tncm91bmQiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJGaWxsZWRJbnB1dElucHV0IiwiRmlsbGVkSW5wdXQiLCJmaWxsZWRJbnB1dENvbXBvbmVudHNQcm9wcyIsIl9zcGFuIiwiTm90Y2hlZE91dGxpbmVSb290IiwiTm90Y2hlZE91dGxpbmVMZWdlbmQiLCJOb3RjaGVkT3V0bGluZSIsImxhYmVsIiwibm90Y2hlZCIsIndpdGhMYWJlbCIsImdldE91dGxpbmVkSW5wdXRVdGlsaXR5Q2xhc3MiLCJPdXRsaW5lZElucHV0Um9vdCIsImJvcmRlckNvbG9yIiwiT3V0bGluZWRJbnB1dElucHV0IiwiT3V0bGluZWRJbnB1dCIsIl9SZWFjdCRGcmFnbWVudCIsImdldEZvcm1MYWJlbFV0aWxpdHlDbGFzc2VzIiwiZmlsbGVkIiwicmVxdWlyZWQiLCJGb3JtTGFiZWxSb290IiwiQXN0ZXJpc2tDb21wb25lbnQiLCJnZXRJbnB1dExhYmVsVXRpbGl0eUNsYXNzZXMiLCJpbnB1dExhYmVsQ2xhc3NlcyIsInNocmluayIsImRpc2FibGVBbmltYXRpb24iLCJJbnB1dExhYmVsUm9vdCIsInNocmlua1Byb3AiLCJnZXRGb3JtQ29udHJvbFV0aWxpdHlDbGFzc2VzIiwiZm9ybUNvbnRyb2xDbGFzc2VzIiwibWFyZ2luIiwiRm9ybUNvbnRyb2xSb290IiwidmlzdWFsbHlGb2N1c2VkIiwiYWRvcm5lZFN0YXJ0Iiwic2V0QWRvcm5lZFN0YXJ0IiwiaW5pdGlhbEFkb3JuZWRTdGFydCIsImlzTXVpRWxlbWVudCIsInNldEZpbGxlZCIsImluaXRpYWxGaWxsZWQiLCJmb2N1c2VkU3RhdGUiLCJyZWdpc3RlckVmZmVjdCIsImdldEZvcm1IZWxwZXJUZXh0VXRpbGl0eUNsYXNzZXMiLCJjb250YWluZWQiLCJGb3JtSGVscGVyVGV4dFJvb3QiLCJSdGxDb250ZXh0IiwiUnRsUHJvdmlkZXIiLCJ1c2VSdGwiLCJuZXh0SXRlbSIsImxpc3QiLCJkaXNhYmxlTGlzdFdyYXAiLCJwcmV2aW91c0l0ZW0iLCJ0ZXh0Q3JpdGVyaWFNYXRjaGVzIiwibmV4dEZvY3VzIiwidGV4dENyaXRlcmlhIiwidGV4dCIsIm1vdmVGb2N1cyIsImN1cnJlbnRGb2N1cyIsImRpc2FibGVkSXRlbXNGb2N1c2FibGUiLCJ0cmF2ZXJzYWxGdW5jdGlvbiIsIndyYXBwZWRPbmNlIiwibmV4dEZvY3VzRGlzYWJsZWQiLCJhY3Rpb25zIiwiYXV0b0ZvY3VzSXRlbSIsImxpc3RSZWYiLCJ0ZXh0Q3JpdGVyaWFSZWYiLCJjb250YWluZXJFbGVtZW50IiwiZGlyZWN0aW9uIiwibm9FeHBsaWNpdFdpZHRoIiwiY3JpdGVyaWEiLCJsb3dlcktleSIsImN1cnJUaW1lIiwia2VlcEZvY3VzT25DdXJyZW50IiwiYWN0aXZlSXRlbUluZGV4IiwibmV3Q2hpbGRQcm9wcyIsIkxpc3QiLCJnZXRNZW51VXRpbGl0eUNsYXNzIiwibWVudUNsYXNzZXMiLCJSVExfT1JJR0lOIiwiTFRSX09SSUdJTiIsIk1lbnVSb290IiwiUG9wb3ZlciIsIk1lbnVQYXBlciIsIk1lbnVNZW51TGlzdCIsImRpc2FibGVBdXRvRm9jdXNJdGVtIiwiTWVudUxpc3RQcm9wcyIsIlBhcGVyUHJvcHMiLCJQb3BvdmVyQ2xhc3NlcyIsImlzUnRsIiwibWVudUxpc3RBY3Rpb25zUmVmIiwiaGFuZGxlTGlzdEtleURvd24iLCJwYXBlckV4dGVybmFsU2xvdFByb3BzIiwicGFwZXJTbG90UHJvcHMiLCJnZXROYXRpdmVTZWxlY3RVdGlsaXR5Q2xhc3NlcyIsIm11bHRpcGxlIiwibmF0aXZlU2VsZWN0U2VsZWN0U3R5bGVzIiwiTmF0aXZlU2VsZWN0U2VsZWN0IiwibmF0aXZlU2VsZWN0SWNvblN0eWxlcyIsIk5hdGl2ZVNlbGVjdEljb24iLCJJY29uQ29tcG9uZW50IiwiZ2V0U2VsZWN0VXRpbGl0eUNsYXNzZXMiLCJTZWxlY3RTZWxlY3QiLCJTZWxlY3RJY29uIiwiU2VsZWN0TmF0aXZlSW5wdXQiLCJzbG90U2hvdWxkRm9yd2FyZFByb3AiLCJhcmVFcXVhbFZhbHVlcyIsImRpc3BsYXkiLCJfTWVudVByb3BzJHNsb3RQcm9wcyIsImFyaWFMYWJlbCIsImF1dG9XaWR0aCIsImRlZmF1bHRPcGVuIiwiZGlzcGxheUVtcHR5IiwibGFiZWxJZCIsIk1lbnVQcm9wcyIsIm9uT3BlbiIsIm9wZW5Qcm9wIiwicmVuZGVyVmFsdWUiLCJTZWxlY3REaXNwbGF5UHJvcHMiLCJ0YWJJbmRleFByb3AiLCJzZXRWYWx1ZVN0YXRlIiwidXNlQ29udHJvbGxlZCIsIm9wZW5TdGF0ZSIsInNldE9wZW5TdGF0ZSIsImRpc3BsYXlSZWYiLCJkaXNwbGF5Tm9kZSIsInNldERpc3BsYXlOb2RlIiwiaXNPcGVuQ29udHJvbGxlZCIsIm1lbnVNaW5XaWR0aFN0YXRlIiwic2V0TWVudU1pbldpZHRoU3RhdGUiLCJoYW5kbGVEaXNwbGF5UmVmIiwiYW5jaG9yRWxlbWVudCIsImhhbmRsZXIiLCJ1cGRhdGUiLCJjaGlsZHJlbkFycmF5IiwiY2hpbGRJdGVtIiwiaGFuZGxlSXRlbUNsaWNrIiwibmV3VmFsdWUiLCJpdGVtSW5kZXgiLCJjbG9uZWRFdmVudCIsImRpc3BsYXlTaW5nbGUiLCJkaXNwbGF5TXVsdGlwbGUiLCJjb21wdXRlRGlzcGxheSIsImZvdW5kTWF0Y2giLCJ2IiwibWVudU1pbldpZHRoIiwiYnV0dG9uSWQiLCJsaXN0Ym94SWQiLCJ1c2VJZCIsImNyZWF0ZVN2Z0ljb24iLCJzdHlsZWRSb290Q29uZmlnIiwiU3R5bGVkSW5wdXQiLCJTdHlsZWRPdXRsaW5lZElucHV0IiwiU3R5bGVkRmlsbGVkSW5wdXQiLCJTZWxlY3QiLCJjbGFzc2VzUHJvcCIsIkFycm93RHJvcERvd24iLCJuYXRpdmUiLCJ2YXJpYW50UHJvcCIsInJlc3RPZkNsYXNzZXMiLCJpbnB1dENvbXBvbmVudFJlZiIsImdldFRleHRGaWVsZFV0aWxpdHlDbGFzcyIsInRleHRGaWVsZENsYXNzZXMiLCJ2YXJpYW50Q29tcG9uZW50IiwiVGV4dEZpZWxkUm9vdCIsIkZvcm1IZWxwZXJUZXh0UHJvcHMiLCJoZWxwZXJUZXh0IiwiaWRPdmVycmlkZSIsIklucHV0TGFiZWxQcm9wcyIsIklucHV0UHJvcHMiLCJzZWxlY3QiLCJTZWxlY3RQcm9wcyIsIklucHV0TW9yZSIsImhlbHBlclRleHRJZCIsImlucHV0TGFiZWxJZCIsIklucHV0RWxlbWVudCIsImdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MiLCJ0eXBvZ3JhcGh5Q2xhc3NlcyIsImFsaWduIiwiZ3V0dGVyQm90dG9tIiwibm9XcmFwIiwicGFyYWdyYXBoIiwiVHlwb2dyYXBoeVJvb3QiLCJkZWZhdWx0VmFyaWFudE1hcHBpbmciLCJjb2xvclRyYW5zZm9ybWF0aW9ucyIsInRyYW5zZm9ybURlcHJlY2F0ZWRDb2xvcnMiLCJ0aGVtZVByb3BzIiwidmFyaWFudE1hcHBpbmciLCJkIiwiZiIsImwiLCJtIiwicCIsInEiLCJ1IiwiciIsImNyZWF0ZU1peGlucyIsImJyZWFrcG9pbnRzIiwibWl4aW5zIiwiZGFyayIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50Iiwic2hhZGUiLCJ0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0TGlnaHQiLCJ0b25hbE9mZnNldERhcmsiLCJnZXREZWZhdWx0UHJpbWFyeSIsIm1vZGUiLCJnZXREZWZhdWx0U2Vjb25kYXJ5IiwiZ2V0RGVmYXVsdEVycm9yIiwiZ2V0RGVmYXVsdEluZm8iLCJnZXREZWZhdWx0U3VjY2VzcyIsImdldERlZmF1bHRXYXJuaW5nIiwiY3JlYXRlUGFsZXR0ZSIsInBhbGV0dGUiLCJjb250cmFzdFRocmVzaG9sZCIsImluZm8iLCJzdWNjZXNzIiwid2FybmluZyIsImdldENvbnRyYXN0VGV4dCIsImJhY2tncm91bmQiLCJhdWdtZW50Q29sb3IiLCJtYWluU2hhZGUiLCJsaWdodFNoYWRlIiwiZGFya1NoYWRlIiwibW9kZXMiLCJyb3VuZCIsImNhc2VBbGxDYXBzIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwidHlwb2dyYXBoeSIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRSZWd1bGFyIiwiZm9udFdlaWdodE1lZGl1bSIsImZvbnRXZWlnaHRCb2xkIiwiaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJweFRvUmVtMiIsImNvZWYiLCJweFRvUmVtIiwiYnVpbGRWYXJpYW50IiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwiY2FzaW5nIiwidmFyaWFudHMiLCJzaGFkb3dLZXlVbWJyYU9wYWNpdHkiLCJzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkiLCJzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSIsImNyZWF0ZVNoYWRvdyIsInB4IiwiZm9ybWF0TXMiLCJtaWxsaXNlY29uZHMiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJoZWlnaHQiLCJjb25zdGFudCIsImNyZWF0ZVRyYW5zaXRpb25zIiwiaW5wdXRUcmFuc2l0aW9ucyIsIm1lcmdlZEVhc2luZyIsIm1lcmdlZER1cmF0aW9uIiwiZHVyYXRpb25PcHRpb24iLCJlYXNpbmdPcHRpb24iLCJhbmltYXRlZFByb3AiLCJtaXhpbnNJbnB1dCIsInBhbGV0dGVJbnB1dCIsInRyYW5zaXRpb25zSW5wdXQiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJzeXN0ZW1UaGVtZSIsIm11aVRoZW1lIiwiYXJndW1lbnQiLCJkZWZhdWx0U3hDb25maWciLCJ3YXJuZWRPbmNlIiwiY3JlYXRlTXVpVGhlbWUiLCJnZXRUaGVtZVByb3BzIiwicmVzb2x2ZVByb3BzIiwicmVmbG93IiwiX3N0eWxlJHRyYW5zaXRpb25EdXJhIiwiX3N0eWxlJHRyYW5zaXRpb25UaW1pIiwiZ2V0U3ZnSWNvblV0aWxpdHlDbGFzcyIsInN2Z0ljb25DbGFzc2VzIiwiU3ZnSWNvblJvb3QiLCJfdGhlbWUkdHJhbnNpdGlvbnMiLCJfdGhlbWUkdHJhbnNpdGlvbnMkY3IiLCJfdGhlbWUkdHJhbnNpdGlvbnMyIiwiX3RoZW1lJHR5cG9ncmFwaHkiLCJfdGhlbWUkdHlwb2dyYXBoeSRweFQiLCJfdGhlbWUkdHlwb2dyYXBoeTIiLCJfdGhlbWUkdHlwb2dyYXBoeTIkcHgiLCJfdGhlbWUkdHlwb2dyYXBoeTMiLCJfdGhlbWUkdHlwb2dyYXBoeTMkcHgiLCJfcGFsZXR0ZSRvd25lclN0YXRlJGMiLCJfcGFsZXR0ZTIiLCJfcGFsZXR0ZTMiLCJTdmdJY29uIiwiaHRtbENvbG9yIiwiaW5oZXJpdFZpZXdCb3giLCJ0aXRsZUFjY2VzcyIsInZpZXdCb3giLCJoYXNTdmdBc0NoaWxkIiwibW9yZSIsInBhdGgiLCJkaXNwbGF5TmFtZSIsImRlcHJlY2F0ZWRQcm9wVHlwZSIsInZhbGlkYXRvciIsInJlYXNvbiIsInJlcXVpcmVQcm9wRmFjdG9yeSIsImNvbXBvbmVudE5hbWVJbkVycm9yIiwidW5zdXBwb3J0ZWRQcm9wIiwicHJvcE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInVuc3RhYmxlX0NsYXNzTmFtZUdlbmVyYXRvciIsImdlbmVyYXRvciIsIm11aU5hbWVzIiwiX211aU5hbWUiLCJfZWxlbWVudCR0eXBlIiwiY29udHJvbGxlZCIsImRlZmF1bHRQcm9wIiwidmFsdWVTdGF0ZSIsInNldFZhbHVlIiwic2V0VmFsdWVJZlVuY29udHJvbGxlZCIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSIsInRhZ05hbWUiLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJwcmVwYXJlIiwidGVhcmRvd24iLCJpc0ZvY3VzVmlzaWJsZSIsInRhcmdldCIsIkdsb2JhbFN0eWxlcyIsInRoZW1lSW5wdXQiLCJyZWFjdFByb3BzUmVnZXgiLCJpc1Byb3BWYWxpZCIsInRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCIsImdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMiLCJpc1JlYWwiLCJzaG91bGRGb3J3YXJkUHJvcCIsIm9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCIsImNyZWF0ZVN0eWxlZCIsImJhc2VUYWciLCJ0YXJnZXRDbGFzc05hbWUiLCJkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJzaG91bGRVc2VBcyIsIlN0eWxlZCIsIkZpbmFsVGFnIiwiY2xhc3NJbnRlcnBvbGF0aW9ucyIsImZpbmFsU2hvdWxkRm9yd2FyZFByb3AiLCJuZXh0VGFnIiwibmV4dE9wdGlvbnMiLCJ0YWdzIiwibmV3U3R5bGVkIiwiU3R5bGVkRW5naW5lUHJvdmlkZXIiLCJpbmplY3RGaXJzdCIsImludGVybmFsX3Byb2Nlc3NTdHlsZXMiLCJwcm9jZXNzb3IiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiYWxwaGEiLCJibGVuZCIsImRhcmtlbiIsImRlY29tcG9zZUNvbG9yIiwiZW1waGFzaXplIiwiZ2V0Q29udHJhc3RSYXRpbyIsImdldEx1bWluYW5jZSIsImhleFRvUmdiIiwiaHNsVG9SZ2IiLCJsaWdodGVuIiwicHJpdmF0ZV9zYWZlQWxwaGEiLCJwcml2YXRlX3NhZmVEYXJrZW4iLCJwcml2YXRlX3NhZmVFbXBoYXNpemUiLCJwcml2YXRlX3NhZmVMaWdodGVuIiwicmVjb21wb3NlQ29sb3IiLCJyZ2JUb0hleCIsIl9mb3JtYXRNdWlFcnJvck1lc3NhZ2UyIiwiX2NsYW1wIiwiY2xhbXBXcmFwcGVyIiwibWluIiwibWF4IiwicmUiLCJjb2xvcnMiLCJpbnRUb0hleCIsImludCIsImhleCIsIm1hcmtlciIsImNvbG9yU3BhY2UiLCJjb2xvckNoYW5uZWwiLCJkZWNvbXBvc2VkQ29sb3IiLCJ2YWwiLCJzIiwicmdiIiwiZm9yZWdyb3VuZCIsImx1bUEiLCJsdW1CIiwiY29lZmZpY2llbnQiLCJvdmVybGF5Iiwib3BhY2l0eSIsImdhbW1hIiwiYmxlbmRDaGFubmVsIiwibyIsIm92ZXJsYXlDb2xvciIsIl9leHRlbmRzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMiIsIl9zdHlsZWRFbmdpbmUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9kZWVwbWVyZ2UiLCJfY2FwaXRhbGl6ZSIsIl9nZXREaXNwbGF5TmFtZSIsIl9jcmVhdGVUaGVtZSIsIl9zdHlsZUZ1bmN0aW9uU3giLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJzeXN0ZW1EZWZhdWx0VGhlbWUiLCJsb3dlcmNhc2VGaXJzdExldHRlciIsInJlc29sdmVUaGVtZSIsImRlZmF1bHRPdmVycmlkZXNSZXNvbHZlciIsInByb2Nlc3NTdHlsZUFyZyIsImNhbGxhYmxlU3R5bGUiLCJyZXNvbHZlZFN0eWxlc0FyZyIsInJlc29sdmVkU3R5bGUiLCJpc01hdGNoIiwic3lzdGVtU3giLCJpbnB1dE9wdGlvbnMiLCJjb21wb25lbnRTbG90IiwiaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciIsImlucHV0U2tpcFN4Iiwic2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJza2lwU3giLCJzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiIsImRlZmF1bHRTdHlsZWRSZXNvbHZlciIsInRyYW5zZm9ybVN0eWxlQXJnIiwic3R5bGVzQXJnIiwibXVpU3R5bGVkUmVzb2x2ZXIiLCJzdHlsZUFyZyIsImV4cHJlc3Npb25zIiwidHJhbnNmb3JtZWRTdHlsZUFyZyIsImV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSIsInN0eWxlT3ZlcnJpZGVzIiwicmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyIsInNsb3RLZXkiLCJzbG90U3R5bGUiLCJfdGhlbWUkY29tcG9uZW50cyIsInRoZW1lVmFyaWFudHMiLCJudW1PZkN1c3RvbUZuc0FwcGxpZWQiLCJwbGFjZWhvbGRlcnMiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJicmVha3BvaW50IiwibWVkaWFLZXkiLCJjc3NLZXkiLCJzdHlsZUZ1bmN0aW9uIiwibmV3U3R5bGVGdW5jdGlvbiIsImJhc2UiLCJleHRlbmRlZCIsImNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCIsImJyZWFrcG9pbnRzSW5wdXQiLCJfYnJlYWtwb2ludHNJbnB1dCRrZXkiLCJicmVha3BvaW50U3R5bGVLZXkiLCJyZW1vdmVVbnVzZWRCcmVha3BvaW50cyIsImJyZWFrcG9pbnRLZXlzIiwiYnJlYWtwb2ludE91dHB1dCIsIm1lcmdlQnJlYWtwb2ludHNJbk9yZGVyIiwiZW1wdHlCcmVha3BvaW50cyIsIm1lcmdlZE91dHB1dCIsImNvbXB1dGVCcmVha3BvaW50c0Jhc2UiLCJicmVha3BvaW50VmFsdWVzIiwiYnJlYWtwb2ludHNLZXlzIiwicmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMiLCJjdXN0b21CYXNlIiwia2V5cyIsImFwcGx5U3R5bGVzIiwic29ydEJyZWFrcG9pbnRzVmFsdWVzIiwiYnJlYWtwb2ludHNBc0FycmF5IiwiYnJlYWtwb2ludDEiLCJicmVha3BvaW50MiIsImNyZWF0ZUJyZWFrcG9pbnRzIiwidW5pdCIsInN0ZXAiLCJzb3J0ZWRWYWx1ZXMiLCJ1cCIsImRvd24iLCJiZXR3ZWVuIiwiZW5kSW5kZXgiLCJvbmx5Iiwibm90Iiwia2V5SW5kZXgiLCJjcmVhdGVTcGFjaW5nIiwic3BhY2luZ0lucHV0IiwidHJhbnNmb3JtIiwic3BhY2luZyIsImFyZ3NJbnB1dCIsInNoYXBlSW5wdXQiLCJwcm9wZXJ0aWVzIiwiZGlyZWN0aW9ucyIsImFsaWFzZXMiLCJnZXRDc3NQcm9wZXJ0aWVzIiwiZGlyIiwibWFyZ2luS2V5cyIsInBhZGRpbmdLZXlzIiwic3BhY2luZ0tleXMiLCJjcmVhdGVVbmFyeVVuaXQiLCJ0aGVtZUtleSIsIl9nZXRQYXRoIiwidGhlbWVTcGFjaW5nIiwiY3JlYXRlVW5hcnlTcGFjaW5nIiwiZ2V0VmFsdWUiLCJ0cmFuc2Zvcm1lciIsInRyYW5zZm9ybWVkIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwiY3NzUHJvcGVydGllcyIsImNzc1Byb3BlcnR5IiwicmVzb2x2ZUNzc1Byb3BlcnR5IiwiZ2V0UGF0aCIsImNoZWNrVmFycyIsInRoZW1lTWFwcGluZyIsInByb3BWYWx1ZUZpbmFsIiwidXNlclZhbHVlIiwiY29tcG9zZSIsImhhbmRsZXJzIiwiYm9yZGVyVHJhbnNmb3JtIiwiY3JlYXRlQm9yZGVyU3R5bGUiLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckxlZnRDb2xvciIsIm91dGxpbmUiLCJvdXRsaW5lQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJib3JkZXJzIiwiZ2FwIiwiY29sdW1uR2FwIiwicm93R2FwIiwiZ3JpZENvbHVtbiIsImdyaWRSb3ciLCJncmlkQXV0b0Zsb3ciLCJncmlkQXV0b0NvbHVtbnMiLCJncmlkQXV0b1Jvd3MiLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwiZ3JpZFRlbXBsYXRlUm93cyIsImdyaWRUZW1wbGF0ZUFyZWFzIiwiZ3JpZEFyZWEiLCJncmlkIiwicGFsZXR0ZVRyYW5zZm9ybSIsImJnY29sb3IiLCJzaXppbmdUcmFuc2Zvcm0iLCJ3aWR0aCIsIm1heFdpZHRoIiwiX3Byb3BzJHRoZW1lIiwiX3Byb3BzJHRoZW1lMiIsIm1pbldpZHRoIiwibWF4SGVpZ2h0IiwibWluSGVpZ2h0Iiwic2l6ZVdpZHRoIiwic2l6ZUhlaWdodCIsInNpemluZyIsInNwbGl0UHJvcHMiLCJfcHJvcHMkdGhlbWUkdW5zdGFibGUiLCJjb25maWciLCJpblN4Iiwic3lzdGVtUHJvcHMiLCJmaW5hbFN4Iiwib2JqZWN0c0hhdmVTYW1lS2V5cyIsIm9iamVjdHMiLCJhbGxLZXlzIiwidW5pb24iLCJjYWxsSWZGbiIsIm1heWJlRm4iLCJ1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3giLCJnZXRUaGVtZVZhbHVlIiwiX3RoZW1lJHVuc3RhYmxlX3N4Q29uIiwic3giLCJ0cmF2ZXJzZSIsInN4SW5wdXQiLCJzeE9iamVjdCIsInN0eWxlS2V5IiwiYnJlYWtwb2ludHNWYWx1ZXMiLCJpc09iamVjdEVtcHR5IiwiY29udGV4dFRoZW1lIiwidXNlVGhlbWVXaXRob3V0RGVmYXVsdCIsImRlZmF1bHRHZW5lcmF0b3IiLCJnZW5lcmF0ZSIsImNsYW1wIiwiZ2V0VXRpbGl0eUNsYXNzIiwidXRpbGl0eUNsYXNzIiwiZnVuY3MiLCJ3YWl0IiwiZGVib3VuY2VkIiwibGF0ZXIiLCJpc1BsYWluT2JqZWN0IiwicHJvdG90eXBlIiwiZGVlcENsb25lIiwic291cmNlIiwiZm9ybWF0TXVpRXJyb3JNZXNzYWdlIiwiY29kZSIsInVybCIsImdsb2JhbFN0YXRlQ2xhc3NlcyIsImdsb2JhbFN0YXRlUHJlZml4IiwiZ2xvYmFsU3RhdGVDbGFzcyIsImlzR2xvYmFsU3RhdGUiLCJmbk5hbWVNYXRjaFJlZ2V4IiwiZ2V0RnVuY3Rpb25OYW1lIiwiZ2V0RnVuY3Rpb25Db21wb25lbnROYW1lIiwiZmFsbGJhY2siLCJnZXRXcmFwcGVkTmFtZSIsIm91dGVyVHlwZSIsImlubmVyVHlwZSIsIndyYXBwZXJOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJkb2N1bWVudFdpZHRoIiwibW9kdWxlIiwiZGVmYXVsdFNsb3RQcm9wcyIsInNsb3RQcm9wTmFtZSIsInJlZnMiLCJnbG9iYWxJZCIsInVzZUdsb2JhbElkIiwiZGVmYXVsdElkIiwic2V0RGVmYXVsdElkIiwibWF5YmVSZWFjdFVzZUlkIiwicmVhY3RJZCIsIlVOSU5JVElBTElaRUQiLCJ1c2VMYXp5UmVmIiwiaW5pdCIsImluaXRBcmciLCJFTVBUWSIsInVzZU9uTW91bnQiLCJUaW1lb3V0IiwiX2V4dGVuZHMiLCJBY3Rpb24iLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJpbml0aWFsRW50cmllcyIsImluaXRpYWxJbmRleCIsInY1Q29tcGF0IiwiZW50cmllcyIsImVudHJ5IiwiY3JlYXRlTWVtb3J5TG9jYXRpb24iLCJjbGFtcEluZGV4IiwibGlzdGVuZXIiLCJnZXRDdXJyZW50TG9jYXRpb24iLCJ0byIsImNyZWF0ZUxvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImNyZWF0ZVBhdGgiLCJwYXJzZVBhdGgiLCJuZXh0TG9jYXRpb24iLCJkZWx0YSIsIm5leHRJbmRleCIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiY3JlYXRlQnJvd3NlckxvY2F0aW9uIiwid2luZG93IiwiZ2xvYmFsSGlzdG9yeSIsInBhdGhuYW1lIiwiY3JlYXRlQnJvd3NlckhyZWYiLCJnZXRVcmxCYXNlZEhpc3RvcnkiLCJjcmVhdGVIYXNoSGlzdG9yeSIsImNyZWF0ZUhhc2hMb2NhdGlvbiIsImNyZWF0ZUhhc2hIcmVmIiwiaHJlZiIsImhhc2hJbmRleCIsInZhbGlkYXRlSGFzaExvY2F0aW9uIiwiaW52YXJpYW50IiwibWVzc2FnZSIsImNvbmQiLCJjcmVhdGVLZXkiLCJnZXRIaXN0b3J5U3RhdGUiLCJwYXJzZWRQYXRoIiwic2VhcmNoSW5kZXgiLCJnZXRMb2NhdGlvbiIsInZhbGlkYXRlTG9jYXRpb24iLCJnZXRJbmRleCIsImhhbmRsZVBvcCIsImhpc3RvcnkiLCJwdXNoIiwiaGlzdG9yeVN0YXRlIiwicmVwbGFjZSIsImNyZWF0ZVVSTCIsIlJlc3VsdFR5cGUiLCJpbW11dGFibGVSb3V0ZUtleXMiLCJpc0luZGV4Um91dGUiLCJyb3V0ZSIsImNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMiLCJyb3V0ZXMiLCJtYXBSb3V0ZVByb3BlcnRpZXMiLCJwYXJlbnRQYXRoIiwibWFuaWZlc3QiLCJ0cmVlUGF0aCIsImluZGV4Um91dGUiLCJwYXRoT3JMYXlvdXRSb3V0ZSIsIm1hdGNoUm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoZXMiLCJkZWNvZGVkIiwiZGVjb2RlUGF0aCIsIm1hdGNoUm91dGVCcmFuY2giLCJjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCIsImxvYWRlckRhdGEiLCJwYXJlbnRzTWV0YSIsImZsYXR0ZW5Sb3V0ZSIsInJlbGF0aXZlUGF0aCIsIm1ldGEiLCJqb2luUGF0aHMiLCJyb3V0ZXNNZXRhIiwiY29tcHV0ZVNjb3JlIiwiX3JvdXRlJHBhdGgiLCJleHBsb2RlZCIsImV4cGxvZGVPcHRpb25hbFNlZ21lbnRzIiwic2VnbWVudHMiLCJmaXJzdCIsImlzT3B0aW9uYWwiLCJyZXN0RXhwbG9kZWQiLCJzdWJwYXRoIiwiY29tcGFyZUluZGV4ZXMiLCJwYXJhbVJlIiwiZHluYW1pY1NlZ21lbnRWYWx1ZSIsImluZGV4Um91dGVWYWx1ZSIsImVtcHR5U2VnbWVudFZhbHVlIiwic3RhdGljU2VnbWVudFZhbHVlIiwic3BsYXRQZW5hbHR5IiwiaXNTcGxhdCIsImluaXRpYWxTY29yZSIsInNjb3JlIiwic2VnbWVudCIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJyZW1haW5pbmdQYXRobmFtZSIsIm1hdGNoUGF0aCIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwiZ2VuZXJhdGVQYXRoIiwib3JpZ2luYWxQYXRoIiwicHJlZml4Iiwia2V5TWF0Y2giLCJvcHRpb25hbCIsInBhcmFtIiwibWF0Y2hlciIsImNvbXBpbGVkUGFyYW1zIiwiY29tcGlsZVBhdGgiLCJwYXRobmFtZUJhc2UiLCJjYXB0dXJlR3JvdXBzIiwibWVtbyIsInBhcmFtTmFtZSIsInNwbGF0VmFsdWUiLCJjYXNlU2Vuc2l0aXZlIiwicmVnZXhwU291cmNlIiwic3RhcnRJbmRleCIsIm5leHRDaGFyIiwicmVzb2x2ZVBhdGgiLCJmcm9tUGF0aG5hbWUiLCJ0b1BhdGhuYW1lIiwicmVzb2x2ZVBhdGhuYW1lIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsImdldEludmFsaWRQYXRoRXJyb3IiLCJjaGFyIiwiZmllbGQiLCJkZXN0IiwiZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMiLCJnZXRSZXNvbHZlVG9NYXRjaGVzIiwidjdfcmVsYXRpdmVTcGxhdFBhdGgiLCJwYXRoTWF0Y2hlcyIsInJlc29sdmVUbyIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJsb2NhdGlvblBhdGhuYW1lIiwiaXNQYXRoUmVsYXRpdmUiLCJpc0VtcHR5UGF0aCIsImZyb20iLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJ0b1NlZ21lbnRzIiwiaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIiwiaGFzQ3VycmVudFRyYWlsaW5nU2xhc2giLCJnZXRUb1BhdGhuYW1lIiwicGF0aHMiLCJqc29uIiwiZGF0YSIsInJlc3BvbnNlSW5pdCIsImhlYWRlcnMiLCJBYm9ydGVkRGVmZXJyZWRFcnJvciIsIkRlZmVycmVkRGF0YSIsInJlamVjdCIsIm9uQWJvcnQiLCJwcm9taXNlIiwidW5kZWZpbmVkRXJyb3IiLCJhYm9ydGVkIiwic2V0dGxlZEtleSIsInN1YnNjcmliZXIiLCJzaWduYWwiLCJyZXNvbHZlIiwiX3JlZjMiLCJ1bndyYXBUcmFja2VkUHJvbWlzZSIsImlzVHJhY2tlZFByb21pc2UiLCJkZWZlciIsInJlZGlyZWN0IiwicmVkaXJlY3REb2N1bWVudCIsInJlc3BvbnNlIiwiRXJyb3JSZXNwb25zZUltcGwiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiaW50ZXJuYWwiLCJpc1JvdXRlRXJyb3JSZXNwb25zZSIsInZhbGlkTXV0YXRpb25NZXRob2RzQXJyIiwidmFsaWRNdXRhdGlvbk1ldGhvZHMiLCJ2YWxpZFJlcXVlc3RNZXRob2RzQXJyIiwidmFsaWRSZXF1ZXN0TWV0aG9kcyIsInJlZGlyZWN0U3RhdHVzQ29kZXMiLCJyZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMiLCJJRExFX05BVklHQVRJT04iLCJJRExFX0ZFVENIRVIiLCJJRExFX0JMT0NLRVIiLCJBQlNPTFVURV9VUkxfUkVHRVgiLCJkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzIiwiVFJBTlNJVElPTlNfU1RPUkFHRV9LRVkiLCJjcmVhdGVSb3V0ZXIiLCJyb3V0ZXJXaW5kb3ciLCJpc1NlcnZlciIsImRldGVjdEVycm9yQm91bmRhcnkiLCJkYXRhUm91dGVzIiwiaW5GbGlnaHREYXRhUm91dGVzIiwiZGF0YVN0cmF0ZWd5SW1wbCIsImRlZmF1bHREYXRhU3RyYXRlZ3kiLCJmdXR1cmUiLCJ1bmxpc3Rlbkhpc3RvcnkiLCJzdWJzY3JpYmVycyIsInNhdmVkU2Nyb2xsUG9zaXRpb25zIiwiZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkiLCJnZXRTY3JvbGxQb3NpdGlvbiIsImluaXRpYWxTY3JvbGxSZXN0b3JlZCIsImluaXRpYWxNYXRjaGVzIiwiaW5pdGlhbEVycm9ycyIsImdldEludGVybmFsUm91dGVyRXJyb3IiLCJnZXRTaG9ydENpcmN1aXRNYXRjaGVzIiwiaW5pdGlhbGl6ZWQiLCJoYXNMYXp5Um91dGVzIiwiaGFzTG9hZGVycyIsImVycm9ycyIsImlzUm91dGVJbml0aWFsaXplZCIsInJvdXRlciIsInBlbmRpbmdBY3Rpb24iLCJwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0IiwicGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIiwicGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCIsImFwcGxpZWRWaWV3VHJhbnNpdGlvbnMiLCJyZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIiLCJpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24iLCJpc1JldmFsaWRhdGlvblJlcXVpcmVkIiwiY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMiLCJjYW5jZWxsZWRGZXRjaGVyTG9hZHMiLCJmZXRjaENvbnRyb2xsZXJzIiwiaW5jcmVtZW50aW5nTG9hZElkIiwicGVuZGluZ05hdmlnYXRpb25Mb2FkSWQiLCJmZXRjaFJlbG9hZElkcyIsImZldGNoUmVkaXJlY3RJZHMiLCJmZXRjaExvYWRNYXRjaGVzIiwiYWN0aXZlRmV0Y2hlcnMiLCJkZWxldGVkRmV0Y2hlcnMiLCJhY3RpdmVEZWZlcnJlZHMiLCJibG9ja2VyRnVuY3Rpb25zIiwiaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUiLCJpbml0aWFsaXplIiwiaGlzdG9yeUFjdGlvbiIsImJsb2NrZXJLZXkiLCJzaG91bGRCbG9ja05hdmlnYXRpb24iLCJ1cGRhdGVCbG9ja2VyIiwiYmxvY2tlcnMiLCJ1cGRhdGVTdGF0ZSIsInN0YXJ0TmF2aWdhdGlvbiIsInJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMiLCJfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyIsInBlcnNpc3RBcHBsaWVkVHJhbnNpdGlvbnMiLCJkaXNwb3NlIiwiZGVsZXRlRmV0Y2hlciIsImRlbGV0ZUJsb2NrZXIiLCJzdWJzY3JpYmUiLCJuZXdTdGF0ZSIsIm9wdHMiLCJjb21wbGV0ZWRGZXRjaGVycyIsImRlbGV0ZWRGZXRjaGVyc0tleXMiLCJmZXRjaGVyIiwiY29tcGxldGVOYXZpZ2F0aW9uIiwiX3RlbXAiLCJfbG9jYXRpb24kc3RhdGUiLCJfbG9jYXRpb24kc3RhdGUyIiwiZmx1c2hTeW5jIiwiaXNBY3Rpb25SZWxvYWQiLCJpc011dGF0aW9uTWV0aG9kIiwiYWN0aW9uRGF0YSIsIm1lcmdlTG9hZGVyRGF0YSIsInByZXZlbnRTY3JvbGxSZXNldCIsInZpZXdUcmFuc2l0aW9uT3B0cyIsInByaW9yUGF0aHMiLCJ0b1BhdGhzIiwiZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbiIsIm5hdmlnYXRlIiwibm9ybWFsaXplZFBhdGgiLCJub3JtYWxpemVUbyIsInN1Ym1pc3Npb24iLCJub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMiLCJjdXJyZW50TG9jYXRpb24iLCJ1c2VyUmVwbGFjZSIsInJldmFsaWRhdGUiLCJpbnRlcnJ1cHRBY3RpdmVMb2FkcyIsInNhdmVTY3JvbGxQb3NpdGlvbiIsInJvdXRlc1RvVXNlIiwibG9hZGluZ05hdmlnYXRpb24iLCJub3RGb3VuZE1hdGNoZXMiLCJjYW5jZWxBY3RpdmVEZWZlcnJlZHMiLCJpc0hhc2hDaGFuZ2VPbmx5IiwicmVxdWVzdCIsImNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0IiwicGVuZGluZ0FjdGlvblJlc3VsdCIsImZpbmROZWFyZXN0Qm91bmRhcnkiLCJhY3Rpb25SZXN1bHQiLCJoYW5kbGVBY3Rpb24iLCJnZXRMb2FkaW5nTmF2aWdhdGlvbiIsInNob3J0Q2lyY3VpdGVkIiwiaGFuZGxlTG9hZGVycyIsImdldEFjdGlvbkRhdGFGb3JDb21taXQiLCJuYXZpZ2F0aW9uIiwiZ2V0U3VibWl0dGluZ05hdmlnYXRpb24iLCJhY3Rpb25NYXRjaCIsImdldFRhcmdldE1hdGNoIiwiY2FsbERhdGFTdHJhdGVneSIsImlzUmVkaXJlY3RSZXN1bHQiLCJub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uIiwic3RhcnRSZWRpcmVjdE5hdmlnYXRpb24iLCJpc0RlZmVycmVkUmVzdWx0IiwiaXNFcnJvclJlc3VsdCIsImJvdW5kYXJ5TWF0Y2giLCJvdmVycmlkZU5hdmlnYXRpb24iLCJmZXRjaGVyU3VibWlzc2lvbiIsImluaXRpYWxIeWRyYXRpb24iLCJhY3RpdmVTdWJtaXNzaW9uIiwiZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uIiwibWF0Y2hlc1RvTG9hZCIsInJldmFsaWRhdGluZ0ZldGNoZXJzIiwiZ2V0TWF0Y2hlc1RvTG9hZCIsInJvdXRlSWQiLCJ1cGRhdGVkRmV0Y2hlcnMiLCJtYXJrRmV0Y2hSZWRpcmVjdHNEb25lIiwicmYiLCJyZXZhbGlkYXRpbmdGZXRjaGVyIiwiZ2V0TG9hZGluZ0ZldGNoZXIiLCJhYm9ydEZldGNoZXIiLCJhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMiLCJsb2FkZXJSZXN1bHRzIiwiZmV0Y2hlclJlc3VsdHMiLCJjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEiLCJmaW5kUmVkaXJlY3QiLCJmZXRjaGVyS2V5IiwicHJvY2Vzc0xvYWRlckRhdGEiLCJkZWZlcnJlZERhdGEiLCJkaWRBYm9ydEZldGNoTG9hZHMiLCJhYm9ydFN0YWxlRmV0Y2hMb2FkcyIsInNob3VsZFVwZGF0ZUZldGNoZXJzIiwiZmV0Y2giLCJzZXRGZXRjaGVyRXJyb3IiLCJoYW5kbGVGZXRjaGVyQWN0aW9uIiwiaGFuZGxlRmV0Y2hlckxvYWRlciIsInJlcXVlc3RNYXRjaGVzIiwiZXhpc3RpbmdGZXRjaGVyIiwidXBkYXRlRmV0Y2hlclN0YXRlIiwiZ2V0U3VibWl0dGluZ0ZldGNoZXIiLCJhYm9ydENvbnRyb2xsZXIiLCJmZXRjaFJlcXVlc3QiLCJvcmlnaW5hdGluZ0xvYWRJZCIsImdldERvbmVGZXRjaGVyIiwicmV2YWxpZGF0aW9uUmVxdWVzdCIsImxvYWRJZCIsImxvYWRGZXRjaGVyIiwic3RhbGVLZXkiLCJkb25lRmV0Y2hlciIsInJlc29sdmVEZWZlcnJlZERhdGEiLCJfdGVtcDIiLCJyZWRpcmVjdExvY2F0aW9uIiwiaXNEb2N1bWVudFJlbG9hZCIsInJlZGlyZWN0SGlzdG9yeUFjdGlvbiIsImZvcm1NZXRob2QiLCJmb3JtQWN0aW9uIiwiZm9ybUVuY1R5cGUiLCJyZXN1bHRzIiwiY2FsbERhdGFTdHJhdGVneUltcGwiLCJpc1JlZGlyZWN0SGFuZGxlclJlc3VsdCIsIm5vcm1hbGl6ZVJlbGF0aXZlUm91dGluZ1JlZGlyZWN0UmVzcG9uc2UiLCJjb252ZXJ0SGFuZGxlclJlc3VsdFRvRGF0YVJlc3VsdCIsImN1cnJlbnRNYXRjaGVzIiwiZmV0Y2hlcnNUb0xvYWQiLCJmZXRjaGVyUmVxdWVzdCIsInJlc29sdmVEZWZlcnJlZFJlc3VsdHMiLCJnZXRGZXRjaGVyIiwiZGVsZXRlRmV0Y2hlckFuZFVwZGF0ZVN0YXRlIiwiY29udHJvbGxlciIsIm1hcmtGZXRjaGVyc0RvbmUiLCJkb25lS2V5cyIsImxhbmRlZElkIiwieWVldGVkS2V5cyIsImdldEJsb2NrZXIiLCJibG9ja2VyIiwibmV3QmxvY2tlciIsIl9yZWY0IiwiYmxvY2tlckZ1bmN0aW9uIiwicHJlZGljYXRlIiwiY2FuY2VsbGVkUm91dGVJZHMiLCJkZmQiLCJlbmFibGVTY3JvbGxSZXN0b3JhdGlvbiIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9uIiwiZ2V0S2V5IiwiZ2V0U2Nyb2xsS2V5IiwiX2ludGVybmFsU2V0Um91dGVzIiwibmV3Um91dGVzIiwiVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCIsImNyZWF0ZVN0YXRpY0hhbmRsZXIiLCJxdWVyeSIsIl90ZW1wMyIsInJlcXVlc3RDb250ZXh0Iiwic2tpcExvYWRlckVycm9yQnViYmxpbmciLCJ1bnN0YWJsZV9kYXRhU3RyYXRlZ3kiLCJtZXRob2QiLCJpc1ZhbGlkTWV0aG9kIiwibWV0aG9kTm90QWxsb3dlZE1hdGNoZXMiLCJxdWVyeUltcGwiLCJpc1Jlc3BvbnNlIiwicXVlcnlSb3V0ZSIsIl90ZW1wNCIsIl9yZXN1bHQkYWN0aXZlRGVmZXJyZSIsInJvdXRlTWF0Y2giLCJzdWJtaXQiLCJsb2FkUm91dGVEYXRhIiwiaXNIYW5kbGVyUmVzdWx0IiwiaXNSZWRpcmVjdFJlc3BvbnNlIiwiaXNSb3V0ZVJlcXVlc3QiLCJ0aHJvd1N0YXRpY0hhbmRsZXJBYm9ydGVkRXJyb3IiLCJsb2FkZXJSZXF1ZXN0IiwiZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkiLCJwcm9jZXNzUm91dGVMb2FkZXJEYXRhIiwiZXhlY3V0ZWRMb2FkZXJzIiwiZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvciIsImlzU3VibWlzc2lvbk5hdmlnYXRpb24iLCJwcmVwZW5kQmFzZW5hbWUiLCJmcm9tUm91dGVJZCIsInJlbGF0aXZlIiwiY29udGV4dHVhbE1hdGNoZXMiLCJhY3RpdmVSb3V0ZU1hdGNoIiwiaGFzTmFrZWRJbmRleFF1ZXJ5Iiwibm9ybWFsaXplRm9ybU1ldGhvZCIsImlzRmV0Y2hlciIsImdldEludmFsaWRCb2R5RXJyb3IiLCJyYXdGb3JtTWV0aG9kIiwic3RyaXBIYXNoRnJvbVBhdGgiLCJfcmVmNSIsInNlYXJjaFBhcmFtcyIsImZvcm1EYXRhIiwiY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMiLCJjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YSIsImJvdW5kYXJ5SWQiLCJib3VuZGFyeU1hdGNoZXMiLCJpc0luaXRpYWxMb2FkIiwic2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uIiwiY3VycmVudFVybCIsIm5leHRVcmwiLCJhY3Rpb25TdGF0dXMiLCJzaG91bGRTa2lwUmV2YWxpZGF0aW9uIiwibmF2aWdhdGlvbk1hdGNoZXMiLCJpc05ld0xvYWRlciIsImN1cnJlbnRSb3V0ZU1hdGNoIiwibmV4dFJvdXRlTWF0Y2giLCJzaG91bGRSZXZhbGlkYXRlTG9hZGVyIiwiaXNOZXdSb3V0ZUluc3RhbmNlIiwiZmV0Y2hlck1hdGNoZXMiLCJmZXRjaGVyTWF0Y2giLCJzaG91bGRSZXZhbGlkYXRlIiwiY3VycmVudExvYWRlckRhdGEiLCJjdXJyZW50TWF0Y2giLCJpc05ldyIsImlzTWlzc2luZ0RhdGEiLCJjdXJyZW50UGF0aCIsImxvYWRlck1hdGNoIiwicm91dGVDaG9pY2UiLCJsb2FkTGF6eVJvdXRlTW9kdWxlIiwibGF6eVJvdXRlIiwicm91dGVUb1VwZGF0ZSIsInJvdXRlVXBkYXRlcyIsImxhenlSb3V0ZVByb3BlcnR5IiwiaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkIiwicm91dGVJZHNUb0xvYWQiLCJsb2FkZWRNYXRjaGVzIiwic2hvdWxkTG9hZCIsImhhbmRsZXJPdmVycmlkZSIsImNhbGxMb2FkZXJPckFjdGlvbiIsInN0YXRpY0NvbnRleHQiLCJvblJlamVjdCIsInJ1bkhhbmRsZXIiLCJhYm9ydFByb21pc2UiLCJhY3R1YWxIYW5kbGVyIiwiY3R4IiwiaGFuZGxlclByb21pc2UiLCJoYW5kbGVyRXJyb3IiLCJoYW5kbGVyUmVzdWx0IiwiY29udGVudFR5cGUiLCJpc0RlZmVycmVkRGF0YSIsIl9yZXN1bHQkaW5pdCIsIl9yZXN1bHQkaW5pdDIiLCJ0cmltbWVkTWF0Y2hlcyIsIm5vcm1hbGl6ZWRMb2NhdGlvbiIsImlzU2FtZUJhc2VuYW1lIiwic3RhdHVzQ29kZSIsImZvdW5kRXJyb3IiLCJsb2FkZXJIZWFkZXJzIiwicGVuZGluZ0Vycm9yIiwibmV3TG9hZGVyRGF0YSIsIm1lcmdlZExvYWRlckRhdGEiLCJfdGVtcDUiLCJlcnJvck1lc3NhZ2UiLCJkZWZlcnJlZCIsInNpZ25hbHMiLCJpc1JldmFsaWRhdGluZ0xvYWRlciIsInVud3JhcCIsIl93aW5kb3ciLCJ0cmFuc2l0aW9ucyIsInNlc3Npb25Qb3NpdGlvbnMiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsIktOT1dOX1NUQVRJQ1MiLCJGT1JXQVJEX1JFRl9TVEFUSUNTIiwiTUVNT19TVEFUSUNTIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJnIiwidyIsIkEiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImRlZmF1bHRNZXRob2QiLCJkZWZhdWx0RW5jVHlwZSIsImlzSHRtbEVsZW1lbnQiLCJpc0J1dHRvbkVsZW1lbnQiLCJpc0Zvcm1FbGVtZW50IiwiaXNJbnB1dEVsZW1lbnQiLCJpc01vZGlmaWVkRXZlbnQiLCJzaG91bGRQcm9jZXNzTGlua0NsaWNrIiwiY3JlYXRlU2VhcmNoUGFyYW1zIiwiZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24iLCJsb2NhdGlvblNlYXJjaCIsImRlZmF1bHRTZWFyY2hQYXJhbXMiLCJfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciIsImlzRm9ybURhdGFTdWJtaXR0ZXJTdXBwb3J0ZWQiLCJzdXBwb3J0ZWRGb3JtRW5jVHlwZXMiLCJnZXRGb3JtRW5jVHlwZSIsImVuY1R5cGUiLCJnZXRGb3JtU3VibWlzc2lvbkluZm8iLCJib2R5IiwiYXR0ciIsImZvcm0iLCJSRUFDVF9ST1VURVJfVkVSU0lPTiIsImNyZWF0ZUJyb3dzZXJSb3V0ZXIiLCJwYXJzZUh5ZHJhdGlvbkRhdGEiLCJjcmVhdGVIYXNoUm91dGVyIiwiZGVzZXJpYWxpemVFcnJvcnMiLCJFcnJvckNvbnN0cnVjdG9yIiwiVmlld1RyYW5zaXRpb25Db250ZXh0IiwiRmV0Y2hlcnNDb250ZXh0Iiwic3RhcnRUcmFuc2l0aW9uSW1wbCIsImZsdXNoU3luY0ltcGwiLCJ1c2VJZEltcGwiLCJzdGFydFRyYW5zaXRpb25TYWZlIiwiZmx1c2hTeW5jU2FmZSIsIkRlZmVycmVkIiwiUm91dGVyUHJvdmlkZXIiLCJmYWxsYmFja0VsZW1lbnQiLCJzZXRTdGF0ZUltcGwiLCJwZW5kaW5nU3RhdGUiLCJzZXRQZW5kaW5nU3RhdGUiLCJ2dENvbnRleHQiLCJzZXRWdENvbnRleHQiLCJyZW5kZXJEZmQiLCJzZXRSZW5kZXJEZmQiLCJ0cmFuc2l0aW9uIiwic2V0VHJhbnNpdGlvbiIsImludGVycnVwdGlvbiIsInNldEludGVycnVwdGlvbiIsImZldGNoZXJEYXRhIiwidjdfc3RhcnRUcmFuc2l0aW9uIiwib3B0SW5TdGFydFRyYW5zaXRpb24iLCJzZXRTdGF0ZSIsImlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSIsInJlbmRlclByb21pc2UiLCJuYXZpZ2F0b3IiLCJkYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXMiLCJCcm93c2VyUm91dGVyIiwiaGlzdG9yeVJlZiIsIkhhc2hSb3V0ZXIiLCJIaXN0b3J5Um91dGVyIiwiX3JlZjYiLCJMaW5rIiwiTmF2TGluayIsIkZvcm0iLCJTY3JvbGxSZXN0b3JhdGlvbiIsIl9yZWYxMCIsInN0b3JhZ2VLZXkiLCJ1c2VTY3JvbGxSZXN0b3JhdGlvbiIsIkRhdGFSb3V0ZXJIb29rIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsImdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IiLCJob29rTmFtZSIsInVzZURhdGFSb3V0ZXJDb250ZXh0IiwidXNlRGF0YVJvdXRlclN0YXRlIiwidXNlTGlua0NsaWNrSGFuZGxlciIsInJlcGxhY2VQcm9wIiwidW5zdGFibGVfdmlld1RyYW5zaXRpb24iLCJ1c2VTZWFyY2hQYXJhbXMiLCJkZWZhdWx0SW5pdCIsImRlZmF1bHRTZWFyY2hQYXJhbXNSZWYiLCJoYXNTZXRTZWFyY2hQYXJhbXNSZWYiLCJzZXRTZWFyY2hQYXJhbXMiLCJuZXh0SW5pdCIsIm5hdmlnYXRlT3B0aW9ucyIsIm5ld1NlYXJjaFBhcmFtcyIsInZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24iLCJmZXRjaGVySWQiLCJnZXRVbmlxdWVGZXRjaGVySWQiLCJ1c2VTdWJtaXQiLCJjdXJyZW50Um91dGVJZCIsInVzZUZvcm1BY3Rpb24iLCJyb3V0ZUNvbnRleHQiLCJ1c2VGZXRjaGVyIiwiX3JvdXRlJG1hdGNoZXMiLCJkZWZhdWx0S2V5Iiwic2V0RmV0Y2hlcktleSIsImxvYWQiLCJzdWJtaXRJbXBsIiwiRmV0Y2hlckZvcm0iLCJ1c2VGZXRjaGVycyIsIl9yZWYxMSIsIlNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSIsInJlc3RvcmVTY3JvbGxQb3NpdGlvbiIsInVzZVBhZ2VIaWRlIiwiZ2V0S2V5V2l0aG91dEJhc2VuYW1lIiwiZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uIiwidXNlQmVmb3JlVW5sb2FkIiwiY2FwdHVyZSIsInVzZVByb21wdCIsIl9yZWYxMiIsIndoZW4iLCJ1c2VWaWV3VHJhbnNpdGlvblN0YXRlIiwibmV4dFBhdGgiLCJEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJBd2FpdENvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIlJvdXRlRXJyb3JDb250ZXh0IiwidXNlSHJlZiIsInVzZUluUm91dGVyQ29udGV4dCIsInVzZVJlc29sdmVkUGF0aCIsImpvaW5lZFBhdGhuYW1lIiwidXNlTG9jYXRpb24iLCJ1c2VOYXZpZ2F0aW9uVHlwZSIsInVzZU1hdGNoIiwibmF2aWdhdGVFZmZlY3RXYXJuaW5nIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInVzZU5hdmlnYXRlIiwiaXNEYXRhUm91dGUiLCJ1c2VOYXZpZ2F0ZVN0YWJsZSIsInVzZU5hdmlnYXRlVW5zdGFibGUiLCJyb3V0ZVBhdGhuYW1lc0pzb24iLCJhY3RpdmVSZWYiLCJPdXRsZXRDb250ZXh0IiwidXNlT3V0bGV0Q29udGV4dCIsInVzZU91dGxldCIsIm91dGxldCIsInVzZVBhcmFtcyIsInVzZVJvdXRlcyIsInVzZVJvdXRlc0ltcGwiLCJkYXRhUm91dGVyU3RhdGUiLCJwYXJlbnRNYXRjaGVzIiwicGFyZW50UGFyYW1zIiwicGFyZW50UGF0aG5hbWUiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJwYXJlbnRSb3V0ZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInBhcmVudFNlZ21lbnRzIiwicmVuZGVyZWRNYXRjaGVzIiwiX3JlbmRlck1hdGNoZXMiLCJEZWZhdWx0RXJyb3JDb21wb25lbnQiLCJ1c2VSb3V0ZUVycm9yIiwic3RhY2siLCJsaWdodGdyZXkiLCJwcmVTdHlsZXMiLCJjb2RlU3R5bGVzIiwiZGVmYXVsdEVycm9yRWxlbWVudCIsIlJlbmRlckVycm9yQm91bmRhcnkiLCJlcnJvckluZm8iLCJSZW5kZXJlZFJvdXRlIiwiX2RhdGFSb3V0ZXJTdGF0ZTIiLCJfZGF0YVJvdXRlclN0YXRlIiwiZXJyb3JJbmRleCIsInJlbmRlckZhbGxiYWNrIiwiZmFsbGJhY2tJbmRleCIsIm5lZWRzVG9SdW5Mb2FkZXIiLCJzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2siLCJlcnJvckVsZW1lbnQiLCJoeWRyYXRlRmFsbGJhY2tFbGVtZW50Iiwid2FybmluZ09uY2UiLCJnZXRDaGlsZHJlbiIsInVzZVJvdXRlQ29udGV4dCIsInVzZUN1cnJlbnRSb3V0ZUlkIiwidGhpc1JvdXRlIiwidXNlUm91dGVJZCIsInVzZU5hdmlnYXRpb24iLCJ1c2VSZXZhbGlkYXRvciIsInVzZU1hdGNoZXMiLCJ1c2VMb2FkZXJEYXRhIiwidXNlUm91dGVMb2FkZXJEYXRhIiwidXNlQWN0aW9uRGF0YSIsIl9zdGF0ZSRlcnJvcnMiLCJ1c2VBc3luY1ZhbHVlIiwidXNlQXN5bmNFcnJvciIsImJsb2NrZXJJZCIsInVzZUJsb2NrZXIiLCJzaG91bGRCbG9jayIsInNldEJsb2NrZXJLZXkiLCJhbHJlYWR5V2FybmVkIiwiUm91dGVyIiwiTWVtb3J5Um91dGVyIiwiTmF2aWdhdGUiLCJpc1N0YXRpYyIsImpzb25QYXRoIiwiT3V0bGV0IiwiUm91dGUiLCJfcHJvcHMiLCJiYXNlbmFtZVByb3AiLCJsb2NhdGlvblByb3AiLCJuYXZpZ2F0aW9uVHlwZSIsInN0YXRpY1Byb3AiLCJuYXZpZ2F0aW9uQ29udGV4dCIsImxvY2F0aW9uQ29udGV4dCIsInRyYWlsaW5nUGF0aG5hbWUiLCJSb3V0ZXMiLCJjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4iLCJBd2FpdCIsIl9yZWY3IiwiQXdhaXRFcnJvckJvdW5kYXJ5IiwiUmVzb2x2ZUF3YWl0IiwiQXdhaXRSZW5kZXJTdGF0dXMiLCJuZXZlclNldHRsZWRQcm9taXNlIiwicmVuZGVyRXJyb3IiLCJfcmVmOCIsInRvUmVuZGVyIiwicmVuZGVyTWF0Y2hlcyIsInVwZGF0ZXMiLCJjcmVhdGVNZW1vcnlSb3V0ZXIiLCJmb3JjZVJlZmxvdyIsIlVOTU9VTlRFRCIsIkVYSVRFRCIsIkVOVEVSSU5HIiwiRU5URVJFRCIsIkVYSVRJTkciLCJUcmFuc2l0aW9uIiwicGFyZW50R3JvdXAiLCJpbml0aWFsU3RhdHVzIiwicHJldlN0YXRlIiwibmV4dEluIiwicHJldlByb3BzIiwibmV4dFN0YXR1cyIsImV4aXQiLCJlbnRlciIsIm1vdW50aW5nIiwiX3RoaXMyIiwiYXBwZWFyaW5nIiwibWF5YmVOb2RlIiwibWF5YmVBcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsIl90aGlzMyIsIm5leHRTdGF0ZSIsIl90aGlzNCIsImFjdGl2ZSIsImRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIiLCJtYXliZU5leHRDYWxsYmFjayIsIl9pbiIsIl9tb3VudE9uRW50ZXIiLCJfdW5tb3VudE9uRXhpdCIsIl9hcHBlYXIiLCJfZW50ZXIiLCJfZXhpdCIsIl90aW1lb3V0IiwiX2FkZEVuZExpc3RlbmVyIiwiX29uRW50ZXIiLCJfb25FbnRlcmluZyIsIl9vbkVudGVyZWQiLCJfb25FeGl0IiwiX29uRXhpdGluZyIsIl9vbkV4aXRlZCIsIl9ub2RlUmVmIiwibm9vcCIsImFwcGVuZENsYXNzIiwicGFyc2VWYWx1ZSIsIm5ld0NsYXNzIiwiX3NldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJiaW5kIiwidGhpc0FyZyIsImtpbmRPZiIsInRoaW5nIiwia2luZE9mVGVzdCIsInR5cGVPZlRlc3QiLCJpc0FycmF5IiwiaXNVbmRlZmluZWQiLCJpc0J1ZmZlciIsImlzRnVuY3Rpb24iLCJpc0FycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNPYmplY3QiLCJpc0Jvb2xlYW4iLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0ZpbGVMaXN0IiwiaXNTdHJlYW0iLCJpc0Zvcm1EYXRhIiwia2luZCIsImlzVVJMU2VhcmNoUGFyYW1zIiwiZm9yRWFjaCIsImFsbE93bktleXMiLCJmaW5kS2V5IiwiX2dsb2JhbCIsImlzQ29udGV4dERlZmluZWQiLCJjYXNlbGVzcyIsImFzc2lnblZhbHVlIiwidGFyZ2V0S2V5IiwiZXh0ZW5kIiwic3RyaXBCT00iLCJjb250ZW50IiwiaW5oZXJpdHMiLCJjb25zdHJ1Y3RvciIsInN1cGVyQ29uc3RydWN0b3IiLCJkZXNjcmlwdG9ycyIsInRvRmxhdE9iamVjdCIsInNvdXJjZU9iaiIsImRlc3RPYmoiLCJmaWx0ZXIiLCJwcm9wRmlsdGVyIiwibWVyZ2VkIiwiZW5kc1dpdGgiLCJzZWFyY2hTdHJpbmciLCJsYXN0SW5kZXgiLCJ0b0FycmF5IiwiYXJyIiwiaXNUeXBlZEFycmF5IiwiVHlwZWRBcnJheSIsImZvckVhY2hFbnRyeSIsIml0ZXJhdG9yIiwicGFpciIsIm1hdGNoQWxsIiwicmVnRXhwIiwiaXNIVE1MRm9ybSIsInRvQ2FtZWxDYXNlIiwiaGFzT3duUHJvcGVydHkiLCJpc1JlZ0V4cCIsInJlZHVjZURlc2NyaXB0b3JzIiwicmVkdWNlciIsInJlZHVjZWREZXNjcmlwdG9ycyIsInJldCIsImZyZWV6ZU1ldGhvZHMiLCJ0b09iamVjdFNldCIsImFycmF5T3JTdHJpbmciLCJkZWZpbmUiLCJ0b0Zpbml0ZU51bWJlciIsIkFMUEhBIiwiRElHSVQiLCJBTFBIQUJFVCIsImdlbmVyYXRlU3RyaW5nIiwiYWxwaGFiZXQiLCJpc1NwZWNDb21wbGlhbnRGb3JtIiwidG9KU09OT2JqZWN0IiwidmlzaXQiLCJyZWR1Y2VkVmFsdWUiLCJpc0FzeW5jRm4iLCJBeGlvc0Vycm9yIiwidXRpbHMiLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJpc1Zpc2l0YWJsZSIsInJlbW92ZUJyYWNrZXRzIiwicmVuZGVyS2V5IiwiZG90cyIsImlzRmxhdEFycmF5IiwicHJlZGljYXRlcyIsInRvRm9ybURhdGEiLCJvcHRpb24iLCJtZXRhVG9rZW5zIiwidmlzaXRvciIsImRlZmF1bHRWaXNpdG9yIiwiaW5kZXhlcyIsInVzZUJsb2IiLCJjb252ZXJ0VmFsdWUiLCJleHBvc2VkSGVscGVycyIsImJ1aWxkIiwiZW5jb2RlIiwiY2hhck1hcCIsIkF4aW9zVVJMU2VhcmNoUGFyYW1zIiwiZW5jb2RlciIsIl9lbmNvZGUiLCJidWlsZFVSTCIsInNlcmlhbGl6ZUZuIiwic2VyaWFsaXplZFBhcmFtcyIsImhhc2htYXJrSW5kZXgiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsImhhc0Jyb3dzZXJFbnYiLCJoYXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJwcm9kdWN0IiwiaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwidG9VUkxFbmNvZGVkRm9ybSIsInBsYXRmb3JtIiwiaGVscGVycyIsInBhcnNlUHJvcFBhdGgiLCJhcnJheVRvT2JqZWN0IiwiZm9ybURhdGFUb0pTT04iLCJidWlsZFBhdGgiLCJpc051bWVyaWNLZXkiLCJpc0xhc3QiLCJzdHJpbmdpZnlTYWZlbHkiLCJyYXdWYWx1ZSIsInBhcnNlciIsImRlZmF1bHRzIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwiX0Zvcm1EYXRhIiwidHJhbnNpdGlvbmFsIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJKU09OUmVxdWVzdGVkIiwic3RyaWN0SlNPTlBhcnNpbmciLCJpZ25vcmVEdXBsaWNhdGVPZiIsInJhd0hlYWRlcnMiLCIkaW50ZXJuYWxzIiwibm9ybWFsaXplSGVhZGVyIiwiaGVhZGVyIiwibm9ybWFsaXplVmFsdWUiLCJwYXJzZVRva2VucyIsInRva2VucyIsInRva2Vuc1JFIiwiaXNWYWxpZEhlYWRlck5hbWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiZm9ybWF0SGVhZGVyIiwiYnVpbGRBY2Nlc3NvcnMiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJwYXJzZUhlYWRlcnMiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJjb21wdXRlZCIsImFjY2Vzc29ycyIsImRlZmluZUFjY2Vzc29yIiwibWFwcGVkIiwiaGVhZGVyVmFsdWUiLCJ0cmFuc2Zvcm1EYXRhIiwiZm5zIiwiaXNDYW5jZWwiLCJDYW5jZWxlZEVycm9yIiwic2V0dGxlIiwidmFsaWRhdGVTdGF0dXMiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwiYmFzZVVSTCIsInJlbGF0aXZlVVJMIiwiYnVpbGRGdWxsUGF0aCIsInJlcXVlc3RlZFVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJyZXF1ZXN0VVJMIiwicGFyc2VQcm90b2NvbCIsInNwZWVkb21ldGVyIiwic2FtcGxlc0NvdW50IiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwiaGVhZCIsInRhaWwiLCJmaXJzdFNhbXBsZVRTIiwiY2h1bmtMZW5ndGgiLCJub3ciLCJzdGFydGVkQXQiLCJieXRlc0NvdW50IiwicGFzc2VkIiwicHJvZ3Jlc3NFdmVudFJlZHVjZXIiLCJpc0Rvd25sb2FkU3RyZWFtIiwiYnl0ZXNOb3RpZmllZCIsIl9zcGVlZG9tZXRlciIsImxvYWRlZCIsInRvdGFsIiwicHJvZ3Jlc3NCeXRlcyIsInJhdGUiLCJpblJhbmdlIiwia25vd25BZGFwdGVycyIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJ3aXRoWFNSRlRva2VuIiwib25DYW5jZWxlZCIsImRvbmUiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZnVsbFBhdGgiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJlcnIiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiaXNVUkxTYW1lT3JpZ2luIiwieHNyZlZhbHVlIiwiY29va2llcyIsImNhbmNlbCIsInByb3RvY29sIiwicmVuZGVyUmVhc29uIiwiaXNSZXNvbHZlZEhhbmRsZSIsImFkYXB0ZXIiLCJhZGFwdGVycyIsIm5hbWVPckFkYXB0ZXIiLCJyZWplY3RlZFJlYXNvbnMiLCJyZWFzb25zIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsImRpc3BhdGNoUmVxdWVzdCIsImhlYWRlcnNUb09iamVjdCIsIm1lcmdlQ29uZmlnIiwiY29uZmlnMSIsImNvbmZpZzIiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwiY29uZmlnVmFsdWUiLCJWRVJTSU9OIiwidmFsaWRhdG9ycyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZlcnNpb24iLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsImFzc2VydE9wdGlvbnMiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiY29uZmlnT3JVcmwiLCJkdW1teSIsInBhcmFtc1NlcmlhbGl6ZXIiLCJjb250ZXh0SGVhZGVycyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJjaGFpbiIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJzcHJlYWQiLCJpc0F4aW9zRXJyb3IiLCJwYXlsb2FkIiwiSHR0cFN0YXR1c0NvZGUiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsInByb21pc2VzIl0sInNvdXJjZVJvb3QiOiIifQ==