/*! For license information please see 460.b0f8a858.js.LICENSE.txt */
(self.webpackChunkfrontend_util=self.webpackChunkfrontend_util||[]).push([[460],{487:(e,n,t)=>{"use strict";var r=t(4039);n.Z=void 0;var o=r(t(6934)),i=t(1527),a=(0,o.default)((0,i.jsx)("path",{d:"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"}),"Delete");n.Z=a},7743:(e,n,t)=>{"use strict";var r=t(4039);n.Z=void 0;var o=r(t(6934)),i=t(1527),a=(0,o.default)((0,i.jsx)("path",{d:"M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z"}),"Inbox");n.Z=a},6934:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),Object.defineProperty(n,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=t(6112)},6946:(e,n,t)=>{"use strict";t.d(n,{Z:()=>C});var r=t(4529),o=t(7366),i=t(959),a=t(5924),s=t(7605);function l(e,n){const t=(0,s.Z)({},n);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))t[r]=(0,s.Z)({},e[r],t[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const o=e[r]||{},i=n[r];t[r]={},i&&Object.keys(i)?o&&Object.keys(o)?(t[r]=(0,s.Z)({},i),Object.keys(o).forEach((e=>{t[r][e]=l(o[e],i[e])}))):t[r]=i:t[r]=o}else void 0===t[r]&&(t[r]=e[r])})),t}var d=t(6337),c=t(9305),A=t(5428),p=t(9301),u=t(3380),h=t(6885),m=t(5083),g=t(7810);function f(e){return(0,g.Z)("MuiButton",e)}const b=(0,m.Z)("MuiButton",["root","text","textInherit","textPrimary","textSecondary","textSuccess","textError","textInfo","textWarning","outlined","outlinedInherit","outlinedPrimary","outlinedSecondary","outlinedSuccess","outlinedError","outlinedInfo","outlinedWarning","contained","containedInherit","containedPrimary","containedSecondary","containedSuccess","containedError","containedInfo","containedWarning","disableElevation","focusVisible","disabled","colorInherit","textSizeSmall","textSizeMedium","textSizeLarge","outlinedSizeSmall","outlinedSizeMedium","outlinedSizeLarge","containedSizeSmall","containedSizeMedium","containedSizeLarge","sizeMedium","sizeSmall","sizeLarge","fullWidth","startIcon","endIcon","iconSizeSmall","iconSizeMedium","iconSizeLarge"]),y=i.createContext({});var k=t(1527);const x=["children","color","component","className","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"],v=e=>(0,o.Z)({},"small"===e.size&&{"& > *:nth-of-type(1)":{fontSize:18}},"medium"===e.size&&{"& > *:nth-of-type(1)":{fontSize:20}},"large"===e.size&&{"& > *:nth-of-type(1)":{fontSize:22}}),z=(0,A.ZP)(u.Z,{shouldForwardProp:e=>(0,A.FO)(e)||"classes"===e,name:"MuiButton",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.root,n[t.variant],n[`${t.variant}${(0,h.Z)(t.color)}`],n[`size${(0,h.Z)(t.size)}`],n[`${t.variant}Size${(0,h.Z)(t.size)}`],"inherit"===t.color&&n.colorInherit,t.disableElevation&&n.disableElevation,t.fullWidth&&n.fullWidth]}})((({theme:e,ownerState:n})=>{var t,r;const i="light"===e.palette.mode?e.palette.grey[300]:e.palette.grey[800],a="light"===e.palette.mode?e.palette.grey.A100:e.palette.grey[700];return(0,o.Z)({},e.typography.button,{minWidth:64,padding:"6px 16px",borderRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create(["background-color","box-shadow","border-color","color"],{duration:e.transitions.duration.short}),"&:hover":(0,o.Z)({textDecoration:"none",backgroundColor:e.vars?`rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,c.Fq)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"text"===n.variant&&"inherit"!==n.color&&{backgroundColor:e.vars?`rgba(${e.vars.palette[n.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,c.Fq)(e.palette[n.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"outlined"===n.variant&&"inherit"!==n.color&&{border:`1px solid ${(e.vars||e).palette[n.color].main}`,backgroundColor:e.vars?`rgba(${e.vars.palette[n.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,c.Fq)(e.palette[n.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"contained"===n.variant&&{backgroundColor:e.vars?e.vars.palette.Button.inheritContainedHoverBg:a,boxShadow:(e.vars||e).shadows[4],"@media (hover: none)":{boxShadow:(e.vars||e).shadows[2],backgroundColor:(e.vars||e).palette.grey[300]}},"contained"===n.variant&&"inherit"!==n.color&&{backgroundColor:(e.vars||e).palette[n.color].dark,"@media (hover: none)":{backgroundColor:(e.vars||e).palette[n.color].main}}),"&:active":(0,o.Z)({},"contained"===n.variant&&{boxShadow:(e.vars||e).shadows[8]}),[`&.${b.focusVisible}`]:(0,o.Z)({},"contained"===n.variant&&{boxShadow:(e.vars||e).shadows[6]}),[`&.${b.disabled}`]:(0,o.Z)({color:(e.vars||e).palette.action.disabled},"outlined"===n.variant&&{border:`1px solid ${(e.vars||e).palette.action.disabledBackground}`},"contained"===n.variant&&{color:(e.vars||e).palette.action.disabled,boxShadow:(e.vars||e).shadows[0],backgroundColor:(e.vars||e).palette.action.disabledBackground})},"text"===n.variant&&{padding:"6px 8px"},"text"===n.variant&&"inherit"!==n.color&&{color:(e.vars||e).palette[n.color].main},"outlined"===n.variant&&{padding:"5px 15px",border:"1px solid currentColor"},"outlined"===n.variant&&"inherit"!==n.color&&{color:(e.vars||e).palette[n.color].main,border:e.vars?`1px solid rgba(${e.vars.palette[n.color].mainChannel} / 0.5)`:`1px solid ${(0,c.Fq)(e.palette[n.color].main,.5)}`},"contained"===n.variant&&{color:e.vars?e.vars.palette.text.primary:null==(t=(r=e.palette).getContrastText)?void 0:t.call(r,e.palette.grey[300]),backgroundColor:e.vars?e.vars.palette.Button.inheritContainedBg:i,boxShadow:(e.vars||e).shadows[2]},"contained"===n.variant&&"inherit"!==n.color&&{color:(e.vars||e).palette[n.color].contrastText,backgroundColor:(e.vars||e).palette[n.color].main},"inherit"===n.color&&{color:"inherit",borderColor:"currentColor"},"small"===n.size&&"text"===n.variant&&{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},"large"===n.size&&"text"===n.variant&&{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},"small"===n.size&&"outlined"===n.variant&&{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},"large"===n.size&&"outlined"===n.variant&&{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},"small"===n.size&&"contained"===n.variant&&{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},"large"===n.size&&"contained"===n.variant&&{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},n.fullWidth&&{width:"100%"})}),(({ownerState:e})=>e.disableElevation&&{boxShadow:"none","&:hover":{boxShadow:"none"},[`&.${b.focusVisible}`]:{boxShadow:"none"},"&:active":{boxShadow:"none"},[`&.${b.disabled}`]:{boxShadow:"none"}})),w=(0,A.ZP)("span",{name:"MuiButton",slot:"StartIcon",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.startIcon,n[`iconSize${(0,h.Z)(t.size)}`]]}})((({ownerState:e})=>(0,o.Z)({display:"inherit",marginRight:8,marginLeft:-4},"small"===e.size&&{marginLeft:-2},v(e)))),E=(0,A.ZP)("span",{name:"MuiButton",slot:"EndIcon",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.endIcon,n[`iconSize${(0,h.Z)(t.size)}`]]}})((({ownerState:e})=>(0,o.Z)({display:"inherit",marginRight:-4,marginLeft:8},"small"===e.size&&{marginRight:-2},v(e)))),C=i.forwardRef((function(e,n){const t=i.useContext(y),s=l(t,e),c=(0,p.Z)({props:s,name:"MuiButton"}),{children:A,color:u="primary",component:m="button",className:g,disabled:b=!1,disableElevation:v=!1,disableFocusRipple:C=!1,endIcon:W,focusVisibleClassName:F,fullWidth:I=!1,size:B="medium",startIcon:M,type:S,variant:T="text"}=c,Z=(0,r.Z)(c,x),J=(0,o.Z)({},c,{color:u,component:m,disabled:b,disableElevation:v,disableFocusRipple:C,fullWidth:I,size:B,type:S,variant:T}),R=(e=>{const{color:n,disableElevation:t,fullWidth:r,size:i,variant:a,classes:s}=e,l={root:["root",a,`${a}${(0,h.Z)(n)}`,`size${(0,h.Z)(i)}`,`${a}Size${(0,h.Z)(i)}`,"inherit"===n&&"colorInherit",t&&"disableElevation",r&&"fullWidth"],label:["label"],startIcon:["startIcon",`iconSize${(0,h.Z)(i)}`],endIcon:["endIcon",`iconSize${(0,h.Z)(i)}`]},c=(0,d.Z)(l,f,s);return(0,o.Z)({},s,c)})(J),D=M&&(0,k.jsx)(w,{className:R.startIcon,ownerState:J,children:M}),$=W&&(0,k.jsx)(E,{className:R.endIcon,ownerState:J,children:W});return(0,k.jsxs)(z,(0,o.Z)({ownerState:J,className:(0,a.Z)(t.className,R.root,g),component:m,disabled:b,focusRipple:!C,focusVisibleClassName:(0,a.Z)(R.focusVisible,F),ref:n,type:S},Z,{classes:R,children:[D,A,$]}))}))},3373:(e,n,t)=>{"use strict";t.d(n,{Z:()=>W});var r=t(4529),o=t(7366),i=t(959),a=t(5924),s=t(6337),l=t(4428),d=t(6885),c=t(9301),A=t(5428),p=t(5083),u=t(7810);function h(e){return(0,u.Z)("MuiCircularProgress",e)}(0,p.Z)("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);var m=t(1527);const g=["className","color","disableShrink","size","style","thickness","value","variant"];let f,b,y,k,x=e=>e;const v=(0,l.F4)(f||(f=x`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)),z=(0,l.F4)(b||(b=x`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)),w=(0,A.ZP)("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.root,n[t.variant],n[`color${(0,d.Z)(t.color)}`]]}})((({ownerState:e,theme:n})=>(0,o.Z)({display:"inline-block"},"determinate"===e.variant&&{transition:n.transitions.create("transform")},"inherit"!==e.color&&{color:(n.vars||n).palette[e.color].main})),(({ownerState:e})=>"indeterminate"===e.variant&&(0,l.iv)(y||(y=x`
      animation: ${0} 1.4s linear infinite;
    `),v))),E=(0,A.ZP)("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,n)=>n.svg})({display:"block"}),C=(0,A.ZP)("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.circle,n[`circle${(0,d.Z)(t.variant)}`],t.disableShrink&&n.circleDisableShrink]}})((({ownerState:e,theme:n})=>(0,o.Z)({stroke:"currentColor"},"determinate"===e.variant&&{transition:n.transitions.create("stroke-dashoffset")},"indeterminate"===e.variant&&{strokeDasharray:"80px, 200px",strokeDashoffset:0})),(({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink&&(0,l.iv)(k||(k=x`
      animation: ${0} 1.4s ease-in-out infinite;
    `),z))),W=i.forwardRef((function(e,n){const t=(0,c.Z)({props:e,name:"MuiCircularProgress"}),{className:i,color:l="primary",disableShrink:A=!1,size:p=40,style:u,thickness:f=3.6,value:b=0,variant:y="indeterminate"}=t,k=(0,r.Z)(t,g),x=(0,o.Z)({},t,{color:l,disableShrink:A,size:p,thickness:f,value:b,variant:y}),v=(e=>{const{classes:n,variant:t,color:r,disableShrink:o}=e,i={root:["root",t,`color${(0,d.Z)(r)}`],svg:["svg"],circle:["circle",`circle${(0,d.Z)(t)}`,o&&"circleDisableShrink"]};return(0,s.Z)(i,h,n)})(x),z={},W={},F={};if("determinate"===y){const e=2*Math.PI*((44-f)/2);z.strokeDasharray=e.toFixed(3),F["aria-valuenow"]=Math.round(b),z.strokeDashoffset=`${((100-b)/100*e).toFixed(3)}px`,W.transform="rotate(-90deg)"}return(0,m.jsx)(w,(0,o.Z)({className:(0,a.Z)(v.root,i),style:(0,o.Z)({width:p,height:p},W,u),ownerState:x,ref:n,role:"progressbar"},F,k,{children:(0,m.jsx)(E,{className:v.svg,ownerState:x,viewBox:"22 22 44 44",children:(0,m.jsx)(C,{className:v.circle,style:z,ownerState:x,cx:44,cy:44,r:(44-f)/2,fill:"none",strokeWidth:f})})}))}))},5178:(e,n,t)=>{"use strict";t.d(n,{Z:()=>k});var r=t(4529),o=t(7366),i=t(959),a=t(5924),s=t(6337),l=t(9305),d=t(5428),c=t(9301),A=t(3380),p=t(6885),u=t(5083),h=t(7810);function m(e){return(0,h.Z)("MuiIconButton",e)}const g=(0,u.Z)("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]);var f=t(1527);const b=["edge","children","className","color","disabled","disableFocusRipple","size"],y=(0,d.ZP)(A.Z,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.root,"default"!==t.color&&n[`color${(0,p.Z)(t.color)}`],t.edge&&n[`edge${(0,p.Z)(t.edge)}`],n[`size${(0,p.Z)(t.size)}`]]}})((({theme:e,ownerState:n})=>(0,o.Z)({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!n.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,l.Fq)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},"start"===n.edge&&{marginLeft:"small"===n.size?-3:-12},"end"===n.edge&&{marginRight:"small"===n.size?-3:-12})),(({theme:e,ownerState:n})=>{var t;const r=null==(t=(e.vars||e).palette)?void 0:t[n.color];return(0,o.Z)({},"inherit"===n.color&&{color:"inherit"},"inherit"!==n.color&&"default"!==n.color&&(0,o.Z)({color:null==r?void 0:r.main},!n.disableRipple&&{"&:hover":(0,o.Z)({},r&&{backgroundColor:e.vars?`rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:(0,l.Fq)(r.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),"small"===n.size&&{padding:5,fontSize:e.typography.pxToRem(18)},"large"===n.size&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${g.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})})),k=i.forwardRef((function(e,n){const t=(0,c.Z)({props:e,name:"MuiIconButton"}),{edge:i=!1,children:l,className:d,color:A="default",disabled:u=!1,disableFocusRipple:h=!1,size:g="medium"}=t,k=(0,r.Z)(t,b),x=(0,o.Z)({},t,{edge:i,color:A,disabled:u,disableFocusRipple:h,size:g}),v=(e=>{const{classes:n,disabled:t,color:r,edge:o,size:i}=e,a={root:["root",t&&"disabled","default"!==r&&`color${(0,p.Z)(r)}`,o&&`edge${(0,p.Z)(o)}`,`size${(0,p.Z)(i)}`]};return(0,s.Z)(a,m,n)})(x);return(0,f.jsx)(y,(0,o.Z)({className:(0,a.Z)(v.root,d),centerRipple:!0,focusRipple:!h,disabled:u,ref:n,ownerState:x},k,{children:l}))}))},2323:(e,n,t)=>{"use strict";t.d(n,{Z:()=>f});var r=t(4529),o=t(7366),i=t(959),a=t(5924),s=t(6337),l=t(5428),d=t(9301),c=t(5083),A=t(7810);function p(e){return(0,A.Z)("MuiListItemIcon",e)}(0,c.Z)("MuiListItemIcon",["root","alignItemsFlexStart"]);var u=t(4145),h=t(1527);const m=["className"],g=(0,l.ZP)("div",{name:"MuiListItemIcon",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.root,"flex-start"===t.alignItems&&n.alignItemsFlexStart]}})((({theme:e,ownerState:n})=>(0,o.Z)({minWidth:56,color:(e.vars||e).palette.action.active,flexShrink:0,display:"inline-flex"},"flex-start"===n.alignItems&&{marginTop:8}))),f=i.forwardRef((function(e,n){const t=(0,d.Z)({props:e,name:"MuiListItemIcon"}),{className:l}=t,c=(0,r.Z)(t,m),A=i.useContext(u.Z),f=(0,o.Z)({},t,{alignItems:A.alignItems}),b=(e=>{const{alignItems:n,classes:t}=e,r={root:["root","flex-start"===n&&"alignItemsFlexStart"]};return(0,s.Z)(r,p,t)})(f);return(0,h.jsx)(g,(0,o.Z)({className:(0,a.Z)(b.root,l),ownerState:f,ref:n},c))}))},5755:(e,n,t)=>{"use strict";t.d(n,{ZP:()=>S});var r=t(4529),o=t(7366),i=t(959),a=t(5924),s=t(6337),l=t(6018),d=t(9305),c=t(5428),A=t(9301),p=t(3380),u=t(9162),h=t(9948),m=t(2351),g=t(4145),f=t(5083),b=t(7810);function y(e){return(0,b.Z)("MuiListItem",e)}const k=(0,f.Z)("MuiListItem",["root","container","focusVisible","dense","alignItemsFlexStart","disabled","divider","gutters","padding","button","secondaryAction","selected"]);var x=t(2861);function v(e){return(0,b.Z)("MuiListItemSecondaryAction",e)}(0,f.Z)("MuiListItemSecondaryAction",["root","disableGutters"]);var z=t(1527);const w=["className"],E=(0,c.ZP)("div",{name:"MuiListItemSecondaryAction",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.root,t.disableGutters&&n.disableGutters]}})((({ownerState:e})=>(0,o.Z)({position:"absolute",right:16,top:"50%",transform:"translateY(-50%)"},e.disableGutters&&{right:0}))),C=i.forwardRef((function(e,n){const t=(0,A.Z)({props:e,name:"MuiListItemSecondaryAction"}),{className:l}=t,d=(0,r.Z)(t,w),c=i.useContext(g.Z),p=(0,o.Z)({},t,{disableGutters:c.disableGutters}),u=(e=>{const{disableGutters:n,classes:t}=e,r={root:["root",n&&"disableGutters"]};return(0,s.Z)(r,v,t)})(p);return(0,z.jsx)(E,(0,o.Z)({className:(0,a.Z)(u.root,l),ownerState:p,ref:n},d))}));C.muiName="ListItemSecondaryAction";const W=C,F=["className"],I=["alignItems","autoFocus","button","children","className","component","components","componentsProps","ContainerComponent","ContainerProps","dense","disabled","disableGutters","disablePadding","divider","focusVisibleClassName","secondaryAction","selected","slotProps","slots"],B=(0,c.ZP)("div",{name:"MuiListItem",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.root,t.dense&&n.dense,"flex-start"===t.alignItems&&n.alignItemsFlexStart,t.divider&&n.divider,!t.disableGutters&&n.gutters,!t.disablePadding&&n.padding,t.button&&n.button,t.hasSecondaryAction&&n.secondaryAction]}})((({theme:e,ownerState:n})=>(0,o.Z)({display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left"},!n.disablePadding&&(0,o.Z)({paddingTop:8,paddingBottom:8},n.dense&&{paddingTop:4,paddingBottom:4},!n.disableGutters&&{paddingLeft:16,paddingRight:16},!!n.secondaryAction&&{paddingRight:48}),!!n.secondaryAction&&{[`& > .${x.Z.root}`]:{paddingRight:48}},{[`&.${k.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${k.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,d.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${k.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:(0,d.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${k.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity}},"flex-start"===n.alignItems&&{alignItems:"flex-start"},n.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},n.button&&{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${k.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:(0,d.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:(0,d.Fq)(e.palette.primary.main,e.palette.action.selectedOpacity)}}},n.hasSecondaryAction&&{paddingRight:48}))),M=(0,c.ZP)("li",{name:"MuiListItem",slot:"Container",overridesResolver:(e,n)=>n.container})({position:"relative"}),S=i.forwardRef((function(e,n){const t=(0,A.Z)({props:e,name:"MuiListItem"}),{alignItems:d="center",autoFocus:c=!1,button:f=!1,children:b,className:x,component:v,components:w={},componentsProps:E={},ContainerComponent:C="li",ContainerProps:{className:S}={},dense:T=!1,disabled:Z=!1,disableGutters:J=!1,disablePadding:R=!1,divider:D=!1,focusVisibleClassName:$,secondaryAction:L,selected:P=!1,slotProps:_={},slots:O={}}=t,j=(0,r.Z)(t.ContainerProps,F),q=(0,r.Z)(t,I),N=i.useContext(g.Z),H=i.useMemo((()=>({dense:T||N.dense||!1,alignItems:d,disableGutters:J})),[d,N.dense,T,J]),G=i.useRef(null);(0,h.Z)((()=>{c&&G.current&&G.current.focus()}),[c]);const X=i.Children.toArray(b),Q=X.length&&(0,u.Z)(X[X.length-1],["ListItemSecondaryAction"]),V=(0,o.Z)({},t,{alignItems:d,autoFocus:c,button:f,dense:H.dense,disabled:Z,disableGutters:J,disablePadding:R,divider:D,hasSecondaryAction:Q,selected:P}),K=(e=>{const{alignItems:n,button:t,classes:r,dense:o,disabled:i,disableGutters:a,disablePadding:l,divider:d,hasSecondaryAction:c,selected:A}=e,p={root:["root",o&&"dense",!a&&"gutters",!l&&"padding",d&&"divider",i&&"disabled",t&&"button","flex-start"===n&&"alignItemsFlexStart",c&&"secondaryAction",A&&"selected"],container:["container"]};return(0,s.Z)(p,y,r)})(V),U=(0,m.Z)(G,n),Y=O.root||w.Root||B,ee=_.root||E.root||{},ne=(0,o.Z)({className:(0,a.Z)(K.root,ee.className,x),disabled:Z},q);let te=v||"li";return f&&(ne.component=v||"div",ne.focusVisibleClassName=(0,a.Z)(k.focusVisible,$),te=p.Z),Q?(te=ne.component||v?te:"div","li"===C&&("li"===te?te="div":"li"===ne.component&&(ne.component="div")),(0,z.jsx)(g.Z.Provider,{value:H,children:(0,z.jsxs)(M,(0,o.Z)({as:C,className:(0,a.Z)(K.container,S),ref:U,ownerState:V},j,{children:[(0,z.jsx)(Y,(0,o.Z)({},ee,!(0,l.Z)(Y)&&{as:te,ownerState:(0,o.Z)({},V,ee.ownerState)},ne,{children:X})),X.pop()]}))})):(0,z.jsx)(g.Z.Provider,{value:H,children:(0,z.jsxs)(Y,(0,o.Z)({},ee,{as:te,ref:U},!(0,l.Z)(Y)&&{ownerState:(0,o.Z)({},V,ee.ownerState)},ne,{children:[X,L&&(0,z.jsx)(W,{children:L})]}))})}))},1264:(e,n,t)=>{"use strict";t.d(n,{Z:()=>jn});var r=t(7366),o=t(4529),i=t(959),a=t(5924),s=t(6337),l=t(5009),d=t(5428),c=t(9301),A=t(778),p=t(5973),u=t(7605),h=t(3727),m=t(422),g=t(7770),f=t(1579),b=t(6478),y=t(1527);const k=["onChange","maxRows","minRows","style","value"];function x(e){return parseInt(e,10)||0}const v={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};function z(e){return null==e||0===Object.keys(e).length||0===e.outerHeightStyle&&!e.overflow}const w=i.forwardRef((function(e,n){const{onChange:t,maxRows:r,minRows:o=1,style:a,value:s}=e,l=(0,h.Z)(e,k),{current:d}=i.useRef(null!=s),c=i.useRef(null),A=(0,g.Z)(n,c),p=i.useRef(null),w=i.useRef(0),[E,C]=i.useState({outerHeightStyle:0}),W=i.useCallback((()=>{const n=c.current,t=(0,f.Z)(n).getComputedStyle(n);if("0px"===t.width)return{outerHeightStyle:0};const i=p.current;i.style.width=t.width,i.value=n.value||e.placeholder||"x","\n"===i.value.slice(-1)&&(i.value+=" ");const a=t.boxSizing,s=x(t.paddingBottom)+x(t.paddingTop),l=x(t.borderBottomWidth)+x(t.borderTopWidth),d=i.scrollHeight;i.value="x";const A=i.scrollHeight;let u=d;return o&&(u=Math.max(Number(o)*A,u)),r&&(u=Math.min(Number(r)*A,u)),u=Math.max(u,A),{outerHeightStyle:u+("border-box"===a?s+l:0),overflow:Math.abs(u-d)<=1}}),[r,o,e.placeholder]),F=(e,n)=>{const{outerHeightStyle:t,overflow:r}=n;return w.current<20&&(t>0&&Math.abs((e.outerHeightStyle||0)-t)>1||e.overflow!==r)?(w.current+=1,{overflow:r,outerHeightStyle:t}):e},I=i.useCallback((()=>{const e=W();z(e)||C((n=>F(n,e)))}),[W]);return i.useEffect((()=>{const e=function(e,n=166){let t;function r(...r){clearTimeout(t),t=setTimeout((()=>{e.apply(this,r)}),n)}return r.clear=()=>{clearTimeout(t)},r}((()=>{w.current=0,c.current&&(()=>{const e=W();z(e)||m.flushSync((()=>{C((n=>F(n,e)))}))})()}));let n;const t=c.current,r=(0,f.Z)(t);return r.addEventListener("resize",e),"undefined"!=typeof ResizeObserver&&(n=new ResizeObserver(e),n.observe(t)),()=>{e.clear(),r.removeEventListener("resize",e),n&&n.disconnect()}})),(0,b.Z)((()=>{I()})),i.useEffect((()=>{w.current=0}),[s]),(0,y.jsxs)(i.Fragment,{children:[(0,y.jsx)("textarea",(0,u.Z)({value:s,onChange:e=>{w.current=0,d||I(),t&&t(e)},ref:A,rows:o,style:(0,u.Z)({height:E.outerHeightStyle,overflow:E.overflow?"hidden":void 0},a)},l)),(0,y.jsx)("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:p,tabIndex:-1,style:(0,u.Z)({},v,a,{paddingTop:0,paddingBottom:0})})]})}));var E=t(6018);function C({props:e,states:n,muiFormControl:t}){return n.reduce(((n,r)=>(n[r]=e[r],t&&void 0===e[r]&&(n[r]=t[r]),n)),{})}const W=i.createContext(void 0);function F(){return i.useContext(W)}var I=t(6885),B=t(2351),M=t(9948),S=t(4428);function T(e){const{styles:n,defaultTheme:t={}}=e,r="function"==typeof n?e=>{return n(null==(r=e)||0===Object.keys(r).length?t:e);var r}:n;return(0,y.jsx)(S.xB,{styles:r})}var Z=t(6167);const J=function({styles:e,themeId:n,defaultTheme:t={}}){const r=(0,Z.Z)(t),o="function"==typeof e?e(n&&r[n]||r):e;return(0,y.jsx)(T,{styles:o})};var R=t(3129),D=t(29);const $=function(e){return(0,y.jsx)(J,(0,r.Z)({},e,{defaultTheme:R.Z,themeId:D.Z}))};function L(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function P(e,n=!1){return e&&(L(e.value)&&""!==e.value||n&&L(e.defaultValue)&&""!==e.defaultValue)}var _=t(5083),O=t(7810);function j(e){return(0,O.Z)("MuiInputBase",e)}const q=(0,_.Z)("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),N=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],H=(e,n)=>{const{ownerState:t}=e;return[n.root,t.formControl&&n.formControl,t.startAdornment&&n.adornedStart,t.endAdornment&&n.adornedEnd,t.error&&n.error,"small"===t.size&&n.sizeSmall,t.multiline&&n.multiline,t.color&&n[`color${(0,I.Z)(t.color)}`],t.fullWidth&&n.fullWidth,t.hiddenLabel&&n.hiddenLabel]},G=(e,n)=>{const{ownerState:t}=e;return[n.input,"small"===t.size&&n.inputSizeSmall,t.multiline&&n.inputMultiline,"search"===t.type&&n.inputTypeSearch,t.startAdornment&&n.inputAdornedStart,t.endAdornment&&n.inputAdornedEnd,t.hiddenLabel&&n.inputHiddenLabel]},X=(0,d.ZP)("div",{name:"MuiInputBase",slot:"Root",overridesResolver:H})((({theme:e,ownerState:n})=>(0,r.Z)({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${q.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},n.multiline&&(0,r.Z)({padding:"4px 0 5px"},"small"===n.size&&{paddingTop:1}),n.fullWidth&&{width:"100%"}))),Q=(0,d.ZP)("input",{name:"MuiInputBase",slot:"Input",overridesResolver:G})((({theme:e,ownerState:n})=>{const t="light"===e.palette.mode,o=(0,r.Z)({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:t?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),i={opacity:"0 !important"},a=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:t?.42:.5};return(0,r.Z)({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":o,"&::-moz-placeholder":o,"&:-ms-input-placeholder":o,"&::-ms-input-placeholder":o,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${q.formControl} &`]:{"&::-webkit-input-placeholder":i,"&::-moz-placeholder":i,"&:-ms-input-placeholder":i,"&::-ms-input-placeholder":i,"&:focus::-webkit-input-placeholder":a,"&:focus::-moz-placeholder":a,"&:focus:-ms-input-placeholder":a,"&:focus::-ms-input-placeholder":a},[`&.${q.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},"small"===n.size&&{paddingTop:1},n.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},"search"===n.type&&{MozAppearance:"textfield"})})),V=(0,y.jsx)($,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),K=i.forwardRef((function(e,n){var t;const l=(0,c.Z)({props:e,name:"MuiInputBase"}),{"aria-describedby":d,autoComplete:A,autoFocus:u,className:h,components:m={},componentsProps:g={},defaultValue:f,disabled:b,disableInjectingGlobalStyles:k,endAdornment:x,fullWidth:v=!1,id:z,inputComponent:S="input",inputProps:T={},inputRef:Z,maxRows:J,minRows:R,multiline:D=!1,name:$,onBlur:L,onChange:_,onClick:O,onFocus:q,onKeyDown:H,onKeyUp:G,placeholder:K,readOnly:U,renderSuffix:Y,rows:ee,slotProps:ne={},slots:te={},startAdornment:re,type:oe="text",value:ie}=l,ae=(0,o.Z)(l,N),se=null!=T.value?T.value:ie,{current:le}=i.useRef(null!=se),de=i.useRef(),ce=i.useCallback((e=>{}),[]),Ae=(0,B.Z)(de,Z,T.ref,ce),[pe,ue]=i.useState(!1),he=F(),me=C({props:l,muiFormControl:he,states:["color","disabled","error","hiddenLabel","size","required","filled"]});me.focused=he?he.focused:pe,i.useEffect((()=>{!he&&b&&pe&&(ue(!1),L&&L())}),[he,b,pe,L]);const ge=he&&he.onFilled,fe=he&&he.onEmpty,be=i.useCallback((e=>{P(e)?ge&&ge():fe&&fe()}),[ge,fe]);(0,M.Z)((()=>{le&&be({value:se})}),[se,be,le]),i.useEffect((()=>{be(de.current)}),[]);let ye=S,ke=T;D&&"input"===ye&&(ke=ee?(0,r.Z)({type:void 0,minRows:ee,maxRows:ee},ke):(0,r.Z)({type:void 0,maxRows:J,minRows:R},ke),ye=w),i.useEffect((()=>{he&&he.setAdornedStart(Boolean(re))}),[he,re]);const xe=(0,r.Z)({},l,{color:me.color||"primary",disabled:me.disabled,endAdornment:x,error:me.error,focused:me.focused,formControl:he,fullWidth:v,hiddenLabel:me.hiddenLabel,multiline:D,size:me.size,startAdornment:re,type:oe}),ve=(e=>{const{classes:n,color:t,disabled:r,error:o,endAdornment:i,focused:a,formControl:l,fullWidth:d,hiddenLabel:c,multiline:A,readOnly:p,size:u,startAdornment:h,type:m}=e,g={root:["root",`color${(0,I.Z)(t)}`,r&&"disabled",o&&"error",d&&"fullWidth",a&&"focused",l&&"formControl","small"===u&&"sizeSmall",A&&"multiline",h&&"adornedStart",i&&"adornedEnd",c&&"hiddenLabel",p&&"readOnly"],input:["input",r&&"disabled","search"===m&&"inputTypeSearch",A&&"inputMultiline","small"===u&&"inputSizeSmall",c&&"inputHiddenLabel",h&&"inputAdornedStart",i&&"inputAdornedEnd",p&&"readOnly"]};return(0,s.Z)(g,j,n)})(xe),ze=te.root||m.Root||X,we=ne.root||g.root||{},Ee=te.input||m.Input||Q;return ke=(0,r.Z)({},ke,null!=(t=ne.input)?t:g.input),(0,y.jsxs)(i.Fragment,{children:[!k&&V,(0,y.jsxs)(ze,(0,r.Z)({},we,!(0,E.Z)(ze)&&{ownerState:(0,r.Z)({},xe,we.ownerState)},{ref:n,onClick:e=>{de.current&&e.currentTarget===e.target&&de.current.focus(),O&&!me.disabled&&O(e)}},ae,{className:(0,a.Z)(ve.root,we.className,h,U&&"MuiInputBase-readOnly"),children:[re,(0,y.jsx)(W.Provider,{value:null,children:(0,y.jsx)(Ee,(0,r.Z)({ownerState:xe,"aria-invalid":me.error,"aria-describedby":d,autoComplete:A,autoFocus:u,defaultValue:f,disabled:me.disabled,id:z,onAnimationStart:e=>{be("mui-auto-fill-cancel"===e.animationName?de.current:{value:"x"})},name:$,placeholder:K,readOnly:U,required:me.required,rows:ee,value:se,onKeyDown:H,onKeyUp:G,type:oe},ke,!(0,E.Z)(Ee)&&{as:ye,ownerState:(0,r.Z)({},xe,ke.ownerState)},{ref:Ae,className:(0,a.Z)(ve.input,ke.className,U&&"MuiInputBase-readOnly"),onBlur:e=>{L&&L(e),T.onBlur&&T.onBlur(e),he&&he.onBlur?he.onBlur(e):ue(!1)},onChange:(e,...n)=>{if(!le){const n=e.target||de.current;if(null==n)throw new Error((0,p.Z)(1));be({value:n.value})}T.onChange&&T.onChange(e,...n),_&&_(e,...n)},onFocus:e=>{me.disabled?e.stopPropagation():(q&&q(e),T.onFocus&&T.onFocus(e),he&&he.onFocus?he.onFocus(e):ue(!0))}}))}),x,Y?Y((0,r.Z)({},me,{startAdornment:re})):null]}))]})})),U=K;function Y(e){return(0,O.Z)("MuiInput",e)}const ee=(0,r.Z)({},q,(0,_.Z)("MuiInput",["root","underline","input"])),ne=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],te=(0,d.ZP)(X,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiInput",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[...H(e,n),!t.disableUnderline&&n.underline]}})((({theme:e,ownerState:n})=>{let t="light"===e.palette.mode?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(t=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),(0,r.Z)({position:"relative"},n.formControl&&{"label + &":{marginTop:16}},!n.disableUnderline&&{"&:after":{borderBottom:`2px solid ${(e.vars||e).palette[n.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${ee.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${ee.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${t}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${ee.disabled}, .${ee.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${t}`}},[`&.${ee.disabled}:before`]:{borderBottomStyle:"dotted"}})})),re=(0,d.ZP)(Q,{name:"MuiInput",slot:"Input",overridesResolver:G})({}),oe=i.forwardRef((function(e,n){var t,i,a,l;const d=(0,c.Z)({props:e,name:"MuiInput"}),{disableUnderline:p,components:u={},componentsProps:h,fullWidth:m=!1,inputComponent:g="input",multiline:f=!1,slotProps:b,slots:k={},type:x="text"}=d,v=(0,o.Z)(d,ne),z=(e=>{const{classes:n,disableUnderline:t}=e,o={root:["root",!t&&"underline"],input:["input"]},i=(0,s.Z)(o,Y,n);return(0,r.Z)({},n,i)})(d),w={root:{ownerState:{disableUnderline:p}}},E=(null!=b?b:h)?(0,A.Z)(null!=b?b:h,w):w,C=null!=(t=null!=(i=k.root)?i:u.Root)?t:te,W=null!=(a=null!=(l=k.input)?l:u.Input)?a:re;return(0,y.jsx)(U,(0,r.Z)({slots:{root:C,input:W},slotProps:E,fullWidth:m,inputComponent:g,multiline:f,ref:n,type:x},v,{classes:z}))}));oe.muiName="Input";const ie=oe;function ae(e){return(0,O.Z)("MuiFilledInput",e)}const se=(0,r.Z)({},q,(0,_.Z)("MuiFilledInput",["root","underline","input"])),le=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],de=(0,d.ZP)(X,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiFilledInput",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[...H(e,n),!t.disableUnderline&&n.underline]}})((({theme:e,ownerState:n})=>{var t;const o="light"===e.palette.mode,i=o?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",a=o?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",s=o?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",l=o?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return(0,r.Z)({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:s,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a}},[`&.${se.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:a},[`&.${se.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:l}},!n.disableUnderline&&{"&:after":{borderBottom:`2px solid ${null==(t=(e.vars||e).palette[n.color||"primary"])?void 0:t.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${se.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${se.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:i}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${se.disabled}, .${se.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${se.disabled}:before`]:{borderBottomStyle:"dotted"}},n.startAdornment&&{paddingLeft:12},n.endAdornment&&{paddingRight:12},n.multiline&&(0,r.Z)({padding:"25px 12px 8px"},"small"===n.size&&{paddingTop:21,paddingBottom:4},n.hiddenLabel&&{paddingTop:16,paddingBottom:17}))})),ce=(0,d.ZP)(Q,{name:"MuiFilledInput",slot:"Input",overridesResolver:G})((({theme:e,ownerState:n})=>(0,r.Z)({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===n.size&&{paddingTop:21,paddingBottom:4},n.hiddenLabel&&{paddingTop:16,paddingBottom:17},n.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0},n.startAdornment&&{paddingLeft:0},n.endAdornment&&{paddingRight:0},n.hiddenLabel&&"small"===n.size&&{paddingTop:8,paddingBottom:9}))),Ae=i.forwardRef((function(e,n){var t,i,a,l;const d=(0,c.Z)({props:e,name:"MuiFilledInput"}),{components:p={},componentsProps:u,fullWidth:h=!1,inputComponent:m="input",multiline:g=!1,slotProps:f,slots:b={},type:k="text"}=d,x=(0,o.Z)(d,le),v=(0,r.Z)({},d,{fullWidth:h,inputComponent:m,multiline:g,type:k}),z=(e=>{const{classes:n,disableUnderline:t}=e,o={root:["root",!t&&"underline"],input:["input"]},i=(0,s.Z)(o,ae,n);return(0,r.Z)({},n,i)})(d),w={root:{ownerState:v},input:{ownerState:v}},E=(null!=f?f:u)?(0,A.Z)(null!=f?f:u,w):w,C=null!=(t=null!=(i=b.root)?i:p.Root)?t:de,W=null!=(a=null!=(l=b.input)?l:p.Input)?a:ce;return(0,y.jsx)(U,(0,r.Z)({slots:{root:C,input:W},componentsProps:E,fullWidth:h,inputComponent:m,multiline:g,ref:n,type:k},x,{classes:z}))}));Ae.muiName="Input";const pe=Ae;var ue;const he=["children","classes","className","label","notched"],me=(0,d.ZP)("fieldset")({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),ge=(0,d.ZP)("legend")((({ownerState:e,theme:n})=>(0,r.Z)({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:n.transitions.create("width",{duration:150,easing:n.transitions.easing.easeOut})},e.withLabel&&(0,r.Z)({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:n.transitions.create("max-width",{duration:50,easing:n.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:n.transitions.create("max-width",{duration:100,easing:n.transitions.easing.easeOut,delay:50})}))));function fe(e){return(0,O.Z)("MuiOutlinedInput",e)}const be=(0,r.Z)({},q,(0,_.Z)("MuiOutlinedInput",["root","notchedOutline","input"])),ye=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],ke=(0,d.ZP)(X,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiOutlinedInput",slot:"Root",overridesResolver:H})((({theme:e,ownerState:n})=>{const t="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return(0,r.Z)({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${be.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${be.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}},[`&.${be.focused} .${be.notchedOutline}`]:{borderColor:(e.vars||e).palette[n.color].main,borderWidth:2},[`&.${be.error} .${be.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${be.disabled} .${be.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},n.startAdornment&&{paddingLeft:14},n.endAdornment&&{paddingRight:14},n.multiline&&(0,r.Z)({padding:"16.5px 14px"},"small"===n.size&&{padding:"8.5px 14px"}))})),xe=(0,d.ZP)((function(e){const{className:n,label:t,notched:i}=e,a=(0,o.Z)(e,he),s=null!=t&&""!==t,l=(0,r.Z)({},e,{notched:i,withLabel:s});return(0,y.jsx)(me,(0,r.Z)({"aria-hidden":!0,className:n,ownerState:l},a,{children:(0,y.jsx)(ge,{ownerState:l,children:s?(0,y.jsx)("span",{children:t}):ue||(ue=(0,y.jsx)("span",{className:"notranslate",children:"​"}))})}))}),{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,n)=>n.notchedOutline})((({theme:e})=>{const n="light"===e.palette.mode?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:n}})),ve=(0,d.ZP)(Q,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:G})((({theme:e,ownerState:n})=>(0,r.Z)({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.mode?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.mode?null:"#fff",caretColor:"light"===e.palette.mode?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},"small"===n.size&&{padding:"8.5px 14px"},n.multiline&&{padding:0},n.startAdornment&&{paddingLeft:0},n.endAdornment&&{paddingRight:0}))),ze=i.forwardRef((function(e,n){var t,a,l,d,A;const p=(0,c.Z)({props:e,name:"MuiOutlinedInput"}),{components:u={},fullWidth:h=!1,inputComponent:m="input",label:g,multiline:f=!1,notched:b,slots:k={},type:x="text"}=p,v=(0,o.Z)(p,ye),z=(e=>{const{classes:n}=e,t=(0,s.Z)({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},fe,n);return(0,r.Z)({},n,t)})(p),w=F(),E=C({props:p,muiFormControl:w,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),W=(0,r.Z)({},p,{color:E.color||"primary",disabled:E.disabled,error:E.error,focused:E.focused,formControl:w,fullWidth:h,hiddenLabel:E.hiddenLabel,multiline:f,size:E.size,type:x}),I=null!=(t=null!=(a=k.root)?a:u.Root)?t:ke,B=null!=(l=null!=(d=k.input)?d:u.Input)?l:ve;return(0,y.jsx)(U,(0,r.Z)({slots:{root:I,input:B},renderSuffix:e=>(0,y.jsx)(xe,{ownerState:W,className:z.notchedOutline,label:null!=g&&""!==g&&E.required?A||(A=(0,y.jsxs)(i.Fragment,{children:[g," ","*"]})):g,notched:void 0!==b?b:Boolean(e.startAdornment||e.filled||e.focused)}),fullWidth:h,inputComponent:m,multiline:f,ref:n,type:x},v,{classes:(0,r.Z)({},z,{notchedOutline:null})}))}));ze.muiName="Input";const we=ze;function Ee(e){return(0,O.Z)("MuiFormLabel",e)}const Ce=(0,_.Z)("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),We=["children","className","color","component","disabled","error","filled","focused","required"],Fe=(0,d.ZP)("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},n)=>(0,r.Z)({},n.root,"secondary"===e.color&&n.colorSecondary,e.filled&&n.filled)})((({theme:e,ownerState:n})=>(0,r.Z)({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${Ce.focused}`]:{color:(e.vars||e).palette[n.color].main},[`&.${Ce.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${Ce.error}`]:{color:(e.vars||e).palette.error.main}}))),Ie=(0,d.ZP)("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,n)=>n.asterisk})((({theme:e})=>({[`&.${Ce.error}`]:{color:(e.vars||e).palette.error.main}}))),Be=i.forwardRef((function(e,n){const t=(0,c.Z)({props:e,name:"MuiFormLabel"}),{children:i,className:l,component:d="label"}=t,A=(0,o.Z)(t,We),p=C({props:t,muiFormControl:F(),states:["color","required","focused","disabled","error","filled"]}),u=(0,r.Z)({},t,{color:p.color||"primary",component:d,disabled:p.disabled,error:p.error,filled:p.filled,focused:p.focused,required:p.required}),h=(e=>{const{classes:n,color:t,focused:r,disabled:o,error:i,filled:a,required:l}=e,d={root:["root",`color${(0,I.Z)(t)}`,o&&"disabled",i&&"error",a&&"filled",r&&"focused",l&&"required"],asterisk:["asterisk",i&&"error"]};return(0,s.Z)(d,Ee,n)})(u);return(0,y.jsxs)(Fe,(0,r.Z)({as:d,ownerState:u,className:(0,a.Z)(h.root,l),ref:n},A,{children:[i,p.required&&(0,y.jsxs)(Ie,{ownerState:u,"aria-hidden":!0,className:h.asterisk,children:[" ","*"]})]}))}));function Me(e){return(0,O.Z)("MuiInputLabel",e)}(0,_.Z)("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const Se=["disableAnimation","margin","shrink","variant","className"],Te=(0,d.ZP)(Be,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiInputLabel",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[{[`& .${Ce.asterisk}`]:n.asterisk},n.root,t.formControl&&n.formControl,"small"===t.size&&n.sizeSmall,t.shrink&&n.shrink,!t.disableAnimation&&n.animated,n[t.variant]]}})((({theme:e,ownerState:n})=>(0,r.Z)({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},n.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},"small"===n.size&&{transform:"translate(0, 17px) scale(1)"},n.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!n.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},"filled"===n.variant&&(0,r.Z)({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===n.size&&{transform:"translate(12px, 13px) scale(1)"},n.shrink&&(0,r.Z)({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},"small"===n.size&&{transform:"translate(12px, 4px) scale(0.75)"})),"outlined"===n.variant&&(0,r.Z)({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},"small"===n.size&&{transform:"translate(14px, 9px) scale(1)"},n.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"})))),Ze=i.forwardRef((function(e,n){const t=(0,c.Z)({name:"MuiInputLabel",props:e}),{disableAnimation:i=!1,shrink:l,className:d}=t,A=(0,o.Z)(t,Se),p=F();let u=l;void 0===u&&p&&(u=p.filled||p.focused||p.adornedStart);const h=C({props:t,muiFormControl:p,states:["size","variant","required"]}),m=(0,r.Z)({},t,{disableAnimation:i,formControl:p,shrink:u,size:h.size,variant:h.variant,required:h.required}),g=(e=>{const{classes:n,formControl:t,size:o,shrink:i,disableAnimation:a,variant:l,required:d}=e,c={root:["root",t&&"formControl",!a&&"animated",i&&"shrink","small"===o&&"sizeSmall",l],asterisk:[d&&"asterisk"]},A=(0,s.Z)(c,Me,n);return(0,r.Z)({},n,A)})(m);return(0,y.jsx)(Te,(0,r.Z)({"data-shrink":u,ownerState:m,ref:n,className:(0,a.Z)(g.root,d)},A,{classes:g}))}));var Je=t(9162);function Re(e){return(0,O.Z)("MuiFormControl",e)}(0,_.Z)("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const De=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],$e=(0,d.ZP)("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},n)=>(0,r.Z)({},n.root,n[`margin${(0,I.Z)(e.margin)}`],e.fullWidth&&n.fullWidth)})((({ownerState:e})=>(0,r.Z)({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},"normal"===e.margin&&{marginTop:16,marginBottom:8},"dense"===e.margin&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"}))),Le=i.forwardRef((function(e,n){const t=(0,c.Z)({props:e,name:"MuiFormControl"}),{children:l,className:d,color:A="primary",component:p="div",disabled:u=!1,error:h=!1,focused:m,fullWidth:g=!1,hiddenLabel:f=!1,margin:b="none",required:k=!1,size:x="medium",variant:v="outlined"}=t,z=(0,o.Z)(t,De),w=(0,r.Z)({},t,{color:A,component:p,disabled:u,error:h,fullWidth:g,hiddenLabel:f,margin:b,required:k,size:x,variant:v}),E=(e=>{const{classes:n,margin:t,fullWidth:r}=e,o={root:["root","none"!==t&&`margin${(0,I.Z)(t)}`,r&&"fullWidth"]};return(0,s.Z)(o,Re,n)})(w),[C,F]=i.useState((()=>{let e=!1;return l&&i.Children.forEach(l,(n=>{if(!(0,Je.Z)(n,["Input","Select"]))return;const t=(0,Je.Z)(n,["Select"])?n.props.input:n;t&&t.props.startAdornment&&(e=!0)})),e})),[B,M]=i.useState((()=>{let e=!1;return l&&i.Children.forEach(l,(n=>{(0,Je.Z)(n,["Input","Select"])&&(P(n.props,!0)||P(n.props.inputProps,!0))&&(e=!0)})),e})),[S,T]=i.useState(!1);u&&S&&T(!1);const Z=void 0===m||u?S:m;let J;const R=i.useMemo((()=>({adornedStart:C,setAdornedStart:F,color:A,disabled:u,error:h,filled:B,focused:Z,fullWidth:g,hiddenLabel:f,size:x,onBlur:()=>{T(!1)},onEmpty:()=>{M(!1)},onFilled:()=>{M(!0)},onFocus:()=>{T(!0)},registerEffect:J,required:k,variant:v})),[C,A,u,h,B,Z,g,f,J,k,x,v]);return(0,y.jsx)(W.Provider,{value:R,children:(0,y.jsx)($e,(0,r.Z)({as:p,ownerState:w,className:(0,a.Z)(E.root,d),ref:n},z,{children:l}))})}));function Pe(e){return(0,O.Z)("MuiFormHelperText",e)}const _e=(0,_.Z)("MuiFormHelperText",["root","error","disabled","sizeSmall","sizeMedium","contained","focused","filled","required"]);var Oe;const je=["children","className","component","disabled","error","filled","focused","margin","required","variant"],qe=(0,d.ZP)("p",{name:"MuiFormHelperText",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.root,t.size&&n[`size${(0,I.Z)(t.size)}`],t.contained&&n.contained,t.filled&&n.filled]}})((({theme:e,ownerState:n})=>(0,r.Z)({color:(e.vars||e).palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,marginRight:0,marginBottom:0,marginLeft:0,[`&.${_e.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${_e.error}`]:{color:(e.vars||e).palette.error.main}},"small"===n.size&&{marginTop:4},n.contained&&{marginLeft:14,marginRight:14}))),Ne=i.forwardRef((function(e,n){const t=(0,c.Z)({props:e,name:"MuiFormHelperText"}),{children:i,className:l,component:d="p"}=t,A=(0,o.Z)(t,je),p=C({props:t,muiFormControl:F(),states:["variant","size","disabled","error","filled","focused","required"]}),u=(0,r.Z)({},t,{component:d,contained:"filled"===p.variant||"outlined"===p.variant,variant:p.variant,size:p.size,disabled:p.disabled,error:p.error,filled:p.filled,focused:p.focused,required:p.required}),h=(e=>{const{classes:n,contained:t,size:r,disabled:o,error:i,filled:a,focused:l,required:d}=e,c={root:["root",o&&"disabled",i&&"error",r&&`size${(0,I.Z)(r)}`,t&&"contained",l&&"focused",a&&"filled",d&&"required"]};return(0,s.Z)(c,Pe,n)})(u);return(0,y.jsx)(qe,(0,r.Z)({as:d,ownerState:u,className:(0,a.Z)(h.root,l),ref:n},A,{children:" "===i?Oe||(Oe=(0,y.jsx)("span",{className:"notranslate",children:"​"})):i}))}));t(1357);var He=t(9703),Ge=t(2899);const Xe=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function Qe(e,n,t){return e===n?e.firstChild:n&&n.nextElementSibling?n.nextElementSibling:t?null:e.firstChild}function Ve(e,n,t){return e===n?t?e.firstChild:e.lastChild:n&&n.previousElementSibling?n.previousElementSibling:t?null:e.lastChild}function Ke(e,n){if(void 0===n)return!0;let t=e.innerText;return void 0===t&&(t=e.textContent),t=t.trim().toLowerCase(),0!==t.length&&(n.repeating?t[0]===n.keys[0]:0===t.indexOf(n.keys.join("")))}function Ue(e,n,t,r,o,i){let a=!1,s=o(e,n,!!n&&t);for(;s;){if(s===e.firstChild){if(a)return!1;a=!0}const n=!r&&(s.disabled||"true"===s.getAttribute("aria-disabled"));if(s.hasAttribute("tabindex")&&Ke(s,i)&&!n)return s.focus(),!0;s=o(e,s,t)}return!1}const Ye=i.forwardRef((function(e,n){const{actions:t,autoFocus:a=!1,autoFocusItem:s=!1,children:l,className:d,disabledItemsFocusable:c=!1,disableListWrap:A=!1,onKeyDown:p,variant:u="selectedMenu"}=e,h=(0,o.Z)(e,Xe),m=i.useRef(null),g=i.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});(0,M.Z)((()=>{a&&m.current.focus()}),[a]),i.useImperativeHandle(t,(()=>({adjustStyleForScrollbar:(e,n)=>{const t=!m.current.style.width;if(e.clientHeight<m.current.clientHeight&&t){const t=`${function(e){const n=e.documentElement.clientWidth;return Math.abs(window.innerWidth-n)}((0,He.Z)(e))}px`;m.current.style["rtl"===n.direction?"paddingLeft":"paddingRight"]=t,m.current.style.width=`calc(100% + ${t})`}return m.current}})),[]);const f=(0,B.Z)(m,n);let b=-1;i.Children.forEach(l,((e,n)=>{i.isValidElement(e)?(e.props.disabled||("selectedMenu"===u&&e.props.selected||-1===b)&&(b=n),b===n&&(e.props.disabled||e.props.muiSkipListHighlight||e.type.muiSkipListHighlight)&&(b+=1,b>=l.length&&(b=-1))):b===n&&(b+=1,b>=l.length&&(b=-1))}));const k=i.Children.map(l,((e,n)=>{if(n===b){const n={};return s&&(n.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===u&&(n.tabIndex=0),i.cloneElement(e,n)}return e}));return(0,y.jsx)(Ge.Z,(0,r.Z)({role:"menu",ref:f,className:d,onKeyDown:e=>{const n=m.current,t=e.key,r=(0,He.Z)(n).activeElement;if("ArrowDown"===t)e.preventDefault(),Ue(n,r,A,c,Qe);else if("ArrowUp"===t)e.preventDefault(),Ue(n,r,A,c,Ve);else if("Home"===t)e.preventDefault(),Ue(n,null,A,c,Qe);else if("End"===t)e.preventDefault(),Ue(n,null,A,c,Ve);else if(1===t.length){const o=g.current,i=t.toLowerCase(),a=performance.now();o.keys.length>0&&(a-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&i!==o.keys[0]&&(o.repeating=!1)),o.lastTime=a,o.keys.push(i);const s=r&&!o.repeating&&Ke(r,o);o.previousKeyMatched&&(s||Ue(n,r,!1,c,Qe,o))?e.preventDefault():o.previousKeyMatched=!1}p&&p(e)},tabIndex:a?0:-1},h,{children:k}))}));var en=t(8516),nn=t(9815);function tn(e){return(0,O.Z)("MuiMenu",e)}(0,_.Z)("MuiMenu",["root","paper","list"]);const rn=["onEntering"],on=["autoFocus","children","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"],an={vertical:"top",horizontal:"right"},sn={vertical:"top",horizontal:"left"},ln=(0,d.ZP)(en.ZP,{shouldForwardProp:e=>(0,d.FO)(e)||"classes"===e,name:"MuiMenu",slot:"Root",overridesResolver:(e,n)=>n.root})({}),dn=(0,d.ZP)(en.XS,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,n)=>n.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),cn=(0,d.ZP)(Ye,{name:"MuiMenu",slot:"List",overridesResolver:(e,n)=>n.list})({outline:0}),An=i.forwardRef((function(e,n){const t=(0,c.Z)({props:e,name:"MuiMenu"}),{autoFocus:l=!0,children:d,disableAutoFocusItem:A=!1,MenuListProps:p={},onClose:u,open:h,PaperProps:m={},PopoverClasses:g,transitionDuration:f="auto",TransitionProps:{onEntering:b}={},variant:k="selectedMenu"}=t,x=(0,o.Z)(t.TransitionProps,rn),v=(0,o.Z)(t,on),z=(0,nn.Z)(),w="rtl"===z.direction,E=(0,r.Z)({},t,{autoFocus:l,disableAutoFocusItem:A,MenuListProps:p,onEntering:b,PaperProps:m,transitionDuration:f,TransitionProps:x,variant:k}),C=(e=>{const{classes:n}=e;return(0,s.Z)({root:["root"],paper:["paper"],list:["list"]},tn,n)})(E),W=l&&!A&&h,F=i.useRef(null);let I=-1;return i.Children.map(d,((e,n)=>{i.isValidElement(e)&&(e.props.disabled||("selectedMenu"===k&&e.props.selected||-1===I)&&(I=n))})),(0,y.jsx)(ln,(0,r.Z)({onClose:u,anchorOrigin:{vertical:"bottom",horizontal:w?"right":"left"},transformOrigin:w?an:sn,slots:{paper:dn},slotProps:{paper:(0,r.Z)({},m,{classes:(0,r.Z)({},m.classes,{root:C.paper})})},className:C.root,open:h,ref:n,transitionDuration:f,TransitionProps:(0,r.Z)({onEntering:(e,n)=>{F.current&&F.current.adjustStyleForScrollbar(e,z),b&&b(e,n)}},x),ownerState:E},v,{classes:g,children:(0,y.jsx)(cn,(0,r.Z)({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),u&&u(e,"tabKeyDown"))},actions:F,autoFocus:l&&(-1===I||A),autoFocusItem:W,variant:k},p,{className:(0,a.Z)(C.list,p.className),children:d}))}))}));function pn(e){return(0,O.Z)("MuiNativeSelect",e)}const un=(0,_.Z)("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),hn=["className","disabled","error","IconComponent","inputRef","variant"],mn=({ownerState:e,theme:n})=>(0,r.Z)({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":(0,r.Z)({},n.vars?{backgroundColor:`rgba(${n.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:"light"===n.palette.mode?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${un.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(n.vars||n).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},"filled"===e.variant&&{"&&&":{paddingRight:32}},"outlined"===e.variant&&{borderRadius:(n.vars||n).shape.borderRadius,"&:focus":{borderRadius:(n.vars||n).shape.borderRadius},"&&&":{paddingRight:32}}),gn=(0,d.ZP)("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:d.FO,overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.select,n[t.variant],t.error&&n.error,{[`&.${un.multiple}`]:n.multiple}]}})(mn),fn=({ownerState:e,theme:n})=>(0,r.Z)({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(n.vars||n).palette.action.active,[`&.${un.disabled}`]:{color:(n.vars||n).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},"filled"===e.variant&&{right:7},"outlined"===e.variant&&{right:7}),bn=(0,d.ZP)("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.icon,t.variant&&n[`icon${(0,I.Z)(t.variant)}`],t.open&&n.iconOpen]}})(fn),yn=i.forwardRef((function(e,n){const{className:t,disabled:l,error:d,IconComponent:c,inputRef:A,variant:p="standard"}=e,u=(0,o.Z)(e,hn),h=(0,r.Z)({},e,{disabled:l,variant:p,error:d}),m=(e=>{const{classes:n,variant:t,disabled:r,multiple:o,open:i,error:a}=e,l={select:["select",t,r&&"disabled",o&&"multiple",a&&"error"],icon:["icon",`icon${(0,I.Z)(t)}`,i&&"iconOpen",r&&"disabled"]};return(0,s.Z)(l,pn,n)})(h);return(0,y.jsxs)(i.Fragment,{children:[(0,y.jsx)(gn,(0,r.Z)({ownerState:h,className:(0,a.Z)(m.select,t),disabled:l,ref:A||n},u)),e.multiple?null:(0,y.jsx)(bn,{as:c,ownerState:h,className:m.icon})]})}));var kn=t(6028);function xn(e){return(0,O.Z)("MuiSelect",e)}const vn=(0,_.Z)("MuiSelect",["select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]);var zn;const wn=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],En=(0,d.ZP)("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[{[`&.${vn.select}`]:n.select},{[`&.${vn.select}`]:n[t.variant]},{[`&.${vn.error}`]:n.error},{[`&.${vn.multiple}`]:n.multiple}]}})(mn,{[`&.${vn.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),Cn=(0,d.ZP)("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.icon,t.variant&&n[`icon${(0,I.Z)(t.variant)}`],t.open&&n.iconOpen]}})(fn),Wn=(0,d.ZP)("input",{shouldForwardProp:e=>(0,d.Dz)(e)&&"classes"!==e,name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,n)=>n.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function Fn(e,n){return"object"==typeof n&&null!==n?e===n:String(e)===String(n)}function In(e){return null==e||"string"==typeof e&&!e.trim()}const Bn=i.forwardRef((function(e,n){const{"aria-describedby":t,"aria-label":l,autoFocus:d,autoWidth:c,children:A,className:u,defaultOpen:h,defaultValue:m,disabled:g,displayEmpty:f,error:b=!1,IconComponent:k,inputRef:x,labelId:v,MenuProps:z={},multiple:w,name:E,onBlur:C,onChange:W,onClose:F,onFocus:M,onOpen:S,open:T,readOnly:Z,renderValue:J,SelectDisplayProps:R={},tabIndex:D,value:$,variant:L="standard"}=e,_=(0,o.Z)(e,wn),[O,j]=(0,kn.Z)({controlled:$,default:m,name:"Select"}),[q,N]=(0,kn.Z)({controlled:T,default:h,name:"Select"}),H=i.useRef(null),G=i.useRef(null),[X,Q]=i.useState(null),{current:V}=i.useRef(null!=T),[K,U]=i.useState(),Y=(0,B.Z)(n,x),ee=i.useCallback((e=>{G.current=e,e&&Q(e)}),[]),ne=null==X?void 0:X.parentNode;i.useImperativeHandle(Y,(()=>({focus:()=>{G.current.focus()},node:H.current,value:O})),[O]),i.useEffect((()=>{h&&q&&X&&!V&&(U(c?null:ne.clientWidth),G.current.focus())}),[X,c]),i.useEffect((()=>{d&&G.current.focus()}),[d]),i.useEffect((()=>{if(!v)return;const e=(0,He.Z)(G.current).getElementById(v);if(e){const n=()=>{getSelection().isCollapsed&&G.current.focus()};return e.addEventListener("click",n),()=>{e.removeEventListener("click",n)}}}),[v]);const te=(e,n)=>{e?S&&S(n):F&&F(n),V||(U(c?null:ne.clientWidth),N(e))},re=i.Children.toArray(A),oe=e=>n=>{let t;if(n.currentTarget.hasAttribute("tabindex")){if(w){t=Array.isArray(O)?O.slice():[];const n=O.indexOf(e.props.value);-1===n?t.push(e.props.value):t.splice(n,1)}else t=e.props.value;if(e.props.onClick&&e.props.onClick(n),O!==t&&(j(t),W)){const r=n.nativeEvent||n,o=new r.constructor(r.type,r);Object.defineProperty(o,"target",{writable:!0,value:{value:t,name:E}}),W(o,e)}w||te(!1,n)}},ie=null!==X&&q;let ae,se;delete _["aria-invalid"];const le=[];let de=!1,ce=!1;(P({value:O})||f)&&(J?ae=J(O):de=!0);const Ae=re.map((e=>{if(!i.isValidElement(e))return null;let n;if(w){if(!Array.isArray(O))throw new Error((0,p.Z)(2));n=O.some((n=>Fn(n,e.props.value))),n&&de&&le.push(e.props.children)}else n=Fn(O,e.props.value),n&&de&&(se=e.props.children);return n&&(ce=!0),i.cloneElement(e,{"aria-selected":n?"true":"false",onClick:oe(e),onKeyUp:n=>{" "===n.key&&n.preventDefault(),e.props.onKeyUp&&e.props.onKeyUp(n)},role:"option",selected:n,value:void 0,"data-value":e.props.value})}));de&&(ae=w?0===le.length?null:le.reduce(((e,n,t)=>(e.push(n),t<le.length-1&&e.push(", "),e)),[]):se);let pe,ue=K;!c&&V&&X&&(ue=ne.clientWidth),pe=void 0!==D?D:g?null:0;const he=R.id||(E?`mui-component-select-${E}`:void 0),me=(0,r.Z)({},e,{variant:L,value:O,open:ie,error:b}),ge=(e=>{const{classes:n,variant:t,disabled:r,multiple:o,open:i,error:a}=e,l={select:["select",t,r&&"disabled",o&&"multiple",a&&"error"],icon:["icon",`icon${(0,I.Z)(t)}`,i&&"iconOpen",r&&"disabled"],nativeInput:["nativeInput"]};return(0,s.Z)(l,xn,n)})(me);return(0,y.jsxs)(i.Fragment,{children:[(0,y.jsx)(En,(0,r.Z)({ref:ee,tabIndex:pe,role:"button","aria-disabled":g?"true":void 0,"aria-expanded":ie?"true":"false","aria-haspopup":"listbox","aria-label":l,"aria-labelledby":[v,he].filter(Boolean).join(" ")||void 0,"aria-describedby":t,onKeyDown:e=>{Z||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),te(!0,e))},onMouseDown:g||Z?null:e=>{0===e.button&&(e.preventDefault(),G.current.focus(),te(!0,e))},onBlur:e=>{!ie&&C&&(Object.defineProperty(e,"target",{writable:!0,value:{value:O,name:E}}),C(e))},onFocus:M},R,{ownerState:me,className:(0,a.Z)(R.className,ge.select,u),id:he,children:In(ae)?zn||(zn=(0,y.jsx)("span",{className:"notranslate",children:"​"})):ae})),(0,y.jsx)(Wn,(0,r.Z)({"aria-invalid":b,value:Array.isArray(O)?O.join(","):O,name:E,ref:H,"aria-hidden":!0,onChange:e=>{const n=re.find((n=>n.props.value===e.target.value));void 0!==n&&(j(n.props.value),W&&W(e,n))},tabIndex:-1,disabled:g,className:ge.nativeInput,autoFocus:d,ownerState:me},_)),(0,y.jsx)(Cn,{as:k,className:ge.icon,ownerState:me}),(0,y.jsx)(An,(0,r.Z)({id:`menu-${E||""}`,anchorEl:ne,open:ie,onClose:e=>{te(!1,e)},anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},z,{MenuListProps:(0,r.Z)({"aria-labelledby":v,role:"listbox",disableListWrap:!0},z.MenuListProps),PaperProps:(0,r.Z)({},z.PaperProps,{style:(0,r.Z)({minWidth:ue},null!=z.PaperProps?z.PaperProps.style:null)}),children:Ae}))]})})),Mn=(0,t(9488).Z)((0,y.jsx)("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown"),Sn=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],Tn={name:"MuiSelect",overridesResolver:(e,n)=>n.root,shouldForwardProp:e=>(0,d.FO)(e)&&"variant"!==e,slot:"Root"},Zn=(0,d.ZP)(ie,Tn)(""),Jn=(0,d.ZP)(we,Tn)(""),Rn=(0,d.ZP)(pe,Tn)(""),Dn=i.forwardRef((function(e,n){const t=(0,c.Z)({name:"MuiSelect",props:e}),{autoWidth:s=!1,children:l,classes:d={},className:p,defaultOpen:u=!1,displayEmpty:h=!1,IconComponent:m=Mn,id:g,input:f,inputProps:b,label:k,labelId:x,MenuProps:v,multiple:z=!1,native:w=!1,onClose:E,onOpen:W,open:I,renderValue:M,SelectDisplayProps:S,variant:T="outlined"}=t,Z=(0,o.Z)(t,Sn),J=w?yn:Bn,R=C({props:t,muiFormControl:F(),states:["variant","error"]}),D=R.variant||T,$=(0,r.Z)({},t,{variant:D,classes:d}),L=(e=>{const{classes:n}=e;return n})($),P=f||{standard:(0,y.jsx)(Zn,{ownerState:$}),outlined:(0,y.jsx)(Jn,{label:k,ownerState:$}),filled:(0,y.jsx)(Rn,{ownerState:$})}[D],_=(0,B.Z)(n,P.ref);return(0,y.jsx)(i.Fragment,{children:i.cloneElement(P,(0,r.Z)({inputComponent:J,inputProps:(0,r.Z)({children:l,error:R.error,IconComponent:m,variant:D,type:void 0,multiple:z},w?{id:g}:{autoWidth:s,defaultOpen:u,displayEmpty:h,labelId:x,MenuProps:v,onClose:E,onOpen:W,open:I,renderValue:M,SelectDisplayProps:(0,r.Z)({id:g},S)},b,{classes:b?(0,A.Z)(L,b.classes):L},f?f.props.inputProps:{})},z&&w&&"outlined"===D?{notched:!0}:{},{ref:_,className:(0,a.Z)(P.props.className,p)},!f&&{variant:D},Z))})}));Dn.muiName="Select";const $n=Dn;function Ln(e){return(0,O.Z)("MuiTextField",e)}(0,_.Z)("MuiTextField",["root"]);const Pn=["autoComplete","autoFocus","children","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","placeholder","required","rows","select","SelectProps","type","value","variant"],_n={standard:ie,filled:pe,outlined:we},On=(0,d.ZP)(Le,{name:"MuiTextField",slot:"Root",overridesResolver:(e,n)=>n.root})({}),jn=i.forwardRef((function(e,n){const t=(0,c.Z)({props:e,name:"MuiTextField"}),{autoComplete:i,autoFocus:d=!1,children:A,className:p,color:u="primary",defaultValue:h,disabled:m=!1,error:g=!1,FormHelperTextProps:f,fullWidth:b=!1,helperText:k,id:x,InputLabelProps:v,inputProps:z,InputProps:w,inputRef:E,label:C,maxRows:W,minRows:F,multiline:I=!1,name:B,onBlur:M,onChange:S,onClick:T,onFocus:Z,placeholder:J,required:R=!1,rows:D,select:$=!1,SelectProps:L,type:P,value:_,variant:O="outlined"}=t,j=(0,o.Z)(t,Pn),q=(0,r.Z)({},t,{autoFocus:d,color:u,disabled:m,error:g,fullWidth:b,multiline:I,required:R,select:$,variant:O}),N=(e=>{const{classes:n}=e;return(0,s.Z)({root:["root"]},Ln,n)})(q),H={};"outlined"===O&&(v&&void 0!==v.shrink&&(H.notched=v.shrink),H.label=C),$&&(L&&L.native||(H.id=void 0),H["aria-describedby"]=void 0);const G=(0,l.Z)(x),X=k&&G?`${G}-helper-text`:void 0,Q=C&&G?`${G}-label`:void 0,V=_n[O],K=(0,y.jsx)(V,(0,r.Z)({"aria-describedby":X,autoComplete:i,autoFocus:d,defaultValue:h,fullWidth:b,multiline:I,name:B,rows:D,maxRows:W,minRows:F,type:P,value:_,id:G,inputRef:E,onBlur:M,onChange:S,onFocus:Z,onClick:T,placeholder:J,inputProps:z},H,w));return(0,y.jsxs)(On,(0,r.Z)({className:(0,a.Z)(N.root,p),disabled:m,error:g,fullWidth:b,ref:n,required:R,color:u,variant:O,ownerState:q},j,{children:[null!=C&&""!==C&&(0,y.jsx)(Ze,(0,r.Z)({htmlFor:G,id:Q},v,{children:C})),$?(0,y.jsx)($n,(0,r.Z)({"aria-describedby":X,id:G,labelId:Q,value:_,input:K},L,{children:A})):K,k&&(0,y.jsx)(Ne,(0,r.Z)({id:X},f,{children:k}))]}))}))},9488:(e,n,t)=>{"use strict";t.d(n,{Z:()=>y});var r=t(7366),o=t(959),i=t(4529),a=t(5924),s=t(6337),l=t(6885),d=t(9301),c=t(5428),A=t(5083),p=t(7810);function u(e){return(0,p.Z)("MuiSvgIcon",e)}(0,A.Z)("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);var h=t(1527);const m=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],g=(0,c.ZP)("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,n)=>{const{ownerState:t}=e;return[n.root,"inherit"!==t.color&&n[`color${(0,l.Z)(t.color)}`],n[`fontSize${(0,l.Z)(t.fontSize)}`]]}})((({theme:e,ownerState:n})=>{var t,r,o,i,a,s,l,d,c,A,p,u,h;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:n.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:null==(t=e.transitions)||null==(r=t.create)?void 0:r.call(t,"fill",{duration:null==(o=e.transitions)||null==(o=o.duration)?void 0:o.shorter}),fontSize:{inherit:"inherit",small:(null==(i=e.typography)||null==(a=i.pxToRem)?void 0:a.call(i,20))||"1.25rem",medium:(null==(s=e.typography)||null==(l=s.pxToRem)?void 0:l.call(s,24))||"1.5rem",large:(null==(d=e.typography)||null==(c=d.pxToRem)?void 0:c.call(d,35))||"2.1875rem"}[n.fontSize],color:null!=(A=null==(p=(e.vars||e).palette)||null==(p=p[n.color])?void 0:p.main)?A:{action:null==(u=(e.vars||e).palette)||null==(u=u.action)?void 0:u.active,disabled:null==(h=(e.vars||e).palette)||null==(h=h.action)?void 0:h.disabled,inherit:void 0}[n.color]}})),f=o.forwardRef((function(e,n){const t=(0,d.Z)({props:e,name:"MuiSvgIcon"}),{children:c,className:A,color:p="inherit",component:f="svg",fontSize:b="medium",htmlColor:y,inheritViewBox:k=!1,titleAccess:x,viewBox:v="0 0 24 24"}=t,z=(0,i.Z)(t,m),w=o.isValidElement(c)&&"svg"===c.type,E=(0,r.Z)({},t,{color:p,component:f,fontSize:b,instanceFontSize:e.fontSize,inheritViewBox:k,viewBox:v,hasSvgAsChild:w}),C={};k||(C.viewBox=v);const W=(e=>{const{color:n,fontSize:t,classes:r}=e,o={root:["root","inherit"!==n&&`color${(0,l.Z)(n)}`,`fontSize${(0,l.Z)(t)}`]};return(0,s.Z)(o,u,r)})(E);return(0,h.jsxs)(g,(0,r.Z)({as:f,className:(0,a.Z)(W.root,A),focusable:"false",color:y,"aria-hidden":!x||void 0,role:x?"img":void 0,ref:n},C,z,w&&c.props,{ownerState:E,children:[w?c.props.children:c,x?(0,h.jsx)("title",{children:x}):null]}))}));f.muiName="SvgIcon";const b=f;function y(e,n){function t(t,o){return(0,h.jsx)(b,(0,r.Z)({"data-testid":`${n}Icon`,ref:o},t,{children:e}))}return t.muiName=b.muiName,o.memo(o.forwardRef(t))}},6112:(e,n,t)=>{"use strict";t.r(n),t.d(n,{capitalize:()=>o.Z,createChainedFunction:()=>i,createSvgIcon:()=>a.Z,debounce:()=>s.Z,deprecatedPropType:()=>l,isMuiElement:()=>d.Z,ownerDocument:()=>c.Z,ownerWindow:()=>A.Z,requirePropFactory:()=>p,setRef:()=>u,unstable_ClassNameGenerator:()=>x,unstable_useEnhancedEffect:()=>h.Z,unstable_useId:()=>m,unsupportedProp:()=>g,useControlled:()=>f.Z,useEventCallback:()=>b.Z,useForkRef:()=>y.Z,useIsFocusVisible:()=>k.Z});var r=t(895),o=t(6885);const i=function(...e){return e.reduce(((e,n)=>null==n?e:function(...t){e.apply(this,t),n.apply(this,t)}),(()=>{}))};var a=t(9488),s=t(3754);const l=function(e,n){return()=>null};var d=t(9162),c=t(9703),A=t(7535);t(7605);const p=function(e,n){return()=>null},u=t(9186).Z;var h=t(9948);const m=t(5009).Z,g=function(e,n,t,r,o){return null};var f=t(6028),b=t(8471),y=t(2351),k=t(591);const x={configure:e=>{r.Z.configure(e)}}},9162:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var r=t(959);const o=function(e,n){return r.isValidElement(e)&&-1!==n.indexOf(e.type.muiName)}},6028:(e,n,t)=>{"use strict";t.d(n,{Z:()=>o});var r=t(959);const o=function({controlled:e,default:n,name:t,state:o="value"}){const{current:i}=r.useRef(void 0!==e),[a,s]=r.useState(n);return[i?e:a,r.useCallback((e=>{i||s(e)}),[])]}},5009:(e,n,t)=>{"use strict";var r;t.d(n,{Z:()=>s});var o=t(959);let i=0;const a=(r||(r=t.t(o,2)))["useId".toString()];function s(e){if(void 0!==a){const n=a();return null!=e?e:n}return function(e){const[n,t]=o.useState(e),r=e||n;return o.useEffect((()=>{null==n&&(i+=1,t(`mui-${i}`))}),[n]),r}(e)}},4340:(e,n,t)=>{"use strict";t.d(n,{Z:()=>p});var r=t(187),o=t.n(r),i=t(3282),a=t.n(i),s=t(6668),l=t.n(s),d=new URL(t(1251),t.b),c=a()(o()),A=l()(d);c.push([e.id,`@media (prefers-color-scheme: dark) {\n  .JTIzpWAWzFszir0t9BAM {\n    color-scheme: dark;\n    --color-prettylights-syntax-comment: #8b949e;\n    --color-prettylights-syntax-constant: #79c0ff;\n    --color-prettylights-syntax-entity: #d2a8ff;\n    --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\n    --color-prettylights-syntax-entity-tag: #7ee787;\n    --color-prettylights-syntax-keyword: #ff7b72;\n    --color-prettylights-syntax-string: #a5d6ff;\n    --color-prettylights-syntax-variable: #ffa657;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\n    --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\n    --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\n    --color-prettylights-syntax-carriage-return-text: #f0f6fc;\n    --color-prettylights-syntax-carriage-return-bg: #b62324;\n    --color-prettylights-syntax-string-regexp: #7ee787;\n    --color-prettylights-syntax-markup-list: #f2cc60;\n    --color-prettylights-syntax-markup-heading: #1f6feb;\n    --color-prettylights-syntax-markup-italic: #c9d1d9;\n    --color-prettylights-syntax-markup-bold: #c9d1d9;\n    --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\n    --color-prettylights-syntax-markup-deleted-bg: #67060c;\n    --color-prettylights-syntax-markup-inserted-text: #aff5b4;\n    --color-prettylights-syntax-markup-inserted-bg: #033a16;\n    --color-prettylights-syntax-markup-changed-text: #ffdfb6;\n    --color-prettylights-syntax-markup-changed-bg: #5a1e02;\n    --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\n    --color-prettylights-syntax-markup-ignored-bg: #1158c7;\n    --color-prettylights-syntax-meta-diff-range: #d2a8ff;\n    --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\n    --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\n    --color-fg-default: #c9d1d9;\n    --color-fg-muted: #8b949e;\n    --color-fg-subtle: #6e7681;\n    --color-canvas-default: #0d1117;\n    --color-canvas-subtle: #161b22;\n    --color-border-default: #30363d;\n    --color-border-muted: #21262d;\n    --color-neutral-muted: rgba(110, 118, 129, 0.4);\n    --color-accent-fg: #58a6ff;\n    --color-accent-emphasis: #1f6feb;\n    --color-attention-subtle: rgba(187, 128, 9, 0.15);\n    --color-danger-fg: #f85149;\n  }\n}\n@media (prefers-color-scheme: light) {\n  .JTIzpWAWzFszir0t9BAM {\n    color-scheme: light;\n    --color-prettylights-syntax-comment: #6e7781;\n    --color-prettylights-syntax-constant: #0550ae;\n    --color-prettylights-syntax-entity: #8250df;\n    --color-prettylights-syntax-storage-modifier-import: #24292f;\n    --color-prettylights-syntax-entity-tag: #116329;\n    --color-prettylights-syntax-keyword: #cf222e;\n    --color-prettylights-syntax-string: #0a3069;\n    --color-prettylights-syntax-variable: #953800;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\n    --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\n    --color-prettylights-syntax-invalid-illegal-bg: #82071e;\n    --color-prettylights-syntax-carriage-return-text: #f6f8fa;\n    --color-prettylights-syntax-carriage-return-bg: #cf222e;\n    --color-prettylights-syntax-string-regexp: #116329;\n    --color-prettylights-syntax-markup-list: #3b2300;\n    --color-prettylights-syntax-markup-heading: #0550ae;\n    --color-prettylights-syntax-markup-italic: #24292f;\n    --color-prettylights-syntax-markup-bold: #24292f;\n    --color-prettylights-syntax-markup-deleted-text: #82071e;\n    --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\n    --color-prettylights-syntax-markup-inserted-text: #116329;\n    --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\n    --color-prettylights-syntax-markup-changed-text: #953800;\n    --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\n    --color-prettylights-syntax-markup-ignored-text: #eaeef2;\n    --color-prettylights-syntax-markup-ignored-bg: #0550ae;\n    --color-prettylights-syntax-meta-diff-range: #8250df;\n    --color-prettylights-syntax-brackethighlighter-angle: #57606a;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\n    --color-prettylights-syntax-constant-other-reference-link: #0a3069;\n    --color-fg-default: #24292f;\n    --color-fg-muted: #57606a;\n    --color-fg-subtle: #6e7781;\n    --color-canvas-default: #ffffff;\n    --color-canvas-subtle: #f6f8fa;\n    --color-border-default: #d0d7de;\n    --color-border-muted: hsl(210, 18%, 87%);\n    --color-neutral-muted: rgba(175, 184, 193, 0.2);\n    --color-accent-fg: #0969da;\n    --color-accent-emphasis: #0969da;\n    --color-attention-subtle: #fff8c5;\n    --color-danger-fg: #cf222e;\n  }\n}\n.JTIzpWAWzFszir0t9BAM {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  margin: 0;\n  color: var(--color-fg-default);\n  background-color: var(--color-canvas-default);\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Noto Sans", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n.JTIzpWAWzFszir0t9BAM .ZtsvEhcDSF51AlNAw5bX {\n  display: inline-block;\n  fill: currentColor;\n  vertical-align: text-bottom;\n}\n.JTIzpWAWzFszir0t9BAM h1:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h2:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h3:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h4:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h5:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before,\n.JTIzpWAWzFszir0t9BAM h6:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM:before {\n  width: 16px;\n  height: 16px;\n  content: ' ';\n  display: inline-block;\n  background-color: currentColor;\n  -webkit-mask-image: url(${A});\n  mask-image: url(${A});\n}\n.JTIzpWAWzFszir0t9BAM details,\n.JTIzpWAWzFszir0t9BAM figcaption,\n.JTIzpWAWzFszir0t9BAM figure {\n  display: block;\n}\n.JTIzpWAWzFszir0t9BAM summary {\n  display: list-item;\n}\n.JTIzpWAWzFszir0t9BAM [hidden] {\n  display: none !important;\n}\n.JTIzpWAWzFszir0t9BAM a {\n  background-color: transparent;\n  color: var(--color-accent-fg);\n  text-decoration: none;\n}\n.JTIzpWAWzFszir0t9BAM abbr[title] {\n  border-bottom: none;\n  text-decoration: underline dotted;\n}\n.JTIzpWAWzFszir0t9BAM b,\n.JTIzpWAWzFszir0t9BAM strong {\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n.JTIzpWAWzFszir0t9BAM dfn {\n  font-style: italic;\n}\n.JTIzpWAWzFszir0t9BAM h1 {\n  margin: 0.67em 0;\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: 0.3em;\n  font-size: 2em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n.JTIzpWAWzFszir0t9BAM mark {\n  background-color: var(--color-attention-subtle);\n  color: var(--color-fg-default);\n}\n.JTIzpWAWzFszir0t9BAM small {\n  font-size: 90%;\n}\n.JTIzpWAWzFszir0t9BAM sub,\n.JTIzpWAWzFszir0t9BAM sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.JTIzpWAWzFszir0t9BAM sub {\n  bottom: -0.25em;\n}\n.JTIzpWAWzFszir0t9BAM sup {\n  top: -0.5em;\n}\n.JTIzpWAWzFszir0t9BAM img {\n  border-style: none;\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: var(--color-canvas-default);\n}\n.JTIzpWAWzFszir0t9BAM code,\n.JTIzpWAWzFszir0t9BAM kbd,\n.JTIzpWAWzFszir0t9BAM pre,\n.JTIzpWAWzFszir0t9BAM samp {\n  font-family: monospace;\n  font-size: 1em;\n}\n.JTIzpWAWzFszir0t9BAM figure {\n  margin: 1em 40px;\n}\n.JTIzpWAWzFszir0t9BAM hr {\n  box-sizing: content-box;\n  overflow: hidden;\n  background: transparent;\n  border-bottom: 1px solid var(--color-border-muted);\n  height: 0.25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: var(--color-border-default);\n  border: 0;\n}\n.JTIzpWAWzFszir0t9BAM input {\n  font: inherit;\n  margin: 0;\n  overflow: visible;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n.JTIzpWAWzFszir0t9BAM [type=button],\n.JTIzpWAWzFszir0t9BAM [type=reset],\n.JTIzpWAWzFszir0t9BAM [type=submit] {\n  -webkit-appearance: button;\n}\n.JTIzpWAWzFszir0t9BAM [type=checkbox],\n.JTIzpWAWzFszir0t9BAM [type=radio] {\n  box-sizing: border-box;\n  padding: 0;\n}\n.JTIzpWAWzFszir0t9BAM [type=number]::-webkit-inner-spin-button,\n.JTIzpWAWzFszir0t9BAM [type=number]::-webkit-outer-spin-button {\n  height: auto;\n}\n.JTIzpWAWzFszir0t9BAM [type=search]::-webkit-search-cancel-button,\n.JTIzpWAWzFszir0t9BAM [type=search]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n.JTIzpWAWzFszir0t9BAM ::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.54;\n}\n.JTIzpWAWzFszir0t9BAM ::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n.JTIzpWAWzFszir0t9BAM a:hover {\n  text-decoration: underline;\n}\n.JTIzpWAWzFszir0t9BAM ::placeholder {\n  color: var(--color-fg-subtle);\n  opacity: 1;\n}\n.JTIzpWAWzFszir0t9BAM hr::before {\n  display: table;\n  content: "";\n}\n.JTIzpWAWzFszir0t9BAM hr::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n.JTIzpWAWzFszir0t9BAM table {\n  border-spacing: 0;\n  border-collapse: collapse;\n  display: block;\n  width: max-content;\n  max-width: 100%;\n  overflow: auto;\n}\n.JTIzpWAWzFszir0t9BAM td,\n.JTIzpWAWzFszir0t9BAM th {\n  padding: 0;\n}\n.JTIzpWAWzFszir0t9BAM details summary {\n  cursor: pointer;\n}\n.JTIzpWAWzFszir0t9BAM details:not([open]) > *:not(summary) {\n  display: none !important;\n}\n.JTIzpWAWzFszir0t9BAM a:focus,\n.JTIzpWAWzFszir0t9BAM [role=button]:focus,\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus,\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus {\n  outline: 2px solid var(--color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n.JTIzpWAWzFszir0t9BAM a:focus:not(:focus-visible),\n.JTIzpWAWzFszir0t9BAM [role=button]:focus:not(:focus-visible),\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus:not(:focus-visible),\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus:not(:focus-visible) {\n  outline: solid 1px transparent;\n}\n.JTIzpWAWzFszir0t9BAM a:focus-visible,\n.JTIzpWAWzFszir0t9BAM [role=button]:focus-visible,\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus-visible,\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus-visible {\n  outline: 2px solid var(--color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n.JTIzpWAWzFszir0t9BAM a:not([class]):focus,\n.JTIzpWAWzFszir0t9BAM a:not([class]):focus-visible,\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus,\n.JTIzpWAWzFszir0t9BAM input[type=radio]:focus-visible,\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus,\n.JTIzpWAWzFszir0t9BAM input[type=checkbox]:focus-visible {\n  outline-offset: 0;\n}\n.JTIzpWAWzFszir0t9BAM kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  line-height: 10px;\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  background-color: var(--color-canvas-subtle);\n  border: solid 1px var(--color-neutral-muted);\n  border-bottom-color: var(--color-neutral-muted);\n  border-radius: 6px;\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\n}\n.JTIzpWAWzFszir0t9BAM h1,\n.JTIzpWAWzFszir0t9BAM h2,\n.JTIzpWAWzFszir0t9BAM h3,\n.JTIzpWAWzFszir0t9BAM h4,\n.JTIzpWAWzFszir0t9BAM h5,\n.JTIzpWAWzFszir0t9BAM h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: var(--base-text-weight-semibold, 600);\n  line-height: 1.25;\n}\n.JTIzpWAWzFszir0t9BAM h2 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: 0.3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n.JTIzpWAWzFszir0t9BAM h3 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1.25em;\n}\n.JTIzpWAWzFszir0t9BAM h4 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1em;\n}\n.JTIzpWAWzFszir0t9BAM h5 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 0.875em;\n}\n.JTIzpWAWzFszir0t9BAM h6 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 0.85em;\n  color: var(--color-fg-muted);\n}\n.JTIzpWAWzFszir0t9BAM p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n.JTIzpWAWzFszir0t9BAM blockquote {\n  margin: 0;\n  padding: 0 1em;\n  color: var(--color-fg-muted);\n  border-left: 0.25em solid var(--color-border-default);\n}\n.JTIzpWAWzFszir0t9BAM ul,\n.JTIzpWAWzFszir0t9BAM ol {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 2em;\n}\n.JTIzpWAWzFszir0t9BAM ol ol,\n.JTIzpWAWzFszir0t9BAM ul ol {\n  list-style-type: lower-roman;\n}\n.JTIzpWAWzFszir0t9BAM ul ul ol,\n.JTIzpWAWzFszir0t9BAM ul ol ol,\n.JTIzpWAWzFszir0t9BAM ol ul ol,\n.JTIzpWAWzFszir0t9BAM ol ol ol {\n  list-style-type: lower-alpha;\n}\n.JTIzpWAWzFszir0t9BAM dd {\n  margin-left: 0;\n}\n.JTIzpWAWzFszir0t9BAM tt,\n.JTIzpWAWzFszir0t9BAM code,\n.JTIzpWAWzFszir0t9BAM samp {\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  font-size: 12px;\n}\n.JTIzpWAWzFszir0t9BAM pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-family: ui-monospace, SFMono-Regular, SF Mono, Menlo, Consolas, Liberation Mono, monospace;\n  font-size: 12px;\n  word-wrap: normal;\n}\n.JTIzpWAWzFszir0t9BAM .ZtsvEhcDSF51AlNAw5bX {\n  display: inline-block;\n  overflow: visible !important;\n  vertical-align: text-bottom;\n  fill: currentColor;\n}\n.JTIzpWAWzFszir0t9BAM input::-webkit-outer-spin-button,\n.JTIzpWAWzFszir0t9BAM input::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n  appearance: none;\n}\n.JTIzpWAWzFszir0t9BAM::before {\n  display: table;\n  content: "";\n}\n.JTIzpWAWzFszir0t9BAM::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n.JTIzpWAWzFszir0t9BAM > *:first-child {\n  margin-top: 0 !important;\n}\n.JTIzpWAWzFszir0t9BAM > *:last-child {\n  margin-bottom: 0 !important;\n}\n.JTIzpWAWzFszir0t9BAM a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n.JTIzpWAWzFszir0t9BAM .IA6SgHbm0Y7OBhOVhkTA {\n  color: var(--color-danger-fg);\n}\n.JTIzpWAWzFszir0t9BAM .XGxKfA1eh75FuEQvL6pd {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n.JTIzpWAWzFszir0t9BAM .XGxKfA1eh75FuEQvL6pd:focus {\n  outline: none;\n}\n.JTIzpWAWzFszir0t9BAM p,\n.JTIzpWAWzFszir0t9BAM blockquote,\n.JTIzpWAWzFszir0t9BAM ul,\n.JTIzpWAWzFszir0t9BAM ol,\n.JTIzpWAWzFszir0t9BAM dl,\n.JTIzpWAWzFszir0t9BAM table,\n.JTIzpWAWzFszir0t9BAM pre,\n.JTIzpWAWzFszir0t9BAM details {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n.JTIzpWAWzFszir0t9BAM blockquote > :first-child {\n  margin-top: 0;\n}\n.JTIzpWAWzFszir0t9BAM blockquote > :last-child {\n  margin-bottom: 0;\n}\n.JTIzpWAWzFszir0t9BAM h1 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h2 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h3 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h4 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h5 .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h6 .dWtgNrd2FLAIgXW_saQM {\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  visibility: hidden;\n}\n.JTIzpWAWzFszir0t9BAM h1:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h2:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h3:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h4:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h5:hover .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM h6:hover .XGxKfA1eh75FuEQvL6pd {\n  text-decoration: none;\n}\n.JTIzpWAWzFszir0t9BAM h1:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h2:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h3:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h4:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h5:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM,\n.JTIzpWAWzFszir0t9BAM h6:hover .XGxKfA1eh75FuEQvL6pd .dWtgNrd2FLAIgXW_saQM {\n  visibility: visible;\n}\n.JTIzpWAWzFszir0t9BAM h1 tt,\n.JTIzpWAWzFszir0t9BAM h1 code,\n.JTIzpWAWzFszir0t9BAM h2 tt,\n.JTIzpWAWzFszir0t9BAM h2 code,\n.JTIzpWAWzFszir0t9BAM h3 tt,\n.JTIzpWAWzFszir0t9BAM h3 code,\n.JTIzpWAWzFszir0t9BAM h4 tt,\n.JTIzpWAWzFszir0t9BAM h4 code,\n.JTIzpWAWzFszir0t9BAM h5 tt,\n.JTIzpWAWzFszir0t9BAM h5 code,\n.JTIzpWAWzFszir0t9BAM h6 tt,\n.JTIzpWAWzFszir0t9BAM h6 code {\n  padding: 0 0.2em;\n  font-size: inherit;\n}\n.JTIzpWAWzFszir0t9BAM summary h1,\n.JTIzpWAWzFszir0t9BAM summary h2,\n.JTIzpWAWzFszir0t9BAM summary h3,\n.JTIzpWAWzFszir0t9BAM summary h4,\n.JTIzpWAWzFszir0t9BAM summary h5,\n.JTIzpWAWzFszir0t9BAM summary h6 {\n  display: inline-block;\n}\n.JTIzpWAWzFszir0t9BAM summary h1 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h2 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h3 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h4 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h5 .XGxKfA1eh75FuEQvL6pd,\n.JTIzpWAWzFszir0t9BAM summary h6 .XGxKfA1eh75FuEQvL6pd {\n  margin-left: -40px;\n}\n.JTIzpWAWzFszir0t9BAM summary h1,\n.JTIzpWAWzFszir0t9BAM summary h2 {\n  padding-bottom: 0;\n  border-bottom: 0;\n}\n.JTIzpWAWzFszir0t9BAM ul.Ah464Xli3hvh5g0FxDU6,\n.JTIzpWAWzFszir0t9BAM ol.Ah464Xli3hvh5g0FxDU6 {\n  padding: 0;\n  list-style-type: none;\n}\n.JTIzpWAWzFszir0t9BAM ol[type=a] {\n  list-style-type: lower-alpha;\n}\n.JTIzpWAWzFszir0t9BAM ol[type=A] {\n  list-style-type: upper-alpha;\n}\n.JTIzpWAWzFszir0t9BAM ol[type=i] {\n  list-style-type: lower-roman;\n}\n.JTIzpWAWzFszir0t9BAM ol[type=I] {\n  list-style-type: upper-roman;\n}\n.JTIzpWAWzFszir0t9BAM ol[type="1"] {\n  list-style-type: decimal;\n}\n.JTIzpWAWzFszir0t9BAM div > ol:not([type]) {\n  list-style-type: decimal;\n}\n.JTIzpWAWzFszir0t9BAM ul ul,\n.JTIzpWAWzFszir0t9BAM ul ol,\n.JTIzpWAWzFszir0t9BAM ol ol,\n.JTIzpWAWzFszir0t9BAM ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.JTIzpWAWzFszir0t9BAM li > p {\n  margin-top: 16px;\n}\n.JTIzpWAWzFszir0t9BAM li + li {\n  margin-top: 0.25em;\n}\n.JTIzpWAWzFszir0t9BAM dl {\n  padding: 0;\n}\n.JTIzpWAWzFszir0t9BAM dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n.JTIzpWAWzFszir0t9BAM dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n.JTIzpWAWzFszir0t9BAM table th {\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n.JTIzpWAWzFszir0t9BAM table th,\n.JTIzpWAWzFszir0t9BAM table td {\n  padding: 6px 13px;\n  border: 1px solid var(--color-border-default);\n}\n.JTIzpWAWzFszir0t9BAM table tr {\n  background-color: var(--color-canvas-default);\n  border-top: 1px solid var(--color-border-muted);\n}\n.JTIzpWAWzFszir0t9BAM table tr:nth-child(2n) {\n  background-color: var(--color-canvas-subtle);\n}\n.JTIzpWAWzFszir0t9BAM table img {\n  background-color: transparent;\n}\n.JTIzpWAWzFszir0t9BAM img[align=right] {\n  padding-left: 20px;\n}\n.JTIzpWAWzFszir0t9BAM img[align=left] {\n  padding-right: 20px;\n}\n.JTIzpWAWzFszir0t9BAM .ZS4ACM_E97QtVXIrTh0v {\n  max-width: none;\n  vertical-align: text-top;\n  background-color: transparent;\n}\n.JTIzpWAWzFszir0t9BAM span.lDnbOZAfGYELmWGezfML {\n  display: block;\n  overflow: hidden;\n}\n.JTIzpWAWzFszir0t9BAM span.lDnbOZAfGYELmWGezfML > span {\n  display: block;\n  float: left;\n  width: auto;\n  padding: 7px;\n  margin: 13px 0 0;\n  overflow: hidden;\n  border: 1px solid var(--color-border-default);\n}\n.JTIzpWAWzFszir0t9BAM span.lDnbOZAfGYELmWGezfML span img {\n  display: block;\n  float: left;\n}\n.JTIzpWAWzFszir0t9BAM span.lDnbOZAfGYELmWGezfML span span {\n  display: block;\n  padding: 5px 0 0;\n  clear: both;\n  color: var(--color-fg-default);\n}\n.JTIzpWAWzFszir0t9BAM span.eu2h77uDdxK5MXdfeTZw {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n.JTIzpWAWzFszir0t9BAM span.eu2h77uDdxK5MXdfeTZw > span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: center;\n}\n.JTIzpWAWzFszir0t9BAM span.eu2h77uDdxK5MXdfeTZw span img {\n  margin: 0 auto;\n  text-align: center;\n}\n.JTIzpWAWzFszir0t9BAM span.JTSEVjrxW64bL21abrdJ {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n.JTIzpWAWzFszir0t9BAM span.JTSEVjrxW64bL21abrdJ > span {\n  display: block;\n  margin: 13px 0 0;\n  overflow: hidden;\n  text-align: right;\n}\n.JTIzpWAWzFszir0t9BAM span.JTSEVjrxW64bL21abrdJ span img {\n  margin: 0;\n  text-align: right;\n}\n.JTIzpWAWzFszir0t9BAM span.ZfcdU4S5q9EFQYTDAokN {\n  display: block;\n  float: left;\n  margin-right: 13px;\n  overflow: hidden;\n}\n.JTIzpWAWzFszir0t9BAM span.ZfcdU4S5q9EFQYTDAokN span {\n  margin: 13px 0 0;\n}\n.JTIzpWAWzFszir0t9BAM span.RobxFGLXur1Y7UKmUbGc {\n  display: block;\n  float: right;\n  margin-left: 13px;\n  overflow: hidden;\n}\n.JTIzpWAWzFszir0t9BAM span.RobxFGLXur1Y7UKmUbGc > span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: right;\n}\n.JTIzpWAWzFszir0t9BAM code,\n.JTIzpWAWzFszir0t9BAM tt {\n  padding: 0.2em 0.4em;\n  margin: 0;\n  font-size: 85%;\n  white-space: break-spaces;\n  background-color: var(--color-neutral-muted);\n  border-radius: 6px;\n}\n.JTIzpWAWzFszir0t9BAM code br,\n.JTIzpWAWzFszir0t9BAM tt br {\n  display: none;\n}\n.JTIzpWAWzFszir0t9BAM del code {\n  text-decoration: inherit;\n}\n.JTIzpWAWzFszir0t9BAM samp {\n  font-size: 85%;\n}\n.JTIzpWAWzFszir0t9BAM pre code {\n  font-size: 100%;\n}\n.JTIzpWAWzFszir0t9BAM pre > code {\n  padding: 0;\n  margin: 0;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n.JTIzpWAWzFszir0t9BAM .VdUq4nEhjxaTJ35ZWZj3 {\n  margin-bottom: 16px;\n}\n.JTIzpWAWzFszir0t9BAM .VdUq4nEhjxaTJ35ZWZj3 pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n.JTIzpWAWzFszir0t9BAM .VdUq4nEhjxaTJ35ZWZj3 pre,\n.JTIzpWAWzFszir0t9BAM pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: var(--color-canvas-subtle);\n  border-radius: 6px;\n}\n.JTIzpWAWzFszir0t9BAM pre code,\n.JTIzpWAWzFszir0t9BAM pre tt {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE td,\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE th {\n  padding: 5px;\n  overflow: hidden;\n  font-size: 12px;\n  line-height: 1;\n  text-align: left;\n  white-space: nowrap;\n}\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE .uoPcs60bZ4EnaQf87ive {\n  padding: 10px 8px 9px;\n  text-align: right;\n  background: var(--color-canvas-default);\n  border: 0;\n}\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE tr {\n  border-top: 0;\n}\n.JTIzpWAWzFszir0t9BAM .qJTkIFPsS1XetkWVe1wE th {\n  font-weight: var(--base-text-weight-semibold, 600);\n  background: var(--color-canvas-subtle);\n  border-top: 0;\n}\n.JTIzpWAWzFszir0t9BAM [data-footnote-ref]::before {\n  content: "[";\n}\n.JTIzpWAWzFszir0t9BAM [data-footnote-ref]::after {\n  content: "]";\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w {\n  font-size: 12px;\n  color: var(--color-fg-muted);\n  border-top: 1px solid var(--color-border-default);\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w ol {\n  padding-left: 16px;\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w ol ul {\n  display: inline-block;\n  padding-left: 16px;\n  margin-top: 16px;\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w li {\n  position: relative;\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w li:target::before {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  bottom: -8px;\n  left: -24px;\n  pointer-events: none;\n  content: "";\n  border: 2px solid var(--color-accent-emphasis);\n  border-radius: 6px;\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w li:target {\n  color: var(--color-fg-default);\n}\n.JTIzpWAWzFszir0t9BAM ._Pddb2RnH2cX9eUvgC3w .W1_qPHD_fO94HaufTQLQ g-emoji {\n  font-family: monospace;\n}\n.JTIzpWAWzFszir0t9BAM .P76fKaPowM9cpiHuRGin {\n  color: var(--color-prettylights-syntax-comment);\n}\n.JTIzpWAWzFszir0t9BAM .jCt3gvtc9gsxyL04trRl,\n.JTIzpWAWzFszir0t9BAM .zuy7DTbEbDxX3x9iJjsQ .tPRYQQCLRp36BnHeYwTD {\n  color: var(--color-prettylights-syntax-constant);\n}\n.JTIzpWAWzFszir0t9BAM .mS7Czrsi8R4w6uIk9uyV,\n.JTIzpWAWzFszir0t9BAM .fEXlqGWpT9EQeh66CyUA {\n  color: var(--color-prettylights-syntax-entity);\n}\n.JTIzpWAWzFszir0t9BAM .KYRbXZ3_oqIQD_jYmmss,\n.JTIzpWAWzFszir0t9BAM .zuy7DTbEbDxX3x9iJjsQ .Onf1xGhm1CyIKCUqv6Vt {\n  color: var(--color-prettylights-syntax-storage-modifier-import);\n}\n.JTIzpWAWzFszir0t9BAM .bML4Cf9GLbf5q17kpKv6 {\n  color: var(--color-prettylights-syntax-entity-tag);\n}\n.JTIzpWAWzFszir0t9BAM .D3WGOCVXjgPFkMdT5njO {\n  color: var(--color-prettylights-syntax-keyword);\n}\n.JTIzpWAWzFszir0t9BAM .zuy7DTbEbDxX3x9iJjsQ,\n.JTIzpWAWzFszir0t9BAM .qqPwBDvIt9NfS3oysOeg,\n.JTIzpWAWzFszir0t9BAM .zuy7DTbEbDxX3x9iJjsQ .ngxODS0dsF3_9UYML_jK .Onf1xGhm1CyIKCUqv6Vt,\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq,\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq .alqCJ_RmYevYOsGV2npQ,\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq ._JjkFZbcwE5FrjyToawY,\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq .rpODeGZWpCHdQeJ9iNFh {\n  color: var(--color-prettylights-syntax-string);\n}\n.JTIzpWAWzFszir0t9BAM .tPRYQQCLRp36BnHeYwTD,\n.JTIzpWAWzFszir0t9BAM .UwBKloNe0dpM10LYc9gH {\n  color: var(--color-prettylights-syntax-variable);\n}\n.JTIzpWAWzFszir0t9BAM .YwnHPpSzGb2oO4ckgFiE {\n  color: var(--color-prettylights-syntax-brackethighlighter-unmatched);\n}\n.JTIzpWAWzFszir0t9BAM .xG7JZyGUso7EejDEcqPj {\n  color: var(--color-prettylights-syntax-invalid-illegal-text);\n  background-color: var(--color-prettylights-syntax-invalid-illegal-bg);\n}\n.JTIzpWAWzFszir0t9BAM .HsozdGaRrbnEFskf5GM5 {\n  color: var(--color-prettylights-syntax-carriage-return-text);\n  background-color: var(--color-prettylights-syntax-carriage-return-bg);\n}\n.JTIzpWAWzFszir0t9BAM .zCzAZcbA0HMroij1e7Zq .alqCJ_RmYevYOsGV2npQ {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-string-regexp);\n}\n.JTIzpWAWzFszir0t9BAM .QCudWQ_NcGbMAjWek5zw {\n  color: var(--color-prettylights-syntax-markup-list);\n}\n.JTIzpWAWzFszir0t9BAM .vtRO86GQ58WMpNkZmEFb,\n.JTIzpWAWzFszir0t9BAM .vtRO86GQ58WMpNkZmEFb .fEXlqGWpT9EQeh66CyUA,\n.JTIzpWAWzFszir0t9BAM .MOLUJS3ucw2wi08L8owu {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-markup-heading);\n}\n.JTIzpWAWzFszir0t9BAM .aGEFAwvkd7f_tpL163Xx {\n  font-style: italic;\n  color: var(--color-prettylights-syntax-markup-italic);\n}\n.JTIzpWAWzFszir0t9BAM .jKazAlPq8JmjMct4bPxN {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-markup-bold);\n}\n.JTIzpWAWzFszir0t9BAM .BvEH7VV6fJeHNG6aIv7M {\n  color: var(--color-prettylights-syntax-markup-deleted-text);\n  background-color: var(--color-prettylights-syntax-markup-deleted-bg);\n}\n.JTIzpWAWzFszir0t9BAM .t1DHu4D7tHFAdaNdZexf {\n  color: var(--color-prettylights-syntax-markup-inserted-text);\n  background-color: var(--color-prettylights-syntax-markup-inserted-bg);\n}\n.JTIzpWAWzFszir0t9BAM .wgJicwrtajeTkYba3WJS {\n  color: var(--color-prettylights-syntax-markup-changed-text);\n  background-color: var(--color-prettylights-syntax-markup-changed-bg);\n}\n.JTIzpWAWzFszir0t9BAM .nsuM7TFfymO8yvr95F3_ {\n  color: var(--color-prettylights-syntax-markup-ignored-text);\n  background-color: var(--color-prettylights-syntax-markup-ignored-bg);\n}\n.JTIzpWAWzFszir0t9BAM .jPrZaddoZ0MPWaaLf9Hg {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-meta-diff-range);\n}\n.JTIzpWAWzFszir0t9BAM .jkygUO3hOR0HgWl8Vu3I {\n  color: var(--color-prettylights-syntax-brackethighlighter-angle);\n}\n.JTIzpWAWzFszir0t9BAM ._R72N5SC88lk68CWAN9g {\n  color: var(--color-prettylights-syntax-sublimelinter-gutter-mark);\n}\n.JTIzpWAWzFszir0t9BAM .HqCHQQDtoZGYCY_Aiuby {\n  text-decoration: underline;\n  color: var(--color-prettylights-syntax-constant-other-reference-link);\n}\n.JTIzpWAWzFszir0t9BAM g-emoji {\n  display: inline-block;\n  min-width: 1ch;\n  font-family: "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n  font-size: 1em;\n  font-style: normal !important;\n  font-weight: var(--base-text-weight-normal, 400);\n  line-height: 1;\n  vertical-align: -0.075em;\n}\n.JTIzpWAWzFszir0t9BAM g-emoji img {\n  width: 1em;\n  height: 1em;\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku {\n  list-style-type: none;\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku label {\n  font-weight: var(--base-text-weight-normal, 400);\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku.juEHlr9g1BeZBlNEC_bS label {\n  cursor: pointer;\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku + .z8yi6slqhr75T9wpK_ku {\n  margin-top: 4px;\n}\n.JTIzpWAWzFszir0t9BAM .z8yi6slqhr75T9wpK_ku .JXsFqSdSlkBLe8YHtVHc {\n  display: none;\n}\n.JTIzpWAWzFszir0t9BAM .J6bqF00Yji6efKXcYLqA {\n  margin: 0 0.2em 0.25em -1.4em;\n  vertical-align: middle;\n}\n.JTIzpWAWzFszir0t9BAM .tpfsYJHavqwf9F0ociP3:dir(rtl) .J6bqF00Yji6efKXcYLqA {\n  margin: 0 -1.6em 0.25em 0.2em;\n}\n.JTIzpWAWzFszir0t9BAM .tpfsYJHavqwf9F0ociP3 {\n  position: relative;\n}\n.JTIzpWAWzFszir0t9BAM .tpfsYJHavqwf9F0ociP3:hover .EcA5MpPXXIr0gpYjQhxV,\n.JTIzpWAWzFszir0t9BAM .tpfsYJHavqwf9F0ociP3:focus-within .EcA5MpPXXIr0gpYjQhxV {\n  display: block;\n  width: auto;\n  height: 24px;\n  overflow: visible;\n  clip: auto;\n}\n.JTIzpWAWzFszir0t9BAM ::-webkit-calendar-picker-indicator {\n  filter: invert(50%);\n}\n`,"",{version:3,sources:["webpack://./node_modules/.pnpm/github-markdown-css@5.2.0/node_modules/github-markdown-css/github-markdown.css"],names:[],mappings:"AAAA;EACE;IACE,kBAAA;IACA,4CAAA;IACA,6CAAA;IACA,2CAAA;IACA,4DAAA;IACA,+CAAA;IACA,4CAAA;IACA,2CAAA;IACA,6CAAA;IACA,iEAAA;IACA,yDAAA;IACA,uDAAA;IACA,yDAAA;IACA,uDAAA;IACA,kDAAA;IACA,gDAAA;IACA,mDAAA;IACA,kDAAA;IACA,gDAAA;IACA,wDAAA;IACA,sDAAA;IACA,yDAAA;IACA,uDAAA;IACA,wDAAA;IACA,sDAAA;IACA,wDAAA;IACA,sDAAA;IACA,oDAAA;IACA,6DAAA;IACA,8DAAA;IACA,kEAAA;IACA,2BAAA;IACA,yBAAA;IACA,0BAAA;IACA,+BAAA;IACA,8BAAA;IACA,+BAAA;IACA,6BAAA;IACA,+CAAA;IACA,0BAAA;IACA,gCAAA;IACA,iDAAA;IACA,0BAAA;EACF;AACF;AAEA;EACE;IACE,mBAAA;IACA,4CAAA;IACA,6CAAA;IACA,2CAAA;IACA,4DAAA;IACA,+CAAA;IACA,4CAAA;IACA,2CAAA;IACA,6CAAA;IACA,iEAAA;IACA,yDAAA;IACA,uDAAA;IACA,yDAAA;IACA,uDAAA;IACA,kDAAA;IACA,gDAAA;IACA,mDAAA;IACA,kDAAA;IACA,gDAAA;IACA,wDAAA;IACA,sDAAA;IACA,yDAAA;IACA,uDAAA;IACA,wDAAA;IACA,sDAAA;IACA,wDAAA;IACA,sDAAA;IACA,oDAAA;IACA,6DAAA;IACA,8DAAA;IACA,kEAAA;IACA,2BAAA;IACA,yBAAA;IACA,0BAAA;IACA,+BAAA;IACA,8BAAA;IACA,+BAAA;IACA,wCAAA;IACA,+CAAA;IACA,0BAAA;IACA,gCAAA;IACA,iCAAA;IACA,0BAAA;EAAF;AACF;AAGA;EACE,0BAAA;EACA,8BAAA;EACA,SAAA;EACA,8BAAA;EACA,6CAAA;EACA,4IAAA;EACA,eAAA;EACA,gBAAA;EACA,qBAAA;AADF;AAIA;EACE,qBAAA;EACA,kBAAA;EACA,2BAAA;AAFF;AAKA;;;;;;EAME,WAAA;EACA,YAAA;EACA,YAAA;EACA,qBAAA;EACA,8BAAA;EACA,2DAAA;EACA,mDAAA;AAHF;AAMA;;;EAGE,cAAA;AAJF;AAOA;EACE,kBAAA;AALF;AAQA;EACE,wBAAA;AANF;AASA;EACE,6BAAA;EACA,6BAAA;EACA,qBAAA;AAPF;AAUA;EACE,mBAAA;EACA,iCAAA;AARF;AAWA;;EAEE,kDAAA;AATF;AAYA;EACE,kBAAA;AAVF;AAaA;EACE,gBAAA;EACA,kDAAA;EACA,qBAAA;EACA,cAAA;EACA,kDAAA;AAXF;AAcA;EACE,+CAAA;EACA,8BAAA;AAZF;AAeA;EACE,cAAA;AAbF;AAgBA;;EAEE,cAAA;EACA,cAAA;EACA,kBAAA;EACA,wBAAA;AAdF;AAiBA;EACE,eAAA;AAfF;AAkBA;EACE,WAAA;AAhBF;AAmBA;EACE,kBAAA;EACA,eAAA;EACA,uBAAA;EACA,6CAAA;AAjBF;AAoBA;;;;EAIE,sBAAA;EACA,cAAA;AAlBF;AAqBA;EACE,gBAAA;AAnBF;AAsBA;EACE,uBAAA;EACA,gBAAA;EACA,uBAAA;EACA,kDAAA;EACA,cAAA;EACA,UAAA;EACA,cAAA;EACA,6CAAA;EACA,SAAA;AApBF;AAuBA;EACE,aAAA;EACA,SAAA;EACA,iBAAA;EACA,oBAAA;EACA,kBAAA;EACA,oBAAA;AArBF;AAwBA;;;EAGE,0BAAA;AAtBF;AAyBA;;EAEE,sBAAA;EACA,UAAA;AAvBF;AA0BA;;EAEE,YAAA;AAxBF;AA2BA;;EAEE,wBAAA;AAzBF;AA4BA;EACE,cAAA;EACA,aAAA;AA1BF;AA6BA;EACE,0BAAA;EACA,aAAA;AA3BF;AA8BA;EACE,0BAAA;AA5BF;AA+BA;EACE,6BAAA;EACA,UAAA;AA7BF;AAgCA;EACE,cAAA;EACA,WAAA;AA9BF;AAiCA;EACE,cAAA;EACA,WAAA;EACA,WAAA;AA/BF;AAkCA;EACE,iBAAA;EACA,yBAAA;EACA,cAAA;EACA,kBAAA;EACA,eAAA;EACA,cAAA;AAhCF;AAmCA;;EAEE,UAAA;AAjCF;AAoCA;EACE,eAAA;AAlCF;AAqCA;EACE,wBAAA;AAnCF;AAsCA;;;;EAIE,yCAAA;EACA,oBAAA;EACA,gBAAA;AApCF;AAuCA;;;;EAIE,8BAAA;AArCF;AAwCA;;;;EAIE,yCAAA;EACA,oBAAA;EACA,gBAAA;AAtCF;AAyCA;;;;;;EAME,iBAAA;AAvCF;AA0CA;EACE,qBAAA;EACA,gBAAA;EACA,6FAAA;EACA,iBAAA;EACA,8BAAA;EACA,sBAAA;EACA,4CAAA;EACA,4CAAA;EACA,+CAAA;EACA,kBAAA;EACA,qDAAA;AAxCF;AA2CA;;;;;;EAME,gBAAA;EACA,mBAAA;EACA,kDAAA;EACA,iBAAA;AAzCF;AA4CA;EACE,kDAAA;EACA,qBAAA;EACA,gBAAA;EACA,kDAAA;AA1CF;AA6CA;EACE,kDAAA;EACA,iBAAA;AA3CF;AA8CA;EACE,kDAAA;EACA,cAAA;AA5CF;AA+CA;EACE,kDAAA;EACA,kBAAA;AA7CF;AAgDA;EACE,kDAAA;EACA,iBAAA;EACA,4BAAA;AA9CF;AAiDA;EACE,aAAA;EACA,mBAAA;AA/CF;AAkDA;EACE,SAAA;EACA,cAAA;EACA,4BAAA;EACA,qDAAA;AAhDF;AAmDA;;EAEE,aAAA;EACA,gBAAA;EACA,iBAAA;AAjDF;AAoDA;;EAEE,4BAAA;AAlDF;AAqDA;;;;EAIE,4BAAA;AAnDF;AAsDA;EACE,cAAA;AApDF;AAuDA;;;EAGE,+FAAA;EACA,eAAA;AArDF;AAwDA;EACE,aAAA;EACA,gBAAA;EACA,+FAAA;EACA,eAAA;EACA,iBAAA;AAtDF;AAyDA;EACE,qBAAA;EACA,4BAAA;EACA,2BAAA;EACA,kBAAA;AAvDF;AA0DA;;EAEE,SAAA;EACA,wBAAA;EACA,gBAAA;AAxDF;AA2DA;EACE,cAAA;EACA,WAAA;AAzDF;AA4DA;EACE,cAAA;EACA,WAAA;EACA,WAAA;AA1DF;AA6DA;EACE,wBAAA;AA3DF;AA8DA;EACE,2BAAA;AA5DF;AA+DA;EACE,cAAA;EACA,qBAAA;AA7DF;AAgEA;EACE,6BAAA;AA9DF;AAiEA;EACE,WAAA;EACA,kBAAA;EACA,kBAAA;EACA,cAAA;AA/DF;AAkEA;EACE,aAAA;AAhEF;AAmEA;;;;;;;;EAQE,aAAA;EACA,mBAAA;AAjEF;AAoEA;EACE,aAAA;AAlEF;AAqEA;EACE,gBAAA;AAnEF;AAsEA;;;;;;EAME,8BAAA;EACA,sBAAA;EACA,kBAAA;AApEF;AAuEA;;;;;;EAME,qBAAA;AArEF;AAwEA;;;;;;EAME,mBAAA;AAtEF;AAyEA;;;;;;;;;;;;EAYE,gBAAA;EACA,kBAAA;AAvEF;AA0EA;;;;;;EAME,qBAAA;AAxEF;AA2EA;;;;;;EAME,kBAAA;AAzEF;AA4EA;;EAEE,iBAAA;EACA,gBAAA;AA1EF;AA6EA;;EAEE,UAAA;EACA,qBAAA;AA3EF;AA8EA;EACE,4BAAA;AA5EF;AA+EA;EACE,4BAAA;AA7EF;AAgFA;EACE,4BAAA;AA9EF;AAiFA;EACE,4BAAA;AA/EF;AAkFA;EACE,wBAAA;AAhFF;AAmFA;EACE,wBAAA;AAjFF;AAoFA;;;;EAIE,aAAA;EACA,gBAAA;AAlFF;AAqFA;EACE,gBAAA;AAnFF;AAsFA;EACE,kBAAA;AApFF;AAuFA;EACE,UAAA;AArFF;AAwFA;EACE,UAAA;EACA,gBAAA;EACA,cAAA;EACA,kBAAA;EACA,kDAAA;AAtFF;AAyFA;EACE,eAAA;EACA,mBAAA;AAvFF;AA0FA;EACE,kDAAA;AAxFF;AA2FA;;EAEE,iBAAA;EACA,6CAAA;AAzFF;AA4FA;EACE,6CAAA;EACA,+CAAA;AA1FF;AA6FA;EACE,4CAAA;AA3FF;AA8FA;EACE,6BAAA;AA5FF;AA+FA;EACE,kBAAA;AA7FF;AAgGA;EACE,mBAAA;AA9FF;AAiGA;EACE,eAAA;EACA,wBAAA;EACA,6BAAA;AA/FF;AAkGA;EACE,cAAA;EACA,gBAAA;AAhGF;AAmGA;EACE,cAAA;EACA,WAAA;EACA,WAAA;EACA,YAAA;EACA,gBAAA;EACA,gBAAA;EACA,6CAAA;AAjGF;AAoGA;EACE,cAAA;EACA,WAAA;AAlGF;AAqGA;EACE,cAAA;EACA,gBAAA;EACA,WAAA;EACA,8BAAA;AAnGF;AAsGA;EACE,cAAA;EACA,gBAAA;EACA,WAAA;AApGF;AAuGA;EACE,cAAA;EACA,mBAAA;EACA,gBAAA;EACA,kBAAA;AArGF;AAwGA;EACE,cAAA;EACA,kBAAA;AAtGF;AAyGA;EACE,cAAA;EACA,gBAAA;EACA,WAAA;AAvGF;AA0GA;EACE,cAAA;EACA,gBAAA;EACA,gBAAA;EACA,iBAAA;AAxGF;AA2GA;EACE,SAAA;EACA,iBAAA;AAzGF;AA4GA;EACE,cAAA;EACA,WAAA;EACA,kBAAA;EACA,gBAAA;AA1GF;AA6GA;EACE,gBAAA;AA3GF;AA8GA;EACE,cAAA;EACA,YAAA;EACA,iBAAA;EACA,gBAAA;AA5GF;AA+GA;EACE,cAAA;EACA,mBAAA;EACA,gBAAA;EACA,iBAAA;AA7GF;AAgHA;;EAEE,oBAAA;EACA,SAAA;EACA,cAAA;EACA,yBAAA;EACA,4CAAA;EACA,kBAAA;AA9GF;AAiHA;;EAEE,aAAA;AA/GF;AAkHA;EACE,wBAAA;AAhHF;AAmHA;EACE,cAAA;AAjHF;AAoHA;EACE,eAAA;AAlHF;AAqHA;EACE,UAAA;EACA,SAAA;EACA,kBAAA;EACA,gBAAA;EACA,uBAAA;EACA,SAAA;AAnHF;AAsHA;EACE,mBAAA;AApHF;AAuHA;EACE,gBAAA;EACA,kBAAA;AArHF;AAwHA;;EAEE,aAAA;EACA,cAAA;EACA,cAAA;EACA,iBAAA;EACA,4CAAA;EACA,kBAAA;AAtHF;AAyHA;;EAEE,eAAA;EACA,eAAA;EACA,UAAA;EACA,SAAA;EACA,iBAAA;EACA,oBAAA;EACA,iBAAA;EACA,6BAAA;EACA,SAAA;AAvHF;AA0HA;;EAEE,YAAA;EACA,gBAAA;EACA,eAAA;EACA,cAAA;EACA,gBAAA;EACA,mBAAA;AAxHF;AA2HA;EACE,qBAAA;EACA,iBAAA;EACA,uCAAA;EACA,SAAA;AAzHF;AA4HA;EACE,aAAA;AA1HF;AA6HA;EACE,kDAAA;EACA,sCAAA;EACA,aAAA;AA3HF;AA8HA;EACE,YAAA;AA5HF;AA+HA;EACE,YAAA;AA7HF;AAgIA;EACE,eAAA;EACA,4BAAA;EACA,iDAAA;AA9HF;AAiIA;EACE,kBAAA;AA/HF;AAkIA;EACE,qBAAA;EACA,kBAAA;EACA,gBAAA;AAhIF;AAmIA;EACE,kBAAA;AAjIF;AAoIA;EACE,kBAAA;EACA,SAAA;EACA,WAAA;EACA,YAAA;EACA,WAAA;EACA,oBAAA;EACA,WAAA;EACA,8CAAA;EACA,kBAAA;AAlIF;AAqIA;EACE,8BAAA;AAnIF;AAsIA;EACE,sBAAA;AApIF;AAuIA;EACE,+CAAA;AArIF;AAwIA;;EAEE,gDAAA;AAtIF;AAyIA;;EAEE,8CAAA;AAvIF;AA0IA;;EAEE,+DAAA;AAxIF;AA2IA;EACE,kDAAA;AAzIF;AA4IA;EACE,+CAAA;AA1IF;AA6IA;;;;;;;EAOE,8CAAA;AA3IF;AA8IA;;EAEE,gDAAA;AA5IF;AA+IA;EACE,oEAAA;AA7IF;AAgJA;EACE,4DAAA;EACA,qEAAA;AA9IF;AAiJA;EACE,4DAAA;EACA,qEAAA;AA/IF;AAkJA;EACE,iBAAA;EACA,qDAAA;AAhJF;AAmJA;EACE,mDAAA;AAjJF;AAoJA;;;EAGE,iBAAA;EACA,sDAAA;AAlJF;AAqJA;EACE,kBAAA;EACA,qDAAA;AAnJF;AAsJA;EACE,iBAAA;EACA,mDAAA;AApJF;AAuJA;EACE,2DAAA;EACA,oEAAA;AArJF;AAwJA;EACE,4DAAA;EACA,qEAAA;AAtJF;AAyJA;EACE,2DAAA;EACA,oEAAA;AAvJF;AA0JA;EACE,2DAAA;EACA,oEAAA;AAxJF;AA2JA;EACE,iBAAA;EACA,uDAAA;AAzJF;AA4JA;EACE,gEAAA;AA1JF;AA6JA;EACE,iEAAA;AA3JF;AA8JA;EACE,0BAAA;EACA,qEAAA;AA5JF;AA+JA;EACE,qBAAA;EACA,cAAA;EACA,qEAAA;EACA,cAAA;EACA,6BAAA;EACA,gDAAA;EACA,cAAA;EACA,wBAAA;AA7JF;AAgKA;EACE,UAAA;EACA,WAAA;AA9JF;AAiKA;EACE,qBAAA;AA/JF;AAkKA;EACE,gDAAA;AAhKF;AAmKA;EACE,eAAA;AAjKF;AAoKA;EACE,eAAA;AAlKF;AAqKA;EACE,aAAA;AAnKF;AAsKA;EACE,6BAAA;EACA,sBAAA;AApKF;AAuKA;EACE,6BAAA;AArKF;AAwKA;EACE,kBAAA;AAtKF;AAyKA;;EAEE,cAAA;EACA,WAAA;EACA,YAAA;EACA,iBAAA;EACA,UAAA;AAvKF;AA0KA;EACE,mBAAA;AAxKF",sourcesContent:['@media (prefers-color-scheme: dark) {\n  .markdown-body {\n    color-scheme: dark;\n    --color-prettylights-syntax-comment: #8b949e;\n    --color-prettylights-syntax-constant: #79c0ff;\n    --color-prettylights-syntax-entity: #d2a8ff;\n    --color-prettylights-syntax-storage-modifier-import: #c9d1d9;\n    --color-prettylights-syntax-entity-tag: #7ee787;\n    --color-prettylights-syntax-keyword: #ff7b72;\n    --color-prettylights-syntax-string: #a5d6ff;\n    --color-prettylights-syntax-variable: #ffa657;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #f85149;\n    --color-prettylights-syntax-invalid-illegal-text: #f0f6fc;\n    --color-prettylights-syntax-invalid-illegal-bg: #8e1519;\n    --color-prettylights-syntax-carriage-return-text: #f0f6fc;\n    --color-prettylights-syntax-carriage-return-bg: #b62324;\n    --color-prettylights-syntax-string-regexp: #7ee787;\n    --color-prettylights-syntax-markup-list: #f2cc60;\n    --color-prettylights-syntax-markup-heading: #1f6feb;\n    --color-prettylights-syntax-markup-italic: #c9d1d9;\n    --color-prettylights-syntax-markup-bold: #c9d1d9;\n    --color-prettylights-syntax-markup-deleted-text: #ffdcd7;\n    --color-prettylights-syntax-markup-deleted-bg: #67060c;\n    --color-prettylights-syntax-markup-inserted-text: #aff5b4;\n    --color-prettylights-syntax-markup-inserted-bg: #033a16;\n    --color-prettylights-syntax-markup-changed-text: #ffdfb6;\n    --color-prettylights-syntax-markup-changed-bg: #5a1e02;\n    --color-prettylights-syntax-markup-ignored-text: #c9d1d9;\n    --color-prettylights-syntax-markup-ignored-bg: #1158c7;\n    --color-prettylights-syntax-meta-diff-range: #d2a8ff;\n    --color-prettylights-syntax-brackethighlighter-angle: #8b949e;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #484f58;\n    --color-prettylights-syntax-constant-other-reference-link: #a5d6ff;\n    --color-fg-default: #c9d1d9;\n    --color-fg-muted: #8b949e;\n    --color-fg-subtle: #6e7681;\n    --color-canvas-default: #0d1117;\n    --color-canvas-subtle: #161b22;\n    --color-border-default: #30363d;\n    --color-border-muted: #21262d;\n    --color-neutral-muted: rgba(110,118,129,0.4);\n    --color-accent-fg: #58a6ff;\n    --color-accent-emphasis: #1f6feb;\n    --color-attention-subtle: rgba(187,128,9,0.15);\n    --color-danger-fg: #f85149;\n  }\n}\n\n@media (prefers-color-scheme: light) {\n  .markdown-body {\n    color-scheme: light;\n    --color-prettylights-syntax-comment: #6e7781;\n    --color-prettylights-syntax-constant: #0550ae;\n    --color-prettylights-syntax-entity: #8250df;\n    --color-prettylights-syntax-storage-modifier-import: #24292f;\n    --color-prettylights-syntax-entity-tag: #116329;\n    --color-prettylights-syntax-keyword: #cf222e;\n    --color-prettylights-syntax-string: #0a3069;\n    --color-prettylights-syntax-variable: #953800;\n    --color-prettylights-syntax-brackethighlighter-unmatched: #82071e;\n    --color-prettylights-syntax-invalid-illegal-text: #f6f8fa;\n    --color-prettylights-syntax-invalid-illegal-bg: #82071e;\n    --color-prettylights-syntax-carriage-return-text: #f6f8fa;\n    --color-prettylights-syntax-carriage-return-bg: #cf222e;\n    --color-prettylights-syntax-string-regexp: #116329;\n    --color-prettylights-syntax-markup-list: #3b2300;\n    --color-prettylights-syntax-markup-heading: #0550ae;\n    --color-prettylights-syntax-markup-italic: #24292f;\n    --color-prettylights-syntax-markup-bold: #24292f;\n    --color-prettylights-syntax-markup-deleted-text: #82071e;\n    --color-prettylights-syntax-markup-deleted-bg: #ffebe9;\n    --color-prettylights-syntax-markup-inserted-text: #116329;\n    --color-prettylights-syntax-markup-inserted-bg: #dafbe1;\n    --color-prettylights-syntax-markup-changed-text: #953800;\n    --color-prettylights-syntax-markup-changed-bg: #ffd8b5;\n    --color-prettylights-syntax-markup-ignored-text: #eaeef2;\n    --color-prettylights-syntax-markup-ignored-bg: #0550ae;\n    --color-prettylights-syntax-meta-diff-range: #8250df;\n    --color-prettylights-syntax-brackethighlighter-angle: #57606a;\n    --color-prettylights-syntax-sublimelinter-gutter-mark: #8c959f;\n    --color-prettylights-syntax-constant-other-reference-link: #0a3069;\n    --color-fg-default: #24292f;\n    --color-fg-muted: #57606a;\n    --color-fg-subtle: #6e7781;\n    --color-canvas-default: #ffffff;\n    --color-canvas-subtle: #f6f8fa;\n    --color-border-default: #d0d7de;\n    --color-border-muted: hsla(210,18%,87%,1);\n    --color-neutral-muted: rgba(175,184,193,0.2);\n    --color-accent-fg: #0969da;\n    --color-accent-emphasis: #0969da;\n    --color-attention-subtle: #fff8c5;\n    --color-danger-fg: #cf222e;\n  }\n}\n\n.markdown-body {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  margin: 0;\n  color: var(--color-fg-default);\n  background-color: var(--color-canvas-default);\n  font-family: -apple-system,BlinkMacSystemFont,"Segoe UI","Noto Sans",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  fill: currentColor;\n  vertical-align: text-bottom;\n}\n\n.markdown-body h1:hover .anchor .octicon-link:before,\n.markdown-body h2:hover .anchor .octicon-link:before,\n.markdown-body h3:hover .anchor .octicon-link:before,\n.markdown-body h4:hover .anchor .octicon-link:before,\n.markdown-body h5:hover .anchor .octicon-link:before,\n.markdown-body h6:hover .anchor .octicon-link:before {\n  width: 16px;\n  height: 16px;\n  content: \' \';\n  display: inline-block;\n  background-color: currentColor;\n  -webkit-mask-image: url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' version=\'1.1\' aria-hidden=\'true\'><path fill-rule=\'evenodd\' d=\'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\'></path></svg>");\n  mask-image: url("data:image/svg+xml,<svg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 16 16\' version=\'1.1\' aria-hidden=\'true\'><path fill-rule=\'evenodd\' d=\'M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\'></path></svg>");\n}\n\n.markdown-body details,\n.markdown-body figcaption,\n.markdown-body figure {\n  display: block;\n}\n\n.markdown-body summary {\n  display: list-item;\n}\n\n.markdown-body [hidden] {\n  display: none !important;\n}\n\n.markdown-body a {\n  background-color: transparent;\n  color: var(--color-accent-fg);\n  text-decoration: none;\n}\n\n.markdown-body abbr[title] {\n  border-bottom: none;\n  text-decoration: underline dotted;\n}\n\n.markdown-body b,\n.markdown-body strong {\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n\n.markdown-body dfn {\n  font-style: italic;\n}\n\n.markdown-body h1 {\n  margin: .67em 0;\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: .3em;\n  font-size: 2em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n\n.markdown-body mark {\n  background-color: var(--color-attention-subtle);\n  color: var(--color-fg-default);\n}\n\n.markdown-body small {\n  font-size: 90%;\n}\n\n.markdown-body sub,\n.markdown-body sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\n.markdown-body sub {\n  bottom: -0.25em;\n}\n\n.markdown-body sup {\n  top: -0.5em;\n}\n\n.markdown-body img {\n  border-style: none;\n  max-width: 100%;\n  box-sizing: content-box;\n  background-color: var(--color-canvas-default);\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: monospace;\n  font-size: 1em;\n}\n\n.markdown-body figure {\n  margin: 1em 40px;\n}\n\n.markdown-body hr {\n  box-sizing: content-box;\n  overflow: hidden;\n  background: transparent;\n  border-bottom: 1px solid var(--color-border-muted);\n  height: .25em;\n  padding: 0;\n  margin: 24px 0;\n  background-color: var(--color-border-default);\n  border: 0;\n}\n\n.markdown-body input {\n  font: inherit;\n  margin: 0;\n  overflow: visible;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\n.markdown-body [type=button],\n.markdown-body [type=reset],\n.markdown-body [type=submit] {\n  -webkit-appearance: button;\n}\n\n.markdown-body [type=checkbox],\n.markdown-body [type=radio] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body [type=number]::-webkit-inner-spin-button,\n.markdown-body [type=number]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n.markdown-body [type=search]::-webkit-search-cancel-button,\n.markdown-body [type=search]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n.markdown-body ::-webkit-input-placeholder {\n  color: inherit;\n  opacity: .54;\n}\n\n.markdown-body ::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  font: inherit;\n}\n\n.markdown-body a:hover {\n  text-decoration: underline;\n}\n\n.markdown-body ::placeholder {\n  color: var(--color-fg-subtle);\n  opacity: 1;\n}\n\n.markdown-body hr::before {\n  display: table;\n  content: "";\n}\n\n.markdown-body hr::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n\n.markdown-body table {\n  border-spacing: 0;\n  border-collapse: collapse;\n  display: block;\n  width: max-content;\n  max-width: 100%;\n  overflow: auto;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body details summary {\n  cursor: pointer;\n}\n\n.markdown-body details:not([open])>*:not(summary) {\n  display: none !important;\n}\n\n.markdown-body a:focus,\n.markdown-body [role=button]:focus,\n.markdown-body input[type=radio]:focus,\n.markdown-body input[type=checkbox]:focus {\n  outline: 2px solid var(--color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n\n.markdown-body a:focus:not(:focus-visible),\n.markdown-body [role=button]:focus:not(:focus-visible),\n.markdown-body input[type=radio]:focus:not(:focus-visible),\n.markdown-body input[type=checkbox]:focus:not(:focus-visible) {\n  outline: solid 1px transparent;\n}\n\n.markdown-body a:focus-visible,\n.markdown-body [role=button]:focus-visible,\n.markdown-body input[type=radio]:focus-visible,\n.markdown-body input[type=checkbox]:focus-visible {\n  outline: 2px solid var(--color-accent-fg);\n  outline-offset: -2px;\n  box-shadow: none;\n}\n\n.markdown-body a:not([class]):focus,\n.markdown-body a:not([class]):focus-visible,\n.markdown-body input[type=radio]:focus,\n.markdown-body input[type=radio]:focus-visible,\n.markdown-body input[type=checkbox]:focus,\n.markdown-body input[type=checkbox]:focus-visible {\n  outline-offset: 0;\n}\n\n.markdown-body kbd {\n  display: inline-block;\n  padding: 3px 5px;\n  font: 11px ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\n  line-height: 10px;\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  background-color: var(--color-canvas-subtle);\n  border: solid 1px var(--color-neutral-muted);\n  border-bottom-color: var(--color-neutral-muted);\n  border-radius: 6px;\n  box-shadow: inset 0 -1px 0 var(--color-neutral-muted);\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 24px;\n  margin-bottom: 16px;\n  font-weight: var(--base-text-weight-semibold, 600);\n  line-height: 1.25;\n}\n\n.markdown-body h2 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  padding-bottom: .3em;\n  font-size: 1.5em;\n  border-bottom: 1px solid var(--color-border-muted);\n}\n\n.markdown-body h3 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1.25em;\n}\n\n.markdown-body h4 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: 1em;\n}\n\n.markdown-body h5 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: .875em;\n}\n\n.markdown-body h6 {\n  font-weight: var(--base-text-weight-semibold, 600);\n  font-size: .85em;\n  color: var(--color-fg-muted);\n}\n\n.markdown-body p {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n  padding: 0 1em;\n  color: var(--color-fg-muted);\n  border-left: .25em solid var(--color-border-default);\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 2em;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body tt,\n.markdown-body code,\n.markdown-body samp {\n  font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\n  font-size: 12px;\n  word-wrap: normal;\n}\n\n.markdown-body .octicon {\n  display: inline-block;\n  overflow: visible !important;\n  vertical-align: text-bottom;\n  fill: currentColor;\n}\n\n.markdown-body input::-webkit-outer-spin-button,\n.markdown-body input::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n  appearance: none;\n}\n\n.markdown-body::before {\n  display: table;\n  content: "";\n}\n\n.markdown-body::after {\n  display: table;\n  clear: both;\n  content: "";\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\n.markdown-body .absent {\n  color: var(--color-danger-fg);\n}\n\n.markdown-body .anchor {\n  float: left;\n  padding-right: 4px;\n  margin-left: -20px;\n  line-height: 1;\n}\n\n.markdown-body .anchor:focus {\n  outline: none;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre,\n.markdown-body details {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body h1 .octicon-link,\n.markdown-body h2 .octicon-link,\n.markdown-body h3 .octicon-link,\n.markdown-body h4 .octicon-link,\n.markdown-body h5 .octicon-link,\n.markdown-body h6 .octicon-link {\n  color: var(--color-fg-default);\n  vertical-align: middle;\n  visibility: hidden;\n}\n\n.markdown-body h1:hover .anchor,\n.markdown-body h2:hover .anchor,\n.markdown-body h3:hover .anchor,\n.markdown-body h4:hover .anchor,\n.markdown-body h5:hover .anchor,\n.markdown-body h6:hover .anchor {\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .anchor .octicon-link,\n.markdown-body h2:hover .anchor .octicon-link,\n.markdown-body h3:hover .anchor .octicon-link,\n.markdown-body h4:hover .anchor .octicon-link,\n.markdown-body h5:hover .anchor .octicon-link,\n.markdown-body h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\n.markdown-body h1 tt,\n.markdown-body h1 code,\n.markdown-body h2 tt,\n.markdown-body h2 code,\n.markdown-body h3 tt,\n.markdown-body h3 code,\n.markdown-body h4 tt,\n.markdown-body h4 code,\n.markdown-body h5 tt,\n.markdown-body h5 code,\n.markdown-body h6 tt,\n.markdown-body h6 code {\n  padding: 0 .2em;\n  font-size: inherit;\n}\n\n.markdown-body summary h1,\n.markdown-body summary h2,\n.markdown-body summary h3,\n.markdown-body summary h4,\n.markdown-body summary h5,\n.markdown-body summary h6 {\n  display: inline-block;\n}\n\n.markdown-body summary h1 .anchor,\n.markdown-body summary h2 .anchor,\n.markdown-body summary h3 .anchor,\n.markdown-body summary h4 .anchor,\n.markdown-body summary h5 .anchor,\n.markdown-body summary h6 .anchor {\n  margin-left: -40px;\n}\n\n.markdown-body summary h1,\n.markdown-body summary h2 {\n  padding-bottom: 0;\n  border-bottom: 0;\n}\n\n.markdown-body ul.no-list,\n.markdown-body ol.no-list {\n  padding: 0;\n  list-style-type: none;\n}\n\n.markdown-body ol[type=a] {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body ol[type=A] {\n  list-style-type: upper-alpha;\n}\n\n.markdown-body ol[type=i] {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ol[type=I] {\n  list-style-type: upper-roman;\n}\n\n.markdown-body ol[type="1"] {\n  list-style-type: decimal;\n}\n\n.markdown-body div>ol:not([type]) {\n  list-style-type: decimal;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body li+li {\n  margin-top: .25em;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body table th {\n  font-weight: var(--base-text-weight-semibold, 600);\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid var(--color-border-default);\n}\n\n.markdown-body table tr {\n  background-color: var(--color-canvas-default);\n  border-top: 1px solid var(--color-border-muted);\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: var(--color-canvas-subtle);\n}\n\n.markdown-body table img {\n  background-color: transparent;\n}\n\n.markdown-body img[align=right] {\n  padding-left: 20px;\n}\n\n.markdown-body img[align=left] {\n  padding-right: 20px;\n}\n\n.markdown-body .emoji {\n  max-width: none;\n  vertical-align: text-top;\n  background-color: transparent;\n}\n\n.markdown-body span.frame {\n  display: block;\n  overflow: hidden;\n}\n\n.markdown-body span.frame>span {\n  display: block;\n  float: left;\n  width: auto;\n  padding: 7px;\n  margin: 13px 0 0;\n  overflow: hidden;\n  border: 1px solid var(--color-border-default);\n}\n\n.markdown-body span.frame span img {\n  display: block;\n  float: left;\n}\n\n.markdown-body span.frame span span {\n  display: block;\n  padding: 5px 0 0;\n  clear: both;\n  color: var(--color-fg-default);\n}\n\n.markdown-body span.align-center {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n\n.markdown-body span.align-center>span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: center;\n}\n\n.markdown-body span.align-center span img {\n  margin: 0 auto;\n  text-align: center;\n}\n\n.markdown-body span.align-right {\n  display: block;\n  overflow: hidden;\n  clear: both;\n}\n\n.markdown-body span.align-right>span {\n  display: block;\n  margin: 13px 0 0;\n  overflow: hidden;\n  text-align: right;\n}\n\n.markdown-body span.align-right span img {\n  margin: 0;\n  text-align: right;\n}\n\n.markdown-body span.float-left {\n  display: block;\n  float: left;\n  margin-right: 13px;\n  overflow: hidden;\n}\n\n.markdown-body span.float-left span {\n  margin: 13px 0 0;\n}\n\n.markdown-body span.float-right {\n  display: block;\n  float: right;\n  margin-left: 13px;\n  overflow: hidden;\n}\n\n.markdown-body span.float-right>span {\n  display: block;\n  margin: 13px auto 0;\n  overflow: hidden;\n  text-align: right;\n}\n\n.markdown-body code,\n.markdown-body tt {\n  padding: .2em .4em;\n  margin: 0;\n  font-size: 85%;\n  white-space: break-spaces;\n  background-color: var(--color-neutral-muted);\n  border-radius: 6px;\n}\n\n.markdown-body code br,\n.markdown-body tt br {\n  display: none;\n}\n\n.markdown-body del code {\n  text-decoration: inherit;\n}\n\n.markdown-body samp {\n  font-size: 85%;\n}\n\n.markdown-body pre code {\n  font-size: 100%;\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .highlight {\n  margin-bottom: 16px;\n}\n\n.markdown-body .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body .highlight pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: var(--color-canvas-subtle);\n  border-radius: 6px;\n}\n\n.markdown-body pre code,\n.markdown-body pre tt {\n  display: inline;\n  max-width: auto;\n  padding: 0;\n  margin: 0;\n  overflow: visible;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body .csv-data td,\n.markdown-body .csv-data th {\n  padding: 5px;\n  overflow: hidden;\n  font-size: 12px;\n  line-height: 1;\n  text-align: left;\n  white-space: nowrap;\n}\n\n.markdown-body .csv-data .blob-num {\n  padding: 10px 8px 9px;\n  text-align: right;\n  background: var(--color-canvas-default);\n  border: 0;\n}\n\n.markdown-body .csv-data tr {\n  border-top: 0;\n}\n\n.markdown-body .csv-data th {\n  font-weight: var(--base-text-weight-semibold, 600);\n  background: var(--color-canvas-subtle);\n  border-top: 0;\n}\n\n.markdown-body [data-footnote-ref]::before {\n  content: "[";\n}\n\n.markdown-body [data-footnote-ref]::after {\n  content: "]";\n}\n\n.markdown-body .footnotes {\n  font-size: 12px;\n  color: var(--color-fg-muted);\n  border-top: 1px solid var(--color-border-default);\n}\n\n.markdown-body .footnotes ol {\n  padding-left: 16px;\n}\n\n.markdown-body .footnotes ol ul {\n  display: inline-block;\n  padding-left: 16px;\n  margin-top: 16px;\n}\n\n.markdown-body .footnotes li {\n  position: relative;\n}\n\n.markdown-body .footnotes li:target::before {\n  position: absolute;\n  top: -8px;\n  right: -8px;\n  bottom: -8px;\n  left: -24px;\n  pointer-events: none;\n  content: "";\n  border: 2px solid var(--color-accent-emphasis);\n  border-radius: 6px;\n}\n\n.markdown-body .footnotes li:target {\n  color: var(--color-fg-default);\n}\n\n.markdown-body .footnotes .data-footnote-backref g-emoji {\n  font-family: monospace;\n}\n\n.markdown-body .pl-c {\n  color: var(--color-prettylights-syntax-comment);\n}\n\n.markdown-body .pl-c1,\n.markdown-body .pl-s .pl-v {\n  color: var(--color-prettylights-syntax-constant);\n}\n\n.markdown-body .pl-e,\n.markdown-body .pl-en {\n  color: var(--color-prettylights-syntax-entity);\n}\n\n.markdown-body .pl-smi,\n.markdown-body .pl-s .pl-s1 {\n  color: var(--color-prettylights-syntax-storage-modifier-import);\n}\n\n.markdown-body .pl-ent {\n  color: var(--color-prettylights-syntax-entity-tag);\n}\n\n.markdown-body .pl-k {\n  color: var(--color-prettylights-syntax-keyword);\n}\n\n.markdown-body .pl-s,\n.markdown-body .pl-pds,\n.markdown-body .pl-s .pl-pse .pl-s1,\n.markdown-body .pl-sr,\n.markdown-body .pl-sr .pl-cce,\n.markdown-body .pl-sr .pl-sre,\n.markdown-body .pl-sr .pl-sra {\n  color: var(--color-prettylights-syntax-string);\n}\n\n.markdown-body .pl-v,\n.markdown-body .pl-smw {\n  color: var(--color-prettylights-syntax-variable);\n}\n\n.markdown-body .pl-bu {\n  color: var(--color-prettylights-syntax-brackethighlighter-unmatched);\n}\n\n.markdown-body .pl-ii {\n  color: var(--color-prettylights-syntax-invalid-illegal-text);\n  background-color: var(--color-prettylights-syntax-invalid-illegal-bg);\n}\n\n.markdown-body .pl-c2 {\n  color: var(--color-prettylights-syntax-carriage-return-text);\n  background-color: var(--color-prettylights-syntax-carriage-return-bg);\n}\n\n.markdown-body .pl-sr .pl-cce {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-string-regexp);\n}\n\n.markdown-body .pl-ml {\n  color: var(--color-prettylights-syntax-markup-list);\n}\n\n.markdown-body .pl-mh,\n.markdown-body .pl-mh .pl-en,\n.markdown-body .pl-ms {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-markup-heading);\n}\n\n.markdown-body .pl-mi {\n  font-style: italic;\n  color: var(--color-prettylights-syntax-markup-italic);\n}\n\n.markdown-body .pl-mb {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-markup-bold);\n}\n\n.markdown-body .pl-md {\n  color: var(--color-prettylights-syntax-markup-deleted-text);\n  background-color: var(--color-prettylights-syntax-markup-deleted-bg);\n}\n\n.markdown-body .pl-mi1 {\n  color: var(--color-prettylights-syntax-markup-inserted-text);\n  background-color: var(--color-prettylights-syntax-markup-inserted-bg);\n}\n\n.markdown-body .pl-mc {\n  color: var(--color-prettylights-syntax-markup-changed-text);\n  background-color: var(--color-prettylights-syntax-markup-changed-bg);\n}\n\n.markdown-body .pl-mi2 {\n  color: var(--color-prettylights-syntax-markup-ignored-text);\n  background-color: var(--color-prettylights-syntax-markup-ignored-bg);\n}\n\n.markdown-body .pl-mdr {\n  font-weight: bold;\n  color: var(--color-prettylights-syntax-meta-diff-range);\n}\n\n.markdown-body .pl-ba {\n  color: var(--color-prettylights-syntax-brackethighlighter-angle);\n}\n\n.markdown-body .pl-sg {\n  color: var(--color-prettylights-syntax-sublimelinter-gutter-mark);\n}\n\n.markdown-body .pl-corl {\n  text-decoration: underline;\n  color: var(--color-prettylights-syntax-constant-other-reference-link);\n}\n\n.markdown-body g-emoji {\n  display: inline-block;\n  min-width: 1ch;\n  font-family: "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";\n  font-size: 1em;\n  font-style: normal !important;\n  font-weight: var(--base-text-weight-normal, 400);\n  line-height: 1;\n  vertical-align: -0.075em;\n}\n\n.markdown-body g-emoji img {\n  width: 1em;\n  height: 1em;\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item label {\n  font-weight: var(--base-text-weight-normal, 400);\n}\n\n.markdown-body .task-list-item.enabled label {\n  cursor: pointer;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 4px;\n}\n\n.markdown-body .task-list-item .handle {\n  display: none;\n}\n\n.markdown-body .task-list-item-checkbox {\n  margin: 0 .2em .25em -1.4em;\n  vertical-align: middle;\n}\n\n.markdown-body .contains-task-list:dir(rtl) .task-list-item-checkbox {\n  margin: 0 -1.6em .25em .2em;\n}\n\n.markdown-body .contains-task-list {\n  position: relative;\n}\n\n.markdown-body .contains-task-list:hover .task-list-item-convert-container,\n.markdown-body .contains-task-list:focus-within .task-list-item-convert-container {\n  display: block;\n  width: auto;\n  height: 24px;\n  overflow: visible;\n  clip: auto;\n}\n\n.markdown-body ::-webkit-calendar-picker-indicator {\n  filter: invert(50%);\n}\n'],sourceRoot:""}]),c.locals={"markdown-body":"JTIzpWAWzFszir0t9BAM",octicon:"ZtsvEhcDSF51AlNAw5bX",anchor:"XGxKfA1eh75FuEQvL6pd","octicon-link":"dWtgNrd2FLAIgXW_saQM",absent:"IA6SgHbm0Y7OBhOVhkTA","no-list":"Ah464Xli3hvh5g0FxDU6",emoji:"ZS4ACM_E97QtVXIrTh0v",frame:"lDnbOZAfGYELmWGezfML","align-center":"eu2h77uDdxK5MXdfeTZw","align-right":"JTSEVjrxW64bL21abrdJ","float-left":"ZfcdU4S5q9EFQYTDAokN","float-right":"RobxFGLXur1Y7UKmUbGc",highlight:"VdUq4nEhjxaTJ35ZWZj3","csv-data":"qJTkIFPsS1XetkWVe1wE","blob-num":"uoPcs60bZ4EnaQf87ive",footnotes:"_Pddb2RnH2cX9eUvgC3w","data-footnote-backref":"W1_qPHD_fO94HaufTQLQ","pl-c":"P76fKaPowM9cpiHuRGin","pl-c1":"jCt3gvtc9gsxyL04trRl","pl-s":"zuy7DTbEbDxX3x9iJjsQ","pl-v":"tPRYQQCLRp36BnHeYwTD","pl-e":"mS7Czrsi8R4w6uIk9uyV","pl-en":"fEXlqGWpT9EQeh66CyUA","pl-smi":"KYRbXZ3_oqIQD_jYmmss","pl-s1":"Onf1xGhm1CyIKCUqv6Vt","pl-ent":"bML4Cf9GLbf5q17kpKv6","pl-k":"D3WGOCVXjgPFkMdT5njO","pl-pds":"qqPwBDvIt9NfS3oysOeg","pl-pse":"ngxODS0dsF3_9UYML_jK","pl-sr":"zCzAZcbA0HMroij1e7Zq","pl-cce":"alqCJ_RmYevYOsGV2npQ","pl-sre":"_JjkFZbcwE5FrjyToawY","pl-sra":"rpODeGZWpCHdQeJ9iNFh","pl-smw":"UwBKloNe0dpM10LYc9gH","pl-bu":"YwnHPpSzGb2oO4ckgFiE","pl-ii":"xG7JZyGUso7EejDEcqPj","pl-c2":"HsozdGaRrbnEFskf5GM5","pl-ml":"QCudWQ_NcGbMAjWek5zw","pl-mh":"vtRO86GQ58WMpNkZmEFb","pl-ms":"MOLUJS3ucw2wi08L8owu","pl-mi":"aGEFAwvkd7f_tpL163Xx","pl-mb":"jKazAlPq8JmjMct4bPxN","pl-md":"BvEH7VV6fJeHNG6aIv7M","pl-mi1":"t1DHu4D7tHFAdaNdZexf","pl-mc":"wgJicwrtajeTkYba3WJS","pl-mi2":"nsuM7TFfymO8yvr95F3_","pl-mdr":"jPrZaddoZ0MPWaaLf9Hg","pl-ba":"jkygUO3hOR0HgWl8Vu3I","pl-sg":"_R72N5SC88lk68CWAN9g","pl-corl":"HqCHQQDtoZGYCY_Aiuby","task-list-item":"z8yi6slqhr75T9wpK_ku",enabled:"juEHlr9g1BeZBlNEC_bS",handle:"JXsFqSdSlkBLe8YHtVHc","task-list-item-checkbox":"J6bqF00Yji6efKXcYLqA","contains-task-list":"tpfsYJHavqwf9F0ociP3","task-list-item-convert-container":"EcA5MpPXXIr0gpYjQhxV"};const p=c},6668:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},4573:(e,n,t)=>{"use strict";t.d(n,{wT:()=>Te,Ds:()=>Ze});var r=t(959),o=t(422),i=t(5924);let a={data:""},s=e=>"object"==typeof window?((e?e.querySelector("#_goober"):window._goober)||Object.assign((e||document.head).appendChild(document.createElement("style")),{innerHTML:" ",id:"_goober"})).firstChild:e||a,l=/(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,d=/\/\*[^]*?\*\/|  +/g,c=/\n+/g,A=(e,n)=>{let t="",r="",o="";for(let i in e){let a=e[i];"@"==i[0]?"i"==i[1]?t=i+" "+a+";":r+="f"==i[1]?A(a,i):i+"{"+A(a,"k"==i[1]?"":n)+"}":"object"==typeof a?r+=A(a,n?n.replace(/([^,])+/g,(e=>i.replace(/(^:.*)|([^,])+/g,(n=>/&/.test(n)?n.replace(/&/g,e):e?e+" "+n:n)))):i):null!=a&&(i=/^--/.test(i)?i:i.replace(/[A-Z]/g,"-$&").toLowerCase(),o+=A.p?A.p(i,a):i+":"+a+";")}return t+(n&&o?n+"{"+o+"}":o)+r},p={},u=e=>{if("object"==typeof e){let n="";for(let t in e)n+=t+u(e[t]);return n}return e},h=(e,n,t,r,o)=>{let i=u(e),a=p[i]||(p[i]=(e=>{let n=0,t=11;for(;n<e.length;)t=101*t+e.charCodeAt(n++)>>>0;return"go"+t})(i));if(!p[a]){let n=i!==e?e:(e=>{let n,t,r=[{}];for(;n=l.exec(e.replace(d,""));)n[4]?r.shift():n[3]?(t=n[3].replace(c," ").trim(),r.unshift(r[0][t]=r[0][t]||{})):r[0][n[1]]=n[2].replace(c," ").trim();return r[0]})(e);p[a]=A(o?{["@keyframes "+a]:n}:n,t?"":"."+a)}let s=t&&p.g?p.g:null;return t&&(p.g=p[a]),((e,n,t,r)=>{r?n.data=n.data.replace(r,e):-1===n.data.indexOf(e)&&(n.data=t?e+n.data:n.data+e)})(p[a],n,r,s),a},m=(e,n,t)=>e.reduce(((e,r,o)=>{let i=n[o];if(i&&i.call){let e=i(t),n=e&&e.props&&e.props.className||/^go/.test(e)&&e;i=n?"."+n:e&&"object"==typeof e?e.props?"":A(e,""):!1===e?"":e}return e+r+(null==i?"":i)}),"");function g(e){let n=this||{},t=e.call?e(n.p):e;return h(t.unshift?t.raw?m(t,[].slice.call(arguments,1),n.p):t.reduce(((e,t)=>Object.assign(e,t&&t.call?t(n.p):t)),{}):t,s(n.target),n.g,n.o,n.k)}function f(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(e,n,t){return n&&f(e.prototype,n),t&&f(e,t),e}function y(){return y=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},y.apply(this,arguments)}function k(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}function x(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}g.bind({g:1}),g.bind({k:1});var z=function(){return""},w=r.createContext({enqueueSnackbar:z,closeSnackbar:z}),E="@media (max-width:599.95px)",C="@media (min-width:600px)",W=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},F=function(e){return""+W(e.vertical)+W(e.horizontal)},I=function(e){return!!e||0===e},B="unmounted",M="exited",S="entering",T="entered",Z="exiting",J=function(e){function n(n){var t;t=e.call(this,n)||this;var r,o=n.appear;return t.appearStatus=null,n.in?o?(r=M,t.appearStatus=S):r=T:r=n.unmountOnExit||n.mountOnEnter?B:M,t.state={status:r},t.nextCallback=null,t}k(n,e),n.getDerivedStateFromProps=function(e,n){return e.in&&n.status===B?{status:M}:null};var t=n.prototype;return t.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},t.componentDidUpdate=function(e){var n=null;if(e!==this.props){var t=this.state.status;this.props.in?t!==S&&t!==T&&(n=S):t!==S&&t!==T||(n=Z)}this.updateStatus(!1,n)},t.componentWillUnmount=function(){this.cancelNextCallback()},t.getTimeouts=function(){var e=this.props.timeout,n=e,t=e;return null!=e&&"number"!=typeof e&&"string"!=typeof e&&(t=e.exit,n=e.enter),{exit:t,enter:n}},t.updateStatus=function(e,n){void 0===e&&(e=!1),null!==n?(this.cancelNextCallback(),n===S?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===M&&this.setState({status:B})},t.performEnter=function(e){var n=this,t=this.props.enter,r=e,o=this.getTimeouts();e||t?(this.props.onEnter&&this.props.onEnter(this.node,r),this.safeSetState({status:S},(function(){n.props.onEntering&&n.props.onEntering(n.node,r),n.onTransitionEnd(o.enter,(function(){n.safeSetState({status:T},(function(){n.props.onEntered&&n.props.onEntered(n.node,r)}))}))}))):this.safeSetState({status:T},(function(){n.props.onEntered&&n.props.onEntered(n.node,r)}))},t.performExit=function(){var e=this,n=this.props.exit,t=this.getTimeouts();n?(this.props.onExit&&this.props.onExit(this.node),this.safeSetState({status:Z},(function(){e.props.onExiting&&e.props.onExiting(e.node),e.onTransitionEnd(t.exit,(function(){e.safeSetState({status:M},(function(){e.props.onExited&&e.props.onExited(e.node)}))}))}))):this.safeSetState({status:M},(function(){e.props.onExited&&e.props.onExited(e.node)}))},t.cancelNextCallback=function(){null!==this.nextCallback&&this.nextCallback.cancel&&(this.nextCallback.cancel(),this.nextCallback=null)},t.safeSetState=function(e,n){n=this.setNextCallback(n),this.setState(e,n)},t.setNextCallback=function(e){var n=this,t=!0;return this.nextCallback=function(){t&&(t=!1,n.nextCallback=null,e())},this.nextCallback.cancel=function(){t=!1},this.nextCallback},t.onTransitionEnd=function(e,n){this.setNextCallback(n);var t=null==e&&!this.props.addEndListener;this.node&&!t?(this.props.addEndListener&&this.props.addEndListener(this.node,this.nextCallback),null!=e&&setTimeout(this.nextCallback,e)):setTimeout(this.nextCallback,0)},t.render=function(){var e=this.state.status;if(e===B)return null;var n=this.props;return(0,n.children)(e,x(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]))},b(n,[{key:"node",get:function(){var e,n=null===(e=this.props.nodeRef)||void 0===e?void 0:e.current;if(!n)throw new Error("notistack - Custom snackbar is not refForwarding");return n}}]),n}(r.Component);function R(){}function D(e,n){"function"==typeof e?e(n):e&&(e.current=n)}function $(e,n){return(0,r.useMemo)((function(){return null==e&&null==n?null:function(t){D(e,t),D(n,t)}}),[e,n])}function L(e){var n=e.timeout,t=e.style,r=void 0===t?{}:t,o=e.mode;return{duration:"object"==typeof n?n[o]||0:n,easing:r.transitionTimingFunction,delay:r.transitionDelay}}J.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:R,onEntering:R,onEntered:R,onExit:R,onExiting:R,onExited:R};var P=function(e){e.scrollTop=e.scrollTop},_=function(e){return Math.round(e)+"ms"};function O(e,n){void 0===e&&(e=["all"]);var t=n||{},r=t.duration,o=void 0===r?300:r,i=t.easing,a=void 0===i?"cubic-bezier(0.4, 0, 0.2, 1)":i,s=t.delay,l=void 0===s?0:s;return(Array.isArray(e)?e:[e]).map((function(e){var n="string"==typeof o?o:_(o),t="string"==typeof l?l:_(l);return e+" "+n+" "+a+" "+t})).join(",")}function j(e){var n=function(e){return e&&e.ownerDocument||document}(e);return n.defaultView||window}function q(e,n){if(n){var t=function(e,n){var t,r=n.getBoundingClientRect(),o=j(n);if(n.fakeTransform)t=n.fakeTransform;else{var i=o.getComputedStyle(n);t=i.getPropertyValue("-webkit-transform")||i.getPropertyValue("transform")}var a=0,s=0;if(t&&"none"!==t&&"string"==typeof t){var l=t.split("(")[1].split(")")[0].split(",");a=parseInt(l[4],10),s=parseInt(l[5],10)}switch(e){case"left":return"translateX("+(o.innerWidth+a-r.left)+"px)";case"right":return"translateX(-"+(r.left+r.width-a)+"px)";case"up":return"translateY("+(o.innerHeight+s-r.top)+"px)";default:return"translateY(-"+(r.top+r.height-s)+"px)"}}(e,n);t&&(n.style.webkitTransform=t,n.style.transform=t)}}var N=(0,r.forwardRef)((function(e,n){var t=e.children,o=e.direction,i=void 0===o?"down":o,a=e.in,s=e.style,l=e.timeout,d=void 0===l?0:l,c=e.onEnter,A=e.onEntered,p=e.onExit,u=e.onExited,h=x(e,["children","direction","in","style","timeout","onEnter","onEntered","onExit","onExited"]),m=(0,r.useRef)(null),g=$(t.ref,m),f=$(g,n),b=(0,r.useCallback)((function(){m.current&&q(i,m.current)}),[i]);return(0,r.useEffect)((function(){if(!a&&"down"!==i&&"right"!==i){var e=function(e,n){var t;function r(){for(var r=this,o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];clearTimeout(t),t=setTimeout((function(){e.apply(r,i)}),n)}return void 0===n&&(n=166),r.clear=function(){clearTimeout(t)},r}((function(){m.current&&q(i,m.current)})),n=j(m.current);return n.addEventListener("resize",e),function(){e.clear(),n.removeEventListener("resize",e)}}}),[i,a]),(0,r.useEffect)((function(){a||b()}),[a,b]),(0,r.createElement)(J,Object.assign({appear:!0,nodeRef:m,onEnter:function(e,n){q(i,e),P(e),c&&c(e,n)},onEntered:A,onEntering:function(e){var n=(null==s?void 0:s.transitionTimingFunction)||"cubic-bezier(0.0, 0, 0.2, 1)",t=L({timeout:d,mode:"enter",style:y({},s,{transitionTimingFunction:n})});e.style.webkitTransition=O("-webkit-transform",t),e.style.transition=O("transform",t),e.style.webkitTransform="none",e.style.transform="none"},onExit:function(e){var n=(null==s?void 0:s.transitionTimingFunction)||"cubic-bezier(0.4, 0, 0.6, 1)",t=L({timeout:d,mode:"exit",style:y({},s,{transitionTimingFunction:n})});e.style.webkitTransition=O("-webkit-transform",t),e.style.transition=O("transform",t),q(i,e),p&&p(e)},onExited:function(e){e.style.webkitTransition="",e.style.transition="",u&&u(e)},in:a,timeout:d},h),(function(e,n){return(0,r.cloneElement)(t,y({ref:f,style:y({visibility:"exited"!==e||a?void 0:"hidden"},s,{},t.props.style)},n))}))}));N.displayName="Slide";var H=function(e){return r.createElement("svg",Object.assign({viewBox:"0 0 24 24",focusable:"false",style:{fontSize:20,marginInlineEnd:8,userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0}},e))},G=function(){return r.createElement(H,null,r.createElement("path",{d:"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41\n        10.59L10 14.17L17.59 6.58L19 8L10 17Z"}))},X=function(){return r.createElement(H,null,r.createElement("path",{d:"M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z"}))},Q=function(){return r.createElement(H,null,r.createElement("path",{d:"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,\n        6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,\n        13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z"}))},V=function(){return r.createElement(H,null,r.createElement("path",{d:"M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,\n        0 22,12A10,10 0 0,0 12,2Z"}))},K={maxSnack:3,persist:!1,hideIconVariant:!1,disableWindowBlurListener:!1,variant:"default",autoHideDuration:5e3,iconVariant:{default:void 0,success:r.createElement(G,null),warning:r.createElement(X,null),error:r.createElement(Q,null),info:r.createElement(V,null)},anchorOrigin:{vertical:"bottom",horizontal:"left"},TransitionComponent:N,transitionDuration:{enter:225,exit:195}};function U(e){return Object.entries(e).reduce((function(e,n){var t,r=n[0],o=n[1];return y({},e,((t={})[r]=g(o),t))}),{})}var Y="notistack-CollapseWrapper",ee=function(e){return"notistack-MuiContent-"+e},ne=U({root:{height:0},entered:{height:"auto"}}),te="0px",re=(0,r.forwardRef)((function(e,n){var t=e.children,o=e.in,a=e.onExited,s=(0,r.useRef)(null),l=(0,r.useRef)(null),d=$(n,l),c=function(){return s.current?s.current.clientHeight:0};return(0,r.createElement)(J,{in:o,unmountOnExit:!0,onEnter:function(e){e.style.height=te},onEntered:function(e){e.style.height="auto"},onEntering:function(e){var n=c(),t=L({timeout:175,mode:"enter"}),r=t.duration,o=t.easing;e.style.transitionDuration="string"==typeof r?r:r+"ms",e.style.height=n+"px",e.style.transitionTimingFunction=o||""},onExit:function(e){e.style.height=c()+"px"},onExited:a,onExiting:function(e){P(e);var n=L({timeout:175,mode:"exit"}),t=n.duration,r=n.easing;e.style.transitionDuration="string"==typeof t?t:t+"ms",e.style.height=te,e.style.transitionTimingFunction=r||""},nodeRef:l,timeout:175},(function(e,n){return(0,r.createElement)("div",Object.assign({ref:d,className:(0,i.Z)(ne.root,"entered"===e&&ne.entered),style:y({pointerEvents:"all",overflow:"hidden",minHeight:te,transition:O("height")},"entered"===e&&{overflow:"visible"},{},"exited"===e&&!o&&{visibility:"hidden"})},n),(0,r.createElement)("div",{ref:s,className:Y,style:{display:"flex",width:"100%"}},t))}))}));re.displayName="Collapse";var oe={right:"left",left:"right",bottom:"up",top:"down"},ie=function(e){return"anchorOrigin"+F(e)},ae=function(){};function se(e,n){return e.reduce((function(e,t){return null==t?e:function(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=[].concat(o);n&&-1===a.indexOf(n)&&a.push(n),e.apply(this,a),t.apply(this,a)}}),ae)}var le="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;function de(e){var n=(0,r.useRef)(e);return le((function(){n.current=e})),(0,r.useCallback)((function(){return n.current.apply(void 0,arguments)}),[])}var ce,Ae=(0,r.forwardRef)((function(e,n){var t=e.children,o=e.className,a=e.autoHideDuration,s=e.disableWindowBlurListener,l=void 0!==s&&s,d=e.onClose,c=e.id,A=e.open,p=e.SnackbarProps,u=void 0===p?{}:p,h=(0,r.useRef)(),m=de((function(){d&&d.apply(void 0,arguments)})),g=de((function(e){d&&null!=e&&(h.current&&clearTimeout(h.current),h.current=setTimeout((function(){m(null,"timeout",c)}),e))}));(0,r.useEffect)((function(){return A&&g(a),function(){h.current&&clearTimeout(h.current)}}),[A,a,g]);var f=function(){h.current&&clearTimeout(h.current)},b=(0,r.useCallback)((function(){null!=a&&g(.5*a)}),[a,g]);return(0,r.useEffect)((function(){if(!l&&A)return window.addEventListener("focus",b),window.addEventListener("blur",f),function(){window.removeEventListener("focus",b),window.removeEventListener("blur",f)}}),[l,b,A]),(0,r.createElement)("div",Object.assign({ref:n},u,{className:(0,i.Z)("notistack-Snackbar",o),onMouseEnter:function(e){u.onMouseEnter&&u.onMouseEnter(e),f()},onMouseLeave:function(e){u.onMouseLeave&&u.onMouseLeave(e),b()}}),t)}));Ae.displayName="Snackbar";var pe=U({root:(ce={display:"flex",flexWrap:"wrap",flexGrow:1},ce[C]={flexGrow:"initial",minWidth:"288px"},ce)}),ue=(0,r.forwardRef)((function(e,n){var t=e.className,o=x(e,["className"]);return r.createElement("div",Object.assign({ref:n,className:(0,i.Z)(pe.root,t)},o))}));ue.displayName="SnackbarContent";var he=U({root:{backgroundColor:"#313131",fontSize:"0.875rem",lineHeight:1.43,letterSpacing:"0.01071em",color:"#fff",alignItems:"center",padding:"6px 16px",borderRadius:"4px",boxShadow:"0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)"},lessPadding:{paddingLeft:"20px"},default:{backgroundColor:"#313131"},success:{backgroundColor:"#43a047"},error:{backgroundColor:"#d32f2f"},warning:{backgroundColor:"#ff9800"},info:{backgroundColor:"#2196f3"},message:{display:"flex",alignItems:"center",padding:"8px 0"},action:{display:"flex",alignItems:"center",marginLeft:"auto",paddingLeft:"16px",marginRight:"-8px"}}),me="notistack-snackbar",ge=(0,r.forwardRef)((function(e,n){var t=e.id,o=e.message,a=e.action,s=e.iconVariant,l=e.variant,d=e.hideIconVariant,c=e.style,A=e.className,p=s[l],u=a;return"function"==typeof u&&(u=u(t)),r.createElement(ue,{ref:n,role:"alert","aria-describedby":me,style:c,className:(0,i.Z)("notistack-MuiContent",ee(l),he.root,he[l],A,!d&&p&&he.lessPadding)},r.createElement("div",{id:me,className:he.message},d?null:p,o),u&&r.createElement("div",{className:he.action},u))}));ge.displayName="MaterialDesignContent";var fe,be,ye,ke,xe,ve=(0,r.memo)(ge),ze=U({wrappedRoot:{width:"100%",position:"relative",transform:"translateX(0)",top:0,right:0,bottom:0,left:0,minWidth:"288px"}}),we=function(e){var n=(0,r.useRef)(),t=(0,r.useState)(!0),o=t[0],a=t[1],s=se([e.snack.onClose,e.onClose]),l=(0,r.useCallback)((function(){n.current=setTimeout((function(){a((function(e){return!e}))}),125)}),[]);(0,r.useEffect)((function(){return function(){n.current&&clearTimeout(n.current)}}),[]);var d,c=e.snack,A=e.classes,p=e.Component,u=void 0===p?ve:p,h=(0,r.useMemo)((function(){return function(e){void 0===e&&(e={});var n={containerRoot:!0,containerAnchorOriginTopCenter:!0,containerAnchorOriginBottomCenter:!0,containerAnchorOriginTopRight:!0,containerAnchorOriginBottomRight:!0,containerAnchorOriginTopLeft:!0,containerAnchorOriginBottomLeft:!0};return Object.keys(e).filter((function(e){return!n[e]})).reduce((function(n,t){var r;return y({},n,((r={})[t]=e[t],r))}),{})}(A)}),[A]),m=c.open,g=c.SnackbarProps,f=c.TransitionComponent,b=c.TransitionProps,k=c.transitionDuration,v=c.disableWindowBlurListener,z=c.content,w=x(c,["open","SnackbarProps","TransitionComponent","TransitionProps","transitionDuration","disableWindowBlurListener","content","entered","requestClose","onEnter","onEntered","onExit","onExited"]),E=y({direction:(d=w.anchorOrigin,"center"!==d.horizontal?oe[d.horizontal]:oe[d.vertical]),timeout:k},b),C=z;"function"==typeof C&&(C=C(w.id,w.message));var W=["onEnter","onEntered","onExit","onExited"].reduce((function(n,t){var r;return y({},n,((r={})[t]=se([e.snack[t],e[t]],w.id),r))}),{});return r.createElement(re,{in:o,onExited:W.onExited},r.createElement(Ae,{open:m,id:w.id,disableWindowBlurListener:v,autoHideDuration:w.autoHideDuration,className:(0,i.Z)(ze.wrappedRoot,h.root,h[ie(w.anchorOrigin)]),SnackbarProps:g,onClose:s},r.createElement(f,Object.assign({},E,{appear:!0,in:m,onExit:W.onExit,onExited:l,onEnter:W.onEnter,onEntered:se([W.onEntered,function(){e.snack.requestClose&&s(null,"instructed",e.snack.id)}],w.id)}),C||r.createElement(u,Object.assign({},w)))))},Ee=20,Ce=6,We=2,Fe="."+Y,Ie=U({root:(fe={boxSizing:"border-box",display:"flex",maxHeight:"100%",position:"fixed",zIndex:1400,height:"auto",width:"auto",transition:O(["top","right","bottom","left","max-width"],{duration:300,easing:"ease"}),pointerEvents:"none"},fe[Fe]={padding:Ce+"px 0px",transition:"padding 300ms ease 0ms"},fe.maxWidth="calc(100% - "+2*Ee+"px)",fe[E]={width:"100%",maxWidth:"calc(100% - 32px)"},fe),rootDense:(be={},be[Fe]={padding:We+"px 0px"},be),top:{top:Ee-Ce+"px",flexDirection:"column"},bottom:{bottom:Ee-Ce+"px",flexDirection:"column-reverse"},left:(ye={left:Ee+"px"},ye[C]={alignItems:"flex-start"},ye[E]={left:"16px"},ye),right:(ke={right:Ee+"px"},ke[C]={alignItems:"flex-end"},ke[E]={right:"16px"},ke),center:(xe={left:"50%",transform:"translateX(-50%)"},xe[C]={alignItems:"center"},xe)}),Be=function(e){var n=e.classes,t=void 0===n?{}:n,o=e.anchorOrigin,a=e.dense,s=e.children,l=(0,i.Z)("notistack-SnackbarContainer",Ie[o.vertical],Ie[o.horizontal],Ie.root,t.containerRoot,t["containerAnchorOrigin"+F(o)],a&&Ie.rootDense);return r.createElement("div",{className:l},s)},Me=(0,r.memo)(Be),Se=function(e){return!("string"==typeof e||(0,r.isValidElement)(e))},Te=function(e){function n(n){var t;return(t=e.call(this,n)||this).enqueueSnackbar=function(e,n){if(void 0===n&&(n={}),null==e)throw new Error("enqueueSnackbar called with invalid argument");var r=Se(e)?e:n,o=Se(e)?e.message:e,a=r.key,s=r.preventDuplicate,l=x(r,["key","preventDuplicate"]),d=I(a),c=d?a:(new Date).getTime()+Math.random(),A=function(e,n){return function(t,r){return void 0===r&&(r=!1),r?y({},K[t],{},n[t],{},e[t]):"autoHideDuration"===t?(o=e.autoHideDuration,i=n.autoHideDuration,(a=function(e){return"number"==typeof e||null===e})(o)?o:a(i)?i:K.autoHideDuration):"transitionDuration"===t?function(e,n){var t=function(e,n){return n.some((function(n){return typeof e===n}))};return t(e,["string","number"])?e:t(e,["object"])?y({},K.transitionDuration,{},t(n,["object"])&&n,{},e):t(n,["string","number"])?n:t(n,["object"])?y({},K.transitionDuration,{},n):K.transitionDuration}(e.transitionDuration,n.transitionDuration):e[t]||n[t]||K[t];var o,i,a}}(l,t.props),p=y({id:c},l,{message:o,open:!0,entered:!1,requestClose:!1,persist:A("persist"),action:A("action"),content:A("content"),variant:A("variant"),anchorOrigin:A("anchorOrigin"),disableWindowBlurListener:A("disableWindowBlurListener"),autoHideDuration:A("autoHideDuration"),hideIconVariant:A("hideIconVariant"),TransitionComponent:A("TransitionComponent"),transitionDuration:A("transitionDuration"),TransitionProps:A("TransitionProps",!0),iconVariant:A("iconVariant",!0),style:A("style",!0),SnackbarProps:A("SnackbarProps",!0),className:(0,i.Z)(t.props.className,l.className)});return p.persist&&(p.autoHideDuration=void 0),t.setState((function(e){if(void 0===s&&t.props.preventDuplicate||s){var n=function(e){return d?e.id===c:e.message===o},r=e.queue.findIndex(n)>-1,i=e.snacks.findIndex(n)>-1;if(r||i)return e}return t.handleDisplaySnack(y({},e,{queue:[].concat(e.queue,[p])}))})),c},t.handleDisplaySnack=function(e){return e.snacks.length>=t.maxSnack?t.handleDismissOldest(e):t.processQueue(e)},t.processQueue=function(e){var n=e.queue,t=e.snacks;return n.length>0?y({},e,{snacks:[].concat(t,[n[0]]),queue:n.slice(1,n.length)}):e},t.handleDismissOldest=function(e){if(e.snacks.some((function(e){return!e.open||e.requestClose})))return e;var n=!1,r=!1;e.snacks.reduce((function(e,n){return e+(n.open&&n.persist?1:0)}),0)===t.maxSnack&&(r=!0);var o=e.snacks.map((function(e){return n||e.persist&&!r?y({},e):(n=!0,e.entered?(e.onClose&&e.onClose(null,"maxsnack",e.id),t.props.onClose&&t.props.onClose(null,"maxsnack",e.id),y({},e,{open:!1})):y({},e,{requestClose:!0}))}));return y({},e,{snacks:o})},t.handleEnteredSnack=function(e,n,r){if(!I(r))throw new Error("handleEnteredSnack Cannot be called with undefined key");t.setState((function(e){return{snacks:e.snacks.map((function(e){return e.id===r?y({},e,{entered:!0}):y({},e)}))}}))},t.handleCloseSnack=function(e,n,r){t.props.onClose&&t.props.onClose(e,n,r);var o=void 0===r;t.setState((function(e){var n=e.snacks,t=e.queue;return{snacks:n.map((function(e){return o||e.id===r?e.entered?y({},e,{open:!1}):y({},e,{requestClose:!0}):y({},e)})),queue:t.filter((function(e){return e.id!==r}))}}))},t.closeSnackbar=function(e){var n=t.state.snacks.find((function(n){return n.id===e}));I(e)&&n&&n.onClose&&n.onClose(null,"instructed",e),t.handleCloseSnack(null,"instructed",e)},t.handleExitedSnack=function(e,n){if(!I(n))throw new Error("handleExitedSnack Cannot be called with undefined key");t.setState((function(e){var r=t.processQueue(y({},e,{snacks:e.snacks.filter((function(e){return e.id!==n}))}));return 0===r.queue.length?r:t.handleDismissOldest(r)}))},t.enqueueSnackbar,t.closeSnackbar,t.state={snacks:[],queue:[],contextValue:{enqueueSnackbar:t.enqueueSnackbar.bind(v(t)),closeSnackbar:t.closeSnackbar.bind(v(t))}},t}return k(n,e),n.prototype.render=function(){var e=this,n=this.state.contextValue,t=this.props,i=t.domRoot,a=t.children,s=t.dense,l=void 0!==s&&s,d=t.Components,c=void 0===d?{}:d,A=t.classes,p=this.state.snacks.reduce((function(e,n){var t,r=F(n.anchorOrigin),o=e[r]||[];return y({},e,((t={})[r]=[].concat(o,[n]),t))}),{}),u=Object.keys(p).map((function(n){var t=p[n],o=t[0];return r.createElement(Me,{key:n,dense:l,anchorOrigin:o.anchorOrigin,classes:A},t.map((function(n){return r.createElement(we,{key:n.id,snack:n,classes:A,Component:c[n.variant],onClose:e.handleCloseSnack,onEnter:e.props.onEnter,onExit:e.props.onExit,onExited:se([e.handleExitedSnack,e.props.onExited],n.id),onEntered:se([e.handleEnteredSnack,e.props.onEntered],n.id)})})))}));return r.createElement(w.Provider,{value:n},a,i?(0,o.createPortal)(u,i):u)},b(n,[{key:"maxSnack",get:function(){return this.props.maxSnack||K.maxSnack}}]),n}(r.Component),Ze=function(){return(0,r.useContext)(w)}},1195:(e,n)=>{"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},1357:(e,n,t)=>{"use strict";t(1195)},698:(e,n,t)=>{"use strict";var r=t(3072),o=t.n(r),i=t(2298),a=t.n(i),s=t(7976),l=t.n(s),d=t(5147),c=t.n(d),A=t(566),p=t.n(A),u=t(9396),h=t.n(u),m=t(4340),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=l().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=p(),o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals},4039:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},7075:(e,n,t)=>{"use strict";t.d(n,{TU:()=>L});let r={async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1};const o=/[&<>"']/,i=new RegExp(o.source,"g"),a=/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,s=new RegExp(a.source,"g"),l={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},d=e=>l[e];function c(e,n){if(n){if(o.test(e))return e.replace(i,d)}else if(a.test(e))return e.replace(s,d);return e}const A=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function p(e){return e.replace(A,((e,n)=>"colon"===(n=n.toLowerCase())?":":"#"===n.charAt(0)?"x"===n.charAt(1)?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1)):""))}const u=/(^|[^\[])\^/g;function h(e,n){e="string"==typeof e?e:e.source,n=n||"";const t={replace:(n,r)=>(r=(r=r.source||r).replace(u,"$1"),e=e.replace(n,r),t),getRegex:()=>new RegExp(e,n)};return t}const m=/[^\w:]/g,g=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function f(e,n,t){if(e){let e;try{e=decodeURIComponent(p(t)).replace(m,"").toLowerCase()}catch(e){return null}if(0===e.indexOf("javascript:")||0===e.indexOf("vbscript:")||0===e.indexOf("data:"))return null}n&&!g.test(t)&&(t=function(e,n){b[" "+e]||(y.test(e)?b[" "+e]=e+"/":b[" "+e]=w(e,"/",!0));const t=-1===(e=b[" "+e]).indexOf(":");return"//"===n.substring(0,2)?t?n:e.replace(k,"$1")+n:"/"===n.charAt(0)?t?n:e.replace(x,"$1")+n:e+n}(n,t));try{t=encodeURI(t).replace(/%25/g,"%")}catch(e){return null}return t}const b={},y=/^[^:]+:\/*[^/]*$/,k=/^([^:]+:)[\s\S]*$/,x=/^([^:]+:\/*[^/]*)[\s\S]*$/,v={exec:function(){}};function z(e,n){const t=e.replace(/\|/g,((e,n,t)=>{let r=!1,o=n;for(;--o>=0&&"\\"===t[o];)r=!r;return r?"|":" |"})).split(/ \|/);let r=0;if(t[0].trim()||t.shift(),t.length>0&&!t[t.length-1].trim()&&t.pop(),t.length>n)t.splice(n);else for(;t.length<n;)t.push("");for(;r<t.length;r++)t[r]=t[r].trim().replace(/\\\|/g,"|");return t}function w(e,n,t){const r=e.length;if(0===r)return"";let o=0;for(;o<r;){const i=e.charAt(r-o-1);if(i!==n||t){if(i===n||!t)break;o++}else o++}return e.slice(0,r-o)}function E(e,n){if(n<1)return"";let t="";for(;n>1;)1&n&&(t+=e),n>>=1,e+=e;return t+e}function C(e,n,t,r){const o=n.href,i=n.title?c(n.title):null,a=e[1].replace(/\\([\[\]])/g,"$1");if("!"!==e[0].charAt(0)){r.state.inLink=!0;const e={type:"link",raw:t,href:o,title:i,text:a,tokens:r.inlineTokens(a)};return r.state.inLink=!1,e}return{type:"image",raw:t,href:o,title:i,text:c(a)}}class W{constructor(e){this.options=e||r}space(e){const n=this.rules.block.newline.exec(e);if(n&&n[0].length>0)return{type:"space",raw:n[0]}}code(e){const n=this.rules.block.code.exec(e);if(n){const e=n[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:n[0],codeBlockStyle:"indented",text:this.options.pedantic?e:w(e,"\n")}}}fences(e){const n=this.rules.block.fences.exec(e);if(n){const e=n[0],t=function(e,n){const t=e.match(/^(\s+)(?:```)/);if(null===t)return n;const r=t[1];return n.split("\n").map((e=>{const n=e.match(/^\s+/);if(null===n)return e;const[t]=n;return t.length>=r.length?e.slice(r.length):e})).join("\n")}(e,n[3]||"");return{type:"code",raw:e,lang:n[2]?n[2].trim().replace(this.rules.inline._escapes,"$1"):n[2],text:t}}}heading(e){const n=this.rules.block.heading.exec(e);if(n){let e=n[2].trim();if(/#$/.test(e)){const n=w(e,"#");this.options.pedantic?e=n.trim():n&&!/ $/.test(n)||(e=n.trim())}return{type:"heading",raw:n[0],depth:n[1].length,text:e,tokens:this.lexer.inline(e)}}}hr(e){const n=this.rules.block.hr.exec(e);if(n)return{type:"hr",raw:n[0]}}blockquote(e){const n=this.rules.block.blockquote.exec(e);if(n){const e=n[0].replace(/^ *>[ \t]?/gm,""),t=this.lexer.state.top;this.lexer.state.top=!0;const r=this.lexer.blockTokens(e);return this.lexer.state.top=t,{type:"blockquote",raw:n[0],tokens:r,text:e}}}list(e){let n=this.rules.block.list.exec(e);if(n){let t,r,o,i,a,s,l,d,c,A,p,u,h=n[1].trim();const m=h.length>1,g={type:"list",raw:"",ordered:m,start:m?+h.slice(0,-1):"",loose:!1,items:[]};h=m?`\\d{1,9}\\${h.slice(-1)}`:`\\${h}`,this.options.pedantic&&(h=m?h:"[*+-]");const f=new RegExp(`^( {0,3}${h})((?:[\t ][^\\n]*)?(?:\\n|$))`);for(;e&&(u=!1,n=f.exec(e))&&!this.rules.block.hr.test(e);){if(t=n[0],e=e.substring(t.length),d=n[2].split("\n",1)[0].replace(/^\t+/,(e=>" ".repeat(3*e.length))),c=e.split("\n",1)[0],this.options.pedantic?(i=2,p=d.trimLeft()):(i=n[2].search(/[^ ]/),i=i>4?1:i,p=d.slice(i),i+=n[1].length),s=!1,!d&&/^ *$/.test(c)&&(t+=c+"\n",e=e.substring(c.length+1),u=!0),!u){const n=new RegExp(`^ {0,${Math.min(3,i-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),r=new RegExp(`^ {0,${Math.min(3,i-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),o=new RegExp(`^ {0,${Math.min(3,i-1)}}(?:\`\`\`|~~~)`),a=new RegExp(`^ {0,${Math.min(3,i-1)}}#`);for(;e&&(A=e.split("\n",1)[0],c=A,this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,"  ")),!o.test(c))&&!a.test(c)&&!n.test(c)&&!r.test(e);){if(c.search(/[^ ]/)>=i||!c.trim())p+="\n"+c.slice(i);else{if(s)break;if(d.search(/[^ ]/)>=4)break;if(o.test(d))break;if(a.test(d))break;if(r.test(d))break;p+="\n"+c}s||c.trim()||(s=!0),t+=A+"\n",e=e.substring(A.length+1),d=c.slice(i)}}g.loose||(l?g.loose=!0:/\n *\n *$/.test(t)&&(l=!0)),this.options.gfm&&(r=/^\[[ xX]\] /.exec(p),r&&(o="[ ] "!==r[0],p=p.replace(/^\[[ xX]\] +/,""))),g.items.push({type:"list_item",raw:t,task:!!r,checked:o,loose:!1,text:p}),g.raw+=t}g.items[g.items.length-1].raw=t.trimRight(),g.items[g.items.length-1].text=p.trimRight(),g.raw=g.raw.trimRight();const b=g.items.length;for(a=0;a<b;a++)if(this.lexer.state.top=!1,g.items[a].tokens=this.lexer.blockTokens(g.items[a].text,[]),!g.loose){const e=g.items[a].tokens.filter((e=>"space"===e.type)),n=e.length>0&&e.some((e=>/\n.*\n/.test(e.raw)));g.loose=n}if(g.loose)for(a=0;a<b;a++)g.items[a].loose=!0;return g}}html(e){const n=this.rules.block.html.exec(e);if(n){const e={type:"html",raw:n[0],pre:!this.options.sanitizer&&("pre"===n[1]||"script"===n[1]||"style"===n[1]),text:n[0]};if(this.options.sanitize){const t=this.options.sanitizer?this.options.sanitizer(n[0]):c(n[0]);e.type="paragraph",e.text=t,e.tokens=this.lexer.inline(t)}return e}}def(e){const n=this.rules.block.def.exec(e);if(n){const e=n[1].toLowerCase().replace(/\s+/g," "),t=n[2]?n[2].replace(/^<(.*)>$/,"$1").replace(this.rules.inline._escapes,"$1"):"",r=n[3]?n[3].substring(1,n[3].length-1).replace(this.rules.inline._escapes,"$1"):n[3];return{type:"def",tag:e,raw:n[0],href:t,title:r}}}table(e){const n=this.rules.block.table.exec(e);if(n){const e={type:"table",header:z(n[1]).map((e=>({text:e}))),align:n[2].replace(/^ *|\| *$/g,"").split(/ *\| */),rows:n[3]&&n[3].trim()?n[3].replace(/\n[ \t]*$/,"").split("\n"):[]};if(e.header.length===e.align.length){e.raw=n[0];let t,r,o,i,a=e.align.length;for(t=0;t<a;t++)/^ *-+: *$/.test(e.align[t])?e.align[t]="right":/^ *:-+: *$/.test(e.align[t])?e.align[t]="center":/^ *:-+ *$/.test(e.align[t])?e.align[t]="left":e.align[t]=null;for(a=e.rows.length,t=0;t<a;t++)e.rows[t]=z(e.rows[t],e.header.length).map((e=>({text:e})));for(a=e.header.length,r=0;r<a;r++)e.header[r].tokens=this.lexer.inline(e.header[r].text);for(a=e.rows.length,r=0;r<a;r++)for(i=e.rows[r],o=0;o<i.length;o++)i[o].tokens=this.lexer.inline(i[o].text);return e}}}lheading(e){const n=this.rules.block.lheading.exec(e);if(n)return{type:"heading",raw:n[0],depth:"="===n[2].charAt(0)?1:2,text:n[1],tokens:this.lexer.inline(n[1])}}paragraph(e){const n=this.rules.block.paragraph.exec(e);if(n){const e="\n"===n[1].charAt(n[1].length-1)?n[1].slice(0,-1):n[1];return{type:"paragraph",raw:n[0],text:e,tokens:this.lexer.inline(e)}}}text(e){const n=this.rules.block.text.exec(e);if(n)return{type:"text",raw:n[0],text:n[0],tokens:this.lexer.inline(n[0])}}escape(e){const n=this.rules.inline.escape.exec(e);if(n)return{type:"escape",raw:n[0],text:c(n[1])}}tag(e){const n=this.rules.inline.tag.exec(e);if(n)return!this.lexer.state.inLink&&/^<a /i.test(n[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\/a>/i.test(n[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(n[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(n[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?"text":"html",raw:n[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(n[0]):c(n[0]):n[0]}}link(e){const n=this.rules.inline.link.exec(e);if(n){const e=n[2].trim();if(!this.options.pedantic&&/^</.test(e)){if(!/>$/.test(e))return;const n=w(e.slice(0,-1),"\\");if((e.length-n.length)%2==0)return}else{const e=function(e,n){if(-1===e.indexOf(n[1]))return-1;const t=e.length;let r=0,o=0;for(;o<t;o++)if("\\"===e[o])o++;else if(e[o]===n[0])r++;else if(e[o]===n[1]&&(r--,r<0))return o;return-1}(n[2],"()");if(e>-1){const t=(0===n[0].indexOf("!")?5:4)+n[1].length+e;n[2]=n[2].substring(0,e),n[0]=n[0].substring(0,t).trim(),n[3]=""}}let t=n[2],r="";if(this.options.pedantic){const e=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(t);e&&(t=e[1],r=e[3])}else r=n[3]?n[3].slice(1,-1):"";return t=t.trim(),/^</.test(t)&&(t=this.options.pedantic&&!/>$/.test(e)?t.slice(1):t.slice(1,-1)),C(n,{href:t?t.replace(this.rules.inline._escapes,"$1"):t,title:r?r.replace(this.rules.inline._escapes,"$1"):r},n[0],this.lexer)}}reflink(e,n){let t;if((t=this.rules.inline.reflink.exec(e))||(t=this.rules.inline.nolink.exec(e))){let e=(t[2]||t[1]).replace(/\s+/g," ");if(e=n[e.toLowerCase()],!e){const e=t[0].charAt(0);return{type:"text",raw:e,text:e}}return C(t,e,t[0],this.lexer)}}emStrong(e,n,t=""){let r=this.rules.inline.emStrong.lDelim.exec(e);if(!r)return;if(r[3]&&t.match(/[\p{L}\p{N}]/u))return;const o=r[1]||r[2]||"";if(!o||o&&(""===t||this.rules.inline.punctuation.exec(t))){const t=r[0].length-1;let o,i,a=t,s=0;const l="*"===r[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(l.lastIndex=0,n=n.slice(-1*e.length+t);null!=(r=l.exec(n));){if(o=r[1]||r[2]||r[3]||r[4]||r[5]||r[6],!o)continue;if(i=o.length,r[3]||r[4]){a+=i;continue}if((r[5]||r[6])&&t%3&&!((t+i)%3)){s+=i;continue}if(a-=i,a>0)continue;i=Math.min(i,i+a+s);const n=e.slice(0,t+r.index+(r[0].length-o.length)+i);if(Math.min(t,i)%2){const e=n.slice(1,-1);return{type:"em",raw:n,text:e,tokens:this.lexer.inlineTokens(e)}}const l=n.slice(2,-2);return{type:"strong",raw:n,text:l,tokens:this.lexer.inlineTokens(l)}}}}codespan(e){const n=this.rules.inline.code.exec(e);if(n){let e=n[2].replace(/\n/g," ");const t=/[^ ]/.test(e),r=/^ /.test(e)&&/ $/.test(e);return t&&r&&(e=e.substring(1,e.length-1)),e=c(e,!0),{type:"codespan",raw:n[0],text:e}}}br(e){const n=this.rules.inline.br.exec(e);if(n)return{type:"br",raw:n[0]}}del(e){const n=this.rules.inline.del.exec(e);if(n)return{type:"del",raw:n[0],text:n[2],tokens:this.lexer.inlineTokens(n[2])}}autolink(e,n){const t=this.rules.inline.autolink.exec(e);if(t){let e,r;return"@"===t[2]?(e=c(this.options.mangle?n(t[1]):t[1]),r="mailto:"+e):(e=c(t[1]),r=e),{type:"link",raw:t[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}}}url(e,n){let t;if(t=this.rules.inline.url.exec(e)){let e,r;if("@"===t[2])e=c(this.options.mangle?n(t[0]):t[0]),r="mailto:"+e;else{let n;do{n=t[0],t[0]=this.rules.inline._backpedal.exec(t[0])[0]}while(n!==t[0]);e=c(t[0]),r="www."===t[1]?"http://"+t[0]:t[0]}return{type:"link",raw:t[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(e,n){const t=this.rules.inline.text.exec(e);if(t){let e;return e=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):c(t[0]):t[0]:c(this.options.smartypants?n(t[0]):t[0]),{type:"text",raw:t[0],text:e}}}}const F={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,hr:/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,html:"^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",def:/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,table:v,lheading:/^((?:.|\n(?!\n))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\.|[^\[\]\\])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};F.def=h(F.def).replace("label",F._label).replace("title",F._title).getRegex(),F.bullet=/(?:[*+-]|\d{1,9}[.)])/,F.listItemStart=h(/^( *)(bull) */).replace("bull",F.bullet).getRegex(),F.list=h(F.list).replace(/bull/g,F.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+F.def.source+")").getRegex(),F._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",F._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/,F.html=h(F.html,"i").replace("comment",F._comment).replace("tag",F._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),F.paragraph=h(F._paragraph).replace("hr",F.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",F._tag).getRegex(),F.blockquote=h(F.blockquote).replace("paragraph",F.paragraph).getRegex(),F.normal={...F},F.gfm={...F.normal,table:"^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"},F.gfm.table=h(F.gfm.table).replace("hr",F.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",F._tag).getRegex(),F.gfm.paragraph=h(F._paragraph).replace("hr",F.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("table",F.gfm.table).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",F._tag).getRegex(),F.pedantic={...F.normal,html:h("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",F._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:v,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:h(F.normal._paragraph).replace("hr",F.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",F.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()};const I={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:v,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(ref)\]/,nolink:/^!?\[(ref)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,rDelimAst:/^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/,rDelimUnd:/^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:v,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^([\spunctuation])/};function B(e){return e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function M(e){let n,t,r="";const o=e.length;for(n=0;n<o;n++)t=e.charCodeAt(n),Math.random()>.5&&(t="x"+t.toString(16)),r+="&#"+t+";";return r}I._punctuation="!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~",I.punctuation=h(I.punctuation).replace(/punctuation/g,I._punctuation).getRegex(),I.blockSkip=/\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g,I.escapedEmSt=/(?:^|[^\\])(?:\\\\)*\\[*_]/g,I._comment=h(F._comment).replace("(?:--\x3e|$)","--\x3e").getRegex(),I.emStrong.lDelim=h(I.emStrong.lDelim).replace(/punct/g,I._punctuation).getRegex(),I.emStrong.rDelimAst=h(I.emStrong.rDelimAst,"g").replace(/punct/g,I._punctuation).getRegex(),I.emStrong.rDelimUnd=h(I.emStrong.rDelimUnd,"g").replace(/punct/g,I._punctuation).getRegex(),I._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,I._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,I._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,I.autolink=h(I.autolink).replace("scheme",I._scheme).replace("email",I._email).getRegex(),I._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,I.tag=h(I.tag).replace("comment",I._comment).replace("attribute",I._attribute).getRegex(),I._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,I._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/,I._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,I.link=h(I.link).replace("label",I._label).replace("href",I._href).replace("title",I._title).getRegex(),I.reflink=h(I.reflink).replace("label",I._label).replace("ref",F._label).getRegex(),I.nolink=h(I.nolink).replace("ref",F._label).getRegex(),I.reflinkSearch=h(I.reflinkSearch,"g").replace("reflink",I.reflink).replace("nolink",I.nolink).getRegex(),I.normal={...I},I.pedantic={...I.normal,strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:h(/^!?\[(label)\]\((.*?)\)/).replace("label",I._label).getRegex(),reflink:h(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",I._label).getRegex()},I.gfm={...I.normal,escape:h(I.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},I.gfm.url=h(I.gfm.url,"i").replace("email",I.gfm._extended_email).getRegex(),I.breaks={...I.gfm,br:h(I.br).replace("{2,}","*").getRegex(),text:h(I.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()};class S{constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||r,this.options.tokenizer=this.options.tokenizer||new W,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const n={block:F.normal,inline:I.normal};this.options.pedantic?(n.block=F.pedantic,n.inline=I.pedantic):this.options.gfm&&(n.block=F.gfm,this.options.breaks?n.inline=I.breaks:n.inline=I.gfm),this.tokenizer.rules=n}static get rules(){return{block:F,inline:I}}static lex(e,n){return new S(n).lex(e)}static lexInline(e,n){return new S(n).inlineTokens(e)}lex(e){let n;for(e=e.replace(/\r\n|\r/g,"\n"),this.blockTokens(e,this.tokens);n=this.inlineQueue.shift();)this.inlineTokens(n.src,n.tokens);return this.tokens}blockTokens(e,n=[]){let t,r,o,i;for(e=this.options.pedantic?e.replace(/\t/g,"    ").replace(/^ +$/gm,""):e.replace(/^( *)(\t+)/gm,((e,n,t)=>n+"    ".repeat(t.length)));e;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((r=>!!(t=r.call({lexer:this},e,n))&&(e=e.substring(t.raw.length),n.push(t),!0)))))if(t=this.tokenizer.space(e))e=e.substring(t.raw.length),1===t.raw.length&&n.length>0?n[n.length-1].raw+="\n":n.push(t);else if(t=this.tokenizer.code(e))e=e.substring(t.raw.length),r=n[n.length-1],!r||"paragraph"!==r.type&&"text"!==r.type?n.push(t):(r.raw+="\n"+t.raw,r.text+="\n"+t.text,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(t=this.tokenizer.fences(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.heading(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.hr(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.blockquote(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.list(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.html(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.def(e))e=e.substring(t.raw.length),r=n[n.length-1],!r||"paragraph"!==r.type&&"text"!==r.type?this.tokens.links[t.tag]||(this.tokens.links[t.tag]={href:t.href,title:t.title}):(r.raw+="\n"+t.raw,r.text+="\n"+t.raw,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(t=this.tokenizer.table(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.lheading(e))e=e.substring(t.raw.length),n.push(t);else{if(o=e,this.options.extensions&&this.options.extensions.startBlock){let n=1/0;const t=e.slice(1);let r;this.options.extensions.startBlock.forEach((function(e){r=e.call({lexer:this},t),"number"==typeof r&&r>=0&&(n=Math.min(n,r))})),n<1/0&&n>=0&&(o=e.substring(0,n+1))}if(this.state.top&&(t=this.tokenizer.paragraph(o)))r=n[n.length-1],i&&"paragraph"===r.type?(r.raw+="\n"+t.raw,r.text+="\n"+t.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):n.push(t),i=o.length!==e.length,e=e.substring(t.raw.length);else if(t=this.tokenizer.text(e))e=e.substring(t.raw.length),r=n[n.length-1],r&&"text"===r.type?(r.raw+="\n"+t.raw,r.text+="\n"+t.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):n.push(t);else if(e){const n="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(n);break}throw new Error(n)}}return this.state.top=!0,n}inline(e,n=[]){return this.inlineQueue.push({src:e,tokens:n}),n}inlineTokens(e,n=[]){let t,r,o,i,a,s,l=e;if(this.tokens.links){const e=Object.keys(this.tokens.links);if(e.length>0)for(;null!=(i=this.tokenizer.rules.inline.reflinkSearch.exec(l));)e.includes(i[0].slice(i[0].lastIndexOf("[")+1,-1))&&(l=l.slice(0,i.index)+"["+E("a",i[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(i=this.tokenizer.rules.inline.blockSkip.exec(l));)l=l.slice(0,i.index)+"["+E("a",i[0].length-2)+"]"+l.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(i=this.tokenizer.rules.inline.escapedEmSt.exec(l));)l=l.slice(0,i.index+i[0].length-2)+"++"+l.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex),this.tokenizer.rules.inline.escapedEmSt.lastIndex--;for(;e;)if(a||(s=""),a=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((r=>!!(t=r.call({lexer:this},e,n))&&(e=e.substring(t.raw.length),n.push(t),!0)))))if(t=this.tokenizer.escape(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.tag(e))e=e.substring(t.raw.length),r=n[n.length-1],r&&"text"===t.type&&"text"===r.type?(r.raw+=t.raw,r.text+=t.text):n.push(t);else if(t=this.tokenizer.link(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.reflink(e,this.tokens.links))e=e.substring(t.raw.length),r=n[n.length-1],r&&"text"===t.type&&"text"===r.type?(r.raw+=t.raw,r.text+=t.text):n.push(t);else if(t=this.tokenizer.emStrong(e,l,s))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.codespan(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.br(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.del(e))e=e.substring(t.raw.length),n.push(t);else if(t=this.tokenizer.autolink(e,M))e=e.substring(t.raw.length),n.push(t);else if(this.state.inLink||!(t=this.tokenizer.url(e,M))){if(o=e,this.options.extensions&&this.options.extensions.startInline){let n=1/0;const t=e.slice(1);let r;this.options.extensions.startInline.forEach((function(e){r=e.call({lexer:this},t),"number"==typeof r&&r>=0&&(n=Math.min(n,r))})),n<1/0&&n>=0&&(o=e.substring(0,n+1))}if(t=this.tokenizer.inlineText(o,B))e=e.substring(t.raw.length),"_"!==t.raw.slice(-1)&&(s=t.raw.slice(-1)),a=!0,r=n[n.length-1],r&&"text"===r.type?(r.raw+=t.raw,r.text+=t.text):n.push(t);else if(e){const n="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(n);break}throw new Error(n)}}else e=e.substring(t.raw.length),n.push(t);return n}}class T{constructor(e){this.options=e||r}code(e,n,t){const r=(n||"").match(/\S*/)[0];if(this.options.highlight){const n=this.options.highlight(e,r);null!=n&&n!==e&&(t=!0,e=n)}return e=e.replace(/\n$/,"")+"\n",r?'<pre><code class="'+this.options.langPrefix+c(r)+'">'+(t?e:c(e,!0))+"</code></pre>\n":"<pre><code>"+(t?e:c(e,!0))+"</code></pre>\n"}blockquote(e){return`<blockquote>\n${e}</blockquote>\n`}html(e){return e}heading(e,n,t,r){return this.options.headerIds?`<h${n} id="${this.options.headerPrefix+r.slug(t)}">${e}</h${n}>\n`:`<h${n}>${e}</h${n}>\n`}hr(){return this.options.xhtml?"<hr/>\n":"<hr>\n"}list(e,n,t){const r=n?"ol":"ul";return"<"+r+(n&&1!==t?' start="'+t+'"':"")+">\n"+e+"</"+r+">\n"}listitem(e){return`<li>${e}</li>\n`}checkbox(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "}paragraph(e){return`<p>${e}</p>\n`}table(e,n){return n&&(n=`<tbody>${n}</tbody>`),"<table>\n<thead>\n"+e+"</thead>\n"+n+"</table>\n"}tablerow(e){return`<tr>\n${e}</tr>\n`}tablecell(e,n){const t=n.header?"th":"td";return(n.align?`<${t} align="${n.align}">`:`<${t}>`)+e+`</${t}>\n`}strong(e){return`<strong>${e}</strong>`}em(e){return`<em>${e}</em>`}codespan(e){return`<code>${e}</code>`}br(){return this.options.xhtml?"<br/>":"<br>"}del(e){return`<del>${e}</del>`}link(e,n,t){if(null===(e=f(this.options.sanitize,this.options.baseUrl,e)))return t;let r='<a href="'+e+'"';return n&&(r+=' title="'+n+'"'),r+=">"+t+"</a>",r}image(e,n,t){if(null===(e=f(this.options.sanitize,this.options.baseUrl,e)))return t;let r=`<img src="${e}" alt="${t}"`;return n&&(r+=` title="${n}"`),r+=this.options.xhtml?"/>":">",r}text(e){return e}}class Z{strong(e){return e}em(e){return e}codespan(e){return e}del(e){return e}html(e){return e}text(e){return e}link(e,n,t){return""+t}image(e,n,t){return""+t}br(){return""}}class J{constructor(){this.seen={}}serialize(e){return e.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")}getNextSafeSlug(e,n){let t=e,r=0;if(this.seen.hasOwnProperty(t)){r=this.seen[e];do{r++,t=e+"-"+r}while(this.seen.hasOwnProperty(t))}return n||(this.seen[e]=r,this.seen[t]=0),t}slug(e,n={}){const t=this.serialize(e);return this.getNextSafeSlug(t,n.dryrun)}}class R{constructor(e){this.options=e||r,this.options.renderer=this.options.renderer||new T,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new Z,this.slugger=new J}static parse(e,n){return new R(n).parse(e)}static parseInline(e,n){return new R(n).parseInline(e)}parse(e,n=!0){let t,r,o,i,a,s,l,d,c,A,u,h,m,g,f,b,y,k,x,v="";const z=e.length;for(t=0;t<z;t++)if(A=e[t],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[A.type]&&(x=this.options.extensions.renderers[A.type].call({parser:this},A),!1!==x||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(A.type)))v+=x||"";else switch(A.type){case"space":continue;case"hr":v+=this.renderer.hr();continue;case"heading":v+=this.renderer.heading(this.parseInline(A.tokens),A.depth,p(this.parseInline(A.tokens,this.textRenderer)),this.slugger);continue;case"code":v+=this.renderer.code(A.text,A.lang,A.escaped);continue;case"table":for(d="",l="",i=A.header.length,r=0;r<i;r++)l+=this.renderer.tablecell(this.parseInline(A.header[r].tokens),{header:!0,align:A.align[r]});for(d+=this.renderer.tablerow(l),c="",i=A.rows.length,r=0;r<i;r++){for(s=A.rows[r],l="",a=s.length,o=0;o<a;o++)l+=this.renderer.tablecell(this.parseInline(s[o].tokens),{header:!1,align:A.align[o]});c+=this.renderer.tablerow(l)}v+=this.renderer.table(d,c);continue;case"blockquote":c=this.parse(A.tokens),v+=this.renderer.blockquote(c);continue;case"list":for(u=A.ordered,h=A.start,m=A.loose,i=A.items.length,c="",r=0;r<i;r++)f=A.items[r],b=f.checked,y=f.task,g="",f.task&&(k=this.renderer.checkbox(b),m?f.tokens.length>0&&"paragraph"===f.tokens[0].type?(f.tokens[0].text=k+" "+f.tokens[0].text,f.tokens[0].tokens&&f.tokens[0].tokens.length>0&&"text"===f.tokens[0].tokens[0].type&&(f.tokens[0].tokens[0].text=k+" "+f.tokens[0].tokens[0].text)):f.tokens.unshift({type:"text",text:k}):g+=k),g+=this.parse(f.tokens,m),c+=this.renderer.listitem(g,y,b);v+=this.renderer.list(c,u,h);continue;case"html":v+=this.renderer.html(A.text);continue;case"paragraph":v+=this.renderer.paragraph(this.parseInline(A.tokens));continue;case"text":for(c=A.tokens?this.parseInline(A.tokens):A.text;t+1<z&&"text"===e[t+1].type;)A=e[++t],c+="\n"+(A.tokens?this.parseInline(A.tokens):A.text);v+=n?this.renderer.paragraph(c):c;continue;default:{const e='Token with "'+A.type+'" type was not found.';if(this.options.silent)return void console.error(e);throw new Error(e)}}return v}parseInline(e,n){n=n||this.renderer;let t,r,o,i="";const a=e.length;for(t=0;t<a;t++)if(r=e[t],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[r.type]&&(o=this.options.extensions.renderers[r.type].call({parser:this},r),!1!==o||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(r.type)))i+=o||"";else switch(r.type){case"escape":case"text":i+=n.text(r.text);break;case"html":i+=n.html(r.text);break;case"link":i+=n.link(r.href,r.title,this.parseInline(r.tokens,n));break;case"image":i+=n.image(r.href,r.title,r.text);break;case"strong":i+=n.strong(this.parseInline(r.tokens,n));break;case"em":i+=n.em(this.parseInline(r.tokens,n));break;case"codespan":i+=n.codespan(r.text);break;case"br":i+=n.br();break;case"del":i+=n.del(this.parseInline(r.tokens,n));break;default:{const e='Token with "'+r.type+'" type was not found.';if(this.options.silent)return void console.error(e);throw new Error(e)}}return i}}class D{constructor(e){this.options=e||r}static passThroughHooks=new Set(["preprocess","postprocess"]);preprocess(e){return e}postprocess(e){return e}}function $(e,n){return(t,r,o)=>{"function"==typeof r&&(o=r,r=null);const i={...r},a=function(e,n,t){return r=>{if(r.message+="\nPlease report this to https://github.com/markedjs/marked.",e){const e="<p>An error occurred:</p><pre>"+c(r.message+"",!0)+"</pre>";return n?Promise.resolve(e):t?void t(null,e):e}if(n)return Promise.reject(r);if(!t)throw r;t(r)}}((r={...L.defaults,...i}).silent,r.async,o);if(null==t)return a(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof t)return a(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(t)+", string expected"));if(function(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}(r),r.hooks&&(r.hooks.options=r),o){const i=r.highlight;let s;try{r.hooks&&(t=r.hooks.preprocess(t)),s=e(t,r)}catch(e){return a(e)}const l=function(e){let t;if(!e)try{r.walkTokens&&L.walkTokens(s,r.walkTokens),t=n(s,r),r.hooks&&(t=r.hooks.postprocess(t))}catch(n){e=n}return r.highlight=i,e?a(e):o(null,t)};if(!i||i.length<3)return l();if(delete r.highlight,!s.length)return l();let d=0;return L.walkTokens(s,(function(e){"code"===e.type&&(d++,setTimeout((()=>{i(e.text,e.lang,(function(n,t){if(n)return l(n);null!=t&&t!==e.text&&(e.text=t,e.escaped=!0),d--,0===d&&l()}))}),0))})),void(0===d&&l())}if(r.async)return Promise.resolve(r.hooks?r.hooks.preprocess(t):t).then((n=>e(n,r))).then((e=>r.walkTokens?Promise.all(L.walkTokens(e,r.walkTokens)).then((()=>e)):e)).then((e=>n(e,r))).then((e=>r.hooks?r.hooks.postprocess(e):e)).catch(a);try{r.hooks&&(t=r.hooks.preprocess(t));const o=e(t,r);r.walkTokens&&L.walkTokens(o,r.walkTokens);let i=n(o,r);return r.hooks&&(i=r.hooks.postprocess(i)),i}catch(e){return a(e)}}}function L(e,n,t){return $(S.lex,R.parse)(e,n,t)}L.options=L.setOptions=function(e){var n;return L.defaults={...L.defaults,...e},n=L.defaults,r=n,L},L.getDefaults=function(){return{async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,hooks:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}},L.defaults=r,L.use=function(...e){const n=L.defaults.extensions||{renderers:{},childTokens:{}};e.forEach((e=>{const t={...e};if(t.async=L.defaults.async||t.async||!1,e.extensions&&(e.extensions.forEach((e=>{if(!e.name)throw new Error("extension name required");if(e.renderer){const t=n.renderers[e.name];n.renderers[e.name]=t?function(...n){let r=e.renderer.apply(this,n);return!1===r&&(r=t.apply(this,n)),r}:e.renderer}if(e.tokenizer){if(!e.level||"block"!==e.level&&"inline"!==e.level)throw new Error("extension level must be 'block' or 'inline'");n[e.level]?n[e.level].unshift(e.tokenizer):n[e.level]=[e.tokenizer],e.start&&("block"===e.level?n.startBlock?n.startBlock.push(e.start):n.startBlock=[e.start]:"inline"===e.level&&(n.startInline?n.startInline.push(e.start):n.startInline=[e.start]))}e.childTokens&&(n.childTokens[e.name]=e.childTokens)})),t.extensions=n),e.renderer){const n=L.defaults.renderer||new T;for(const t in e.renderer){const r=n[t];n[t]=(...o)=>{let i=e.renderer[t].apply(n,o);return!1===i&&(i=r.apply(n,o)),i}}t.renderer=n}if(e.tokenizer){const n=L.defaults.tokenizer||new W;for(const t in e.tokenizer){const r=n[t];n[t]=(...o)=>{let i=e.tokenizer[t].apply(n,o);return!1===i&&(i=r.apply(n,o)),i}}t.tokenizer=n}if(e.hooks){const n=L.defaults.hooks||new D;for(const t in e.hooks){const r=n[t];D.passThroughHooks.has(t)?n[t]=o=>{if(L.defaults.async)return Promise.resolve(e.hooks[t].call(n,o)).then((e=>r.call(n,e)));const i=e.hooks[t].call(n,o);return r.call(n,i)}:n[t]=(...o)=>{let i=e.hooks[t].apply(n,o);return!1===i&&(i=r.apply(n,o)),i}}t.hooks=n}if(e.walkTokens){const n=L.defaults.walkTokens;t.walkTokens=function(t){let r=[];return r.push(e.walkTokens.call(this,t)),n&&(r=r.concat(n.call(this,t))),r}}L.setOptions(t)}))},L.walkTokens=function(e,n){let t=[];for(const r of e)switch(t=t.concat(n.call(L,r)),r.type){case"table":for(const e of r.header)t=t.concat(L.walkTokens(e.tokens,n));for(const e of r.rows)for(const r of e)t=t.concat(L.walkTokens(r.tokens,n));break;case"list":t=t.concat(L.walkTokens(r.items,n));break;default:L.defaults.extensions&&L.defaults.extensions.childTokens&&L.defaults.extensions.childTokens[r.type]?L.defaults.extensions.childTokens[r.type].forEach((function(e){t=t.concat(L.walkTokens(r[e],n))})):r.tokens&&(t=t.concat(L.walkTokens(r.tokens,n)))}return t},L.parseInline=$(S.lexInline,R.parseInline),L.Parser=R,L.parser=R.parse,L.Renderer=T,L.TextRenderer=Z,L.Lexer=S,L.lexer=S.lex,L.Tokenizer=W,L.Slugger=J,L.Hooks=D,L.parse=L,L.options,L.setOptions,L.use,L.walkTokens,L.parseInline,R.parse,S.lex}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,