"use strict";(()=>{(self.webpackChunkfrontend_util=self.webpackChunkfrontend_util||[]).push([[559],{7925:(co,x,e)=>{var A,s=e(5303);A={value:!0},x.A=void 0;var i=s(e(5211)),V=e(7343),D=x.A=(0,i.default)((0,V.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z"}),"Add")},2141:(co,x,e)=>{var A,s=e(5303);A={value:!0},x.A=void 0;var i=s(e(5211)),V=e(7343),D=x.A=(0,i.default)((0,V.jsx)("path",{d:"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3m3-10H5V5h10z"}),"Save")},8020:(co,x,e)=>{e.d(x,{A:()=>Ao});var A=e(1772),s=e(8733),i=e(4999),V=e(4164),D=e(2458),q=e(4747),uo=e(7437),po=e(4076),I=e(7343);const _=(0,po.A)((0,I.jsx)("path",{d:"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"}),"Add");var oo=e(3932),fo=e(8748);function J(c){return(0,fo.Ay)("MuiSpeedDialIcon",c)}const u=(0,oo.A)("MuiSpeedDialIcon",["root","icon","iconOpen","iconWithOpenIconOpen","openIcon","openIconOpen"]),mo=["className","icon","open","openIcon"],ho=c=>{const{classes:d,open:p,openIcon:T}=c,eo={root:["root"],icon:["icon",p&&"iconOpen",T&&p&&"iconWithOpenIconOpen"],openIcon:["openIcon",p&&"openIconOpen"]};return(0,D.A)(eo,J,d)},Ro=(0,q.Ay)("span",{name:"MuiSpeedDialIcon",slot:"Root",overridesResolver:(c,d)=>{const{ownerState:p}=c;return[{[`& .${u.icon}`]:d.icon},{[`& .${u.icon}`]:p.open&&d.iconOpen},{[`& .${u.icon}`]:p.open&&p.openIcon&&d.iconWithOpenIconOpen},{[`& .${u.openIcon}`]:d.openIcon},{[`& .${u.openIcon}`]:p.open&&d.openIconOpen},d.root]}})(({theme:c,ownerState:d})=>({height:24,[`& .${u.icon}`]:(0,s.A)({transition:c.transitions.create(["transform","opacity"],{duration:c.transitions.duration.short})},d.open&&(0,s.A)({transform:"rotate(45deg)"},d.openIcon&&{opacity:0})),[`& .${u.openIcon}`]:(0,s.A)({position:"absolute",transition:c.transitions.create(["transform","opacity"],{duration:c.transitions.duration.short}),opacity:0,transform:"rotate(-45deg)"},d.open&&{transform:"rotate(0deg)",opacity:1})})),no=i.forwardRef(function(d,p){const T=(0,uo.A)({props:d,name:"MuiSpeedDialIcon"}),{className:eo,icon:Q,openIcon:to}=T,go=(0,A.A)(T,mo),so=T,U=ho(so);function xo(X,Do){return i.isValidElement(X)?i.cloneElement(X,{className:Do}):X}return(0,I.jsxs)(Ro,(0,s.A)({className:(0,V.A)(U.root,eo),ref:p,ownerState:so},go,{children:[to?xo(to,U.openIcon):null,Q?xo(Q,U.icon):(0,I.jsx)(_,{className:U.icon})]}))});no.muiName="SpeedDialIcon";const Ao=no},900:(co,x,e)=>{e.d(x,{A:()=>Uo});var A=e(1772),s=e(8733),i=e(4999),V=e(6225),D=e(4164),q=e(2458),uo=e(5515),po=e(700),I=e(4747),_=e(7437),oo=e(2756),fo=e(5954),J=e(9785),vo=e(6597),u=e(7343);const mo=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],ho={entering:{transform:"none"},entered:{transform:"none"}},no=i.forwardRef(function(n,l){const a=(0,oo.A)(),g={enter:a.transitions.duration.enteringScreen,exit:a.transitions.duration.leavingScreen},{addEndListener:E,appear:R=!0,children:S,easing:O,in:N,onEnter:F,onEntered:k,onEntering:M,onExit:j,onExited:f,onExiting:P,style:B,timeout:W=g,TransitionComponent:ro=fo.Ay}=n,H=(0,A.A)(n,mo),K=i.useRef(null),Co=(0,vo.A)(K,S.ref,l),z=r=>v=>{if(r){const C=K.current;v===void 0?r(C):r(C,v)}},yo=z(M),Z=z((r,v)=>{(0,J.q)(r);const C=(0,J.c)({style:B,timeout:W,easing:O},{mode:"enter"});r.style.webkitTransition=a.transitions.create("transform",C),r.style.transition=a.transitions.create("transform",C),F&&F(r,v)}),Io=z(k),h=z(P),$=z(r=>{const v=(0,J.c)({style:B,timeout:W,easing:O},{mode:"exit"});r.style.webkitTransition=a.transitions.create("transform",v),r.style.transition=a.transitions.create("transform",v),j&&j(r)}),w=z(f),G=r=>{E&&E(K.current,r)};return(0,u.jsx)(ro,(0,s.A)({appear:R,in:N,nodeRef:K,onEnter:Z,onEntered:Io,onEntering:yo,onExit:$,onExited:w,onExiting:h,addEndListener:G,timeout:W},H,{children:(r,v)=>i.cloneElement(S,(0,s.A)({style:(0,s.A)({transform:"scale(0)",visibility:r==="exited"&&!N?"hidden":void 0},ho[r],B,S.props.style),ref:Co},v))}))});var Ao=e(2533),c=e(6039),d=e(3932),p=e(8748);function T(o){return(0,p.Ay)("MuiFab",o)}const Q=(0,d.A)("MuiFab",["root","primary","secondary","extended","circular","focusVisible","disabled","colorInherit","sizeSmall","sizeMedium","sizeLarge","info","error","warning","success"]);var to=e(3487);const go=["children","className","color","component","disabled","disableFocusRipple","focusVisibleClassName","size","variant"],so=o=>{const{color:n,variant:l,classes:a,size:g}=o,E={root:["root",l,`size${(0,c.A)(g)}`,n==="inherit"?"colorInherit":n]},R=(0,q.A)(E,T,a);return(0,s.A)({},a,R)},U=(0,I.Ay)(Ao.A,{name:"MuiFab",slot:"Root",shouldForwardProp:o=>(0,to.A)(o)||o==="classes",overridesResolver:(o,n)=>{const{ownerState:l}=o;return[n.root,n[l.variant],n[`size${(0,c.A)(l.size)}`],l.color==="inherit"&&n.colorInherit,n[(0,c.A)(l.size)],n[l.color]]}})(({theme:o,ownerState:n})=>{var l,a;return(0,s.A)({},o.typography.button,{minHeight:36,transition:o.transitions.create(["background-color","box-shadow","border-color"],{duration:o.transitions.duration.short}),borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,zIndex:(o.vars||o).zIndex.fab,boxShadow:(o.vars||o).shadows[6],"&:active":{boxShadow:(o.vars||o).shadows[12]},color:o.vars?o.vars.palette.text.primary:(l=(a=o.palette).getContrastText)==null?void 0:l.call(a,o.palette.grey[300]),backgroundColor:(o.vars||o).palette.grey[300],"&:hover":{backgroundColor:(o.vars||o).palette.grey.A100,"@media (hover: none)":{backgroundColor:(o.vars||o).palette.grey[300]},textDecoration:"none"},[`&.${Q.focusVisible}`]:{boxShadow:(o.vars||o).shadows[6]}},n.size==="small"&&{width:40,height:40},n.size==="medium"&&{width:48,height:48},n.variant==="extended"&&{borderRadius:48/2,padding:"0 16px",width:"auto",minHeight:"auto",minWidth:48,height:48},n.variant==="extended"&&n.size==="small"&&{width:"auto",padding:"0 8px",borderRadius:34/2,minWidth:34,height:34},n.variant==="extended"&&n.size==="medium"&&{width:"auto",padding:"0 16px",borderRadius:40/2,minWidth:40,height:40},n.color==="inherit"&&{color:"inherit"})},({theme:o,ownerState:n})=>(0,s.A)({},n.color!=="inherit"&&n.color!=="default"&&(o.vars||o).palette[n.color]!=null&&{color:(o.vars||o).palette[n.color].contrastText,backgroundColor:(o.vars||o).palette[n.color].main,"&:hover":{backgroundColor:(o.vars||o).palette[n.color].dark,"@media (hover: none)":{backgroundColor:(o.vars||o).palette[n.color].main}}}),({theme:o})=>({[`&.${Q.disabled}`]:{color:(o.vars||o).palette.action.disabled,boxShadow:(o.vars||o).shadows[0],backgroundColor:(o.vars||o).palette.action.disabledBackground}})),X=i.forwardRef(function(n,l){const a=(0,_.A)({props:n,name:"MuiFab"}),{children:g,className:E,color:R="default",component:S="button",disabled:O=!1,disableFocusRipple:N=!1,focusVisibleClassName:F,size:k="large",variant:M="circular"}=a,j=(0,A.A)(a,go),f=(0,s.A)({},a,{color:R,component:S,disabled:O,disableFocusRipple:N,size:k,variant:M}),P=so(f);return(0,u.jsx)(U,(0,s.A)({className:(0,D.A)(P.root,E),component:S,disabled:O,focusRipple:!N,focusVisibleClassName:(0,D.A)(P.focusVisible,F),ownerState:f,ref:l},j,{classes:P,children:g}))});var Do=e(5525),Po=e(1677);function zo(o){return(0,p.Ay)("MuiSpeedDial",o)}const io=(0,d.A)("MuiSpeedDial",["root","fab","directionUp","directionDown","directionLeft","directionRight","actions","actionsClosed"]),$o=["ref"],To=["ariaLabel","FabProps","children","className","direction","hidden","icon","onBlur","onClose","onFocus","onKeyDown","onMouseEnter","onMouseLeave","onOpen","open","openIcon","TransitionComponent","transitionDuration","TransitionProps"],Oo=["ref"],No=o=>{const{classes:n,open:l,direction:a}=o,g={root:["root",`direction${(0,c.A)(a)}`],fab:["fab"],actions:["actions",!l&&"actionsClosed"]};return(0,q.A)(g,zo,n)};function Y(o){if(o==="up"||o==="down")return"vertical";if(o==="right"||o==="left")return"horizontal"}const b=32,ao=16,jo=(0,I.Ay)("div",{name:"MuiSpeedDial",slot:"Root",overridesResolver:(o,n)=>{const{ownerState:l}=o;return[n.root,n[`direction${(0,c.A)(l.direction)}`]]}})(({theme:o,ownerState:n})=>(0,s.A)({zIndex:(o.vars||o).zIndex.speedDial,display:"flex",alignItems:"center",pointerEvents:"none"},n.direction==="up"&&{flexDirection:"column-reverse",[`& .${io.actions}`]:{flexDirection:"column-reverse",marginBottom:-b,paddingBottom:ao+b}},n.direction==="down"&&{flexDirection:"column",[`& .${io.actions}`]:{flexDirection:"column",marginTop:-b,paddingTop:ao+b}},n.direction==="left"&&{flexDirection:"row-reverse",[`& .${io.actions}`]:{flexDirection:"row-reverse",marginRight:-b,paddingRight:ao+b}},n.direction==="right"&&{flexDirection:"row",[`& .${io.actions}`]:{flexDirection:"row",marginLeft:-b,paddingLeft:ao+b}})),Lo=(0,I.Ay)(X,{name:"MuiSpeedDial",slot:"Fab",overridesResolver:(o,n)=>n.fab})(()=>({pointerEvents:"auto"})),Vo=(0,I.Ay)("div",{name:"MuiSpeedDial",slot:"Actions",overridesResolver:(o,n)=>{const{ownerState:l}=o;return[n.actions,!l.open&&n.actionsClosed]}})(({ownerState:o})=>(0,s.A)({display:"flex",pointerEvents:"auto"},!o.open&&{transition:"top 0s linear 0.2s",pointerEvents:"none"})),Uo=i.forwardRef(function(n,l){const a=(0,_.A)({props:n,name:"MuiSpeedDial"}),g=(0,oo.A)(),E={enter:g.transitions.duration.enteringScreen,exit:g.transitions.duration.leavingScreen},{ariaLabel:R,FabProps:{ref:S}={},children:O,className:N,direction:F="up",hidden:k=!1,icon:M,onBlur:j,onClose:f,onFocus:P,onKeyDown:B,onMouseEnter:W,onMouseLeave:ro,onOpen:H,open:K,TransitionComponent:Co=no,transitionDuration:z=E,TransitionProps:yo}=a,Z=(0,A.A)(a.FabProps,$o),Io=(0,A.A)(a,To),[h,$]=(0,Po.A)({controlled:K,default:!1,name:"SpeedDial",state:"open"}),w=(0,s.A)({},a,{open:h,direction:F}),G=No(w),r=(0,uo.A)(),v=i.useRef(0),C=i.useRef(),L=i.useRef([]);L.current=[L.current[0]];const Bo=i.useCallback(t=>{L.current[0]=t},[]),Wo=(0,vo.A)(S,Bo),Ho=(t,m)=>y=>{L.current[t+1]=y,m&&m(y)},Ko=t=>{B&&B(t);const m=t.key.replace("Arrow","").toLowerCase(),{current:y=m}=C;if(t.key==="Escape"){$(!1),L.current[0].focus(),f&&f(t,"escapeKeyDown");return}if(Y(m)===Y(y)&&Y(m)!==void 0){t.preventDefault();const Eo=m===y?1:-1,lo=(0,po.A)(v.current+Eo,0,L.current.length-1);L.current[lo].focus(),v.current=lo,C.current=y}};i.useEffect(()=>{h||(v.current=0,C.current=void 0)},[h]);const So=t=>{t.type==="mouseleave"&&ro&&ro(t),t.type==="blur"&&j&&j(t),r.clear(),t.type==="blur"?r.start(0,()=>{$(!1),f&&f(t,"blur")}):($(!1),f&&f(t,"mouseLeave"))},Zo=t=>{Z.onClick&&Z.onClick(t),r.clear(),h?($(!1),f&&f(t,"toggle")):($(!0),H&&H(t,"toggle"))},Fo=t=>{t.type==="mouseenter"&&W&&W(t),t.type==="focus"&&P&&P(t),r.clear(),h||r.start(0,()=>{$(!0),H&&H(t,{focus:"focus",mouseenter:"mouseEnter"}[t.type])})},bo=R.replace(/^[^a-z]+|[^\w:.-]+/gi,""),Mo=i.Children.toArray(O).filter(t=>i.isValidElement(t)),wo=Mo.map((t,m)=>{const y=t.props,{FabProps:{ref:Eo}={},tooltipPlacement:lo}=y,Go=(0,A.A)(y.FabProps,Oo),Jo=lo||(Y(F)==="vertical"?"left":"top");return i.cloneElement(t,{FabProps:(0,s.A)({},Go,{ref:Ho(m,Eo)}),delay:30*(h?m:Mo.length-m),open:h,tooltipPlacement:Jo,id:`${bo}-action-${m}`})});return(0,u.jsxs)(jo,(0,s.A)({className:(0,D.A)(G.root,N),ref:l,role:"presentation",onKeyDown:Ko,onBlur:So,onFocus:Fo,onMouseEnter:Fo,onMouseLeave:So,ownerState:w},Io,{children:[(0,u.jsx)(Co,(0,s.A)({in:!k,timeout:z,unmountOnExit:!0},yo,{children:(0,u.jsx)(Lo,(0,s.A)({color:"primary","aria-label":R,"aria-haspopup":"true","aria-expanded":h,"aria-controls":`${bo}-actions`},Z,{onClick:Zo,className:(0,D.A)(G.fab,Z.className),ref:Wo,ownerState:w,children:i.isValidElement(M)&&(0,Do.A)(M,["SpeedDialIcon"])?i.cloneElement(M,{open:h}):M}))})),(0,u.jsx)(Vo,{id:`${bo}-actions`,role:"menu","aria-orientation":Y(F),className:(0,D.A)(G.actions,!h&&G.actionsClosed),ownerState:w,children:wo})]}))})}}]);})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,